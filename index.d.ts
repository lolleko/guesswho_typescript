interface table {
[key: string]: any;
}

type thread = any;
type pixelvis_handle_t = any;
type sensor = any;
//type Vec = number;
//type Ang = number;
type userdata = any;
declare var SERVER: boolean;
declare var CLIENT: boolean;
declare var GM: Gamemode;
declare var GAMEMODE: Gamemode;
/**
 * Enumerations used by {{ClassFunction|Entity|SetUseType}}. Affects when {{HookFunction|ENTITY|Use}} is triggered.
 * 
 * Not to be confused with {{Enum|USE}} used for {{HookFunction|ENTITY|Use}} and others. 
 * !CompileMembersOnly
 */
declare enum _USE {
    /**
     * Fire a [[Enums/USE|USE_ON]] signal every tick as long as the player holds their use key and aims at the target. 
     */
    CONTINUOUS_USE = 0,
    
    /**
     * Fires a [[Enums/USE|USE_ON]] signal when starting to use an entity, and a [[Enums/USE|USE_OFF]] signal when letting go.
     * 
     * {{Warning|
     * There is no guarantee to receive both ON and OFF signals. A signal will only be sent when pushing or letting go of the use key while actually aiming at the entity, so an ON signal might not be followed by an OFF signal if the player is aiming somewhere else when releasing the key, and similarly, an OFF signal may not be preceded by an ON signal if the player started aiming at the entity only after pressing the key.
     * 
     * Therefore, this method of input is unreliable and should not be used.}} 
     */
    ONOFF_USE = 1,
    
    /**
     * Like a wheel turning. <!-- couldn't get this to do anything, how does it work? --> 
     */
    DIRECTIONAL_USE = 2,
    
    /**
     * Fire a [[Enums/USE|USE_ON]] signal only once when player presses their use key while aiming at the target. 
     */
    SIMPLE_USE = 3,
}

/**
 * Enumerations used by functions like {{ClassFunction|Weapon|SendWeaponAnim}} & {{ClassFunction|Entity|SelectWeightedSequence}}.
 * 
 * **Bug [#3075](https://github.com/Facepunch/garrysmod-issues/issues/3075):**
 * >Category=No 
 * !CompileMembersOnly
 */
declare enum ACT {
    /**
     */
    ACT_INVALID = -1,
    
    /**
     */
    ACT_RESET = 0,
    
    /**
     */
    ACT_IDLE = 1,
    
    /**
     */
    ACT_TRANSITION = 2,
    
    /**
     */
    ACT_COVER = 3,
    
    /**
     */
    ACT_COVER_MED = 4,
    
    /**
     */
    ACT_COVER_LOW = 5,
    
    /**
     */
    ACT_WALK = 6,
    
    /**
     */
    ACT_WALK_AIM = 7,
    
    /**
     */
    ACT_WALK_CROUCH = 8,
    
    /**
     */
    ACT_WALK_CROUCH_AIM = 9,
    
    /**
     */
    ACT_RUN = 10,
    
    /**
     */
    ACT_RUN_AIM = 11,
    
    /**
     */
    ACT_RUN_CROUCH = 12,
    
    /**
     */
    ACT_RUN_CROUCH_AIM = 13,
    
    /**
     */
    ACT_RUN_PROTECTED = 14,
    
    /**
     */
    ACT_SCRIPT_CUSTOM_MOVE = 15,
    
    /**
     */
    ACT_RANGE_ATTACK1 = 16,
    
    /**
     */
    ACT_RANGE_ATTACK2 = 17,
    
    /**
     */
    ACT_RANGE_ATTACK1_LOW = 18,
    
    /**
     */
    ACT_RANGE_ATTACK2_LOW = 19,
    
    /**
     */
    ACT_DIESIMPLE = 20,
    
    /**
     */
    ACT_DIEBACKWARD = 21,
    
    /**
     */
    ACT_DIEFORWARD = 22,
    
    /**
     */
    ACT_DIEVIOLENT = 23,
    
    /**
     */
    ACT_DIERAGDOLL = 24,
    
    /**
     */
    ACT_FLY = 25,
    
    /**
     */
    ACT_HOVER = 26,
    
    /**
     */
    ACT_GLIDE = 27,
    
    /**
     */
    ACT_SWIM = 28,
    
    /**
     */
    ACT_SWIM_IDLE = 29,
    
    /**
     */
    ACT_JUMP = 30,
    
    /**
     */
    ACT_HOP = 31,
    
    /**
     */
    ACT_LEAP = 32,
    
    /**
     */
    ACT_LAND = 33,
    
    /**
     */
    ACT_CLIMB_UP = 34,
    
    /**
     */
    ACT_CLIMB_DOWN = 35,
    
    /**
     */
    ACT_CLIMB_DISMOUNT = 36,
    
    /**
     */
    ACT_SHIPLADDER_UP = 37,
    
    /**
     */
    ACT_SHIPLADDER_DOWN = 38,
    
    /**
     */
    ACT_STRAFE_LEFT = 39,
    
    /**
     */
    ACT_STRAFE_RIGHT = 40,
    
    /**
     */
    ACT_ROLL_LEFT = 41,
    
    /**
     */
    ACT_ROLL_RIGHT = 42,
    
    /**
     */
    ACT_TURN_LEFT = 43,
    
    /**
     */
    ACT_TURN_RIGHT = 44,
    
    /**
     */
    ACT_CROUCH = 45,
    
    /**
     */
    ACT_CROUCHIDLE = 46,
    
    /**
     */
    ACT_STAND = 47,
    
    /**
     */
    ACT_USE = 48,
    
    /**
     */
    ACT_SIGNAL1 = 49,
    
    /**
     */
    ACT_SIGNAL2 = 50,
    
    /**
     */
    ACT_SIGNAL3 = 51,
    
    /**
     */
    ACT_SIGNAL_ADVANCE = 52,
    
    /**
     */
    ACT_SIGNAL_FORWARD = 53,
    
    /**
     */
    ACT_SIGNAL_GROUP = 54,
    
    /**
     */
    ACT_SIGNAL_HALT = 55,
    
    /**
     */
    ACT_SIGNAL_LEFT = 56,
    
    /**
     */
    ACT_SIGNAL_RIGHT = 57,
    
    /**
     */
    ACT_SIGNAL_TAKECOVER = 58,
    
    /**
     */
    ACT_LOOKBACK_RIGHT = 59,
    
    /**
     */
    ACT_LOOKBACK_LEFT = 60,
    
    /**
     */
    ACT_COWER = 61,
    
    /**
     */
    ACT_SMALL_FLINCH = 62,
    
    /**
     */
    ACT_BIG_FLINCH = 63,
    
    /**
     */
    ACT_MELEE_ATTACK1 = 64,
    
    /**
     */
    ACT_MELEE_ATTACK2 = 65,
    
    /**
     */
    ACT_RELOAD = 66,
    
    /**
     */
    ACT_RELOAD_START = 67,
    
    /**
     */
    ACT_RELOAD_FINISH = 68,
    
    /**
     */
    ACT_RELOAD_LOW = 69,
    
    /**
     */
    ACT_ARM = 70,
    
    /**
     */
    ACT_DISARM = 71,
    
    /**
     */
    ACT_DROP_WEAPON = 72,
    
    /**
     */
    ACT_DROP_WEAPON_SHOTGUN = 73,
    
    /**
     */
    ACT_PICKUP_GROUND = 74,
    
    /**
     */
    ACT_PICKUP_RACK = 75,
    
    /**
     */
    ACT_IDLE_ANGRY = 76,
    
    /**
     */
    ACT_IDLE_RELAXED = 77,
    
    /**
     */
    ACT_IDLE_STIMULATED = 78,
    
    /**
     */
    ACT_IDLE_AGITATED = 79,
    
    /**
     */
    ACT_IDLE_STEALTH = 80,
    
    /**
     */
    ACT_IDLE_HURT = 81,
    
    /**
     */
    ACT_WALK_RELAXED = 82,
    
    /**
     */
    ACT_WALK_STIMULATED = 83,
    
    /**
     */
    ACT_WALK_AGITATED = 84,
    
    /**
     */
    ACT_WALK_STEALTH = 85,
    
    /**
     */
    ACT_RUN_RELAXED = 86,
    
    /**
     */
    ACT_RUN_STIMULATED = 87,
    
    /**
     */
    ACT_RUN_AGITATED = 88,
    
    /**
     */
    ACT_RUN_STEALTH = 89,
    
    /**
     */
    ACT_IDLE_AIM_RELAXED = 90,
    
    /**
     */
    ACT_IDLE_AIM_STIMULATED = 91,
    
    /**
     */
    ACT_IDLE_AIM_AGITATED = 92,
    
    /**
     */
    ACT_IDLE_AIM_STEALTH = 93,
    
    /**
     */
    ACT_WALK_AIM_RELAXED = 94,
    
    /**
     */
    ACT_WALK_AIM_STIMULATED = 95,
    
    /**
     */
    ACT_WALK_AIM_AGITATED = 96,
    
    /**
     */
    ACT_WALK_AIM_STEALTH = 97,
    
    /**
     */
    ACT_RUN_AIM_RELAXED = 98,
    
    /**
     */
    ACT_RUN_AIM_STIMULATED = 99,
    
    /**
     */
    ACT_RUN_AIM_AGITATED = 100,
    
    /**
     */
    ACT_RUN_AIM_STEALTH = 101,
    
    /**
     */
    ACT_CROUCHIDLE_STIMULATED = 102,
    
    /**
     */
    ACT_CROUCHIDLE_AIM_STIMULATED = 103,
    
    /**
     */
    ACT_CROUCHIDLE_AGITATED = 104,
    
    /**
     */
    ACT_WALK_HURT = 105,
    
    /**
     */
    ACT_RUN_HURT = 106,
    
    /**
     */
    ACT_SPECIAL_ATTACK1 = 107,
    
    /**
     */
    ACT_SPECIAL_ATTACK2 = 108,
    
    /**
     */
    ACT_COMBAT_IDLE = 109,
    
    /**
     */
    ACT_WALK_SCARED = 110,
    
    /**
     */
    ACT_RUN_SCARED = 111,
    
    /**
     */
    ACT_VICTORY_DANCE = 112,
    
    /**
     */
    ACT_DIE_HEADSHOT = 113,
    
    /**
     */
    ACT_DIE_CHESTSHOT = 114,
    
    /**
     */
    ACT_DIE_GUTSHOT = 115,
    
    /**
     */
    ACT_DIE_BACKSHOT = 116,
    
    /**
     */
    ACT_FLINCH_HEAD = 117,
    
    /**
     */
    ACT_FLINCH_CHEST = 118,
    
    /**
     */
    ACT_FLINCH_STOMACH = 119,
    
    /**
     */
    ACT_FLINCH_LEFTARM = 120,
    
    /**
     */
    ACT_FLINCH_RIGHTARM = 121,
    
    /**
     */
    ACT_FLINCH_LEFTLEG = 122,
    
    /**
     */
    ACT_FLINCH_RIGHTLEG = 123,
    
    /**
     */
    ACT_FLINCH_PHYSICS = 124,
    
    /**
     */
    ACT_IDLE_ON_FIRE = 125,
    
    /**
     */
    ACT_WALK_ON_FIRE = 126,
    
    /**
     */
    ACT_RUN_ON_FIRE = 127,
    
    /**
     */
    ACT_RAPPEL_LOOP = 128,
    
    /**
     */
    ACT_180_LEFT = 129,
    
    /**
     */
    ACT_180_RIGHT = 130,
    
    /**
     */
    ACT_90_LEFT = 131,
    
    /**
     */
    ACT_90_RIGHT = 132,
    
    /**
     */
    ACT_STEP_LEFT = 133,
    
    /**
     */
    ACT_STEP_RIGHT = 134,
    
    /**
     */
    ACT_STEP_BACK = 135,
    
    /**
     */
    ACT_STEP_FORE = 136,
    
    /**
     */
    ACT_GESTURE_RANGE_ATTACK1 = 137,
    
    /**
     */
    ACT_GESTURE_RANGE_ATTACK2 = 138,
    
    /**
     */
    ACT_GESTURE_MELEE_ATTACK1 = 139,
    
    /**
     */
    ACT_GESTURE_MELEE_ATTACK2 = 140,
    
    /**
     */
    ACT_GESTURE_RANGE_ATTACK1_LOW = 141,
    
    /**
     */
    ACT_GESTURE_RANGE_ATTACK2_LOW = 142,
    
    /**
     */
    ACT_MELEE_ATTACK_SWING_GESTURE = 143,
    
    /**
     */
    ACT_GESTURE_SMALL_FLINCH = 144,
    
    /**
     */
    ACT_GESTURE_BIG_FLINCH = 145,
    
    /**
     */
    ACT_GESTURE_FLINCH_BLAST = 146,
    
    /**
     */
    ACT_GESTURE_FLINCH_BLAST_SHOTGUN = 147,
    
    /**
     */
    ACT_GESTURE_FLINCH_BLAST_DAMAGED = 148,
    
    /**
     */
    ACT_GESTURE_FLINCH_BLAST_DAMAGED_SHOTGUN = 149,
    
    /**
     */
    ACT_GESTURE_FLINCH_HEAD = 150,
    
    /**
     */
    ACT_GESTURE_FLINCH_CHEST = 151,
    
    /**
     */
    ACT_GESTURE_FLINCH_STOMACH = 152,
    
    /**
     */
    ACT_GESTURE_FLINCH_LEFTARM = 153,
    
    /**
     */
    ACT_GESTURE_FLINCH_RIGHTARM = 154,
    
    /**
     */
    ACT_GESTURE_FLINCH_LEFTLEG = 155,
    
    /**
     */
    ACT_GESTURE_FLINCH_RIGHTLEG = 156,
    
    /**
     */
    ACT_GESTURE_TURN_LEFT = 157,
    
    /**
     */
    ACT_GESTURE_TURN_RIGHT = 158,
    
    /**
     */
    ACT_GESTURE_TURN_LEFT45 = 159,
    
    /**
     */
    ACT_GESTURE_TURN_RIGHT45 = 160,
    
    /**
     */
    ACT_GESTURE_TURN_LEFT90 = 161,
    
    /**
     */
    ACT_GESTURE_TURN_RIGHT90 = 162,
    
    /**
     */
    ACT_GESTURE_TURN_LEFT45_FLAT = 163,
    
    /**
     */
    ACT_GESTURE_TURN_RIGHT45_FLAT = 164,
    
    /**
     */
    ACT_GESTURE_TURN_LEFT90_FLAT = 165,
    
    /**
     */
    ACT_GESTURE_TURN_RIGHT90_FLAT = 166,
    
    /**
     */
    ACT_BARNACLE_HIT = 167,
    
    /**
     */
    ACT_BARNACLE_PULL = 168,
    
    /**
     */
    ACT_BARNACLE_CHOMP = 169,
    
    /**
     */
    ACT_BARNACLE_CHEW = 170,
    
    /**
     */
    ACT_DO_NOT_DISTURB = 171,
    
    /**
     */
    ACT_VM_DRAW = 172,
    
    /**
     */
    ACT_VM_HOLSTER = 173,
    
    /**
     */
    ACT_VM_IDLE = 174,
    
    /**
     */
    ACT_VM_FIDGET = 175,
    
    /**
     */
    ACT_VM_PULLBACK = 176,
    
    /**
     */
    ACT_VM_PULLBACK_HIGH = 177,
    
    /**
     */
    ACT_VM_PULLBACK_LOW = 178,
    
    /**
     */
    ACT_VM_THROW = 179,
    
    /**
     */
    ACT_VM_PULLPIN = 180,
    
    /**
     */
    ACT_VM_PRIMARYATTACK = 181,
    
    /**
     */
    ACT_VM_SECONDARYATTACK = 182,
    
    /**
     */
    ACT_VM_RELOAD = 183,
    
    /**
     */
    ACT_VM_DRYFIRE = 186,
    
    /**
     */
    ACT_VM_HITLEFT = 187,
    
    /**
     */
    ACT_VM_HITLEFT2 = 188,
    
    /**
     */
    ACT_VM_HITRIGHT = 189,
    
    /**
     */
    ACT_VM_HITRIGHT2 = 190,
    
    /**
     */
    ACT_VM_HITCENTER = 191,
    
    /**
     */
    ACT_VM_HITCENTER2 = 192,
    
    /**
     */
    ACT_VM_MISSLEFT = 193,
    
    /**
     */
    ACT_VM_MISSLEFT2 = 194,
    
    /**
     */
    ACT_VM_MISSRIGHT = 195,
    
    /**
     */
    ACT_VM_MISSRIGHT2 = 196,
    
    /**
     */
    ACT_VM_MISSCENTER = 197,
    
    /**
     */
    ACT_VM_MISSCENTER2 = 198,
    
    /**
     */
    ACT_VM_HAULBACK = 199,
    
    /**
     */
    ACT_VM_SWINGHARD = 200,
    
    /**
     */
    ACT_VM_SWINGMISS = 201,
    
    /**
     */
    ACT_VM_SWINGHIT = 202,
    
    /**
     */
    ACT_VM_IDLE_TO_LOWERED = 203,
    
    /**
     */
    ACT_VM_IDLE_LOWERED = 204,
    
    /**
     */
    ACT_VM_LOWERED_TO_IDLE = 205,
    
    /**
     */
    ACT_VM_RECOIL1 = 206,
    
    /**
     */
    ACT_VM_RECOIL2 = 207,
    
    /**
     */
    ACT_VM_RECOIL3 = 208,
    
    /**
     */
    ACT_VM_PICKUP = 209,
    
    /**
     */
    ACT_VM_RELEASE = 210,
    
    /**
     */
    ACT_VM_ATTACH_SILENCER = 211,
    
    /**
     */
    ACT_VM_DETACH_SILENCER = 212,
    
    /**
     */
    ACT_SLAM_STICKWALL_IDLE = 229,
    
    /**
     */
    ACT_SLAM_STICKWALL_ND_IDLE = 230,
    
    /**
     */
    ACT_SLAM_STICKWALL_ATTACH = 231,
    
    /**
     */
    ACT_SLAM_STICKWALL_ATTACH2 = 232,
    
    /**
     */
    ACT_SLAM_STICKWALL_ND_ATTACH = 233,
    
    /**
     */
    ACT_SLAM_STICKWALL_ND_ATTACH2 = 234,
    
    /**
     */
    ACT_SLAM_STICKWALL_DETONATE = 235,
    
    /**
     */
    ACT_SLAM_STICKWALL_DETONATOR_HOLSTER = 236,
    
    /**
     */
    ACT_SLAM_STICKWALL_DRAW = 237,
    
    /**
     */
    ACT_SLAM_STICKWALL_ND_DRAW = 238,
    
    /**
     */
    ACT_SLAM_STICKWALL_TO_THROW = 239,
    
    /**
     */
    ACT_SLAM_STICKWALL_TO_THROW_ND = 240,
    
    /**
     */
    ACT_SLAM_STICKWALL_TO_TRIPMINE_ND = 241,
    
    /**
     */
    ACT_SLAM_THROW_IDLE = 242,
    
    /**
     */
    ACT_SLAM_THROW_ND_IDLE = 243,
    
    /**
     */
    ACT_SLAM_THROW_THROW = 244,
    
    /**
     */
    ACT_SLAM_THROW_THROW2 = 245,
    
    /**
     */
    ACT_SLAM_THROW_THROW_ND = 246,
    
    /**
     */
    ACT_SLAM_THROW_THROW_ND2 = 247,
    
    /**
     */
    ACT_SLAM_THROW_DRAW = 248,
    
    /**
     */
    ACT_SLAM_THROW_ND_DRAW = 249,
    
    /**
     */
    ACT_SLAM_THROW_TO_STICKWALL = 250,
    
    /**
     */
    ACT_SLAM_THROW_TO_STICKWALL_ND = 251,
    
    /**
     */
    ACT_SLAM_THROW_DETONATE = 252,
    
    /**
     */
    ACT_SLAM_THROW_DETONATOR_HOLSTER = 253,
    
    /**
     */
    ACT_SLAM_THROW_TO_TRIPMINE_ND = 254,
    
    /**
     */
    ACT_SLAM_TRIPMINE_IDLE = 255,
    
    /**
     */
    ACT_SLAM_TRIPMINE_DRAW = 256,
    
    /**
     */
    ACT_SLAM_TRIPMINE_ATTACH = 257,
    
    /**
     */
    ACT_SLAM_TRIPMINE_ATTACH2 = 258,
    
    /**
     */
    ACT_SLAM_TRIPMINE_TO_STICKWALL_ND = 259,
    
    /**
     */
    ACT_SLAM_TRIPMINE_TO_THROW_ND = 260,
    
    /**
     */
    ACT_SLAM_DETONATOR_IDLE = 261,
    
    /**
     */
    ACT_SLAM_DETONATOR_DRAW = 262,
    
    /**
     */
    ACT_SLAM_DETONATOR_DETONATE = 263,
    
    /**
     */
    ACT_SLAM_DETONATOR_HOLSTER = 264,
    
    /**
     */
    ACT_SLAM_DETONATOR_STICKWALL_DRAW = 265,
    
    /**
     */
    ACT_SLAM_DETONATOR_THROW_DRAW = 266,
    
    /**
     */
    ACT_SHOTGUN_RELOAD_START = 267,
    
    /**
     */
    ACT_SHOTGUN_RELOAD_FINISH = 268,
    
    /**
     */
    ACT_SHOTGUN_PUMP = 269,
    
    /**
     */
    ACT_SMG2_IDLE2 = 270,
    
    /**
     */
    ACT_SMG2_FIRE2 = 271,
    
    /**
     */
    ACT_SMG2_DRAW2 = 272,
    
    /**
     */
    ACT_SMG2_RELOAD2 = 273,
    
    /**
     */
    ACT_SMG2_DRYFIRE2 = 274,
    
    /**
     */
    ACT_SMG2_TOAUTO = 275,
    
    /**
     */
    ACT_SMG2_TOBURST = 276,
    
    /**
     */
    ACT_PHYSCANNON_UPGRADE = 277,
    
    /**
     */
    ACT_RANGE_ATTACK_AR1 = 278,
    
    /**
     */
    ACT_RANGE_ATTACK_AR2 = 279,
    
    /**
     */
    ACT_RANGE_ATTACK_AR2_LOW = 280,
    
    /**
     */
    ACT_RANGE_ATTACK_AR2_GRENADE = 281,
    
    /**
     */
    ACT_RANGE_ATTACK_HMG1 = 282,
    
    /**
     */
    ACT_RANGE_ATTACK_ML = 283,
    
    /**
     */
    ACT_RANGE_ATTACK_SMG1 = 284,
    
    /**
     */
    ACT_RANGE_ATTACK_SMG1_LOW = 285,
    
    /**
     */
    ACT_RANGE_ATTACK_SMG2 = 286,
    
    /**
     */
    ACT_RANGE_ATTACK_SHOTGUN = 287,
    
    /**
     */
    ACT_RANGE_ATTACK_SHOTGUN_LOW = 288,
    
    /**
     */
    ACT_RANGE_ATTACK_PISTOL = 289,
    
    /**
     */
    ACT_RANGE_ATTACK_PISTOL_LOW = 290,
    
    /**
     */
    ACT_RANGE_ATTACK_SLAM = 291,
    
    /**
     */
    ACT_RANGE_ATTACK_TRIPWIRE = 292,
    
    /**
     */
    ACT_RANGE_ATTACK_THROW = 293,
    
    /**
     */
    ACT_RANGE_ATTACK_SNIPER_RIFLE = 294,
    
    /**
     */
    ACT_RANGE_ATTACK_RPG = 295,
    
    /**
     */
    ACT_MELEE_ATTACK_SWING = 296,
    
    /**
     */
    ACT_RANGE_AIM_LOW = 297,
    
    /**
     */
    ACT_RANGE_AIM_SMG1_LOW = 298,
    
    /**
     */
    ACT_RANGE_AIM_PISTOL_LOW = 299,
    
    /**
     */
    ACT_RANGE_AIM_AR2_LOW = 300,
    
    /**
     */
    ACT_COVER_PISTOL_LOW = 301,
    
    /**
     */
    ACT_COVER_SMG1_LOW = 302,
    
    /**
     */
    ACT_GESTURE_RANGE_ATTACK_AR1 = 303,
    
    /**
     */
    ACT_GESTURE_RANGE_ATTACK_AR2 = 304,
    
    /**
     */
    ACT_GESTURE_RANGE_ATTACK_AR2_GRENADE = 305,
    
    /**
     */
    ACT_GESTURE_RANGE_ATTACK_HMG1 = 306,
    
    /**
     */
    ACT_GESTURE_RANGE_ATTACK_ML = 307,
    
    /**
     */
    ACT_GESTURE_RANGE_ATTACK_SMG1 = 308,
    
    /**
     */
    ACT_GESTURE_RANGE_ATTACK_SMG1_LOW = 309,
    
    /**
     */
    ACT_GESTURE_RANGE_ATTACK_SMG2 = 310,
    
    /**
     */
    ACT_GESTURE_RANGE_ATTACK_SHOTGUN = 311,
    
    /**
     */
    ACT_GESTURE_RANGE_ATTACK_PISTOL = 312,
    
    /**
     */
    ACT_GESTURE_RANGE_ATTACK_PISTOL_LOW = 313,
    
    /**
     */
    ACT_GESTURE_RANGE_ATTACK_SLAM = 314,
    
    /**
     */
    ACT_GESTURE_RANGE_ATTACK_TRIPWIRE = 315,
    
    /**
     */
    ACT_GESTURE_RANGE_ATTACK_THROW = 316,
    
    /**
     */
    ACT_GESTURE_RANGE_ATTACK_SNIPER_RIFLE = 317,
    
    /**
     */
    ACT_GESTURE_MELEE_ATTACK_SWING = 318,
    
    /**
     */
    ACT_IDLE_RIFLE = 319,
    
    /**
     */
    ACT_IDLE_SMG1 = 320,
    
    /**
     */
    ACT_IDLE_ANGRY_SMG1 = 321,
    
    /**
     */
    ACT_IDLE_PISTOL = 322,
    
    /**
     */
    ACT_IDLE_ANGRY_PISTOL = 323,
    
    /**
     */
    ACT_IDLE_ANGRY_SHOTGUN = 324,
    
    /**
     */
    ACT_IDLE_STEALTH_PISTOL = 325,
    
    /**
     */
    ACT_IDLE_PACKAGE = 326,
    
    /**
     */
    ACT_WALK_PACKAGE = 327,
    
    /**
     */
    ACT_IDLE_SUITCASE = 328,
    
    /**
     */
    ACT_WALK_SUITCASE = 329,
    
    /**
     */
    ACT_IDLE_SMG1_RELAXED = 330,
    
    /**
     */
    ACT_IDLE_SMG1_STIMULATED = 331,
    
    /**
     */
    ACT_WALK_RIFLE_RELAXED = 332,
    
    /**
     */
    ACT_RUN_RIFLE_RELAXED = 333,
    
    /**
     */
    ACT_WALK_RIFLE_STIMULATED = 334,
    
    /**
     */
    ACT_RUN_RIFLE_STIMULATED = 335,
    
    /**
     */
    ACT_IDLE_AIM_RIFLE_STIMULATED = 336,
    
    /**
     */
    ACT_WALK_AIM_RIFLE_STIMULATED = 337,
    
    /**
     */
    ACT_RUN_AIM_RIFLE_STIMULATED = 338,
    
    /**
     */
    ACT_IDLE_SHOTGUN_RELAXED = 339,
    
    /**
     */
    ACT_IDLE_SHOTGUN_STIMULATED = 340,
    
    /**
     */
    ACT_IDLE_SHOTGUN_AGITATED = 341,
    
    /**
     */
    ACT_WALK_ANGRY = 342,
    
    /**
     */
    ACT_POLICE_HARASS1 = 343,
    
    /**
     */
    ACT_POLICE_HARASS2 = 344,
    
    /**
     */
    ACT_IDLE_MANNEDGUN = 345,
    
    /**
     */
    ACT_IDLE_MELEE = 346,
    
    /**
     */
    ACT_IDLE_ANGRY_MELEE = 347,
    
    /**
     */
    ACT_IDLE_RPG_RELAXED = 348,
    
    /**
     */
    ACT_IDLE_RPG = 349,
    
    /**
     */
    ACT_IDLE_ANGRY_RPG = 350,
    
    /**
     */
    ACT_COVER_LOW_RPG = 351,
    
    /**
     */
    ACT_WALK_RPG = 352,
    
    /**
     */
    ACT_RUN_RPG = 353,
    
    /**
     */
    ACT_WALK_CROUCH_RPG = 354,
    
    /**
     */
    ACT_RUN_CROUCH_RPG = 355,
    
    /**
     */
    ACT_WALK_RPG_RELAXED = 356,
    
    /**
     */
    ACT_RUN_RPG_RELAXED = 357,
    
    /**
     */
    ACT_WALK_RIFLE = 358,
    
    /**
     */
    ACT_WALK_AIM_RIFLE = 359,
    
    /**
     */
    ACT_WALK_CROUCH_RIFLE = 360,
    
    /**
     */
    ACT_WALK_CROUCH_AIM_RIFLE = 361,
    
    /**
     */
    ACT_RUN_RIFLE = 362,
    
    /**
     */
    ACT_RUN_AIM_RIFLE = 363,
    
    /**
     */
    ACT_RUN_CROUCH_RIFLE = 364,
    
    /**
     */
    ACT_RUN_CROUCH_AIM_RIFLE = 365,
    
    /**
     */
    ACT_RUN_STEALTH_PISTOL = 366,
    
    /**
     */
    ACT_WALK_AIM_SHOTGUN = 367,
    
    /**
     */
    ACT_RUN_AIM_SHOTGUN = 368,
    
    /**
     */
    ACT_WALK_PISTOL = 369,
    
    /**
     */
    ACT_RUN_PISTOL = 370,
    
    /**
     */
    ACT_WALK_AIM_PISTOL = 371,
    
    /**
     */
    ACT_RUN_AIM_PISTOL = 372,
    
    /**
     */
    ACT_WALK_STEALTH_PISTOL = 373,
    
    /**
     */
    ACT_WALK_AIM_STEALTH_PISTOL = 374,
    
    /**
     */
    ACT_RUN_AIM_STEALTH_PISTOL = 375,
    
    /**
     */
    ACT_RELOAD_PISTOL = 376,
    
    /**
     */
    ACT_RELOAD_PISTOL_LOW = 377,
    
    /**
     */
    ACT_RELOAD_SMG1 = 378,
    
    /**
     */
    ACT_RELOAD_SMG1_LOW = 379,
    
    /**
     */
    ACT_RELOAD_SHOTGUN = 380,
    
    /**
     */
    ACT_RELOAD_SHOTGUN_LOW = 381,
    
    /**
     */
    ACT_GESTURE_RELOAD = 382,
    
    /**
     */
    ACT_GESTURE_RELOAD_PISTOL = 383,
    
    /**
     */
    ACT_GESTURE_RELOAD_SMG1 = 384,
    
    /**
     */
    ACT_GESTURE_RELOAD_SHOTGUN = 385,
    
    /**
     */
    ACT_BUSY_LEAN_LEFT = 386,
    
    /**
     */
    ACT_BUSY_LEAN_LEFT_ENTRY = 387,
    
    /**
     */
    ACT_BUSY_LEAN_LEFT_EXIT = 388,
    
    /**
     */
    ACT_BUSY_LEAN_BACK = 389,
    
    /**
     */
    ACT_BUSY_LEAN_BACK_ENTRY = 390,
    
    /**
     */
    ACT_BUSY_LEAN_BACK_EXIT = 391,
    
    /**
     */
    ACT_BUSY_SIT_GROUND = 392,
    
    /**
     */
    ACT_BUSY_SIT_GROUND_ENTRY = 393,
    
    /**
     */
    ACT_BUSY_SIT_GROUND_EXIT = 394,
    
    /**
     */
    ACT_BUSY_SIT_CHAIR = 395,
    
    /**
     */
    ACT_BUSY_SIT_CHAIR_ENTRY = 396,
    
    /**
     */
    ACT_BUSY_SIT_CHAIR_EXIT = 397,
    
    /**
     */
    ACT_BUSY_STAND = 398,
    
    /**
     */
    ACT_BUSY_QUEUE = 399,
    
    /**
     */
    ACT_DUCK_DODGE = 400,
    
    /**
     */
    ACT_DIE_BARNACLE_SWALLOW = 401,
    
    /**
     */
    ACT_GESTURE_BARNACLE_STRANGLE = 402,
    
    /**
     */
    ACT_PHYSCANNON_DETACH = 403,
    
    /**
     */
    ACT_PHYSCANNON_ANIMATE = 404,
    
    /**
     */
    ACT_PHYSCANNON_ANIMATE_PRE = 405,
    
    /**
     */
    ACT_PHYSCANNON_ANIMATE_POST = 406,
    
    /**
     */
    ACT_DIE_FRONTSIDE = 407,
    
    /**
     */
    ACT_DIE_RIGHTSIDE = 408,
    
    /**
     */
    ACT_DIE_BACKSIDE = 409,
    
    /**
     */
    ACT_DIE_LEFTSIDE = 410,
    
    /**
     */
    ACT_OPEN_DOOR = 411,
    
    /**
     */
    ACT_DI_ALYX_ZOMBIE_MELEE = 412,
    
    /**
     */
    ACT_DI_ALYX_ZOMBIE_TORSO_MELEE = 413,
    
    /**
     */
    ACT_DI_ALYX_HEADCRAB_MELEE = 414,
    
    /**
     */
    ACT_DI_ALYX_ANTLION = 415,
    
    /**
     */
    ACT_DI_ALYX_ZOMBIE_SHOTGUN64 = 416,
    
    /**
     */
    ACT_DI_ALYX_ZOMBIE_SHOTGUN26 = 417,
    
    /**
     */
    ACT_READINESS_RELAXED_TO_STIMULATED = 418,
    
    /**
     */
    ACT_READINESS_RELAXED_TO_STIMULATED_WALK = 419,
    
    /**
     */
    ACT_READINESS_AGITATED_TO_STIMULATED = 420,
    
    /**
     */
    ACT_READINESS_STIMULATED_TO_RELAXED = 421,
    
    /**
     */
    ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED = 422,
    
    /**
     */
    ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED_WALK = 423,
    
    /**
     */
    ACT_READINESS_PISTOL_AGITATED_TO_STIMULATED = 424,
    
    /**
     */
    ACT_READINESS_PISTOL_STIMULATED_TO_RELAXED = 425,
    
    /**
     */
    ACT_IDLE_CARRY = 426,
    
    /**
     */
    ACT_WALK_CARRY = 427,
    
    /**
     */
    ACT_STARTDYING = 428,
    
    /**
     */
    ACT_DYINGLOOP = 429,
    
    /**
     */
    ACT_DYINGTODEAD = 430,
    
    /**
     */
    ACT_RIDE_MANNED_GUN = 431,
    
    /**
     */
    ACT_VM_SPRINT_ENTER = 432,
    
    /**
     */
    ACT_VM_SPRINT_IDLE = 433,
    
    /**
     */
    ACT_VM_SPRINT_LEAVE = 434,
    
    /**
     */
    ACT_FIRE_START = 435,
    
    /**
     */
    ACT_FIRE_LOOP = 436,
    
    /**
     */
    ACT_FIRE_END = 437,
    
    /**
     */
    ACT_CROUCHING_GRENADEIDLE = 438,
    
    /**
     */
    ACT_CROUCHING_GRENADEREADY = 439,
    
    /**
     */
    ACT_CROUCHING_PRIMARYATTACK = 440,
    
    /**
     */
    ACT_OVERLAY_GRENADEIDLE = 441,
    
    /**
     */
    ACT_OVERLAY_GRENADEREADY = 442,
    
    /**
     */
    ACT_OVERLAY_PRIMARYATTACK = 443,
    
    /**
     */
    ACT_OVERLAY_SHIELD_UP = 444,
    
    /**
     */
    ACT_OVERLAY_SHIELD_DOWN = 445,
    
    /**
     */
    ACT_OVERLAY_SHIELD_UP_IDLE = 446,
    
    /**
     */
    ACT_OVERLAY_SHIELD_ATTACK = 447,
    
    /**
     */
    ACT_OVERLAY_SHIELD_KNOCKBACK = 448,
    
    /**
     */
    ACT_SHIELD_UP = 449,
    
    /**
     */
    ACT_SHIELD_DOWN = 450,
    
    /**
     */
    ACT_SHIELD_UP_IDLE = 451,
    
    /**
     */
    ACT_SHIELD_ATTACK = 452,
    
    /**
     */
    ACT_SHIELD_KNOCKBACK = 453,
    
    /**
     */
    ACT_CROUCHING_SHIELD_UP = 454,
    
    /**
     */
    ACT_CROUCHING_SHIELD_DOWN = 455,
    
    /**
     */
    ACT_CROUCHING_SHIELD_UP_IDLE = 456,
    
    /**
     */
    ACT_CROUCHING_SHIELD_ATTACK = 457,
    
    /**
     */
    ACT_CROUCHING_SHIELD_KNOCKBACK = 458,
    
    /**
     */
    ACT_TURNRIGHT45 = 459,
    
    /**
     */
    ACT_TURNLEFT45 = 460,
    
    /**
     */
    ACT_TURN = 461,
    
    /**
     */
    ACT_OBJ_ASSEMBLING = 462,
    
    /**
     */
    ACT_OBJ_DISMANTLING = 463,
    
    /**
     */
    ACT_OBJ_STARTUP = 464,
    
    /**
     */
    ACT_OBJ_RUNNING = 465,
    
    /**
     */
    ACT_OBJ_IDLE = 466,
    
    /**
     */
    ACT_OBJ_PLACING = 467,
    
    /**
     */
    ACT_OBJ_DETERIORATING = 468,
    
    /**
     */
    ACT_OBJ_UPGRADING = 469,
    
    /**
     */
    ACT_DEPLOY = 470,
    
    /**
     */
    ACT_DEPLOY_IDLE = 471,
    
    /**
     */
    ACT_UNDEPLOY = 472,
    
    /**
     */
    ACT_GRENADE_ROLL = 473,
    
    /**
     */
    ACT_GRENADE_TOSS = 474,
    
    /**
     */
    ACT_HANDGRENADE_THROW1 = 475,
    
    /**
     */
    ACT_HANDGRENADE_THROW2 = 476,
    
    /**
     */
    ACT_HANDGRENADE_THROW3 = 477,
    
    /**
     */
    ACT_SHOTGUN_IDLE_DEEP = 478,
    
    /**
     */
    ACT_SHOTGUN_IDLE4 = 479,
    
    /**
     */
    ACT_GLOCK_SHOOTEMPTY = 480,
    
    /**
     */
    ACT_GLOCK_SHOOT_RELOAD = 481,
    
    /**
     */
    ACT_RPG_DRAW_UNLOADED = 482,
    
    /**
     */
    ACT_RPG_HOLSTER_UNLOADED = 483,
    
    /**
     */
    ACT_RPG_IDLE_UNLOADED = 484,
    
    /**
     */
    ACT_RPG_FIDGET_UNLOADED = 485,
    
    /**
     */
    ACT_CROSSBOW_DRAW_UNLOADED = 486,
    
    /**
     */
    ACT_CROSSBOW_IDLE_UNLOADED = 487,
    
    /**
     */
    ACT_CROSSBOW_FIDGET_UNLOADED = 488,
    
    /**
     */
    ACT_GAUSS_SPINUP = 489,
    
    /**
     */
    ACT_GAUSS_SPINCYCLE = 490,
    
    /**
     */
    ACT_TRIPMINE_GROUND = 491,
    
    /**
     */
    ACT_TRIPMINE_WORLD = 492,
    
    /**
     */
    ACT_VM_PRIMARYATTACK_SILENCED = 493,
    
    /**
     */
    ACT_VM_RELOAD_SILENCED = 494,
    
    /**
     */
    ACT_VM_DRYFIRE_SILENCED = 495,
    
    /**
     */
    ACT_VM_IDLE_SILENCED = 496,
    
    /**
     */
    ACT_VM_DRAW_SILENCED = 497,
    
    /**
     */
    ACT_VM_IDLE_EMPTY_LEFT = 498,
    
    /**
     */
    ACT_VM_DRYFIRE_LEFT = 499,
    
    /**
     */
    ACT_PLAYER_IDLE_FIRE = 500,
    
    /**
     */
    ACT_PLAYER_CROUCH_FIRE = 501,
    
    /**
     */
    ACT_PLAYER_CROUCH_WALK_FIRE = 502,
    
    /**
     */
    ACT_PLAYER_WALK_FIRE = 503,
    
    /**
     */
    ACT_PLAYER_RUN_FIRE = 504,
    
    /**
     */
    ACT_IDLETORUN = 505,
    
    /**
     */
    ACT_RUNTOIDLE = 506,
    
    /**
     */
    ACT_SPRINT = 507,
    
    /**
     */
    ACT_GET_DOWN_STAND = 508,
    
    /**
     */
    ACT_GET_UP_STAND = 509,
    
    /**
     */
    ACT_GET_DOWN_CROUCH = 510,
    
    /**
     */
    ACT_GET_UP_CROUCH = 511,
    
    /**
     */
    ACT_PRONE_FORWARD = 512,
    
    /**
     */
    ACT_PRONE_IDLE = 513,
    
    /**
     */
    ACT_DEEPIDLE1 = 514,
    
    /**
     */
    ACT_DEEPIDLE2 = 515,
    
    /**
     */
    ACT_DEEPIDLE3 = 516,
    
    /**
     */
    ACT_DEEPIDLE4 = 517,
    
    /**
     */
    ACT_VM_RELOAD_DEPLOYED = 518,
    
    /**
     */
    ACT_VM_RELOAD_IDLE = 519,
    
    /**
     */
    ACT_VM_DRAW_DEPLOYED = 520,
    
    /**
     */
    ACT_VM_DRAW_EMPTY = 521,
    
    /**
     */
    ACT_VM_PRIMARYATTACK_EMPTY = 522,
    
    /**
     */
    ACT_VM_RELOAD_EMPTY = 523,
    
    /**
     */
    ACT_VM_IDLE_EMPTY = 524,
    
    /**
     */
    ACT_VM_IDLE_DEPLOYED_EMPTY = 525,
    
    /**
     */
    ACT_VM_IDLE_8 = 526,
    
    /**
     */
    ACT_VM_IDLE_7 = 527,
    
    /**
     */
    ACT_VM_IDLE_6 = 528,
    
    /**
     */
    ACT_VM_IDLE_5 = 529,
    
    /**
     */
    ACT_VM_IDLE_4 = 530,
    
    /**
     */
    ACT_VM_IDLE_3 = 531,
    
    /**
     */
    ACT_VM_IDLE_2 = 532,
    
    /**
     */
    ACT_VM_IDLE_1 = 533,
    
    /**
     */
    ACT_VM_IDLE_DEPLOYED = 534,
    
    /**
     */
    ACT_VM_IDLE_DEPLOYED_8 = 535,
    
    /**
     */
    ACT_VM_IDLE_DEPLOYED_7 = 536,
    
    /**
     */
    ACT_VM_IDLE_DEPLOYED_6 = 537,
    
    /**
     */
    ACT_VM_IDLE_DEPLOYED_5 = 538,
    
    /**
     */
    ACT_VM_IDLE_DEPLOYED_4 = 539,
    
    /**
     */
    ACT_VM_IDLE_DEPLOYED_3 = 540,
    
    /**
     */
    ACT_VM_IDLE_DEPLOYED_2 = 541,
    
    /**
     */
    ACT_VM_IDLE_DEPLOYED_1 = 542,
    
    /**
     */
    ACT_VM_UNDEPLOY = 543,
    
    /**
     */
    ACT_VM_UNDEPLOY_8 = 544,
    
    /**
     */
    ACT_VM_UNDEPLOY_7 = 545,
    
    /**
     */
    ACT_VM_UNDEPLOY_6 = 546,
    
    /**
     */
    ACT_VM_UNDEPLOY_5 = 547,
    
    /**
     */
    ACT_VM_UNDEPLOY_4 = 548,
    
    /**
     */
    ACT_VM_UNDEPLOY_3 = 549,
    
    /**
     */
    ACT_VM_UNDEPLOY_2 = 550,
    
    /**
     */
    ACT_VM_UNDEPLOY_1 = 551,
    
    /**
     */
    ACT_VM_UNDEPLOY_EMPTY = 552,
    
    /**
     */
    ACT_VM_DEPLOY = 553,
    
    /**
     */
    ACT_VM_DEPLOY_8 = 554,
    
    /**
     */
    ACT_VM_DEPLOY_7 = 555,
    
    /**
     */
    ACT_VM_DEPLOY_6 = 556,
    
    /**
     */
    ACT_VM_DEPLOY_5 = 557,
    
    /**
     */
    ACT_VM_DEPLOY_4 = 558,
    
    /**
     */
    ACT_VM_DEPLOY_3 = 559,
    
    /**
     */
    ACT_VM_DEPLOY_2 = 560,
    
    /**
     */
    ACT_VM_DEPLOY_1 = 561,
    
    /**
     */
    ACT_VM_DEPLOY_EMPTY = 562,
    
    /**
     */
    ACT_VM_PRIMARYATTACK_8 = 563,
    
    /**
     */
    ACT_VM_PRIMARYATTACK_7 = 564,
    
    /**
     */
    ACT_VM_PRIMARYATTACK_6 = 565,
    
    /**
     */
    ACT_VM_PRIMARYATTACK_5 = 566,
    
    /**
     */
    ACT_VM_PRIMARYATTACK_4 = 567,
    
    /**
     */
    ACT_VM_PRIMARYATTACK_3 = 568,
    
    /**
     */
    ACT_VM_PRIMARYATTACK_2 = 569,
    
    /**
     */
    ACT_VM_PRIMARYATTACK_1 = 570,
    
    /**
     */
    ACT_VM_PRIMARYATTACK_DEPLOYED = 571,
    
    /**
     */
    ACT_VM_PRIMARYATTACK_DEPLOYED_8 = 572,
    
    /**
     */
    ACT_VM_PRIMARYATTACK_DEPLOYED_7 = 573,
    
    /**
     */
    ACT_VM_PRIMARYATTACK_DEPLOYED_6 = 574,
    
    /**
     */
    ACT_VM_PRIMARYATTACK_DEPLOYED_5 = 575,
    
    /**
     */
    ACT_VM_PRIMARYATTACK_DEPLOYED_4 = 576,
    
    /**
     */
    ACT_VM_PRIMARYATTACK_DEPLOYED_3 = 577,
    
    /**
     */
    ACT_VM_PRIMARYATTACK_DEPLOYED_2 = 578,
    
    /**
     */
    ACT_VM_PRIMARYATTACK_DEPLOYED_1 = 579,
    
    /**
     */
    ACT_VM_PRIMARYATTACK_DEPLOYED_EMPTY = 580,
    
    /**
     */
    ACT_DOD_DEPLOYED = 581,
    
    /**
     */
    ACT_DOD_PRONE_DEPLOYED = 582,
    
    /**
     */
    ACT_DOD_IDLE_ZOOMED = 583,
    
    /**
     */
    ACT_DOD_WALK_ZOOMED = 584,
    
    /**
     */
    ACT_DOD_CROUCH_ZOOMED = 585,
    
    /**
     */
    ACT_DOD_CROUCHWALK_ZOOMED = 586,
    
    /**
     */
    ACT_DOD_PRONE_ZOOMED = 587,
    
    /**
     */
    ACT_DOD_PRONE_FORWARD_ZOOMED = 588,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_DEPLOYED = 589,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED = 590,
    
    /**
     */
    ACT_DOD_RELOAD_DEPLOYED = 591,
    
    /**
     */
    ACT_DOD_RELOAD_PRONE_DEPLOYED = 592,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_PRONE = 593,
    
    /**
     */
    ACT_DOD_SECONDARYATTACK_PRONE = 594,
    
    /**
     */
    ACT_DOD_RELOAD_CROUCH = 595,
    
    /**
     */
    ACT_DOD_RELOAD_PRONE = 596,
    
    /**
     */
    ACT_DOD_STAND_IDLE = 597,
    
    /**
     */
    ACT_DOD_STAND_AIM = 598,
    
    /**
     */
    ACT_DOD_CROUCH_IDLE = 599,
    
    /**
     */
    ACT_DOD_CROUCH_AIM = 600,
    
    /**
     */
    ACT_DOD_CROUCHWALK_IDLE = 601,
    
    /**
     */
    ACT_DOD_CROUCHWALK_AIM = 602,
    
    /**
     */
    ACT_DOD_WALK_IDLE = 603,
    
    /**
     */
    ACT_DOD_WALK_AIM = 604,
    
    /**
     */
    ACT_DOD_RUN_IDLE = 605,
    
    /**
     */
    ACT_DOD_RUN_AIM = 606,
    
    /**
     */
    ACT_DOD_STAND_AIM_PISTOL = 607,
    
    /**
     */
    ACT_DOD_CROUCH_AIM_PISTOL = 608,
    
    /**
     */
    ACT_DOD_CROUCHWALK_AIM_PISTOL = 609,
    
    /**
     */
    ACT_DOD_WALK_AIM_PISTOL = 610,
    
    /**
     */
    ACT_DOD_RUN_AIM_PISTOL = 611,
    
    /**
     */
    ACT_DOD_PRONE_AIM_PISTOL = 612,
    
    /**
     */
    ACT_DOD_STAND_IDLE_PISTOL = 613,
    
    /**
     */
    ACT_DOD_CROUCH_IDLE_PISTOL = 614,
    
    /**
     */
    ACT_DOD_CROUCHWALK_IDLE_PISTOL = 615,
    
    /**
     */
    ACT_DOD_WALK_IDLE_PISTOL = 616,
    
    /**
     */
    ACT_DOD_RUN_IDLE_PISTOL = 617,
    
    /**
     */
    ACT_DOD_SPRINT_IDLE_PISTOL = 618,
    
    /**
     */
    ACT_DOD_PRONEWALK_IDLE_PISTOL = 619,
    
    /**
     */
    ACT_DOD_STAND_AIM_C96 = 620,
    
    /**
     */
    ACT_DOD_CROUCH_AIM_C96 = 621,
    
    /**
     */
    ACT_DOD_CROUCHWALK_AIM_C96 = 622,
    
    /**
     */
    ACT_DOD_WALK_AIM_C96 = 623,
    
    /**
     */
    ACT_DOD_RUN_AIM_C96 = 624,
    
    /**
     */
    ACT_DOD_PRONE_AIM_C96 = 625,
    
    /**
     */
    ACT_DOD_STAND_IDLE_C96 = 626,
    
    /**
     */
    ACT_DOD_CROUCH_IDLE_C96 = 627,
    
    /**
     */
    ACT_DOD_CROUCHWALK_IDLE_C96 = 628,
    
    /**
     */
    ACT_DOD_WALK_IDLE_C96 = 629,
    
    /**
     */
    ACT_DOD_RUN_IDLE_C96 = 630,
    
    /**
     */
    ACT_DOD_SPRINT_IDLE_C96 = 631,
    
    /**
     */
    ACT_DOD_PRONEWALK_IDLE_C96 = 632,
    
    /**
     */
    ACT_DOD_STAND_AIM_RIFLE = 633,
    
    /**
     */
    ACT_DOD_CROUCH_AIM_RIFLE = 634,
    
    /**
     */
    ACT_DOD_CROUCHWALK_AIM_RIFLE = 635,
    
    /**
     */
    ACT_DOD_WALK_AIM_RIFLE = 636,
    
    /**
     */
    ACT_DOD_RUN_AIM_RIFLE = 637,
    
    /**
     */
    ACT_DOD_PRONE_AIM_RIFLE = 638,
    
    /**
     */
    ACT_DOD_STAND_IDLE_RIFLE = 639,
    
    /**
     */
    ACT_DOD_CROUCH_IDLE_RIFLE = 640,
    
    /**
     */
    ACT_DOD_CROUCHWALK_IDLE_RIFLE = 641,
    
    /**
     */
    ACT_DOD_WALK_IDLE_RIFLE = 642,
    
    /**
     */
    ACT_DOD_RUN_IDLE_RIFLE = 643,
    
    /**
     */
    ACT_DOD_SPRINT_IDLE_RIFLE = 644,
    
    /**
     */
    ACT_DOD_PRONEWALK_IDLE_RIFLE = 645,
    
    /**
     */
    ACT_DOD_STAND_AIM_BOLT = 646,
    
    /**
     */
    ACT_DOD_CROUCH_AIM_BOLT = 647,
    
    /**
     */
    ACT_DOD_CROUCHWALK_AIM_BOLT = 648,
    
    /**
     */
    ACT_DOD_WALK_AIM_BOLT = 649,
    
    /**
     */
    ACT_DOD_RUN_AIM_BOLT = 650,
    
    /**
     */
    ACT_DOD_PRONE_AIM_BOLT = 651,
    
    /**
     */
    ACT_DOD_STAND_IDLE_BOLT = 652,
    
    /**
     */
    ACT_DOD_CROUCH_IDLE_BOLT = 653,
    
    /**
     */
    ACT_DOD_CROUCHWALK_IDLE_BOLT = 654,
    
    /**
     */
    ACT_DOD_WALK_IDLE_BOLT = 655,
    
    /**
     */
    ACT_DOD_RUN_IDLE_BOLT = 656,
    
    /**
     */
    ACT_DOD_SPRINT_IDLE_BOLT = 657,
    
    /**
     */
    ACT_DOD_PRONEWALK_IDLE_BOLT = 658,
    
    /**
     */
    ACT_DOD_STAND_AIM_TOMMY = 659,
    
    /**
     */
    ACT_DOD_CROUCH_AIM_TOMMY = 660,
    
    /**
     */
    ACT_DOD_CROUCHWALK_AIM_TOMMY = 661,
    
    /**
     */
    ACT_DOD_WALK_AIM_TOMMY = 662,
    
    /**
     */
    ACT_DOD_RUN_AIM_TOMMY = 663,
    
    /**
     */
    ACT_DOD_PRONE_AIM_TOMMY = 664,
    
    /**
     */
    ACT_DOD_STAND_IDLE_TOMMY = 665,
    
    /**
     */
    ACT_DOD_CROUCH_IDLE_TOMMY = 666,
    
    /**
     */
    ACT_DOD_CROUCHWALK_IDLE_TOMMY = 667,
    
    /**
     */
    ACT_DOD_WALK_IDLE_TOMMY = 668,
    
    /**
     */
    ACT_DOD_RUN_IDLE_TOMMY = 669,
    
    /**
     */
    ACT_DOD_SPRINT_IDLE_TOMMY = 670,
    
    /**
     */
    ACT_DOD_PRONEWALK_IDLE_TOMMY = 671,
    
    /**
     */
    ACT_DOD_STAND_AIM_MP40 = 672,
    
    /**
     */
    ACT_DOD_CROUCH_AIM_MP40 = 673,
    
    /**
     */
    ACT_DOD_CROUCHWALK_AIM_MP40 = 674,
    
    /**
     */
    ACT_DOD_WALK_AIM_MP40 = 675,
    
    /**
     */
    ACT_DOD_RUN_AIM_MP40 = 676,
    
    /**
     */
    ACT_DOD_PRONE_AIM_MP40 = 677,
    
    /**
     */
    ACT_DOD_STAND_IDLE_MP40 = 678,
    
    /**
     */
    ACT_DOD_CROUCH_IDLE_MP40 = 679,
    
    /**
     */
    ACT_DOD_CROUCHWALK_IDLE_MP40 = 680,
    
    /**
     */
    ACT_DOD_WALK_IDLE_MP40 = 681,
    
    /**
     */
    ACT_DOD_RUN_IDLE_MP40 = 682,
    
    /**
     */
    ACT_DOD_SPRINT_IDLE_MP40 = 683,
    
    /**
     */
    ACT_DOD_PRONEWALK_IDLE_MP40 = 684,
    
    /**
     */
    ACT_DOD_STAND_AIM_MP44 = 685,
    
    /**
     */
    ACT_DOD_CROUCH_AIM_MP44 = 686,
    
    /**
     */
    ACT_DOD_CROUCHWALK_AIM_MP44 = 687,
    
    /**
     */
    ACT_DOD_WALK_AIM_MP44 = 688,
    
    /**
     */
    ACT_DOD_RUN_AIM_MP44 = 689,
    
    /**
     */
    ACT_DOD_PRONE_AIM_MP44 = 690,
    
    /**
     */
    ACT_DOD_STAND_IDLE_MP44 = 691,
    
    /**
     */
    ACT_DOD_CROUCH_IDLE_MP44 = 692,
    
    /**
     */
    ACT_DOD_CROUCHWALK_IDLE_MP44 = 693,
    
    /**
     */
    ACT_DOD_WALK_IDLE_MP44 = 694,
    
    /**
     */
    ACT_DOD_RUN_IDLE_MP44 = 695,
    
    /**
     */
    ACT_DOD_SPRINT_IDLE_MP44 = 696,
    
    /**
     */
    ACT_DOD_PRONEWALK_IDLE_MP44 = 697,
    
    /**
     */
    ACT_DOD_STAND_AIM_GREASE = 698,
    
    /**
     */
    ACT_DOD_CROUCH_AIM_GREASE = 699,
    
    /**
     */
    ACT_DOD_CROUCHWALK_AIM_GREASE = 700,
    
    /**
     */
    ACT_DOD_WALK_AIM_GREASE = 701,
    
    /**
     */
    ACT_DOD_RUN_AIM_GREASE = 702,
    
    /**
     */
    ACT_DOD_PRONE_AIM_GREASE = 703,
    
    /**
     */
    ACT_DOD_STAND_IDLE_GREASE = 704,
    
    /**
     */
    ACT_DOD_CROUCH_IDLE_GREASE = 705,
    
    /**
     */
    ACT_DOD_CROUCHWALK_IDLE_GREASE = 706,
    
    /**
     */
    ACT_DOD_WALK_IDLE_GREASE = 707,
    
    /**
     */
    ACT_DOD_RUN_IDLE_GREASE = 708,
    
    /**
     */
    ACT_DOD_SPRINT_IDLE_GREASE = 709,
    
    /**
     */
    ACT_DOD_PRONEWALK_IDLE_GREASE = 710,
    
    /**
     */
    ACT_DOD_STAND_AIM_MG = 711,
    
    /**
     */
    ACT_DOD_CROUCH_AIM_MG = 712,
    
    /**
     */
    ACT_DOD_CROUCHWALK_AIM_MG = 713,
    
    /**
     */
    ACT_DOD_WALK_AIM_MG = 714,
    
    /**
     */
    ACT_DOD_RUN_AIM_MG = 715,
    
    /**
     */
    ACT_DOD_PRONE_AIM_MG = 716,
    
    /**
     */
    ACT_DOD_STAND_IDLE_MG = 717,
    
    /**
     */
    ACT_DOD_CROUCH_IDLE_MG = 718,
    
    /**
     */
    ACT_DOD_CROUCHWALK_IDLE_MG = 719,
    
    /**
     */
    ACT_DOD_WALK_IDLE_MG = 720,
    
    /**
     */
    ACT_DOD_RUN_IDLE_MG = 721,
    
    /**
     */
    ACT_DOD_SPRINT_IDLE_MG = 722,
    
    /**
     */
    ACT_DOD_PRONEWALK_IDLE_MG = 723,
    
    /**
     */
    ACT_DOD_STAND_AIM_30CAL = 724,
    
    /**
     */
    ACT_DOD_CROUCH_AIM_30CAL = 725,
    
    /**
     */
    ACT_DOD_CROUCHWALK_AIM_30CAL = 726,
    
    /**
     */
    ACT_DOD_WALK_AIM_30CAL = 727,
    
    /**
     */
    ACT_DOD_RUN_AIM_30CAL = 728,
    
    /**
     */
    ACT_DOD_PRONE_AIM_30CAL = 729,
    
    /**
     */
    ACT_DOD_STAND_IDLE_30CAL = 730,
    
    /**
     */
    ACT_DOD_CROUCH_IDLE_30CAL = 731,
    
    /**
     */
    ACT_DOD_CROUCHWALK_IDLE_30CAL = 732,
    
    /**
     */
    ACT_DOD_WALK_IDLE_30CAL = 733,
    
    /**
     */
    ACT_DOD_RUN_IDLE_30CAL = 734,
    
    /**
     */
    ACT_DOD_SPRINT_IDLE_30CAL = 735,
    
    /**
     */
    ACT_DOD_PRONEWALK_IDLE_30CAL = 736,
    
    /**
     */
    ACT_DOD_STAND_AIM_GREN_FRAG = 737,
    
    /**
     */
    ACT_DOD_CROUCH_AIM_GREN_FRAG = 738,
    
    /**
     */
    ACT_DOD_CROUCHWALK_AIM_GREN_FRAG = 739,
    
    /**
     */
    ACT_DOD_WALK_AIM_GREN_FRAG = 740,
    
    /**
     */
    ACT_DOD_RUN_AIM_GREN_FRAG = 741,
    
    /**
     */
    ACT_DOD_PRONE_AIM_GREN_FRAG = 742,
    
    /**
     */
    ACT_DOD_SPRINT_AIM_GREN_FRAG = 743,
    
    /**
     */
    ACT_DOD_PRONEWALK_AIM_GREN_FRAG = 744,
    
    /**
     */
    ACT_DOD_STAND_AIM_GREN_STICK = 745,
    
    /**
     */
    ACT_DOD_CROUCH_AIM_GREN_STICK = 746,
    
    /**
     */
    ACT_DOD_CROUCHWALK_AIM_GREN_STICK = 747,
    
    /**
     */
    ACT_DOD_WALK_AIM_GREN_STICK = 748,
    
    /**
     */
    ACT_DOD_RUN_AIM_GREN_STICK = 749,
    
    /**
     */
    ACT_DOD_PRONE_AIM_GREN_STICK = 750,
    
    /**
     */
    ACT_DOD_SPRINT_AIM_GREN_STICK = 751,
    
    /**
     */
    ACT_DOD_PRONEWALK_AIM_GREN_STICK = 752,
    
    /**
     */
    ACT_DOD_STAND_AIM_KNIFE = 753,
    
    /**
     */
    ACT_DOD_CROUCH_AIM_KNIFE = 754,
    
    /**
     */
    ACT_DOD_CROUCHWALK_AIM_KNIFE = 755,
    
    /**
     */
    ACT_DOD_WALK_AIM_KNIFE = 756,
    
    /**
     */
    ACT_DOD_RUN_AIM_KNIFE = 757,
    
    /**
     */
    ACT_DOD_PRONE_AIM_KNIFE = 758,
    
    /**
     */
    ACT_DOD_SPRINT_AIM_KNIFE = 759,
    
    /**
     */
    ACT_DOD_PRONEWALK_AIM_KNIFE = 760,
    
    /**
     */
    ACT_DOD_STAND_AIM_SPADE = 761,
    
    /**
     */
    ACT_DOD_CROUCH_AIM_SPADE = 762,
    
    /**
     */
    ACT_DOD_CROUCHWALK_AIM_SPADE = 763,
    
    /**
     */
    ACT_DOD_WALK_AIM_SPADE = 764,
    
    /**
     */
    ACT_DOD_RUN_AIM_SPADE = 765,
    
    /**
     */
    ACT_DOD_PRONE_AIM_SPADE = 766,
    
    /**
     */
    ACT_DOD_SPRINT_AIM_SPADE = 767,
    
    /**
     */
    ACT_DOD_PRONEWALK_AIM_SPADE = 768,
    
    /**
     */
    ACT_DOD_STAND_AIM_BAZOOKA = 769,
    
    /**
     */
    ACT_DOD_CROUCH_AIM_BAZOOKA = 770,
    
    /**
     */
    ACT_DOD_CROUCHWALK_AIM_BAZOOKA = 771,
    
    /**
     */
    ACT_DOD_WALK_AIM_BAZOOKA = 772,
    
    /**
     */
    ACT_DOD_RUN_AIM_BAZOOKA = 773,
    
    /**
     */
    ACT_DOD_PRONE_AIM_BAZOOKA = 774,
    
    /**
     */
    ACT_DOD_STAND_IDLE_BAZOOKA = 775,
    
    /**
     */
    ACT_DOD_CROUCH_IDLE_BAZOOKA = 776,
    
    /**
     */
    ACT_DOD_CROUCHWALK_IDLE_BAZOOKA = 777,
    
    /**
     */
    ACT_DOD_WALK_IDLE_BAZOOKA = 778,
    
    /**
     */
    ACT_DOD_RUN_IDLE_BAZOOKA = 779,
    
    /**
     */
    ACT_DOD_SPRINT_IDLE_BAZOOKA = 780,
    
    /**
     */
    ACT_DOD_PRONEWALK_IDLE_BAZOOKA = 781,
    
    /**
     */
    ACT_DOD_STAND_AIM_PSCHRECK = 782,
    
    /**
     */
    ACT_DOD_CROUCH_AIM_PSCHRECK = 783,
    
    /**
     */
    ACT_DOD_CROUCHWALK_AIM_PSCHRECK = 784,
    
    /**
     */
    ACT_DOD_WALK_AIM_PSCHRECK = 785,
    
    /**
     */
    ACT_DOD_RUN_AIM_PSCHRECK = 786,
    
    /**
     */
    ACT_DOD_PRONE_AIM_PSCHRECK = 787,
    
    /**
     */
    ACT_DOD_STAND_IDLE_PSCHRECK = 788,
    
    /**
     */
    ACT_DOD_CROUCH_IDLE_PSCHRECK = 789,
    
    /**
     */
    ACT_DOD_CROUCHWALK_IDLE_PSCHRECK = 790,
    
    /**
     */
    ACT_DOD_WALK_IDLE_PSCHRECK = 791,
    
    /**
     */
    ACT_DOD_RUN_IDLE_PSCHRECK = 792,
    
    /**
     */
    ACT_DOD_SPRINT_IDLE_PSCHRECK = 793,
    
    /**
     */
    ACT_DOD_PRONEWALK_IDLE_PSCHRECK = 794,
    
    /**
     */
    ACT_DOD_STAND_AIM_BAR = 795,
    
    /**
     */
    ACT_DOD_CROUCH_AIM_BAR = 796,
    
    /**
     */
    ACT_DOD_CROUCHWALK_AIM_BAR = 797,
    
    /**
     */
    ACT_DOD_WALK_AIM_BAR = 798,
    
    /**
     */
    ACT_DOD_RUN_AIM_BAR = 799,
    
    /**
     */
    ACT_DOD_PRONE_AIM_BAR = 800,
    
    /**
     */
    ACT_DOD_STAND_IDLE_BAR = 801,
    
    /**
     */
    ACT_DOD_CROUCH_IDLE_BAR = 802,
    
    /**
     */
    ACT_DOD_CROUCHWALK_IDLE_BAR = 803,
    
    /**
     */
    ACT_DOD_WALK_IDLE_BAR = 804,
    
    /**
     */
    ACT_DOD_RUN_IDLE_BAR = 805,
    
    /**
     */
    ACT_DOD_SPRINT_IDLE_BAR = 806,
    
    /**
     */
    ACT_DOD_PRONEWALK_IDLE_BAR = 807,
    
    /**
     */
    ACT_DOD_STAND_ZOOM_RIFLE = 808,
    
    /**
     */
    ACT_DOD_CROUCH_ZOOM_RIFLE = 809,
    
    /**
     */
    ACT_DOD_CROUCHWALK_ZOOM_RIFLE = 810,
    
    /**
     */
    ACT_DOD_WALK_ZOOM_RIFLE = 811,
    
    /**
     */
    ACT_DOD_RUN_ZOOM_RIFLE = 812,
    
    /**
     */
    ACT_DOD_PRONE_ZOOM_RIFLE = 813,
    
    /**
     */
    ACT_DOD_STAND_ZOOM_BOLT = 814,
    
    /**
     */
    ACT_DOD_CROUCH_ZOOM_BOLT = 815,
    
    /**
     */
    ACT_DOD_CROUCHWALK_ZOOM_BOLT = 816,
    
    /**
     */
    ACT_DOD_WALK_ZOOM_BOLT = 817,
    
    /**
     */
    ACT_DOD_RUN_ZOOM_BOLT = 818,
    
    /**
     */
    ACT_DOD_PRONE_ZOOM_BOLT = 819,
    
    /**
     */
    ACT_DOD_STAND_ZOOM_BAZOOKA = 820,
    
    /**
     */
    ACT_DOD_CROUCH_ZOOM_BAZOOKA = 821,
    
    /**
     */
    ACT_DOD_CROUCHWALK_ZOOM_BAZOOKA = 822,
    
    /**
     */
    ACT_DOD_WALK_ZOOM_BAZOOKA = 823,
    
    /**
     */
    ACT_DOD_RUN_ZOOM_BAZOOKA = 824,
    
    /**
     */
    ACT_DOD_PRONE_ZOOM_BAZOOKA = 825,
    
    /**
     */
    ACT_DOD_STAND_ZOOM_PSCHRECK = 826,
    
    /**
     */
    ACT_DOD_CROUCH_ZOOM_PSCHRECK = 827,
    
    /**
     */
    ACT_DOD_CROUCHWALK_ZOOM_PSCHRECK = 828,
    
    /**
     */
    ACT_DOD_WALK_ZOOM_PSCHRECK = 829,
    
    /**
     */
    ACT_DOD_RUN_ZOOM_PSCHRECK = 830,
    
    /**
     */
    ACT_DOD_PRONE_ZOOM_PSCHRECK = 831,
    
    /**
     */
    ACT_DOD_DEPLOY_RIFLE = 832,
    
    /**
     */
    ACT_DOD_DEPLOY_TOMMY = 833,
    
    /**
     */
    ACT_DOD_DEPLOY_MG = 834,
    
    /**
     */
    ACT_DOD_DEPLOY_30CAL = 835,
    
    /**
     */
    ACT_DOD_PRONE_DEPLOY_RIFLE = 836,
    
    /**
     */
    ACT_DOD_PRONE_DEPLOY_TOMMY = 837,
    
    /**
     */
    ACT_DOD_PRONE_DEPLOY_MG = 838,
    
    /**
     */
    ACT_DOD_PRONE_DEPLOY_30CAL = 839,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_RIFLE = 840,
    
    /**
     */
    ACT_DOD_SECONDARYATTACK_RIFLE = 841,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_PRONE_RIFLE = 842,
    
    /**
     */
    ACT_DOD_SECONDARYATTACK_PRONE_RIFLE = 843,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_RIFLE = 844,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_DEPLOYED_RIFLE = 845,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_BOLT = 846,
    
    /**
     */
    ACT_DOD_SECONDARYATTACK_BOLT = 847,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_PRONE_BOLT = 848,
    
    /**
     */
    ACT_DOD_SECONDARYATTACK_PRONE_BOLT = 849,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_TOMMY = 850,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_PRONE_TOMMY = 851,
    
    /**
     */
    ACT_DOD_SECONDARYATTACK_TOMMY = 852,
    
    /**
     */
    ACT_DOD_SECONDARYATTACK_PRONE_TOMMY = 853,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_MP40 = 854,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_PRONE_MP40 = 855,
    
    /**
     */
    ACT_DOD_SECONDARYATTACK_MP40 = 856,
    
    /**
     */
    ACT_DOD_SECONDARYATTACK_PRONE_MP40 = 857,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_MP44 = 858,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_PRONE_MP44 = 859,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_GREASE = 860,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_PRONE_GREASE = 861,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_PISTOL = 862,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_PRONE_PISTOL = 863,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_C96 = 864,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_PRONE_C96 = 865,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_MG = 866,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_PRONE_MG = 867,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_MG = 868,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_DEPLOYED_MG = 869,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_30CAL = 870,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_PRONE_30CAL = 871,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_DEPLOYED_30CAL = 872,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_PRONE_DEPLOYED_30CAL = 873,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_GREN_FRAG = 874,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_PRONE_GREN_FRAG = 875,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_GREN_STICK = 876,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_PRONE_GREN_STICK = 877,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_KNIFE = 878,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_PRONE_KNIFE = 879,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_SPADE = 880,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_PRONE_SPADE = 881,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_BAZOOKA = 882,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_PRONE_BAZOOKA = 883,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_PSCHRECK = 884,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_PRONE_PSCHRECK = 885,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_BAR = 886,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_PRONE_BAR = 887,
    
    /**
     */
    ACT_DOD_RELOAD_GARAND = 888,
    
    /**
     */
    ACT_DOD_RELOAD_K43 = 889,
    
    /**
     */
    ACT_DOD_RELOAD_BAR = 890,
    
    /**
     */
    ACT_DOD_RELOAD_MP40 = 891,
    
    /**
     */
    ACT_DOD_RELOAD_MP44 = 892,
    
    /**
     */
    ACT_DOD_RELOAD_BOLT = 893,
    
    /**
     */
    ACT_DOD_RELOAD_M1CARBINE = 894,
    
    /**
     */
    ACT_DOD_RELOAD_TOMMY = 895,
    
    /**
     */
    ACT_DOD_RELOAD_GREASEGUN = 896,
    
    /**
     */
    ACT_DOD_RELOAD_PISTOL = 897,
    
    /**
     */
    ACT_DOD_RELOAD_FG42 = 898,
    
    /**
     */
    ACT_DOD_RELOAD_RIFLE = 899,
    
    /**
     */
    ACT_DOD_RELOAD_RIFLEGRENADE = 900,
    
    /**
     */
    ACT_DOD_RELOAD_C96 = 901,
    
    /**
     */
    ACT_DOD_RELOAD_CROUCH_BAR = 902,
    
    /**
     */
    ACT_DOD_RELOAD_CROUCH_RIFLE = 903,
    
    /**
     */
    ACT_DOD_RELOAD_CROUCH_RIFLEGRENADE = 904,
    
    /**
     */
    ACT_DOD_RELOAD_CROUCH_BOLT = 905,
    
    /**
     */
    ACT_DOD_RELOAD_CROUCH_MP44 = 906,
    
    /**
     */
    ACT_DOD_RELOAD_CROUCH_MP40 = 907,
    
    /**
     */
    ACT_DOD_RELOAD_CROUCH_TOMMY = 908,
    
    /**
     */
    ACT_DOD_RELOAD_CROUCH_BAZOOKA = 909,
    
    /**
     */
    ACT_DOD_RELOAD_CROUCH_PSCHRECK = 910,
    
    /**
     */
    ACT_DOD_RELOAD_CROUCH_PISTOL = 911,
    
    /**
     */
    ACT_DOD_RELOAD_CROUCH_M1CARBINE = 912,
    
    /**
     */
    ACT_DOD_RELOAD_CROUCH_C96 = 913,
    
    /**
     */
    ACT_DOD_RELOAD_BAZOOKA = 914,
    
    /**
     */
    ACT_DOD_ZOOMLOAD_BAZOOKA = 915,
    
    /**
     */
    ACT_DOD_RELOAD_PSCHRECK = 916,
    
    /**
     */
    ACT_DOD_ZOOMLOAD_PSCHRECK = 917,
    
    /**
     */
    ACT_DOD_RELOAD_DEPLOYED_FG42 = 918,
    
    /**
     */
    ACT_DOD_RELOAD_DEPLOYED_30CAL = 919,
    
    /**
     */
    ACT_DOD_RELOAD_DEPLOYED_MG = 920,
    
    /**
     */
    ACT_DOD_RELOAD_DEPLOYED_MG34 = 921,
    
    /**
     */
    ACT_DOD_RELOAD_DEPLOYED_BAR = 922,
    
    /**
     */
    ACT_DOD_RELOAD_PRONE_PISTOL = 923,
    
    /**
     */
    ACT_DOD_RELOAD_PRONE_GARAND = 924,
    
    /**
     */
    ACT_DOD_RELOAD_PRONE_M1CARBINE = 925,
    
    /**
     */
    ACT_DOD_RELOAD_PRONE_BOLT = 926,
    
    /**
     */
    ACT_DOD_RELOAD_PRONE_K43 = 927,
    
    /**
     */
    ACT_DOD_RELOAD_PRONE_MP40 = 928,
    
    /**
     */
    ACT_DOD_RELOAD_PRONE_MP44 = 929,
    
    /**
     */
    ACT_DOD_RELOAD_PRONE_BAR = 930,
    
    /**
     */
    ACT_DOD_RELOAD_PRONE_GREASEGUN = 931,
    
    /**
     */
    ACT_DOD_RELOAD_PRONE_TOMMY = 932,
    
    /**
     */
    ACT_DOD_RELOAD_PRONE_FG42 = 933,
    
    /**
     */
    ACT_DOD_RELOAD_PRONE_RIFLE = 934,
    
    /**
     */
    ACT_DOD_RELOAD_PRONE_RIFLEGRENADE = 935,
    
    /**
     */
    ACT_DOD_RELOAD_PRONE_C96 = 936,
    
    /**
     */
    ACT_DOD_RELOAD_PRONE_BAZOOKA = 937,
    
    /**
     */
    ACT_DOD_ZOOMLOAD_PRONE_BAZOOKA = 938,
    
    /**
     */
    ACT_DOD_RELOAD_PRONE_PSCHRECK = 939,
    
    /**
     */
    ACT_DOD_ZOOMLOAD_PRONE_PSCHRECK = 940,
    
    /**
     */
    ACT_DOD_RELOAD_PRONE_DEPLOYED_BAR = 941,
    
    /**
     */
    ACT_DOD_RELOAD_PRONE_DEPLOYED_FG42 = 942,
    
    /**
     */
    ACT_DOD_RELOAD_PRONE_DEPLOYED_30CAL = 943,
    
    /**
     */
    ACT_DOD_RELOAD_PRONE_DEPLOYED_MG = 944,
    
    /**
     */
    ACT_DOD_RELOAD_PRONE_DEPLOYED_MG34 = 945,
    
    /**
     */
    ACT_DOD_PRONE_ZOOM_FORWARD_RIFLE = 946,
    
    /**
     */
    ACT_DOD_PRONE_ZOOM_FORWARD_BOLT = 947,
    
    /**
     */
    ACT_DOD_PRONE_ZOOM_FORWARD_BAZOOKA = 948,
    
    /**
     */
    ACT_DOD_PRONE_ZOOM_FORWARD_PSCHRECK = 949,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_CROUCH = 950,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_CROUCH_SPADE = 951,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_CROUCH_KNIFE = 952,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_CROUCH_GREN_FRAG = 953,
    
    /**
     */
    ACT_DOD_PRIMARYATTACK_CROUCH_GREN_STICK = 954,
    
    /**
     */
    ACT_DOD_SECONDARYATTACK_CROUCH = 955,
    
    /**
     */
    ACT_DOD_SECONDARYATTACK_CROUCH_TOMMY = 956,
    
    /**
     */
    ACT_DOD_SECONDARYATTACK_CROUCH_MP40 = 957,
    
    /**
     */
    ACT_DOD_HS_IDLE = 958,
    
    /**
     */
    ACT_DOD_HS_CROUCH = 959,
    
    /**
     */
    ACT_DOD_HS_IDLE_30CAL = 960,
    
    /**
     */
    ACT_DOD_HS_IDLE_BAZOOKA = 961,
    
    /**
     */
    ACT_DOD_HS_IDLE_PSCHRECK = 962,
    
    /**
     */
    ACT_DOD_HS_IDLE_KNIFE = 963,
    
    /**
     */
    ACT_DOD_HS_IDLE_MG42 = 964,
    
    /**
     */
    ACT_DOD_HS_IDLE_PISTOL = 965,
    
    /**
     */
    ACT_DOD_HS_IDLE_STICKGRENADE = 966,
    
    /**
     */
    ACT_DOD_HS_IDLE_TOMMY = 967,
    
    /**
     */
    ACT_DOD_HS_IDLE_MP44 = 968,
    
    /**
     */
    ACT_DOD_HS_IDLE_K98 = 969,
    
    /**
     */
    ACT_DOD_HS_CROUCH_30CAL = 970,
    
    /**
     */
    ACT_DOD_HS_CROUCH_BAZOOKA = 971,
    
    /**
     */
    ACT_DOD_HS_CROUCH_PSCHRECK = 972,
    
    /**
     */
    ACT_DOD_HS_CROUCH_KNIFE = 973,
    
    /**
     */
    ACT_DOD_HS_CROUCH_MG42 = 974,
    
    /**
     */
    ACT_DOD_HS_CROUCH_PISTOL = 975,
    
    /**
     */
    ACT_DOD_HS_CROUCH_STICKGRENADE = 976,
    
    /**
     */
    ACT_DOD_HS_CROUCH_TOMMY = 977,
    
    /**
     */
    ACT_DOD_HS_CROUCH_MP44 = 978,
    
    /**
     */
    ACT_DOD_HS_CROUCH_K98 = 979,
    
    /**
     */
    ACT_DOD_STAND_IDLE_TNT = 980,
    
    /**
     */
    ACT_DOD_CROUCH_IDLE_TNT = 981,
    
    /**
     */
    ACT_DOD_CROUCHWALK_IDLE_TNT = 982,
    
    /**
     */
    ACT_DOD_WALK_IDLE_TNT = 983,
    
    /**
     */
    ACT_DOD_RUN_IDLE_TNT = 984,
    
    /**
     */
    ACT_DOD_SPRINT_IDLE_TNT = 985,
    
    /**
     */
    ACT_DOD_PRONEWALK_IDLE_TNT = 986,
    
    /**
     */
    ACT_DOD_PLANT_TNT = 987,
    
    /**
     */
    ACT_DOD_DEFUSE_TNT = 988,
    
    /**
     */
    ACT_VM_FIZZLE = 989,
    
    /**
     */
    ACT_MP_STAND_IDLE = 990,
    
    /**
     */
    ACT_MP_CROUCH_IDLE = 991,
    
    /**
     */
    ACT_MP_CROUCH_DEPLOYED_IDLE = 992,
    
    /**
     */
    ACT_MP_CROUCH_DEPLOYED = 993,
    
    /**
     */
    ACT_MP_DEPLOYED_IDLE = 995,
    
    /**
     */
    ACT_MP_RUN = 996,
    
    /**
     */
    ACT_MP_WALK = 997,
    
    /**
     */
    ACT_MP_AIRWALK = 998,
    
    /**
     */
    ACT_MP_CROUCHWALK = 999,
    
    /**
     */
    ACT_MP_SPRINT = 1000,
    
    /**
     */
    ACT_MP_JUMP = 1001,
    
    /**
     */
    ACT_MP_JUMP_START = 1002,
    
    /**
     */
    ACT_MP_JUMP_FLOAT = 1003,
    
    /**
     */
    ACT_MP_JUMP_LAND = 1004,
    
    /**
     */
    ACT_MP_DOUBLEJUMP = 1005,
    
    /**
     */
    ACT_MP_SWIM = 1006,
    
    /**
     */
    ACT_MP_DEPLOYED = 1007,
    
    /**
     */
    ACT_MP_SWIM_DEPLOYED = 1008,
    
    /**
     */
    ACT_MP_VCD = 1009,
    
    /**
     */
    ACT_MP_SWIM_IDLE = 1010,
    
    /**
     */
    ACT_MP_ATTACK_STAND_PRIMARYFIRE = 1011,
    
    /**
     */
    ACT_MP_ATTACK_STAND_PRIMARYFIRE_DEPLOYED = 1012,
    
    /**
     */
    ACT_MP_ATTACK_STAND_SECONDARYFIRE = 1013,
    
    /**
     */
    ACT_MP_ATTACK_STAND_GRENADE = 1014,
    
    /**
     */
    ACT_MP_ATTACK_CROUCH_PRIMARYFIRE = 1015,
    
    /**
     */
    ACT_MP_ATTACK_CROUCH_PRIMARYFIRE_DEPLOYED = 1016,
    
    /**
     */
    ACT_MP_ATTACK_CROUCH_SECONDARYFIRE = 1017,
    
    /**
     */
    ACT_MP_ATTACK_CROUCH_GRENADE = 1018,
    
    /**
     */
    ACT_MP_ATTACK_SWIM_PRIMARYFIRE = 1019,
    
    /**
     */
    ACT_MP_ATTACK_SWIM_SECONDARYFIRE = 1020,
    
    /**
     */
    ACT_MP_ATTACK_SWIM_GRENADE = 1021,
    
    /**
     */
    ACT_MP_ATTACK_AIRWALK_PRIMARYFIRE = 1022,
    
    /**
     */
    ACT_MP_ATTACK_AIRWALK_SECONDARYFIRE = 1023,
    
    /**
     */
    ACT_MP_ATTACK_AIRWALK_GRENADE = 1024,
    
    /**
     */
    ACT_MP_RELOAD_STAND = 1025,
    
    /**
     */
    ACT_MP_RELOAD_STAND_LOOP = 1026,
    
    /**
     */
    ACT_MP_RELOAD_STAND_END = 1027,
    
    /**
     */
    ACT_MP_RELOAD_CROUCH = 1028,
    
    /**
     */
    ACT_MP_RELOAD_CROUCH_LOOP = 1029,
    
    /**
     */
    ACT_MP_RELOAD_CROUCH_END = 1030,
    
    /**
     */
    ACT_MP_RELOAD_SWIM = 1031,
    
    /**
     */
    ACT_MP_RELOAD_SWIM_LOOP = 1032,
    
    /**
     */
    ACT_MP_RELOAD_SWIM_END = 1033,
    
    /**
     */
    ACT_MP_RELOAD_AIRWALK = 1034,
    
    /**
     */
    ACT_MP_RELOAD_AIRWALK_LOOP = 1035,
    
    /**
     */
    ACT_MP_RELOAD_AIRWALK_END = 1036,
    
    /**
     */
    ACT_MP_ATTACK_STAND_PREFIRE = 1037,
    
    /**
     */
    ACT_MP_ATTACK_STAND_POSTFIRE = 1038,
    
    /**
     */
    ACT_MP_ATTACK_STAND_STARTFIRE = 1039,
    
    /**
     */
    ACT_MP_ATTACK_CROUCH_PREFIRE = 1040,
    
    /**
     */
    ACT_MP_ATTACK_CROUCH_POSTFIRE = 1041,
    
    /**
     */
    ACT_MP_ATTACK_SWIM_PREFIRE = 1042,
    
    /**
     */
    ACT_MP_ATTACK_SWIM_POSTFIRE = 1043,
    
    /**
     */
    ACT_MP_STAND_PRIMARY = 1044,
    
    /**
     */
    ACT_MP_CROUCH_PRIMARY = 1045,
    
    /**
     */
    ACT_MP_RUN_PRIMARY = 1046,
    
    /**
     */
    ACT_MP_WALK_PRIMARY = 1047,
    
    /**
     */
    ACT_MP_AIRWALK_PRIMARY = 1048,
    
    /**
     */
    ACT_MP_CROUCHWALK_PRIMARY = 1049,
    
    /**
     */
    ACT_MP_JUMP_PRIMARY = 1050,
    
    /**
     */
    ACT_MP_JUMP_START_PRIMARY = 1051,
    
    /**
     */
    ACT_MP_JUMP_FLOAT_PRIMARY = 1052,
    
    /**
     */
    ACT_MP_JUMP_LAND_PRIMARY = 1053,
    
    /**
     */
    ACT_MP_SWIM_PRIMARY = 1054,
    
    /**
     */
    ACT_MP_DEPLOYED_PRIMARY = 1055,
    
    /**
     */
    ACT_MP_SWIM_DEPLOYED_PRIMARY = 1056,
    
    /**
     */
    ACT_MP_ATTACK_STAND_PRIMARY = 1059,
    
    /**
     */
    ACT_MP_ATTACK_STAND_PRIMARY_DEPLOYED = 1060,
    
    /**
     */
    ACT_MP_ATTACK_CROUCH_PRIMARY = 1061,
    
    /**
     */
    ACT_MP_ATTACK_CROUCH_PRIMARY_DEPLOYED = 1062,
    
    /**
     */
    ACT_MP_ATTACK_SWIM_PRIMARY = 1063,
    
    /**
     */
    ACT_MP_ATTACK_AIRWALK_PRIMARY = 1064,
    
    /**
     */
    ACT_MP_RELOAD_STAND_PRIMARY = 1065,
    
    /**
     */
    ACT_MP_RELOAD_STAND_PRIMARY_LOOP = 1066,
    
    /**
     */
    ACT_MP_RELOAD_STAND_PRIMARY_END = 1067,
    
    /**
     */
    ACT_MP_RELOAD_CROUCH_PRIMARY = 1068,
    
    /**
     */
    ACT_MP_RELOAD_CROUCH_PRIMARY_LOOP = 1069,
    
    /**
     */
    ACT_MP_RELOAD_CROUCH_PRIMARY_END = 1070,
    
    /**
     */
    ACT_MP_RELOAD_SWIM_PRIMARY = 1071,
    
    /**
     */
    ACT_MP_RELOAD_SWIM_PRIMARY_LOOP = 1072,
    
    /**
     */
    ACT_MP_RELOAD_SWIM_PRIMARY_END = 1073,
    
    /**
     */
    ACT_MP_RELOAD_AIRWALK_PRIMARY = 1074,
    
    /**
     */
    ACT_MP_RELOAD_AIRWALK_PRIMARY_LOOP = 1075,
    
    /**
     */
    ACT_MP_RELOAD_AIRWALK_PRIMARY_END = 1076,
    
    /**
     */
    ACT_MP_ATTACK_STAND_GRENADE_PRIMARY = 1105,
    
    /**
     */
    ACT_MP_ATTACK_CROUCH_GRENADE_PRIMARY = 1106,
    
    /**
     */
    ACT_MP_ATTACK_SWIM_GRENADE_PRIMARY = 1107,
    
    /**
     */
    ACT_MP_ATTACK_AIRWALK_GRENADE_PRIMARY = 1108,
    
    /**
     */
    ACT_MP_STAND_SECONDARY = 1109,
    
    /**
     */
    ACT_MP_CROUCH_SECONDARY = 1110,
    
    /**
     */
    ACT_MP_RUN_SECONDARY = 1111,
    
    /**
     */
    ACT_MP_WALK_SECONDARY = 1112,
    
    /**
     */
    ACT_MP_AIRWALK_SECONDARY = 1113,
    
    /**
     */
    ACT_MP_CROUCHWALK_SECONDARY = 1114,
    
    /**
     */
    ACT_MP_JUMP_SECONDARY = 1115,
    
    /**
     */
    ACT_MP_JUMP_START_SECONDARY = 1116,
    
    /**
     */
    ACT_MP_JUMP_FLOAT_SECONDARY = 1117,
    
    /**
     */
    ACT_MP_JUMP_LAND_SECONDARY = 1118,
    
    /**
     */
    ACT_MP_SWIM_SECONDARY = 1119,
    
    /**
     */
    ACT_MP_ATTACK_STAND_SECONDARY = 1120,
    
    /**
     */
    ACT_MP_ATTACK_CROUCH_SECONDARY = 1121,
    
    /**
     */
    ACT_MP_ATTACK_SWIM_SECONDARY = 1122,
    
    /**
     */
    ACT_MP_ATTACK_AIRWALK_SECONDARY = 1123,
    
    /**
     */
    ACT_MP_RELOAD_STAND_SECONDARY = 1124,
    
    /**
     */
    ACT_MP_RELOAD_STAND_SECONDARY_LOOP = 1125,
    
    /**
     */
    ACT_MP_RELOAD_STAND_SECONDARY_END = 1126,
    
    /**
     */
    ACT_MP_RELOAD_CROUCH_SECONDARY = 1127,
    
    /**
     */
    ACT_MP_RELOAD_CROUCH_SECONDARY_LOOP = 1128,
    
    /**
     */
    ACT_MP_RELOAD_CROUCH_SECONDARY_END = 1129,
    
    /**
     */
    ACT_MP_RELOAD_SWIM_SECONDARY = 1130,
    
    /**
     */
    ACT_MP_RELOAD_SWIM_SECONDARY_LOOP = 1131,
    
    /**
     */
    ACT_MP_RELOAD_SWIM_SECONDARY_END = 1132,
    
    /**
     */
    ACT_MP_RELOAD_AIRWALK_SECONDARY = 1133,
    
    /**
     */
    ACT_MP_RELOAD_AIRWALK_SECONDARY_LOOP = 1134,
    
    /**
     */
    ACT_MP_RELOAD_AIRWALK_SECONDARY_END = 1135,
    
    /**
     */
    ACT_MP_ATTACK_STAND_GRENADE_SECONDARY = 1140,
    
    /**
     */
    ACT_MP_ATTACK_CROUCH_GRENADE_SECONDARY = 1141,
    
    /**
     */
    ACT_MP_ATTACK_SWIM_GRENADE_SECONDARY = 1142,
    
    /**
     */
    ACT_MP_ATTACK_AIRWALK_GRENADE_SECONDARY = 1143,
    
    /**
     */
    ACT_MP_STAND_MELEE = 1171,
    
    /**
     */
    ACT_MP_CROUCH_MELEE = 1172,
    
    /**
     */
    ACT_MP_RUN_MELEE = 1173,
    
    /**
     */
    ACT_MP_WALK_MELEE = 1174,
    
    /**
     */
    ACT_MP_AIRWALK_MELEE = 1175,
    
    /**
     */
    ACT_MP_CROUCHWALK_MELEE = 1176,
    
    /**
     */
    ACT_MP_JUMP_MELEE = 1177,
    
    /**
     */
    ACT_MP_JUMP_START_MELEE = 1178,
    
    /**
     */
    ACT_MP_JUMP_FLOAT_MELEE = 1179,
    
    /**
     */
    ACT_MP_JUMP_LAND_MELEE = 1180,
    
    /**
     */
    ACT_MP_SWIM_MELEE = 1181,
    
    /**
     */
    ACT_MP_ATTACK_STAND_MELEE = 1182,
    
    /**
     */
    ACT_MP_ATTACK_STAND_MELEE_SECONDARY = 1183,
    
    /**
     */
    ACT_MP_ATTACK_CROUCH_MELEE = 1184,
    
    /**
     */
    ACT_MP_ATTACK_CROUCH_MELEE_SECONDARY = 1185,
    
    /**
     */
    ACT_MP_ATTACK_SWIM_MELEE = 1186,
    
    /**
     */
    ACT_MP_ATTACK_AIRWALK_MELEE = 1187,
    
    /**
     */
    ACT_MP_ATTACK_STAND_GRENADE_MELEE = 1188,
    
    /**
     */
    ACT_MP_ATTACK_CROUCH_GRENADE_MELEE = 1189,
    
    /**
     */
    ACT_MP_ATTACK_SWIM_GRENADE_MELEE = 1190,
    
    /**
     */
    ACT_MP_ATTACK_AIRWALK_GRENADE_MELEE = 1191,
    
    /**
     */
    ACT_MP_GESTURE_FLINCH = 1258,
    
    /**
     */
    ACT_MP_GESTURE_FLINCH_PRIMARY = 1259,
    
    /**
     */
    ACT_MP_GESTURE_FLINCH_SECONDARY = 1260,
    
    /**
     */
    ACT_MP_GESTURE_FLINCH_MELEE = 1261,
    
    /**
     */
    ACT_MP_GESTURE_FLINCH_HEAD = 1264,
    
    /**
     */
    ACT_MP_GESTURE_FLINCH_CHEST = 1265,
    
    /**
     */
    ACT_MP_GESTURE_FLINCH_STOMACH = 1266,
    
    /**
     */
    ACT_MP_GESTURE_FLINCH_LEFTARM = 1267,
    
    /**
     */
    ACT_MP_GESTURE_FLINCH_RIGHTARM = 1268,
    
    /**
     */
    ACT_MP_GESTURE_FLINCH_LEFTLEG = 1269,
    
    /**
     */
    ACT_MP_GESTURE_FLINCH_RIGHTLEG = 1270,
    
    /**
     */
    ACT_MP_GRENADE1_DRAW = 1271,
    
    /**
     */
    ACT_MP_GRENADE1_IDLE = 1272,
    
    /**
     */
    ACT_MP_GRENADE1_ATTACK = 1273,
    
    /**
     */
    ACT_MP_GRENADE2_DRAW = 1274,
    
    /**
     */
    ACT_MP_GRENADE2_IDLE = 1275,
    
    /**
     */
    ACT_MP_GRENADE2_ATTACK = 1276,
    
    /**
     */
    ACT_MP_PRIMARY_GRENADE1_DRAW = 1277,
    
    /**
     */
    ACT_MP_PRIMARY_GRENADE1_IDLE = 1278,
    
    /**
     */
    ACT_MP_PRIMARY_GRENADE1_ATTACK = 1279,
    
    /**
     */
    ACT_MP_PRIMARY_GRENADE2_DRAW = 1280,
    
    /**
     */
    ACT_MP_PRIMARY_GRENADE2_IDLE = 1281,
    
    /**
     */
    ACT_MP_PRIMARY_GRENADE2_ATTACK = 1282,
    
    /**
     */
    ACT_MP_SECONDARY_GRENADE1_DRAW = 1283,
    
    /**
     */
    ACT_MP_SECONDARY_GRENADE1_IDLE = 1284,
    
    /**
     */
    ACT_MP_SECONDARY_GRENADE1_ATTACK = 1285,
    
    /**
     */
    ACT_MP_SECONDARY_GRENADE2_DRAW = 1286,
    
    /**
     */
    ACT_MP_SECONDARY_GRENADE2_IDLE = 1287,
    
    /**
     */
    ACT_MP_SECONDARY_GRENADE2_ATTACK = 1288,
    
    /**
     */
    ACT_MP_MELEE_GRENADE1_DRAW = 1289,
    
    /**
     */
    ACT_MP_MELEE_GRENADE1_IDLE = 1290,
    
    /**
     */
    ACT_MP_MELEE_GRENADE1_ATTACK = 1291,
    
    /**
     */
    ACT_MP_MELEE_GRENADE2_DRAW = 1292,
    
    /**
     */
    ACT_MP_MELEE_GRENADE2_IDLE = 1293,
    
    /**
     */
    ACT_MP_MELEE_GRENADE2_ATTACK = 1294,
    
    /**
     */
    ACT_MP_STAND_BUILDING = 1307,
    
    /**
     */
    ACT_MP_CROUCH_BUILDING = 1308,
    
    /**
     */
    ACT_MP_RUN_BUILDING = 1309,
    
    /**
     */
    ACT_MP_WALK_BUILDING = 1310,
    
    /**
     */
    ACT_MP_AIRWALK_BUILDING = 1311,
    
    /**
     */
    ACT_MP_CROUCHWALK_BUILDING = 1312,
    
    /**
     */
    ACT_MP_JUMP_BUILDING = 1313,
    
    /**
     */
    ACT_MP_JUMP_START_BUILDING = 1314,
    
    /**
     */
    ACT_MP_JUMP_FLOAT_BUILDING = 1315,
    
    /**
     */
    ACT_MP_JUMP_LAND_BUILDING = 1316,
    
    /**
     */
    ACT_MP_SWIM_BUILDING = 1317,
    
    /**
     */
    ACT_MP_ATTACK_STAND_BUILDING = 1318,
    
    /**
     */
    ACT_MP_ATTACK_CROUCH_BUILDING = 1319,
    
    /**
     */
    ACT_MP_ATTACK_SWIM_BUILDING = 1320,
    
    /**
     */
    ACT_MP_ATTACK_AIRWALK_BUILDING = 1321,
    
    /**
     */
    ACT_MP_ATTACK_STAND_GRENADE_BUILDING = 1322,
    
    /**
     */
    ACT_MP_ATTACK_CROUCH_GRENADE_BUILDING = 1323,
    
    /**
     */
    ACT_MP_ATTACK_SWIM_GRENADE_BUILDING = 1324,
    
    /**
     */
    ACT_MP_ATTACK_AIRWALK_GRENADE_BUILDING = 1325,
    
    /**
     */
    ACT_MP_STAND_PDA = 1345,
    
    /**
     */
    ACT_MP_CROUCH_PDA = 1346,
    
    /**
     */
    ACT_MP_RUN_PDA = 1347,
    
    /**
     */
    ACT_MP_WALK_PDA = 1348,
    
    /**
     */
    ACT_MP_AIRWALK_PDA = 1349,
    
    /**
     */
    ACT_MP_CROUCHWALK_PDA = 1350,
    
    /**
     */
    ACT_MP_JUMP_PDA = 1351,
    
    /**
     */
    ACT_MP_JUMP_START_PDA = 1352,
    
    /**
     */
    ACT_MP_JUMP_FLOAT_PDA = 1353,
    
    /**
     */
    ACT_MP_JUMP_LAND_PDA = 1354,
    
    /**
     */
    ACT_MP_SWIM_PDA = 1355,
    
    /**
     */
    ACT_MP_ATTACK_STAND_PDA = 1356,
    
    /**
     */
    ACT_MP_ATTACK_SWIM_PDA = 1357,
    
    /**
     */
    ACT_MP_GESTURE_VC_HANDMOUTH = 1377,
    
    /**
     */
    ACT_MP_GESTURE_VC_FINGERPOINT = 1378,
    
    /**
     */
    ACT_MP_GESTURE_VC_FISTPUMP = 1379,
    
    /**
     */
    ACT_MP_GESTURE_VC_THUMBSUP = 1380,
    
    /**
     */
    ACT_MP_GESTURE_VC_NODYES = 1381,
    
    /**
     */
    ACT_MP_GESTURE_VC_NODNO = 1382,
    
    /**
     */
    ACT_MP_GESTURE_VC_HANDMOUTH_PRIMARY = 1383,
    
    /**
     */
    ACT_MP_GESTURE_VC_FINGERPOINT_PRIMARY = 1384,
    
    /**
     */
    ACT_MP_GESTURE_VC_FISTPUMP_PRIMARY = 1385,
    
    /**
     */
    ACT_MP_GESTURE_VC_THUMBSUP_PRIMARY = 1386,
    
    /**
     */
    ACT_MP_GESTURE_VC_NODYES_PRIMARY = 1387,
    
    /**
     */
    ACT_MP_GESTURE_VC_NODNO_PRIMARY = 1388,
    
    /**
     */
    ACT_MP_GESTURE_VC_HANDMOUTH_SECONDARY = 1389,
    
    /**
     */
    ACT_MP_GESTURE_VC_FINGERPOINT_SECONDARY = 1390,
    
    /**
     */
    ACT_MP_GESTURE_VC_FISTPUMP_SECONDARY = 1391,
    
    /**
     */
    ACT_MP_GESTURE_VC_THUMBSUP_SECONDARY = 1392,
    
    /**
     */
    ACT_MP_GESTURE_VC_NODYES_SECONDARY = 1393,
    
    /**
     */
    ACT_MP_GESTURE_VC_NODNO_SECONDARY = 1394,
    
    /**
     */
    ACT_MP_GESTURE_VC_HANDMOUTH_MELEE = 1395,
    
    /**
     */
    ACT_MP_GESTURE_VC_FINGERPOINT_MELEE = 1396,
    
    /**
     */
    ACT_MP_GESTURE_VC_FISTPUMP_MELEE = 1397,
    
    /**
     */
    ACT_MP_GESTURE_VC_THUMBSUP_MELEE = 1398,
    
    /**
     */
    ACT_MP_GESTURE_VC_NODYES_MELEE = 1399,
    
    /**
     */
    ACT_MP_GESTURE_VC_NODNO_MELEE = 1400,
    
    /**
     */
    ACT_MP_GESTURE_VC_HANDMOUTH_BUILDING = 1413,
    
    /**
     */
    ACT_MP_GESTURE_VC_FINGERPOINT_BUILDING = 1414,
    
    /**
     */
    ACT_MP_GESTURE_VC_FISTPUMP_BUILDING = 1415,
    
    /**
     */
    ACT_MP_GESTURE_VC_THUMBSUP_BUILDING = 1416,
    
    /**
     */
    ACT_MP_GESTURE_VC_NODYES_BUILDING = 1417,
    
    /**
     */
    ACT_MP_GESTURE_VC_NODNO_BUILDING = 1418,
    
    /**
     */
    ACT_MP_GESTURE_VC_HANDMOUTH_PDA = 1419,
    
    /**
     */
    ACT_MP_GESTURE_VC_FINGERPOINT_PDA = 1420,
    
    /**
     */
    ACT_MP_GESTURE_VC_FISTPUMP_PDA = 1421,
    
    /**
     */
    ACT_MP_GESTURE_VC_THUMBSUP_PDA = 1422,
    
    /**
     */
    ACT_MP_GESTURE_VC_NODYES_PDA = 1423,
    
    /**
     */
    ACT_MP_GESTURE_VC_NODNO_PDA = 1424,
    
    /**
     */
    ACT_VM_UNUSABLE = 1428,
    
    /**
     */
    ACT_VM_UNUSABLE_TO_USABLE = 1429,
    
    /**
     */
    ACT_VM_USABLE_TO_UNUSABLE = 1430,
    
    /**
     */
    ACT_GMOD_GESTURE_AGREE = 1610,
    
    /**
     */
    ACT_GMOD_GESTURE_BECON = 1611,
    
    /**
     */
    ACT_GMOD_GESTURE_BOW = 1612,
    
    /**
     */
    ACT_GMOD_GESTURE_DISAGREE = 1613,
    
    /**
     */
    ACT_GMOD_TAUNT_SALUTE = 1614,
    
    /**
     */
    ACT_GMOD_GESTURE_WAVE = 1615,
    
    /**
     */
    ACT_GMOD_TAUNT_PERSISTENCE = 1616,
    
    /**
     */
    ACT_GMOD_TAUNT_MUSCLE = 1617,
    
    /**
     */
    ACT_GMOD_TAUNT_LAUGH = 1618,
    
    /**
     */
    ACT_GMOD_GESTURE_POINT = 1619,
    
    /**
     */
    ACT_GMOD_TAUNT_CHEER = 1620,
    
    /**
     */
    ACT_HL2MP_RUN_FAST = 1621,
    
    /**
     */
    ACT_HL2MP_RUN_CHARGING = 1622,
    
    /**
     */
    ACT_HL2MP_RUN_PANICKED = 1623,
    
    /**
     */
    ACT_HL2MP_RUN_PROTECTED = 1624,
    
    /**
     */
    ACT_HL2MP_IDLE_MELEE_ANGRY = 1625,
    
    /**
     */
    ACT_HL2MP_ZOMBIE_SLUMP_IDLE = 1626,
    
    /**
     */
    ACT_HL2MP_ZOMBIE_SLUMP_RISE = 1627,
    
    /**
     */
    ACT_HL2MP_WALK_ZOMBIE_01 = 1628,
    
    /**
     */
    ACT_HL2MP_WALK_ZOMBIE_02 = 1629,
    
    /**
     */
    ACT_HL2MP_WALK_ZOMBIE_03 = 1630,
    
    /**
     */
    ACT_HL2MP_WALK_ZOMBIE_04 = 1631,
    
    /**
     */
    ACT_HL2MP_WALK_ZOMBIE_05 = 1632,
    
    /**
     */
    ACT_HL2MP_WALK_CROUCH_ZOMBIE_01 = 1633,
    
    /**
     */
    ACT_HL2MP_WALK_CROUCH_ZOMBIE_02 = 1634,
    
    /**
     */
    ACT_HL2MP_WALK_CROUCH_ZOMBIE_03 = 1635,
    
    /**
     */
    ACT_HL2MP_WALK_CROUCH_ZOMBIE_04 = 1636,
    
    /**
     */
    ACT_HL2MP_WALK_CROUCH_ZOMBIE_05 = 1637,
    
    /**
     */
    ACT_HL2MP_IDLE_CROUCH_ZOMBIE_01 = 1638,
    
    /**
     */
    ACT_HL2MP_IDLE_CROUCH_ZOMBIE_02 = 1639,
    
    /**
     */
    ACT_GMOD_GESTURE_RANGE_ZOMBIE = 1640,
    
    /**
     */
    ACT_GMOD_GESTURE_TAUNT_ZOMBIE = 1641,
    
    /**
     */
    ACT_GMOD_TAUNT_DANCE = 1642,
    
    /**
     */
    ACT_GMOD_TAUNT_ROBOT = 1643,
    
    /**
     */
    ACT_GMOD_GESTURE_RANGE_ZOMBIE_SPECIAL = 1644,
    
    /**
     */
    ACT_GMOD_GESTURE_RANGE_FRENZY = 1645,
    
    /**
     */
    ACT_HL2MP_RUN_ZOMBIE_FAST = 1646,
    
    /**
     */
    ACT_HL2MP_WALK_ZOMBIE_06 = 1647,
    
    /**
     */
    ACT_ZOMBIE_LEAP_START = 1648,
    
    /**
     */
    ACT_ZOMBIE_LEAPING = 1649,
    
    /**
     */
    ACT_ZOMBIE_CLIMB_UP = 1650,
    
    /**
     */
    ACT_ZOMBIE_CLIMB_START = 1651,
    
    /**
     */
    ACT_ZOMBIE_CLIMB_END = 1652,
    
    /**
     */
    ACT_HL2MP_IDLE_MAGIC = 1653,
    
    /**
     */
    ACT_HL2MP_WALK_MAGIC = 1654,
    
    /**
     */
    ACT_HL2MP_RUN_MAGIC = 1655,
    
    /**
     */
    ACT_HL2MP_IDLE_CROUCH_MAGIC = 1656,
    
    /**
     */
    ACT_HL2MP_WALK_CROUCH_MAGIC = 1657,
    
    /**
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_MAGIC = 1658,
    
    /**
     */
    ACT_HL2MP_GESTURE_RELOAD_MAGIC = 1659,
    
    /**
     */
    ACT_HL2MP_JUMP_MAGIC = 1660,
    
    /**
     */
    ACT_HL2MP_SWIM_IDLE_MAGIC = 1661,
    
    /**
     */
    ACT_HL2MP_SWIM_MAGIC = 1662,
    
    /**
     */
    ACT_HL2MP_IDLE_REVOLVER = 1663,
    
    /**
     */
    ACT_HL2MP_WALK_REVOLVER = 1664,
    
    /**
     */
    ACT_HL2MP_RUN_REVOLVER = 1665,
    
    /**
     */
    ACT_HL2MP_IDLE_CROUCH_REVOLVER = 1666,
    
    /**
     */
    ACT_HL2MP_WALK_CROUCH_REVOLVER = 1667,
    
    /**
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_REVOLVER = 1668,
    
    /**
     */
    ACT_HL2MP_GESTURE_RELOAD_REVOLVER = 1669,
    
    /**
     */
    ACT_HL2MP_JUMP_REVOLVER = 1670,
    
    /**
     */
    ACT_HL2MP_SWIM_IDLE_REVOLVER = 1671,
    
    /**
     */
    ACT_HL2MP_SWIM_REVOLVER = 1672,
    
    /**
     */
    ACT_HL2MP_IDLE_CAMERA = 1673,
    
    /**
     */
    ACT_HL2MP_WALK_CAMERA = 1674,
    
    /**
     */
    ACT_HL2MP_RUN_CAMERA = 1675,
    
    /**
     */
    ACT_HL2MP_IDLE_CROUCH_CAMERA = 1676,
    
    /**
     */
    ACT_HL2MP_WALK_CROUCH_CAMERA = 1677,
    
    /**
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_CAMERA = 1678,
    
    /**
     */
    ACT_HL2MP_GESTURE_RELOAD_CAMERA = 1679,
    
    /**
     */
    ACT_HL2MP_JUMP_CAMERA = 1680,
    
    /**
     */
    ACT_HL2MP_SWIM_IDLE_CAMERA = 1681,
    
    /**
     */
    ACT_HL2MP_SWIM_CAMERA = 1682,
    
    /**
     */
    ACT_HL2MP_IDLE_ANGRY = 1683,
    
    /**
     */
    ACT_HL2MP_WALK_ANGRY = 1684,
    
    /**
     */
    ACT_HL2MP_RUN_ANGRY = 1685,
    
    /**
     */
    ACT_HL2MP_IDLE_CROUCH_ANGRY = 1686,
    
    /**
     */
    ACT_HL2MP_WALK_CROUCH_ANGRY = 1687,
    
    /**
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_ANGRY = 1688,
    
    /**
     */
    ACT_HL2MP_GESTURE_RELOAD_ANGRY = 1689,
    
    /**
     */
    ACT_HL2MP_JUMP_ANGRY = 1690,
    
    /**
     */
    ACT_HL2MP_SWIM_IDLE_ANGRY = 1691,
    
    /**
     */
    ACT_HL2MP_SWIM_ANGRY = 1692,
    
    /**
     */
    ACT_HL2MP_IDLE_SCARED = 1693,
    
    /**
     */
    ACT_HL2MP_WALK_SCARED = 1694,
    
    /**
     */
    ACT_HL2MP_RUN_SCARED = 1695,
    
    /**
     */
    ACT_HL2MP_IDLE_CROUCH_SCARED = 1696,
    
    /**
     */
    ACT_HL2MP_WALK_CROUCH_SCARED = 1697,
    
    /**
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_SCARED = 1698,
    
    /**
     */
    ACT_HL2MP_GESTURE_RELOAD_SCARED = 1699,
    
    /**
     */
    ACT_HL2MP_JUMP_SCARED = 1700,
    
    /**
     */
    ACT_HL2MP_SWIM_IDLE_SCARED = 1701,
    
    /**
     */
    ACT_HL2MP_SWIM_SCARED = 1702,
    
    /**
     */
    ACT_HL2MP_IDLE_ZOMBIE = 1703,
    
    /**
     */
    ACT_HL2MP_WALK_ZOMBIE = 1704,
    
    /**
     */
    ACT_HL2MP_RUN_ZOMBIE = 1705,
    
    /**
     */
    ACT_HL2MP_IDLE_CROUCH_ZOMBIE = 1706,
    
    /**
     */
    ACT_HL2MP_WALK_CROUCH_ZOMBIE = 1707,
    
    /**
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_ZOMBIE = 1708,
    
    /**
     */
    ACT_HL2MP_GESTURE_RELOAD_ZOMBIE = 1709,
    
    /**
     */
    ACT_HL2MP_JUMP_ZOMBIE = 1710,
    
    /**
     */
    ACT_HL2MP_SWIM_IDLE_ZOMBIE = 1711,
    
    /**
     */
    ACT_HL2MP_SWIM_ZOMBIE = 1712,
    
    /**
     */
    ACT_HL2MP_IDLE_SUITCASE = 1713,
    
    /**
     */
    ACT_HL2MP_WALK_SUITCASE = 1714,
    
    /**
     */
    ACT_HL2MP_RUN_SUITCASE = 1715,
    
    /**
     */
    ACT_HL2MP_IDLE_CROUCH_SUITCASE = 1716,
    
    /**
     */
    ACT_HL2MP_WALK_CROUCH_SUITCASE = 1717,
    
    /**
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_SUITCASE = 1718,
    
    /**
     */
    ACT_HL2MP_GESTURE_RELOAD_SUITCASE = 1719,
    
    /**
     */
    ACT_HL2MP_JUMP_SUITCASE = 1720,
    
    /**
     */
    ACT_HL2MP_SWIM_IDLE_SUITCASE = 1721,
    
    /**
     */
    ACT_HL2MP_SWIM_SUITCASE = 1722,
    
    /**
     */
    ACT_HL2MP_IDLE = 1777,
    
    /**
     */
    ACT_HL2MP_WALK = 1778,
    
    /**
     */
    ACT_HL2MP_RUN = 1779,
    
    /**
     */
    ACT_HL2MP_IDLE_CROUCH = 1780,
    
    /**
     */
    ACT_HL2MP_WALK_CROUCH = 1781,
    
    /**
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK = 1782,
    
    /**
     */
    ACT_HL2MP_GESTURE_RELOAD = 1783,
    
    /**
     */
    ACT_HL2MP_JUMP = 1784,
    
    /**
     */
    ACT_HL2MP_SWIM = 1786,
    
    /**
     */
    ACT_HL2MP_IDLE_PISTOL = 1787,
    
    /**
     */
    ACT_HL2MP_WALK_PISTOL = 1788,
    
    /**
     */
    ACT_HL2MP_RUN_PISTOL = 1789,
    
    /**
     */
    ACT_HL2MP_IDLE_CROUCH_PISTOL = 1790,
    
    /**
     */
    ACT_HL2MP_WALK_CROUCH_PISTOL = 1791,
    
    /**
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_PISTOL = 1792,
    
    /**
     */
    ACT_HL2MP_GESTURE_RELOAD_PISTOL = 1793,
    
    /**
     */
    ACT_HL2MP_JUMP_PISTOL = 1794,
    
    /**
     */
    ACT_HL2MP_SWIM_IDLE_PISTOL = 1795,
    
    /**
     */
    ACT_HL2MP_SWIM_PISTOL = 1796,
    
    /**
     */
    ACT_HL2MP_IDLE_SMG1 = 1797,
    
    /**
     */
    ACT_HL2MP_WALK_SMG1 = 1798,
    
    /**
     */
    ACT_HL2MP_RUN_SMG1 = 1799,
    
    /**
     */
    ACT_HL2MP_IDLE_CROUCH_SMG1 = 1800,
    
    /**
     */
    ACT_HL2MP_WALK_CROUCH_SMG1 = 1801,
    
    /**
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_SMG1 = 1802,
    
    /**
     */
    ACT_HL2MP_GESTURE_RELOAD_SMG1 = 1803,
    
    /**
     */
    ACT_HL2MP_JUMP_SMG1 = 1804,
    
    /**
     */
    ACT_HL2MP_SWIM_IDLE_SMG1 = 1805,
    
    /**
     */
    ACT_HL2MP_SWIM_SMG1 = 1806,
    
    /**
     */
    ACT_HL2MP_IDLE_AR2 = 1807,
    
    /**
     */
    ACT_HL2MP_WALK_AR2 = 1808,
    
    /**
     */
    ACT_HL2MP_RUN_AR2 = 1809,
    
    /**
     */
    ACT_HL2MP_IDLE_CROUCH_AR2 = 1810,
    
    /**
     */
    ACT_HL2MP_WALK_CROUCH_AR2 = 1811,
    
    /**
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2 = 1812,
    
    /**
     */
    ACT_HL2MP_GESTURE_RELOAD_AR2 = 1813,
    
    /**
     */
    ACT_HL2MP_JUMP_AR2 = 1814,
    
    /**
     */
    ACT_HL2MP_SWIM_IDLE_AR2 = 1815,
    
    /**
     */
    ACT_HL2MP_SWIM_AR2 = 1816,
    
    /**
     */
    ACT_HL2MP_IDLE_SHOTGUN = 1817,
    
    /**
     */
    ACT_HL2MP_WALK_SHOTGUN = 1818,
    
    /**
     */
    ACT_HL2MP_RUN_SHOTGUN = 1819,
    
    /**
     */
    ACT_HL2MP_IDLE_CROUCH_SHOTGUN = 1820,
    
    /**
     */
    ACT_HL2MP_WALK_CROUCH_SHOTGUN = 1821,
    
    /**
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_SHOTGUN = 1822,
    
    /**
     */
    ACT_HL2MP_GESTURE_RELOAD_SHOTGUN = 1823,
    
    /**
     */
    ACT_HL2MP_JUMP_SHOTGUN = 1824,
    
    /**
     */
    ACT_HL2MP_SWIM_IDLE_SHOTGUN = 1825,
    
    /**
     */
    ACT_HL2MP_SWIM_SHOTGUN = 1826,
    
    /**
     */
    ACT_HL2MP_IDLE_RPG = 1827,
    
    /**
     */
    ACT_HL2MP_WALK_RPG = 1828,
    
    /**
     */
    ACT_HL2MP_RUN_RPG = 1829,
    
    /**
     */
    ACT_HL2MP_IDLE_CROUCH_RPG = 1830,
    
    /**
     */
    ACT_HL2MP_WALK_CROUCH_RPG = 1831,
    
    /**
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_RPG = 1832,
    
    /**
     */
    ACT_HL2MP_GESTURE_RELOAD_RPG = 1833,
    
    /**
     */
    ACT_HL2MP_JUMP_RPG = 1834,
    
    /**
     */
    ACT_HL2MP_SWIM_IDLE_RPG = 1835,
    
    /**
     */
    ACT_HL2MP_SWIM_RPG = 1836,
    
    /**
     */
    ACT_HL2MP_IDLE_GRENADE = 1837,
    
    /**
     */
    ACT_HL2MP_WALK_GRENADE = 1838,
    
    /**
     */
    ACT_HL2MP_RUN_GRENADE = 1839,
    
    /**
     */
    ACT_HL2MP_IDLE_CROUCH_GRENADE = 1840,
    
    /**
     */
    ACT_HL2MP_WALK_CROUCH_GRENADE = 1841,
    
    /**
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_GRENADE = 1842,
    
    /**
     */
    ACT_HL2MP_GESTURE_RELOAD_GRENADE = 1843,
    
    /**
     */
    ACT_HL2MP_JUMP_GRENADE = 1844,
    
    /**
     */
    ACT_HL2MP_SWIM_IDLE_GRENADE = 1845,
    
    /**
     */
    ACT_HL2MP_SWIM_GRENADE = 1846,
    
    /**
     */
    ACT_HL2MP_IDLE_DUEL = 1847,
    
    /**
     */
    ACT_HL2MP_WALK_DUEL = 1848,
    
    /**
     */
    ACT_HL2MP_RUN_DUEL = 1849,
    
    /**
     */
    ACT_HL2MP_IDLE_CROUCH_DUEL = 1850,
    
    /**
     */
    ACT_HL2MP_WALK_CROUCH_DUEL = 1851,
    
    /**
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_DUEL = 1852,
    
    /**
     */
    ACT_HL2MP_GESTURE_RELOAD_DUEL = 1853,
    
    /**
     */
    ACT_HL2MP_JUMP_DUEL = 1854,
    
    /**
     */
    ACT_HL2MP_SWIM_IDLE_DUEL = 1855,
    
    /**
     */
    ACT_HL2MP_SWIM_DUEL = 1856,
    
    /**
     */
    ACT_HL2MP_IDLE_PHYSGUN = 1857,
    
    /**
     */
    ACT_HL2MP_WALK_PHYSGUN = 1858,
    
    /**
     */
    ACT_HL2MP_RUN_PHYSGUN = 1859,
    
    /**
     */
    ACT_HL2MP_IDLE_CROUCH_PHYSGUN = 1860,
    
    /**
     */
    ACT_HL2MP_WALK_CROUCH_PHYSGUN = 1861,
    
    /**
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_PHYSGUN = 1862,
    
    /**
     */
    ACT_HL2MP_GESTURE_RELOAD_PHYSGUN = 1863,
    
    /**
     */
    ACT_HL2MP_JUMP_PHYSGUN = 1864,
    
    /**
     */
    ACT_HL2MP_SWIM_IDLE_PHYSGUN = 1865,
    
    /**
     */
    ACT_HL2MP_SWIM_PHYSGUN = 1866,
    
    /**
     */
    ACT_HL2MP_IDLE_CROSSBOW = 1867,
    
    /**
     */
    ACT_HL2MP_WALK_CROSSBOW = 1868,
    
    /**
     */
    ACT_HL2MP_RUN_CROSSBOW = 1869,
    
    /**
     */
    ACT_HL2MP_IDLE_CROUCH_CROSSBOW = 1870,
    
    /**
     */
    ACT_HL2MP_WALK_CROUCH_CROSSBOW = 1871,
    
    /**
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_CROSSBOW = 1872,
    
    /**
     */
    ACT_HL2MP_GESTURE_RELOAD_CROSSBOW = 1873,
    
    /**
     */
    ACT_HL2MP_JUMP_CROSSBOW = 1874,
    
    /**
     */
    ACT_HL2MP_SWIM_IDLE_CROSSBOW = 1875,
    
    /**
     */
    ACT_HL2MP_SWIM_CROSSBOW = 1876,
    
    /**
     */
    ACT_HL2MP_IDLE_MELEE = 1877,
    
    /**
     */
    ACT_HL2MP_WALK_MELEE = 1878,
    
    /**
     */
    ACT_HL2MP_RUN_MELEE = 1879,
    
    /**
     */
    ACT_HL2MP_IDLE_CROUCH_MELEE = 1880,
    
    /**
     */
    ACT_HL2MP_WALK_CROUCH_MELEE = 1881,
    
    /**
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE = 1882,
    
    /**
     */
    ACT_HL2MP_GESTURE_RELOAD_MELEE = 1883,
    
    /**
     */
    ACT_HL2MP_JUMP_MELEE = 1884,
    
    /**
     */
    ACT_HL2MP_SWIM_IDLE_MELEE = 1885,
    
    /**
     */
    ACT_HL2MP_SWIM_MELEE = 1886,
    
    /**
     */
    ACT_HL2MP_IDLE_SLAM = 1887,
    
    /**
     */
    ACT_HL2MP_WALK_SLAM = 1888,
    
    /**
     */
    ACT_HL2MP_RUN_SLAM = 1889,
    
    /**
     */
    ACT_HL2MP_IDLE_CROUCH_SLAM = 1890,
    
    /**
     */
    ACT_HL2MP_WALK_CROUCH_SLAM = 1891,
    
    /**
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_SLAM = 1892,
    
    /**
     */
    ACT_HL2MP_GESTURE_RELOAD_SLAM = 1893,
    
    /**
     */
    ACT_HL2MP_JUMP_SLAM = 1894,
    
    /**
     */
    ACT_HL2MP_SWIM_IDLE_SLAM = 1895,
    
    /**
     */
    ACT_HL2MP_SWIM_SLAM = 1896,
    
    /**
     */
    ACT_VM_CRAWL = 1897,
    
    /**
     */
    ACT_VM_CRAWL_EMPTY = 1898,
    
    /**
     */
    ACT_VM_HOLSTER_EMPTY = 1899,
    
    /**
     */
    ACT_VM_DOWN = 1900,
    
    /**
     */
    ACT_VM_DOWN_EMPTY = 1901,
    
    /**
     */
    ACT_VM_READY = 1902,
    
    /**
     */
    ACT_VM_ISHOOT = 1903,
    
    /**
     */
    ACT_VM_IIN = 1904,
    
    /**
     */
    ACT_VM_IIN_EMPTY = 1905,
    
    /**
     */
    ACT_VM_IIDLE = 1906,
    
    /**
     */
    ACT_VM_IIDLE_EMPTY = 1907,
    
    /**
     */
    ACT_VM_IOUT = 1908,
    
    /**
     */
    ACT_VM_IOUT_EMPTY = 1909,
    
    /**
     */
    ACT_VM_PULLBACK_HIGH_BAKE = 1910,
    
    /**
     */
    ACT_VM_HITKILL = 1911,
    
    /**
     */
    ACT_VM_DEPLOYED_IN = 1912,
    
    /**
     */
    ACT_VM_DEPLOYED_IDLE = 1913,
    
    /**
     */
    ACT_VM_DEPLOYED_FIRE = 1914,
    
    /**
     */
    ACT_VM_DEPLOYED_DRYFIRE = 1915,
    
    /**
     */
    ACT_VM_DEPLOYED_RELOAD = 1916,
    
    /**
     */
    ACT_VM_DEPLOYED_RELOAD_EMPTY = 1917,
    
    /**
     */
    ACT_VM_DEPLOYED_OUT = 1918,
    
    /**
     */
    ACT_VM_DEPLOYED_IRON_IN = 1919,
    
    /**
     */
    ACT_VM_DEPLOYED_IRON_IDLE = 1920,
    
    /**
     */
    ACT_VM_DEPLOYED_IRON_FIRE = 1921,
    
    /**
     */
    ACT_VM_DEPLOYED_IRON_DRYFIRE = 1922,
    
    /**
     */
    ACT_VM_DEPLOYED_IRON_OUT = 1923,
    
    /**
     */
    ACT_VM_DEPLOYED_LIFTED_IN = 1924,
    
    /**
     */
    ACT_VM_DEPLOYED_LIFTED_IDLE = 1925,
    
    /**
     */
    ACT_VM_DEPLOYED_LIFTED_OUT = 1926,
    
    /**
     */
    ACT_VM_RELOADEMPTY = 1927,
    
    /**
     */
    ACT_VM_IRECOIL1 = 1928,
    
    /**
     */
    ACT_VM_IRECOIL2 = 1929,
    
    /**
     */
    ACT_VM_FIREMODE = 1930,
    
    /**
     */
    ACT_VM_ISHOOT_LAST = 1931,
    
    /**
     */
    ACT_VM_IFIREMODE = 1932,
    
    /**
     */
    ACT_VM_DFIREMODE = 1933,
    
    /**
     */
    ACT_VM_DIFIREMODE = 1934,
    
    /**
     */
    ACT_VM_SHOOTLAST = 1935,
    
    /**
     */
    ACT_VM_ISHOOTDRY = 1936,
    
    /**
     */
    ACT_VM_DRAW_M203 = 1937,
    
    /**
     */
    ACT_VM_DRAWFULL_M203 = 1938,
    
    /**
     */
    ACT_VM_READY_M203 = 1939,
    
    /**
     */
    ACT_VM_IDLE_M203 = 1940,
    
    /**
     */
    ACT_VM_RELOAD_M203 = 1941,
    
    /**
     */
    ACT_VM_HOLSTER_M203 = 1942,
    
    /**
     */
    ACT_VM_HOLSTERFULL_M203 = 1943,
    
    /**
     */
    ACT_VM_IIN_M203 = 1944,
    
    /**
     */
    ACT_VM_IIDLE_M203 = 1945,
    
    /**
     */
    ACT_VM_IOUT_M203 = 1946,
    
    /**
     */
    ACT_VM_CRAWL_M203 = 1947,
    
    /**
     */
    ACT_VM_DOWN_M203 = 1948,
    
    /**
     */
    ACT_VM_ISHOOT_M203 = 1949,
    
    /**
     */
    ACT_VM_RELOAD_INSERT = 1950,
    
    /**
     */
    ACT_VM_RELOAD_INSERT_PULL = 1951,
    
    /**
     */
    ACT_VM_RELOAD_END = 1952,
    
    /**
     */
    ACT_VM_RELOAD_END_EMPTY = 1953,
    
    /**
     */
    ACT_VM_RELOAD_INSERT_EMPTY = 1954,
    
    /**
     */
    ACT_CROSSBOW_HOLSTER_UNLOADED = 1955,
    
    /**
     */
    ACT_VM_FIRE_TO_EMPTY = 1956,
    
    /**
     */
    ACT_VM_UNLOAD = 1957,
    
    /**
     */
    ACT_VM_RELOAD2 = 1958,
    
    /**
     */
    ACT_GMOD_NOCLIP_LAYER = 1959,
    
    /**
     */
    ACT_HL2MP_IDLE_FIST = 1960,
    
    /**
     */
    ACT_HL2MP_WALK_FIST = 1961,
    
    /**
     */
    ACT_HL2MP_RUN_FIST = 1962,
    
    /**
     */
    ACT_HL2MP_IDLE_CROUCH_FIST = 1963,
    
    /**
     */
    ACT_HL2MP_WALK_CROUCH_FIST = 1964,
    
    /**
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_FIST = 1965,
    
    /**
     */
    ACT_HL2MP_GESTURE_RELOAD_FIST = 1966,
    
    /**
     */
    ACT_HL2MP_JUMP_FIST = 1967,
    
    /**
     */
    ACT_HL2MP_SWIM_IDLE_FIST = 1968,
    
    /**
     */
    ACT_HL2MP_SWIM_FIST = 1969,
    
    /**
     */
    ACT_HL2MP_SIT = 1970,
    
    /**
     */
    ACT_HL2MP_FIST_BLOCK = 1971,
    
    /**
     */
    ACT_DRIVE_AIRBOAT = 1972,
    
    /**
     */
    ACT_DRIVE_JEEP = 1973,
    
    /**
     */
    ACT_GMOD_SIT_ROLLERCOASTER = 1974,
    
    /**
     */
    ACT_HL2MP_IDLE_KNIFE = 1975,
    
    /**
     */
    ACT_HL2MP_WALK_KNIFE = 1976,
    
    /**
     */
    ACT_HL2MP_RUN_KNIFE = 1977,
    
    /**
     */
    ACT_HL2MP_IDLE_CROUCH_KNIFE = 1978,
    
    /**
     */
    ACT_HL2MP_WALK_CROUCH_KNIFE = 1979,
    
    /**
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_KNIFE = 1980,
    
    /**
     */
    ACT_HL2MP_GESTURE_RELOAD_KNIFE = 1981,
    
    /**
     */
    ACT_HL2MP_JUMP_KNIFE = 1982,
    
    /**
     */
    ACT_HL2MP_SWIM_IDLE_KNIFE = 1983,
    
    /**
     */
    ACT_HL2MP_SWIM_KNIFE = 1984,
    
    /**
     */
    ACT_HL2MP_IDLE_PASSIVE = 1985,
    
    /**
     */
    ACT_HL2MP_WALK_PASSIVE = 1986,
    
    /**
     */
    ACT_HL2MP_RUN_PASSIVE = 1987,
    
    /**
     */
    ACT_HL2MP_IDLE_CROUCH_PASSIVE = 1988,
    
    /**
     */
    ACT_HL2MP_WALK_CROUCH_PASSIVE = 1989,
    
    /**
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_PASSIVE = 1990,
    
    /**
     */
    ACT_HL2MP_GESTURE_RELOAD_PASSIVE = 1991,
    
    /**
     */
    ACT_HL2MP_JUMP_PASSIVE = 1992,
    
    /**
     */
    ACT_HL2MP_SWIM_PASSIVE = 1993,
    
    /**
     */
    ACT_HL2MP_SWIM_IDLE_PASSIVE = 1994,
    
    /**
     */
    ACT_HL2MP_IDLE_MELEE2 = 1995,
    
    /**
     */
    ACT_HL2MP_WALK_MELEE2 = 1996,
    
    /**
     */
    ACT_HL2MP_RUN_MELEE2 = 1997,
    
    /**
     */
    ACT_HL2MP_IDLE_CROUCH_MELEE2 = 1998,
    
    /**
     */
    ACT_HL2MP_WALK_CROUCH_MELEE2 = 1999,
    
    /**
     */
    ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE2 = 2000,
    
    /**
     */
    ACT_HL2MP_GESTURE_RELOAD_MELEE2 = 2001,
    
    /**
     */
    ACT_HL2MP_JUMP_MELEE2 = 2002,
    
    /**
     */
    ACT_HL2MP_SWIM_IDLE_MELEE2 = 2003,
    
    /**
     */
    ACT_HL2MP_SWIM_MELEE2 = 2004,
    
    /**
     */
    ACT_HL2MP_SIT_PISTOL = 2005,
    
    /**
     */
    ACT_HL2MP_SIT_SHOTGUN = 2006,
    
    /**
     */
    ACT_HL2MP_SIT_SMG1 = 2007,
    
    /**
     */
    ACT_HL2MP_SIT_AR2 = 2008,
    
    /**
     */
    ACT_HL2MP_SIT_PHYSGUN = 2009,
    
    /**
     */
    ACT_HL2MP_SIT_GRENADE = 2010,
    
    /**
     */
    ACT_HL2MP_SIT_RPG = 2011,
    
    /**
     */
    ACT_HL2MP_SIT_CROSSBOW = 2012,
    
    /**
     */
    ACT_HL2MP_SIT_MELEE = 2013,
    
    /**
     */
    ACT_HL2MP_SIT_SLAM = 2014,
    
    /**
     */
    ACT_HL2MP_SIT_FIST = 2015,
    
    /**
     */
    ACT_GMOD_IN_CHAT = 2019,
    
    /**
     */
    ACT_GMOD_GESTURE_ITEM_GIVE = 2020,
    
    /**
     */
    ACT_GMOD_GESTURE_ITEM_DROP = 2021,
    
    /**
     */
    ACT_GMOD_GESTURE_ITEM_PLACE = 2022,
    
    /**
     */
    ACT_GMOD_GESTURE_ITEM_THROW = 2023,
    
    /**
     */
    ACT_GMOD_GESTURE_MELEE_SHOVE_2HAND = 2024,
    
    /**
     */
    ACT_GMOD_GESTURE_MELEE_SHOVE_1HAND = 2025,
    
    /**
     */
    ACT_HL2MP_SWIM_IDLE = 2026,
    
    /**
     * The largest activity number 
     */
    LAST_SHARED_ACTIVITY = 2027,
}

/**
 * Used by {{LibraryFunction|game|AddAmmoType}}'s input structure - the {{Struct|AmmoData}}.
 * 
 * **Note:**
 * >These enumerations do not exist in game and are listed here only for reference! 
 * !CompileMembersOnly
 */
declare enum AMMO {
    /**
     * Forces player to drop the object they are carrying if the object was hit by this ammo type. 
     */
    AMMO_FORCE_DROP_IF_CARRIED = 1,
    
    /**
     * Uses [[Structures/AmmoData|AmmoData]].plydmg of the ammo type as the damage to deal to shot players instead of [[Structures/Bullet|Bullet]].Damage. 
     */
    AMMO_INTERPRET_PLRDAMAGE_AS_DAMAGE_TO_PLAYER = 2,
}

/**
 * Used by {{LibraryFunction|render|OverrideBlend}} to determine how texture RGBA information should be interpreted when rendered. 
 * 
 * For more information refer to OpenGL's glBlendFunc page here: https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glBlendFunc.xhtml  
 * 
 * Clientside only. 
 * !CompileMembersOnly
 */
declare enum BLEND {
    /**
     */
    BLEND_ZERO = 0,
    
    /**
     */
    BLEND_ONE = 1,
    
    /**
     */
    BLEND_DST_COLOR = 2,
    
    /**
     */
    BLEND_ONE_MINUS_DST_COLOR = 3,
    
    /**
     */
    BLEND_SRC_ALPHA = 4,
    
    /**
     */
    BLEND_ONE_MINUS_SRC_ALPHA = 5,
    
    /**
     */
    BLEND_DST_ALPHA = 6,
    
    /**
     */
    BLEND_ONE_MINUS_DST_ALPHA = 7,
    
    /**
     */
    BLEND_SRC_ALPHA_SATURATE = 8,
    
    /**
     */
    BLEND_SRC_COLOR = 9,
    
    /**
     */
    BLEND_ONE_MINUS_SRC_COLOR = 10,
}

/**
 * Used by {{LibraryFunction|render|OverrideBlend}}. 
 * !CompileMembersOnly
 */
declare enum BLENDFUNC {
    /**
     */
    BLENDFUNC_ADD = 0,
    
    /**
     */
    BLENDFUNC_SUBTRACT = 1,
    
    /**
     */
    BLENDFUNC_REVERSE_SUBTRACT = 2,
}

/**
 * Enumerations used by {{ClassFunction|Entity|GetBloodColor}} and {{ClassFunction|Entity|SetBloodColor}}. 
 * !CompileMembersOnly
 */
declare enum BLOOD_COLOR {
    /**
     * No blood 
     */
    DONT_BLEED = -1,
    
    /**
     * Normal red blood 
     */
    BLOOD_COLOR_RED = 0,
    
    /**
     * Yellow blood 
     */
    BLOOD_COLOR_YELLOW = 1,
    
    /**
     * Green-red blood 
     */
    BLOOD_COLOR_GREEN = 2,
    
    /**
     * Sparks 
     */
    BLOOD_COLOR_MECH = 3,
    
    /**
     * Yellow blood 
     */
    BLOOD_COLOR_ANTLION = 4,
    
    /**
     * Green-red blood 
     */
    BLOOD_COLOR_ZOMBIE = 5,
    
    /**
     * Bright green blood 
     */
    BLOOD_COLOR_ANTLION_WORKER = 6,
}

/**
 * Used by {{ClassFunction|Entity|BoneHasFlag}}. 
 * !CompileMembersOnly
 */
declare enum BONE {
    /**
     */
    BONE_PHYSICALLY_SIMULATED = 1,
    
    /**
     */
    BONE_PHYSICS_PROCEDURAL = 2,
    
    /**
     */
    BONE_ALWAYS_PROCEDURAL = 4,
    
    /**
     */
    BONE_SCREEN_ALIGN_SPHERE = 8,
    
    /**
     */
    BONE_SCREEN_ALIGN_CYLINDER = 16,
    
    /**
     */
    BONE_CALCULATE_MASK = 31,
    
    /**
     * A hitbox is attached to this bone 
     */
    BONE_USED_BY_HITBOX = 256,
    
    /**
     * An attachment is attached to this bone 
     */
    BONE_USED_BY_ATTACHMENT = 512,
    
    /**
     */
    BONE_USED_BY_VERTEX_LOD0 = 1024,
    
    /**
     */
    BONE_USED_BY_VERTEX_LOD1 = 2048,
    
    /**
     */
    BONE_USED_BY_VERTEX_LOD2 = 4096,
    
    /**
     */
    BONE_USED_BY_VERTEX_LOD3 = 8192,
    
    /**
     */
    BONE_USED_BY_VERTEX_LOD4 = 16384,
    
    /**
     */
    BONE_USED_BY_VERTEX_LOD5 = 32768,
    
    /**
     */
    BONE_USED_BY_VERTEX_LOD6 = 65536,
    
    /**
     */
    BONE_USED_BY_VERTEX_LOD7 = 131072,
    
    /**
     */
    BONE_USED_BY_VERTEX_MASK = 261120,
    
    /**
     */
    BONE_USED_BY_BONE_MERGE = 262144,
    
    /**
     * Is this bone used by anything?
     * ( If any BONE_USED_BY_* flags are true ) 
     */
    BONE_USED_BY_ANYTHING = 524032,
    
    /**
     */
    BONE_USED_MASK = 524032,
}

/**
 * Enumerations used by {{LibraryFunction|render|SetModelLighting}}. 
 * !CompileMembersOnly
 */
declare enum BOX {
    /**
     * Place the light from the front 
     */
    BOX_FRONT = 0,
    
    /**
     * Place the light behind 
     */
    BOX_BACK = 1,
    
    /**
     * Place the light to the right 
     */
    BOX_RIGHT = 2,
    
    /**
     * Place the light to the left 
     */
    BOX_LEFT = 3,
    
    /**
     * Place the light to the top 
     */
    BOX_TOP = 4,
    
    /**
     * Place the light to the bottom 
     */
    BOX_BOTTOM = 5,
}

/**
 * Encompasses the range of {{Enum|KEY}}, {{Enum|MOUSE}} and {{Enum|JOYSTICK}}, all of which can be used by:
 * * {{LibraryFunction|input|IsButtonDown}}
 * * {{LibraryFunction|input|LookupKeyBinding}}
 * * {{LibraryFunction|input|GetKeyName}}
 * * {{LibraryFunction|input|GetKeyCode}}
 * * {{HookFunction|GM|PlayerButtonDown}}
 * * {{HookFunction|GM|PlayerButtonUp}} 
 * !CompileMembersOnly
 */
declare enum BUTTON_CODE {
    /**
     */
    BUTTON_CODE_INVALID = -1,
    
    /**
     */
    BUTTON_CODE_NONE = 0,
    
    /**
     */
    BUTTON_CODE_LAST = 171,
    
    /**
     */
    BUTTON_CODE_COUNT = 172,
}

/**
 * Enumerations used by {{ClassFunction|NPC|CapabilitiesAdd}}, {{HookFunction|WEAPON|GetCapabilities}} and {{ClassFunction|NPC|CapabilitiesGet}}. Serverside only. 
 * !CompileMembersOnly
 */
declare enum CAP {
    /**
     * When hit by an explosion, we'll simply block it instead of spilling it to entities behind us, the sv_robust_explosions cvar can also enable this globally when set to 0 
     */
    CAP_SIMPLE_RADIUS_DAMAGE = -2147483648,
    
    /**
     * Walk/Run 
     */
    CAP_MOVE_GROUND = 1,
    
    /**
     * Jump/Leap 
     */
    CAP_MOVE_JUMP = 2,
    
    /**
     * Can fly  move all around 
     */
    CAP_MOVE_FLY = 4,
    
    /**
     * climb ladders 
     */
    CAP_MOVE_CLIMB = 8,
    
    /**
     */
    CAP_MOVE_SWIM = 16,
    
    /**
     */
    CAP_MOVE_CRAWL = 32,
    
    /**
     * Tries to shoot weapon while moving 
     */
    CAP_MOVE_SHOOT = 64,
    
    /**
     */
    CAP_SKIP_NAV_GROUND_CHECK = 128,
    
    /**
     * Open doors/push buttons/pull levers 
     */
    CAP_USE = 256,
    
    /**
     * Can trigger auto doors 
     */
    CAP_AUTO_DOORS = 1024,
    
    /**
     * Can open manual doors 
     */
    CAP_OPEN_DOORS = 2048,
    
    /**
     * Can turn head  always bone controller 0 
     */
    CAP_TURN_HEAD = 4096,
    
    /**
     */
    CAP_WEAPON_RANGE_ATTACK1 = 8192,
    
    /**
     */
    CAP_WEAPON_RANGE_ATTACK2 = 16384,
    
    /**
     */
    CAP_WEAPON_MELEE_ATTACK1 = 32768,
    
    /**
     */
    CAP_WEAPON_MELEE_ATTACK2 = 65536,
    
    /**
     */
    CAP_INNATE_RANGE_ATTACK1 = 131072,
    
    /**
     */
    CAP_INNATE_RANGE_ATTACK2 = 262144,
    
    /**
     */
    CAP_INNATE_MELEE_ATTACK1 = 524288,
    
    /**
     */
    CAP_INNATE_MELEE_ATTACK2 = 1048576,
    
    /**
     */
    CAP_USE_WEAPONS = 2097152,
    
    /**
     */
    CAP_USE_SHOT_REGULATOR = 16777216,
    
    /**
     * Has animated eyes/face 
     */
    CAP_ANIMATEDFACE = 8388608,
    
    /**
     * Don't take damage from npc's that are D_LI 
     */
    CAP_FRIENDLY_DMG_IMMUNE = 33554432,
    
    /**
     * Can form squads 
     */
    CAP_SQUAD = 67108864,
    
    /**
     * Cover and Reload ducking 
     */
    CAP_DUCK = 134217728,
    
    /**
     * Don't hit players 
     */
    CAP_NO_HIT_PLAYER = 268435456,
    
    /**
     * Use arms to aim gun, not just body 
     */
    CAP_AIM_GUN = 536870912,
    
    /**
     */
    CAP_NO_HIT_SQUADMATES = 1073741824,
}

/**
 * Enumerations used by {{GlobalFunction|EmitSound}} and {{LibraryFunction|sound|Add}}. 
 * !CompileMembersOnly
 */
declare enum CHAN {
    /**
     * Used when playing sounds through console commands. 
     */
    CHAN_REPLACE = -1,
    
    /**
     * Automatic channel 
     */
    CHAN_AUTO = 0,
    
    /**
     * Channel for weapon sounds 
     */
    CHAN_WEAPON = 1,
    
    /**
     * Channel for NPC voices 
     */
    CHAN_VOICE = 2,
    
    /**
     * Channel for items ( Health kits, etc ) 
     */
    CHAN_ITEM = 3,
    
    /**
     * Clothing, ragdoll impacts, footsteps, knocking/pounding/punching etc. 
     */
    CHAN_BODY = 4,
    
    /**
     * Stream channel from the static or dynamic area 
     */
    CHAN_STREAM = 5,
    
    /**
     * A constant/background sound that doesn't require any reaction. 
     */
    CHAN_STATIC = 6,
    
    /**
     * TF2s Announcer dialogue channel 
     */
    CHAN_VOICE2 = 7,
    
    /**
     * Channel for network voice data 
     */
    CHAN_VOICE_BASE = 8,
    
    /**
     */
    CHAN_USER_BASE = 136,
}

/**
 * Enumerations used by {{ClassFunction|NPC|Classify}}. 
 * !CompileMembersOnly
 */
declare enum CLASS {
    /**
     * None - default class for entities. 
     */
    CLASS_NONE = 0,
    
    /**
     * Players. 
     */
    CLASS_PLAYER = 1,
    
    /**
     * HL2 player allies - monster_barney, npc_citizen, hacked npc_manhack, and friendly npc_turret_floor. 
     */
    CLASS_PLAYER_ALLY = 2,
    
    /**
     * HL2 vital player allies - npc_magnusson, npc_gman, npc_fisherman, npc_eli, npc_barney, npc_kleiner, npc_mossman, npc_alyx, npc_monk, npc_dog, and npc_vortigaunt at the end of EP2 (controlled by "MakeGameEndAlly" input). 
     */
    CLASS_PLAYER_ALLY_VITAL = 3,
    
    /**
     * HL2 antlions - npc_antlion, npc_antlionguard, and npc_ichthyosaur. 
     */
    CLASS_ANTLION = 4,
    
    /**
     * HL2 barnacles - npc_barnacle. 
     */
    CLASS_BARNACLE = 5,
    
    /**
     * HL2 bullseyes - npc_bullseye. 
     */
    CLASS_BULLSEYE = 6,
    
    /**
     * HL2 passive/non-rebel citizens - npc_citizen in the beginning of HL2. 
     */
    CLASS_CITIZEN_PASSIVE = 7,
    
    /**
     * HL2 unused. 
     */
    CLASS_CITIZEN_REBEL = 8,
    
    /**
     * HL2 combine troops - npc_combine, npc_advisor, apc_missile, npc_apcdriver, hostile npc_turret_floor, hostile npc_rollermine, npc_turret_ground when active, npc_turret_ceiling when active, and npc_strider when active (not being carried by the gunship). 
     */
    CLASS_COMBINE = 9,
    
    /**
     * HL2 combine aircrafts - npc_combinegunship, npc_combinedropship, and npc_helicopter. 
     */
    CLASS_COMBINE_GUNSHIP = 10,
    
    /**
     * HL2 unused. 
     */
    CLASS_CONSCRIPT = 11,
    
    /**
     * HL2 headcrabs - visible npc_headcrab. 
     */
    CLASS_HEADCRAB = 12,
    
    /**
     * HL2 manhacks - hostile npc_manhack not held by the gravity gun. 
     */
    CLASS_MANHACK = 13,
    
    /**
     * HL2 metro police - npc_metropolice and npc_vehicledriver. 
     */
    CLASS_METROPOLICE = 14,
    
    /**
     * HL2 combine military objects - func_guntarget, npc_spotlight, and active npc_combine_camera. 
     */
    CLASS_MILITARY = 15,
    
    /**
     * HL2 combine scanners - npc_cscanner and npc_clawscanner. 
     */
    CLASS_SCANNER = 16,
    
    /**
     * HL2 stalkers - npc_stalker. 
     */
    CLASS_STALKER = 17,
    
    /**
     * HL2 vortigaunts - npc_vortigaunt before the end of EP2 (controlled by "MakeGameEndAlly" input). 
     */
    CLASS_VORTIGAUNT = 18,
    
    /**
     * HL2 zombies - unslumped npc_zombie, npc_poisonzombie, npc_fastzombie, npc_fastzombie_torso, and npc_zombine. 
     */
    CLASS_ZOMBIE = 19,
    
    /**
     * HL2 snipers - npc_sniper and proto_sniper. 
     */
    CLASS_PROTOSNIPER = 20,
    
    /**
     * HL2 missiles - rpg_missile, apc_missile, and grenade_pathfollower. 
     */
    CLASS_MISSILE = 21,
    
    /**
     * HL2 flares - env_flare. 
     */
    CLASS_FLARE = 22,
    
    /**
     * HL2 animals - npc_crow, npc_seagull, and npc_pigeon. 
     */
    CLASS_EARTH_FAUNA = 23,
    
    /**
     * HL2 friendly rollermines - hacked npc_rollermine. 
     */
    CLASS_HACKED_ROLLERMINE = 24,
    
    /**
     * HL2 hunters - npc_hunter. 
     */
    CLASS_COMBINE_HUNTER = 25,
    
    /**
     * HL:S turrets - monster_turret, monster_miniturret, monster_sentry.
     * 
     * {{NextUpdate|This and below are only available in the next update}} 
     */
    CLASS_MACHINE = 26,
    
    /**
     * HL:S friendly humans - monster_scientist. 
     */
    CLASS_HUMAN_PASSIVE = 27,
    
    /**
     * HL:S human military - monster_human_grunt and monster_apache. 
     */
    CLASS_HUMAN_MILITARY = 28,
    
    /**
     * HL:S alien military - monster_alien_controller, monster_vortigaunt, monster_alien_grunt, monster_nihilanth, and monster_snark if it has an enemy of class CLASS_PLAYER, CLASS_HUMAN_PASSIVE, or CLASS_HUMAN_MILITARY. 
     */
    CLASS_ALIEN_MILITARY = 29,
    
    /**
     * HL:S monsters - monster_tentacle, monster_barnacle, monster_zombie, monster_gargantua, monster_houndeye, monster_ichthyosaur, and monster_bigmomma. 
     */
    CLASS_ALIEN_MONSTER = 30,
    
    /**
     * HL:S headcrabs - monster_headcrab. 
     */
    CLASS_ALIEN_PREY = 31,
    
    /**
     * HL:S alien predators - monster_bullsquid, xen_tree, and xen_hull. 
     */
    CLASS_ALIEN_PREDATOR = 32,
    
    /**
     * HL:S insects - montser_roach and monster_leech. 
     */
    CLASS_INSECT = 33,
    
    /**
     * HL:S player bioweapons - hornet fired by a player. 
     */
    CLASS_PLAYER_BIOWEAPON = 34,
    
    /**
     * HL:S enemy bioweapons - hornet fired by anyone but a player, or monster_snark with no enemy or an enemy without the class CLASS_PLAYER, CLASS_HUMAN_PASSIVE, or CLASS_HUMAN_MILITARY. 
     */
    CLASS_ALIEN_BIOWEAPON = 35,
}

/**
 * Enumerations used by {{ClassFunction|Entity|SetCollisionGroup}} and {{ClassFunction|Entity|GetCollisionGroup}}. 
 * !CompileMembersOnly
 */
declare enum COLLISION_GROUP {
    /**
     * Normal 
     */
    COLLISION_GROUP_NONE = 0,
    
    /**
     * Collides with nothing but world and static stuff 
     */
    COLLISION_GROUP_DEBRIS = 1,
    
    /**
     * Same as debris, but hits triggers. Useful for an item that can be shot, but doesn't collide. 
     */
    COLLISION_GROUP_DEBRIS_TRIGGER = 2,
    
    /**
     * Collides with everything except other interactive debris or debris 
     */
    COLLISION_GROUP_INTERACTIVE_DEBRIS = 3,
    
    /**
     * Collides with everything except interactive debris or debris 
     */
    COLLISION_GROUP_INTERACTIVE = 4,
    
    /**
     */
    COLLISION_GROUP_PLAYER = 5,
    
    /**
     */
    COLLISION_GROUP_BREAKABLE_GLASS = 6,
    
    /**
     */
    COLLISION_GROUP_VEHICLE = 7,
    
    /**
     * For HL2, same as Collision_Group_Player, for TF2, this filters out other players and CBaseObjects 
     */
    COLLISION_GROUP_PLAYER_MOVEMENT = 8,
    
    /**
     */
    COLLISION_GROUP_NPC = 9,
    
    /**
     * Doesn't collide with anything, no traces 
     */
    COLLISION_GROUP_IN_VEHICLE = 10,
    
    /**
     * Doesn't collide with players and vehicles 
     */
    COLLISION_GROUP_WEAPON = 11,
    
    /**
     * Only collides with vehicles 
     */
    COLLISION_GROUP_VEHICLE_CLIP = 12,
    
    /**
     */
    COLLISION_GROUP_PROJECTILE = 13,
    
    /**
     * Blocks entities not permitted to get near moving doors 
     */
    COLLISION_GROUP_DOOR_BLOCKER = 14,
    
    /**
     * Let's the Player through, nothing else. 
     */
    COLLISION_GROUP_PASSABLE_DOOR = 15,
    
    /**
     * Things that are dissolving are in this group 
     */
    COLLISION_GROUP_DISSOLVING = 16,
    
    /**
     * Nonsolid on client and server, pushaway in player code 
     */
    COLLISION_GROUP_PUSHAWAY = 17,
    
    /**
     */
    COLLISION_GROUP_NPC_ACTOR = 18,
    
    /**
     */
    COLLISION_GROUP_NPC_SCRIPTED = 19,
    
    /**
     * Doesn't collide with players/props 
     */
    COLLISION_GROUP_WORLD = 20,
    
    /**
     * Amount of COLLISION_GROUP_ enumerations 
     */
    LAST_SHARED_COLLISION_GROUP = 21,
}

/**
 * Enumerations for NPC conditions, used by {{ClassFunction|NPC|SetCondition}}. Serverside only.
 * 
 * **Note:**
 * >There are more conditions than listed here after '''COND_NO_CUSTOM_INTERRUPTS'''(70) but the name depends on what's returned by {{ClassFunction|NPC|ConditionName}}
 * 
 * {{Warning|These enumerations do not exist in game, but are listed here anyway for reference}} 
 * !CompileMembersOnly
 */
declare enum COND {
    /**
     */
    COND_BEHIND_ENEMY = 29,
    
    /**
     */
    COND_BETTER_WEAPON_AVAILABLE = 46,
    
    /**
     */
    COND_CAN_MELEE_ATTACK1 = 23,
    
    /**
     */
    COND_CAN_MELEE_ATTACK2 = 24,
    
    /**
     */
    COND_CAN_RANGE_ATTACK1 = 21,
    
    /**
     */
    COND_CAN_RANGE_ATTACK2 = 22,
    
    /**
     */
    COND_ENEMY_DEAD = 30,
    
    /**
     */
    COND_ENEMY_FACING_ME = 28,
    
    /**
     */
    COND_ENEMY_OCCLUDED = 13,
    
    /**
     */
    COND_ENEMY_TOO_FAR = 27,
    
    /**
     */
    COND_ENEMY_UNREACHABLE = 31,
    
    /**
     */
    COND_ENEMY_WENT_NULL = 12,
    
    /**
     */
    COND_FLOATING_OFF_GROUND = 61,
    
    /**
     */
    COND_GIVE_WAY = 48,
    
    /**
     */
    COND_HAVE_ENEMY_LOS = 15,
    
    /**
     */
    COND_HAVE_TARGET_LOS = 16,
    
    /**
     */
    COND_HEALTH_ITEM_AVAILABLE = 47,
    
    /**
     */
    COND_HEAR_BUGBAIT = 52,
    
    /**
     */
    COND_HEAR_BULLET_IMPACT = 56,
    
    /**
     */
    COND_HEAR_COMBAT = 53,
    
    /**
     */
    COND_HEAR_DANGER = 50,
    
    /**
     */
    COND_HEAR_MOVE_AWAY = 58,
    
    /**
     */
    COND_HEAR_PHYSICS_DANGER = 57,
    
    /**
     */
    COND_HEAR_PLAYER = 55,
    
    /**
     */
    COND_HEAR_SPOOKY = 59,
    
    /**
     */
    COND_HEAR_THUMPER = 51,
    
    /**
     */
    COND_HEAR_WORLD = 54,
    
    /**
     */
    COND_HEAVY_DAMAGE = 18,
    
    /**
     */
    COND_IDLE_INTERRUPT = 2,
    
    /**
     */
    COND_IN_PVS = 1,
    
    /**
     */
    COND_LIGHT_DAMAGE = 17,
    
    /**
     */
    COND_LOST_ENEMY = 11,
    
    /**
     */
    COND_LOST_PLAYER = 33,
    
    /**
     */
    COND_LOW_PRIMARY_AMMO = 3,
    
    /**
     */
    COND_MOBBED_BY_ENEMIES = 62,
    
    /**
     */
    COND_NEW_ENEMY = 26,
    
    /**
     */
    COND_NO_CUSTOM_INTERRUPTS = 70,
    
    /**
     */
    COND_NO_HEAR_DANGER = 60,
    
    /**
     */
    COND_NO_PRIMARY_AMMO = 4,
    
    /**
     */
    COND_NO_SECONDARY_AMMO = 5,
    
    /**
     */
    COND_NO_WEAPON = 6,
    
    /**
     */
    COND_NONE = 0,
    
    /**
     */
    COND_NOT_FACING_ATTACK = 40,
    
    /**
     * Freezes NPC movement 
     */
    COND_NPC_FREEZE = 67,
    
    /**
     * Unfreezes NPC movement 
     */
    COND_NPC_UNFREEZE = 68,
    
    /**
     */
    COND_PHYSICS_DAMAGE = 19,
    
    /**
     */
    COND_PLAYER_ADDED_TO_SQUAD = 64,
    
    /**
     */
    COND_PLAYER_PUSHING = 66,
    
    /**
     */
    COND_PLAYER_REMOVED_FROM_SQUAD = 65,
    
    /**
     */
    COND_PROVOKED = 25,
    
    /**
     */
    COND_RECEIVED_ORDERS = 63,
    
    /**
     */
    COND_REPEATED_DAMAGE = 20,
    
    /**
     */
    COND_SCHEDULE_DONE = 36,
    
    /**
     */
    COND_SEE_DISLIKE = 9,
    
    /**
     */
    COND_SEE_ENEMY = 10,
    
    /**
     */
    COND_SEE_FEAR = 8,
    
    /**
     */
    COND_SEE_HATE = 7,
    
    /**
     */
    COND_SEE_NEMESIS = 34,
    
    /**
     */
    COND_SEE_PLAYER = 32,
    
    /**
     */
    COND_SMELL = 37,
    
    /**
     */
    COND_TALKER_RESPOND_TO_QUESTION = 69,
    
    /**
     */
    COND_TARGET_OCCLUDED = 14,
    
    /**
     */
    COND_TASK_FAILED = 35,
    
    /**
     */
    COND_TOO_CLOSE_TO_ATTACK = 38,
    
    /**
     */
    COND_TOO_FAR_TO_ATTACK = 39,
    
    /**
     */
    COND_WAY_CLEAR = 49,
    
    /**
     */
    COND_WEAPON_BLOCKED_BY_FRIEND = 42,
    
    /**
     */
    COND_WEAPON_HAS_LOS = 41,
    
    /**
     */
    COND_WEAPON_PLAYER_IN_SPREAD = 43,
    
    /**
     */
    COND_WEAPON_PLAYER_NEAR_TARGET = 44,
    
    /**
     */
    COND_WEAPON_SIGHT_OCCLUDED = 45,
}

/**
 * Enumerations used by {{LibraryFunction|util|PointContents}} and as tracer masks. 
 * !CompileMembersOnly
 */
declare enum CONTENTS {
    /**
     * Things that are not solid 
     */
    CONTENTS_EMPTY = 0,
    
    /**
     * Things that are solid 
     */
    CONTENTS_SOLID = 1,
    
    /**
     * Glass 
     */
    CONTENTS_WINDOW = 2,
    
    /**
     */
    CONTENTS_AUX = 4,
    
    /**
     * Bullets go through, solids don't 
     */
    CONTENTS_GRATE = 8,
    
    /**
     */
    CONTENTS_SLIME = 16,
    
    /**
     * Hits world but not skybox 
     */
    CONTENTS_WATER = 32,
    
    /**
     * Things that block line of sight 
     */
    CONTENTS_BLOCKLOS = 64,
    
    /**
     * Things that block light 
     */
    CONTENTS_OPAQUE = 128,
    
    /**
     */
    CONTENTS_TESTFOGVOLUME = 256,
    
    /**
     */
    CONTENTS_TEAM4 = 512,
    
    /**
     */
    CONTENTS_TEAM3 = 1024,
    
    /**
     */
    CONTENTS_TEAM1 = 2048,
    
    /**
     */
    CONTENTS_TEAM2 = 4096,
    
    /**
     */
    CONTENTS_IGNORE_NODRAW_OPAQUE = 8192,
    
    /**
     */
    CONTENTS_MOVEABLE = 16384,
    
    /**
     */
    CONTENTS_AREAPORTAL = 32768,
    
    /**
     */
    CONTENTS_PLAYERCLIP = 65536,
    
    /**
     */
    CONTENTS_MONSTERCLIP = 131072,
    
    /**
     */
    CONTENTS_CURRENT_0 = 262144,
    
    /**
     */
    CONTENTS_CURRENT_180 = 1048576,
    
    /**
     */
    CONTENTS_CURRENT_270 = 2097152,
    
    /**
     */
    CONTENTS_CURRENT_90 = 524288,
    
    /**
     */
    CONTENTS_CURRENT_DOWN = 8388608,
    
    /**
     */
    CONTENTS_CURRENT_UP = 4194304,
    
    /**
     */
    CONTENTS_DEBRIS = 67108864,
    
    /**
     */
    CONTENTS_DETAIL = 134217728,
    
    /**
     * Hitbox 
     */
    CONTENTS_HITBOX = 1073741824,
    
    /**
     * Ladder 
     */
    CONTENTS_LADDER = 536870912,
    
    /**
     * NPCs 
     */
    CONTENTS_MONSTER = 33554432,
    
    /**
     */
    CONTENTS_ORIGIN = 16777216,
    
    /**
     * Hits world but not skybox 
     */
    CONTENTS_TRANSLUCENT = 268435456,
    
    /**
     * Last visible contents enumeration 
     */
    LAST_VISIBLE_CONTENTS = 128,
    
    /**
     * Sum of all the visible contents enumerations 
     */
    ALL_VISIBLE_CONTENTS = 255,
}

/**
 * Enumerations used by {{GlobalFunction|GetRenderTargetEx}}. Clientside only. 
 * !CompileMembersOnly
 */
declare enum CREATERENDERTARGETFLAGS {
    /**
     */
    CREATERENDERTARGETFLAGS_HDR = 1,
    
    /**
     */
    CREATERENDERTARGETFLAGS_AUTOMIPMAP = 2,
    
    /**
     */
    CREATERENDERTARGETFLAGS_UNFILTERABLE_OK = 4,
}

/**
 * Citizen type, a KeyValue for npc_citizen( citizentype ), serverside only. 
 * !CompileMembersOnly
 */
declare enum CT {
    /**
     * Default citizen 
     */
    CT_DEFAULT = 0,
    
    /**
     */
    CT_DOWNTRODDEN = 1,
    
    /**
     * Refugee 
     */
    CT_REFUGEE = 2,
    
    /**
     * Rebel 
     */
    CT_REBEL = 3,
    
    /**
     * Odessa? 
     */
    CT_UNIQUE = 4,
}

/**
 * Enumerations used by {{ClassFunction|NPC|Disposition}} and {{HookFunction|ENTITY|GetRelationship}}. 
 * !CompileMembersOnly
 */
declare enum D {
    /**
     * Error 
     */
    D_ER = 0,
    
    /**
     * Hate 
     */
    D_HT = 1,
    
    /**
     * Frightened / Fear 
     */
    D_FR = 2,
    
    /**
     * Like 
     */
    D_LI = 3,
    
    /**
     * Neutral 
     */
    D_NU = 4,
}

/**
 * Enumerations used by {{ClassFunction|CTakeDamageInfo|GetDamageType}}, {{ClassFunction|CTakeDamageInfo|SetDamageType}} and {{ClassFunction|CTakeDamageInfo|IsDamageType}} 
 * !CompileMembersOnly
 */
declare enum DMG {
    /**
     * Generic damage 
     */
    DMG_GENERIC = 0,
    
    /**
     * Caused by physics interaction 
     */
    DMG_CRUSH = 1,
    
    /**
     * Bullet damage 
     */
    DMG_BULLET = 2,
    
    /**
     * Sharp objects, such as Manhacks or other NPCs attacks 
     */
    DMG_SLASH = 4,
    
    /**
     * Damage from fire 
     */
    DMG_BURN = 8,
    
    /**
     * Hit by a vehicle 
     */
    DMG_VEHICLE = 16,
    
    /**
     * Fall damage 
     */
    DMG_FALL = 32,
    
    /**
     * Explosion damage 
     */
    DMG_BLAST = 64,
    
    /**
     * Crowbar damage 
     */
    DMG_CLUB = 128,
    
    /**
     * Electrical damage, shows smoke at the damage position 
     */
    DMG_SHOCK = 256,
    
    /**
     * Sonic damage,used by the Gargantua and Houndeye NPCs 
     */
    DMG_SONIC = 512,
    
    /**
     * Laser 
     */
    DMG_ENERGYBEAM = 1024,
    
    /**
     * Prevent a physics force 
     */
    DMG_PREVENT_PHYSICS_FORCE = 2048,
    
    /**
     * Never creates gibs. Used by the crossbow 
     */
    DMG_NEVERGIB = 4096,
    
    /**
     * Always create gibs 
     */
    DMG_ALWAYSGIB = 8192,
    
    /**
     * Drown damage 
     */
    DMG_DROWN = 16384,
    
    /**
     * Same as DMG_POISON 
     */
    DMG_PARALYZE = 32768,
    
    /**
     * Neurotoxin damage 
     */
    DMG_NERVEGAS = 65536,
    
    /**
     * Poison damage 
     */
    DMG_POISON = 131072,
    
    /**
     * Radiation 
     */
    DMG_RADIATION = 262144,
    
    /**
     * Damage applied to the player to restore health after drowning 
     */
    DMG_DROWNRECOVER = 524288,
    
    /**
     * Toxic chemicals or acid burns 
     */
    DMG_ACID = 1048576,
    
    /**
     * In an oven 
     */
    DMG_SLOWBURN = 2097152,
    
    /**
     * Don't create a ragdoll on death 
     */
    DMG_REMOVENORAGDOLL = 4194304,
    
    /**
     * Damage done by the gravity gun 
     */
    DMG_PHYSGUN = 8388608,
    
    /**
     * Plasma 
     */
    DMG_PLASMA = 16777216,
    
    /**
     * Airboat gun damage 
     */
    DMG_AIRBOAT = 33554432,
    
    /**
     * Forces the entity to dissolve on death. This is what the combine ball uses when it hits a target 
     */
    DMG_DISSOLVE = 67108864,
    
    /**
     * This won't hurt the player underwater 
     */
    DMG_BLAST_SURFACE = 134217728,
    
    /**
     * Direct damage to the entity that does not go through any damage value modifications 
     */
    DMG_DIRECT = 268435456,
    
    /**
     * The pellets fired from a shotgun 
     */
    DMG_BUCKSHOT = 536870912,
    
    /**
     * Damage from SniperRound/SniperPenetratedRound ammo types
     * 
     * {{NextUpdate}} 
     */
    DMG_SNIPER = 1073741824,
    
    /**
     * Damage from npc_missiledefense, npc_combinegunship, or monster_mortar
     * 
     * {{NextUpdate}} 
     */
    DMG_MISSILEDEFENSE = 2147483648,
}

/**
 * Enumerations used by {{ClassFunction|Panel|Dock}}. 
 * !CompileMembersOnly
 */
declare enum DOCK {
    /**
     * Don't dock 
     */
    NODOCK = 0,
    
    /**
     * Fill parent 
     */
    FILL = 1,
    
    /**
     * Dock to the left 
     */
    LEFT = 2,
    
    /**
     * Dock to the right 
     */
    RIGHT = 3,
    
    /**
     * Dock to the top 
     */
    TOP = 4,
    
    /**
     * Dock to the bottom 
     */
    BOTTOM = 5,
}

/**
 * Internal globals for SimpleDoF. Clientside only. 
 * !CompileMembersOnly
 */
declare enum DOF {
    /**
     */
    DOF_OFFSET = 256,
    
    /**
     */
    DOF_SPACING = 512,
}

/**
 * Enumerations used by {{ClassFunction|Entity|AddEffects}},  {{ClassFunction|Entity|RemoveEffects}} and  {{ClassFunction|Entity|IsEffectActive}}. 
 * !CompileMembersOnly
 */
declare enum EF {
    /**
     * Performs bone merge on client side 
     */
    EF_BONEMERGE = 1,
    
    /**
     * For use with EF_BONEMERGE. If this is set, then it places this ents origin at its parent and uses the parent's bbox + the max extents of the aiment. Otherwise, it sets up the parent's bones every frame to figure out where to place the aiment, which is inefficient because it'll setup the parent's bones even if the parent is not in the PVS. 
     */
    EF_BONEMERGE_FASTCULL = 128,
    
    /**
     * DLIGHT centered at entity origin 
     */
    EF_BRIGHTLIGHT = 2,
    
    /**
     * Player flashlight 
     */
    EF_DIMLIGHT = 4,
    
    /**
     * Don't interpolate the next frame 
     */
    EF_NOINTERP = 8,
    
    /**
     * Disables shadow 
     */
    EF_NOSHADOW = 16,
    
    /**
     * Prevents the entity from drawing and networking. 
     */
    EF_NODRAW = 32,
    
    /**
     * Don't receive shadows 
     */
    EF_NORECEIVESHADOW = 64,
    
    /**
     * Makes the entity blink 
     */
    EF_ITEM_BLINK = 256,
    
    /**
     * Always assume that the parent entity is animating 
     */
    EF_PARENT_ANIMATES = 512,
    
    /**
     * Internal flag that is set by {{ClassFunction|Entity|FollowBone}} 
     */
    EF_FOLLOWBONE = 1024,
}

/**
 * Enumerations used by {{ClassFunction|Entity|AddEFlags}}, {{ClassFunction|Entity|RemoveEFlags}} and {{ClassFunction|Entity|IsEFlagSet}}. 
 * !CompileMembersOnly
 */
declare enum EFL {
    /**
     * This is set on bots that are frozen 
     */
    EFL_BOT_FROZEN = 256,
    
    /**
     */
    EFL_CHECK_UNTOUCH = 16777216,
    
    /**
     * Some dirty bits with respect to abs computations 
     */
    EFL_DIRTY_ABSANGVELOCITY = 8192,
    
    /**
     */
    EFL_DIRTY_ABSTRANSFORM = 2048,
    
    /**
     */
    EFL_DIRTY_ABSVELOCITY = 4096,
    
    /**
     * (Client only) need shadow manager to update the shadow 
     */
    EFL_DIRTY_SHADOWUPDATE = 32,
    
    /**
     */
    EFL_DIRTY_SPATIAL_PARTITION = 32768,
    
    /**
     */
    EFL_DIRTY_SURROUNDING_COLLISION_BOUNDS = 16384,
    
    /**
     * Entity shouldn't block NPC line-of-sight 
     */
    EFL_DONTBLOCKLOS = 33554432,
    
    /**
     * NPCs should not walk on this entity 
     */
    EFL_DONTWALKON = 67108864,
    
    /**
     * Entity is dormant, no updates to client 
     */
    EFL_DORMANT = 2,
    
    /**
     * The default behavior in ShouldTransmit is to not send an entity if it doesn't have a model. Certain entities want to be sent anyway because all the drawing logic is in the client DLL. They can set this flag and the engine will transmit them even if they don't have model 
     */
    EFL_FORCE_CHECK_TRANSMIT = 128,
    
    /**
     * One of the child entities is a player 
     */
    EFL_HAS_PLAYER_CHILD = 16,
    
    /**
     * This is set if the entity detects that it's in the skybox. This forces it to pass the "in PVS" for transmission 
     */
    EFL_IN_SKYBOX = 131072,
    
    /**
     */
    EFL_IS_BEING_LIFTED_BY_BARNACLE = 1048576,
    
    /**
     * This is a special entity that should not be deleted when we restart entities only 
     */
    EFL_KEEP_ON_RECREATE_ENTITIES = 16,
    
    /**
     * This entity is marked for death -- This allows the game to actually delete ents at a safe time.
     * 
     * {{Warning|You should never set this flag manually.}} 
     */
    EFL_KILLME = 1,
    
    /**
     * Lets us know when the noclip command is active 
     */
    EFL_NOCLIP_ACTIVE = 4,
    
    /**
     * Another entity is watching events on this entity (used by teleport) 
     */
    EFL_NOTIFY = 64,
    
    /**
     * Don't attach the edict 
     */
    EFL_NO_AUTO_EDICT_ATTACH = 1024,
    
    /**
     * Doesn't accept forces from physics damage 
     */
    EFL_NO_DAMAGE_FORCES = -2147483648,
    
    /**
     * Entitiy shouldn't dissolve 
     */
    EFL_NO_DISSOLVE = 134217728,
    
    /**
     */
    EFL_NO_GAME_PHYSICS_SIMULATION = 8388608,
    
    /**
     * Mega physcannon can't ragdoll these guys 
     */
    EFL_NO_MEGAPHYSCANNON_RAGDOLL = 268435456,
    
    /**
     * Physcannon can't pick these up or punt them 
     */
    EFL_NO_PHYSCANNON_INTERACTION = 1073741824,
    
    /**
     */
    EFL_NO_ROTORWASH_PUSH = 2097152,
    
    /**
     * Avoid executing the entity's Think 
     */
    EFL_NO_THINK_FUNCTION = 4194304,
    
    /**
     * Don't adjust this entity's velocity when transitioning into water 
     */
    EFL_NO_WATER_VELOCITY_CHANGE = 536870912,
    
    /**
     * Non-networked entity 
     */
    EFL_SERVER_ONLY = 512,
    
    /**
     * Set while a model is setting up its bones 
     */
    EFL_SETTING_UP_BONES = 8,
    
    /**
     * Used to determine if an entity is floating 
     */
    EFL_TOUCHING_FLUID = 524288,
    
    /**
     * Entities with this flag set show up in the partition even when not solid 
     */
    EFL_USE_PARTITION_WHEN_NOT_SOLID = 262144,
}

/**
 * Enumerations used by {{LibraryFunction|concommand|Add}}, {{GlobalFunction|CreateClientConVar}} and {{GlobalFunction|CreateConVar}}. 
 * !CompileMembersOnly
 */
declare enum FCVAR {
    /**
     * Save the {{Type|ConVar}} value into config.cfg
     * 
     * Reported as "a" by ''cvarlist'', except Lua {{Type|ConVar}}s 
     */
    FCVAR_ARCHIVE = 128,
    
    /**
     * Save the {{Type|ConVar}} value into config.cfg on XBox 
     */
    FCVAR_ARCHIVE_XBOX = 16777216,
    
    /**
     * Requires sv_cheats to be enabled to change the {{Type|ConVar}} or run the command
     * 
     * Reported as "cheat" by ''cvarlist'' 
     */
    FCVAR_CHEAT = 16384,
    
    /**
     * IVEngineClient::ClientCmd is allowed to execute this command
     * 
     * Reported as "clientcmd_can_execute" by ''cvarlist'' 
     */
    FCVAR_CLIENTCMD_CAN_EXECUTE = 1073741824,
    
    /**
     * {{Type|ConVar}} is defined by the client DLL.
     * This flag is set automatically
     * 
     * Reported as "cl" by ''cvarlist'' 
     */
    FCVAR_CLIENTDLL = 8,
    
    /**
     * Force the {{Type|ConVar}} to be recorded by demo recordings.
     * 
     * Reported as "demo" by ''cvarlist'' 
     */
    FCVAR_DEMO = 65536,
    
    /**
     * Opposite of FCVAR_DEMO, ensures the {{Type|ConVar}} is not recorded in demos
     * 
     * Reported as "norecord" by ''cvarlist'' 
     */
    FCVAR_DONTRECORD = 131072,
    
    /**
     * {{Type|ConVar}} is defined by the game DLL.
     * This flag is set automatically
     * 
     * Reported as "sv" by ''cvarlist'' 
     */
    FCVAR_GAMEDLL = 4,
    
    /**
     * Set automatically on all ConVars and console commands created by the client Lua state.
     * 
     * Reported as "lua_client" by ''cvarlist'' 
     */
    FCVAR_LUA_CLIENT = 262144,
    
    /**
     * Set automatically on all ConVars and console commands created by the server Lua state.
     * 
     * Reported as "lua_server" by ''cvarlist'' 
     */
    FCVAR_LUA_SERVER = 524288,
    
    /**
     * Tells the engine to never print this variable as a string since it contains control sequences
     * 
     * Reported as "numeric" by ''cvarlist'' 
     */
    FCVAR_NEVER_AS_STRING = 4096,
    
    /**
     * No flags 
     */
    FCVAR_NONE = 0,
    
    /**
     * For serverside {{Type|ConVar}}s, notifies all players with blue chat text when the value gets changed
     * 
     * Reported as "nf" by ''cvarlist'' 
     */
    FCVAR_NOTIFY = 256,
    
    /**
     * Makes the {{Type|ConVar}} not changeable while connected to a server or in singleplayer 
     */
    FCVAR_NOT_CONNECTED = 4194304,
    
    /**
     * Forces the {{Type|ConVar}} to only have printable characters ( No control characters )
     * 
     * Reported as "print" by ''cvarlist'' 
     */
    FCVAR_PRINTABLEONLY = 1024,
    
    /**
     * Makes the {{Type|ConVar}} value hidden from all clients ( For example sv_password )
     * 
     * Reported as "prot" by ''cvarlist'' 
     */
    FCVAR_PROTECTED = 32,
    
    /**
     * For serverside {{Type|ConVar}}s, it will send its value to all clients. The {{Type|ConVar}} with the same name must also exist on the client!
     * 
     * Reported as "rep" by ''cvarlist'' 
     */
    FCVAR_REPLICATED = 8192,
    
    /**
     * Prevents the server from querying value of this {{Type|ConVar}} 
     */
    FCVAR_SERVER_CANNOT_QUERY = 536870912,
    
    /**
     * Makes the command only executable from the server console
     * 
     * Reported as "server_can_execute" by ''cvarlist'' 
     */
    FCVAR_SERVER_CAN_EXECUTE = 268435456,
    
    /**
     * Executing the command or changing the {{Type|ConVar}} is only allowed in singleplayer
     * 
     * Reported as "sp" by ''cvarlist'' 
     */
    FCVAR_SPONLY = 64,
    
    /**
     * Don't log the {{Type|ConVar}} changes to console/log files/users
     * 
     * Reported as "log" by ''cvarlist'' 
     */
    FCVAR_UNLOGGED = 2048,
    
    /**
     * If this is set, the convar will become anonymous and won't show up in the 'find' results. 
     */
    FCVAR_UNREGISTERED = 1,
    
    /**
     * For clientside commands, sends the value to the server
     * 
     * Reported as "user" by ''cvarlist'' 
     */
    FCVAR_USERINFO = 512,
}

/**
 * Enumerations used by {{ClassFunction|IGModAudioChannel|FFT}}. Clientside only. 
 * !CompileMembersOnly
 */
declare enum FFT {
    /**
     * 128 levels 
     */
    FFT_256 = 0,
    
    /**
     * 256 levels 
     */
    FFT_512 = 1,
    
    /**
     * 512 levels 
     */
    FFT_1024 = 2,
    
    /**
     * 1024 levels 
     */
    FFT_2048 = 3,
    
    /**
     * 2048 levels 
     */
    FFT_4096 = 4,
    
    /**
     * 4096 levels 
     */
    FFT_8192 = 5,
    
    /**
     * 8192 levels 
     */
    FFT_16384 = 6,
    
    /**
     * 16384 levels 
     */
    FFT_32768 = 7,
}

/**
 * Enumerations used by {{ClassFunction|Entity|AddFlags}}, {{ClassFunction|Entity|RemoveFlags}} and {{ClassFunction|Entity|IsFlagSet}}. 
 * !CompileMembersOnly
 */
declare enum FL {
    /**
     * Is the entity on ground or not 
     */
    FL_ONGROUND = 1,
    
    /**
     * Is player ducking or not 
     */
    FL_DUCKING = 2,
    
    /**
     * Is the player in the process of ducking or standing up 
     */
    FL_ANIMDUCKING = 4,
    
    /**
     * The player is jumping out of water 
     */
    FL_WATERJUMP = 8,
    
    /**
     * This player is controlling a func_train 
     */
    FL_ONTRAIN = 16,
    
    /**
     * Indicates the entity is standing in rain 
     */
    FL_INRAIN = 32,
    
    /**
     * Completely freezes the player 
     */
    FL_FROZEN = 64,
    
    /**
     * This player is controlling something UI related in the world, this prevents his movement, but doesn't freeze mouse movement, jumping, etc. 
     */
    FL_ATCONTROLS = 128,
    
    /**
     * Is this entity a player or not 
     */
    FL_CLIENT = 256,
    
    /**
     * Bots have this flag 
     */
    FL_FAKECLIENT = 512,
    
    /**
     * Is the player in water or not 
     */
    FL_INWATER = 1024,
    
    /**
     * This entity can fly 
     */
    FL_FLY = 2048,
    
    /**
     * This entity can swim 
     */
    FL_SWIM = 4096,
    
    /**
     * This entity is a func_conveyor 
     */
    FL_CONVEYOR = 8192,
    
    /**
     * NPCs have this flag 
     */
    FL_NPC = 16384,
    
    /**
     * Whether the player has god mode enabled 
     */
    FL_GODMODE = 32768,
    
    /**
     * Makes the entity invisible to AI 
     */
    FL_NOTARGET = 65536,
    
    /**
     * This entity can be aimed at 
     */
    FL_AIMTARGET = 131072,
    
    /**
     * Not all corners are valid 
     */
    FL_PARTIALGROUND = 262144,
    
    /**
     * It's a static prop 
     */
    FL_STATICPROP = 524288,
    
    /**
     * worldgraph has this ent listed as something that blocks a connection 
     */
    FL_GRAPHED = 1048576,
    
    /**
     * This entity is a grenade, unused 
     */
    FL_GRENADE = 2097152,
    
    /**
     * Changes the SV_Movestep() behavior to not do any processing 
     */
    FL_STEPMOVEMENT = 4194304,
    
    /**
     * Doesn't generate touch functions, calls {{HookFunction|ENTITY|EndTouch}} when this flag gets set during a touch callback 
     */
    FL_DONTTOUCH = 8388608,
    
    /**
     * Base velocity has been applied this frame (used to convert base velocity into momentum) 
     */
    FL_BASEVELOCITY = 16777216,
    
    /**
     * This entity is a brush and part of the world 
     */
    FL_WORLDBRUSH = 33554432,
    
    /**
     * This entity can be seen by NPCs 
     */
    FL_OBJECT = 67108864,
    
    /**
     * This entity is about to get removed 
     */
    FL_KILLME = 134217728,
    
    /**
     * This entity is on fire 
     */
    FL_ONFIRE = 268435456,
    
    /**
     * The entity is currently dissolving 
     */
    FL_DISSOLVING = 536870912,
    
    /**
     * This entity is about to become a ragdoll 
     */
    FL_TRANSRAGDOLL = 1073741824,
    
    /**
     * This moving door can't be blocked by the player 
     */
    FL_UNBLOCKABLE_BY_PLAYER = -2147483648,
}

/**
 * Enumerations used by {{GlobalFunction|AccessorFunc}}. 
 * !CompileMembersOnly
 */
declare enum FORCE {
    /**
     * Forces the function to take {{Type|string}}s only 
     */
    FORCE_STRING = 1,
    
    /**
     * Forces the function to take {{Type|number}}s only 
     */
    FORCE_NUMBER = 2,
    
    /**
     * Forces the function to take {{Type|boolean}}s only 
     */
    FORCE_BOOL = 3,
}

/**
 * Enumerations used by {{ClassFunction|Entity|SetSolidFlags}} and {{ClassFunction|Entity|GetSolidFlags}}. 
 * !CompileMembersOnly
 */
declare enum FSOLID {
    /**
     */
    FSOLID_CUSTOMRAYTEST = 1,
    
    /**
     */
    FSOLID_CUSTOMBOXTEST = 2,
    
    /**
     */
    FSOLID_NOT_SOLID = 4,
    
    /**
     */
    FSOLID_TRIGGER = 8,
    
    /**
     */
    FSOLID_NOT_STANDABLE = 16,
    
    /**
     */
    FSOLID_VOLUME_CONTENTS = 32,
    
    /**
     */
    FSOLID_FORCE_WORLD_ALIGNED = 64,
    
    /**
     */
    FSOLID_USE_TRIGGER_BOUNDS = 128,
    
    /**
     */
    FSOLID_ROOT_PARENT_ALIGNED = 256,
    
    /**
     */
    FSOLID_TRIGGER_TOUCH_DEBRIS = 512,
    
    /**
     */
    FSOLID_MAX_BITS = 10,
}

/**
 * Enumerations used by {{ClassFunction|PhysObj|AddGameFlag}}, {{ClassFunction|PhysObj|HasGameFlag}} and {{ClassFunction|PhysObj|ClearGameFlag}}. 
 * !CompileMembersOnly
 */
declare enum FVPHYSICS {
    /**
     * Won't receive physics forces from collisions and won't collide with other {{Type|PhysObj}} with the same flag set 
     */
    FVPHYSICS_CONSTRAINT_STATIC = 2,
    
    /**
     * Colliding with entities will cause 1000 damage with DMG_DISSOLVE as the damage type, but only if EFL_NO_DISSOLVE is not set 
     */
    FVPHYSICS_DMG_DISSOLVE = 512,
    
    /**
     * Does slice damage, not just blunt damage 
     */
    FVPHYSICS_DMG_SLICE = 1,
    
    /**
     * Will deal high physics damage(?) even with a small mass 
     */
    FVPHYSICS_HEAVY_OBJECT = 32,
    
    /**
     * This {{Type|PhysObj}} is part of an entity with multiple {{Type|PhysObj}} , such as a ragdoll or a vehicle , and will be considered during collision damage events 
     */
    FVPHYSICS_MULTIOBJECT_ENTITY = 16,
    
    /**
     * Colliding with entities won't cause physics damage 
     */
    FVPHYSICS_NO_IMPACT_DMG = 1024,
    
    /**
     * Like FVPHYSICS_NO_NPC_IMPACT_DMG, but only checks for NPCs. Usually set on Combine Balls fired by Combine Soldiers 
     */
    FVPHYSICS_NO_NPC_IMPACT_DMG = 2048,
    
    /**
     * Doesn't allow the player to pick this {{Type|PhysObj}} with the Gravity Gun or +use pickup 
     */
    FVPHYSICS_NO_PLAYER_PICKUP = 128,
    
    /**
     * We won't collide with other {{Type|PhysObj}} associated to the same entity, only used for vehicles and ragdolls held by the Super Gravity Gun 
     */
    FVPHYSICS_NO_SELF_COLLISIONS = 32768,
    
    /**
     * This {{Type|PhysObj}} is part of a ragdoll 
     */
    FVPHYSICS_PART_OF_RAGDOLL = 8,
    
    /**
     * Set by the physics engine when two {{Type|PhysObj}} are penetrating each other 
     */
    FVPHYSICS_PENETRATING = 64,
    
    /**
     * Set when the player is holding this {{Type|PhysObj}} with the Gravity Gun or +use pickup 
     */
    FVPHYSICS_PLAYER_HELD = 4,
    
    /**
     * This object was thrown by the Gravity Gun , stuns Antlion guards, Hunters, and squashes Antlion grubs 
     */
    FVPHYSICS_WAS_THROWN = 256,
}

/**
 * Enumerations used by {{ClassFunction|Player|AnimResetGestureSlot}} and {{ClassFunction|Player|AnimRestartGesture}}. 
 * !CompileMembersOnly
 */
declare enum GESTURE_SLOT {
    /**
     * Slot for weapon gestures 
     */
    GESTURE_SLOT_ATTACK_AND_RELOAD = 0,
    
    /**
     */
    GESTURE_SLOT_GRENADE = 1,
    
    /**
     * Slot for jump gestures 
     */
    GESTURE_SLOT_JUMP = 2,
    
    /**
     * Slot for swimming gestures 
     */
    GESTURE_SLOT_SWIM = 3,
    
    /**
     * Slot for flinching gestures 
     */
    GESTURE_SLOT_FLINCH = 4,
    
    /**
     */
    GESTURE_SLOT_VCD = 5,
    
    /**
     * Slot for custom gestures 
     */
    GESTURE_SLOT_CUSTOM = 6,
}

/**
 * Enumerations used by {{LibraryFunction|game|SetGlobalState}} and {{LibraryFunction|game|GetGlobalState}}.
 * 
 * Serverside only. 
 * !CompileMembersOnly
 */
declare enum GLOBAL {
    /**
     * Initial state, the global state is off. 
     */
    GLOBAL_OFF = 0,
    
    /**
     * The global state is enabled. 
     */
    GLOBAL_ON = 1,
    
    /**
     * The global state is dead and is no longer active. It will be cleared. 
     */
    GLOBAL_DEAD = 2,
}

/**
 * Enumerations used by {{ClassFunction|IGModAudioChannel|GetState}}. Clientside only. 
 * !CompileMembersOnly
 */
declare enum GMOD_CHANNEL {
    /**
     * The channel is stopped 
     */
    GMOD_CHANNEL_STOPPED = 0,
    
    /**
     * The channel is playing 
     */
    GMOD_CHANNEL_PLAYING = 1,
    
    /**
     * The channel is paused 
     */
    GMOD_CHANNEL_PAUSED = 2,
    
    /**
     * The channel is buffering 
     */
    GMOD_CHANNEL_STALLED = 3,
}

/**
 * Enumerations used by {{HookFunction|GM|ScalePlayerDamage}} and {{HookFunction|GM|ScaleNPCDamage}} and returned by {{ClassFunction|Player|LastHitGroup}}. 
 * !CompileMembersOnly
 */
declare enum HITGROUP {
    /**
     * 1:1 damage. This hitgroup is not present on default player models.
     * It is unknown how this is generated in {{HookFunction|GM|ScalePlayerDamage}}, but it occurs when shot by NPCs ( npc_combine_s ) for example. 
     */
    HITGROUP_GENERIC = 0,
    
    /**
     * Head 
     */
    HITGROUP_HEAD = 1,
    
    /**
     * Chest 
     */
    HITGROUP_CHEST = 2,
    
    /**
     * Stomach 
     */
    HITGROUP_STOMACH = 3,
    
    /**
     * Left arm 
     */
    HITGROUP_LEFTARM = 4,
    
    /**
     * Right arm 
     */
    HITGROUP_RIGHTARM = 5,
    
    /**
     * Left leg 
     */
    HITGROUP_LEFTLEG = 6,
    
    /**
     * Right leg 
     */
    HITGROUP_RIGHTLEG = 7,
    
    /**
     * Gear. Supposed to be belt area.
     * This hitgroup is not present on default player models. 
     */
    HITGROUP_GEAR = 10,
}

/**
 * Enumerations used by {{ClassFunction|Player|PrintMessage}} and {{GlobalFunction|PrintMessage}}. 
 * !CompileMembersOnly
 */
declare enum HUD {
    /**
     * No longer works; now same as HUD_PRINTCONSOLE 
     */
    HUD_PRINTNOTIFY = 1,
    
    /**
     * Console 
     */
    HUD_PRINTCONSOLE = 2,
    
    /**
     * Chat, also prints to console 
     */
    HUD_PRINTTALK = 3,
    
    /**
     * Center of the screen 
     */
    HUD_PRINTCENTER = 4,
}

/**
 * Enumerations used by {{ClassFunction|NPC|SetHullType}} and  {{ClassFunction|NPC|GetHullType}}. Serverside only. 
 * !CompileMembersOnly
 */
declare enum HULL {
    /**
     */
    HULL_HUMAN = 0,
    
    /**
     */
    HULL_SMALL_CENTERED = 1,
    
    /**
     */
    HULL_WIDE_HUMAN = 2,
    
    /**
     */
    HULL_TINY = 3,
    
    /**
     */
    HULL_WIDE_SHORT = 4,
    
    /**
     */
    HULL_MEDIUM = 5,
    
    /**
     */
    HULL_TINY_CENTERED = 6,
    
    /**
     */
    HULL_LARGE = 7,
    
    /**
     */
    HULL_LARGE_CENTERED = 8,
    
    /**
     */
    HULL_MEDIUM_TALL = 9,
}

/**
 * Enumerations used by {{GlobalFunction|GetRenderTargetEx}}. Clientside only. 
 * !CompileMembersOnly
 */
declare enum IMAGE_FORMAT {
    /**
     */
    IMAGE_FORMAT_DEFAULT = -1,
    
    /**
     */
    IMAGE_FORMAT_RGBA8888 = 0,
    
    /**
     */
    IMAGE_FORMAT_ABGR8888 = 1,
    
    /**
     */
    IMAGE_FORMAT_RGB888 = 2,
    
    /**
     */
    IMAGE_FORMAT_BGR888 = 3,
    
    /**
     */
    IMAGE_FORMAT_RGB565 = 4,
    
    /**
     */
    IMAGE_FORMAT_ARGB8888 = 11,
    
    /**
     */
    IMAGE_FORMAT_BGRA8888 = 12,
    
    /**
     */
    IMAGE_FORMAT_RGBA16161616 = 25,
    
    /**
     */
    IMAGE_FORMAT_RGBA16161616F = 24,
}

/**
 * Unlike {{Enum|BUTTON_CODE}}, these enums are abstracted to allow the user to bind actions to any key they might prefer.
 * 
 * Keybinds using these actions work with two console commands, one starting with a plus and one with a minus symbol. A key press or release will call either the plus or minus command, adding or removing the corresponding enum in the current {{Type|CUserCmd}}.
 * 
 * Enumerations used by:
 * * {{ClassFunction|Player|KeyDown}}
 * * {{ClassFunction|Player|KeyDownLast}}
 * * {{ClassFunction|Player|KeyPressed}}
 * * {{ClassFunction|Player|KeyReleased}}
 * * {{ClassFunction|CMoveData|AddKey}}
 * * {{ClassFunction|CMoveData|GetButtons}}
 * * {{ClassFunction|CMoveData|GetOldButtons}}
 * * {{ClassFunction|CMoveData|KeyDown}}
 * * {{ClassFunction|CMoveData|KeyPressed}}
 * * {{ClassFunction|CMoveData|KeyReleased}}
 * * {{ClassFunction|CMoveData|KeyWasDown}}
 * * {{ClassFunction|CMoveData|SetButtons}}
 * * {{ClassFunction|CMoveData|SetOldButtons}}
 * * {{ClassFunction|CUserCmd|GetButtons}}
 * * {{ClassFunction|CUserCmd|KeyDown}}
 * * {{ClassFunction|CUserCmd|RemoveKey}}
 * * {{ClassFunction|CUserCmd|SetButtons}}
 * * {{HookFunction|GM|KeyPress}}
 * * {{HookFunction|GM|KeyRelease}} 
 * !CompileMembersOnly
 */
declare enum IN {
    /**
     * +attack bound key ( Default: Left Mouse Button ) 
     */
    IN_ATTACK = 1,
    
    /**
     * +jump bound key ( Default: Space ) 
     */
    IN_JUMP = 2,
    
    /**
     * +duck bound key ( Default: CTRL ) 
     */
    IN_DUCK = 4,
    
    /**
     * +forward bound key ( Default: W ) 
     */
    IN_FORWARD = 8,
    
    /**
     * +back bound key ( Default: S ) 
     */
    IN_BACK = 16,
    
    /**
     * +use bound key ( Default: E ) 
     */
    IN_USE = 32,
    
    /**
     */
    IN_CANCEL = 64,
    
    /**
     * +left bound key ( Look left ) 
     */
    IN_LEFT = 128,
    
    /**
     * +right bound key ( Look right ) 
     */
    IN_RIGHT = 256,
    
    /**
     * +moveleft bound key ( Default: A ) 
     */
    IN_MOVELEFT = 512,
    
    /**
     * +moveright bound key ( Default: D ) 
     */
    IN_MOVERIGHT = 1024,
    
    /**
     * +attack2 bound key ( Default: Right Mouse Button ) 
     */
    IN_ATTACK2 = 2048,
    
    /**
     */
    IN_RUN = 4096,
    
    /**
     * +reload bound key ( Default: R ) 
     */
    IN_RELOAD = 8192,
    
    /**
     * +alt1 bound key 
     */
    IN_ALT1 = 16384,
    
    /**
     * +alt2 bound key 
     */
    IN_ALT2 = 32768,
    
    /**
     * +showscores bound key ( Default: Tab ) 
     */
    IN_SCORE = 65536,
    
    /**
     * +speed bound key ( Default: Shift ) 
     */
    IN_SPEED = 131072,
    
    /**
     * +walk bound key ( Slow walk ) 
     */
    IN_WALK = 262144,
    
    /**
     * +zoom bound key ( Suit Zoom ) 
     */
    IN_ZOOM = 524288,
    
    /**
     * For use in weapons. Set in the physgun when scrolling an object away from you. 
     */
    IN_WEAPON1 = 1048576,
    
    /**
     * For use in weapons. Set in the physgun when scrolling an object towards you. 
     */
    IN_WEAPON2 = 2097152,
    
    /**
     */
    IN_BULLRUSH = 4194304,
    
    /**
     * +grenade1 bound key 
     */
    IN_GRENADE1 = 8388608,
    
    /**
     * +grenade2 bound key 
     */
    IN_GRENADE2 = 16777216,
}

/**
 * Enumerations used by {{LibraryFunction|input|IsButtonDown}}.
 * 
 * It's also part of the {{Enum|BUTTON_CODE}}. 
 * !CompileMembersOnly
 */
declare enum JOYSTICK {
    /**
     */
    JOYSTICK_FIRST = 114,
    
    /**
     * rowspan{{eq}}2{{!}}Joystick buttons are in this range, but don't have individual enum names. 
     */
    JOYSTICK_FIRST_BUTTON = 114,
    
    /**
     * style{{eq}}"display:none"{{!}} 
     */
    JOYSTICK_LAST_BUTTON = 145,
    
    /**
     * rowspan{{eq}}2{{!}}Joystick POV buttons are in this range, but don't have individual enum names. 
     */
    JOYSTICK_FIRST_POV_BUTTON = 146,
    
    /**
     * style{{eq}}"display:none"{{!}} 
     */
    JOYSTICK_LAST_POV_BUTTON = 149,
    
    /**
     * rowspan{{eq}}2{{!}}Joystick axis buttons are in this range, but don't have individual enum names. 
     */
    JOYSTICK_FIRST_AXIS_BUTTON = 150,
    
    /**
     * style{{eq}}"display:none"{{!}} 
     */
    JOYSTICK_LAST_AXIS_BUTTON = 161,
    
    /**
     */
    JOYSTICK_LAST = 161,
}

/**
 * Enumerations used by:
 * * {{LibraryFunction|input|IsKeyDown}}
 * * {{LibraryFunction|input|WasKeyPressed}}
 * * {{LibraryFunction|input|WasKeyReleased}}
 * * {{LibraryFunction|input|WasKeyTyped}}
 * * {{LibraryFunction|input|IsKeyTrapping}}
 * * {{LibraryFunction|input|GetKeyName}}
 * * {{LibraryFunction|input|LookupBinding}}
 * * {{HookFunction|PANEL|OnKeyCodePressed}}
 * 
 * It's also part of the {{Enum|BUTTON_CODE}}. 
 * !CompileMembersOnly
 */
declare enum KEY {
    /**
     */
    KEY_FIRST = 0,
    
    /**
     */
    KEY_NONE = 0,
    
    /**
     * Normal number 0 key 
     */
    KEY_0 = 1,
    
    /**
     * Normal number 1 key 
     */
    KEY_1 = 2,
    
    /**
     * Normal number 2 key 
     */
    KEY_2 = 3,
    
    /**
     * Normal number 3 key 
     */
    KEY_3 = 4,
    
    /**
     * Normal number 4 key 
     */
    KEY_4 = 5,
    
    /**
     * Normal number 5 key 
     */
    KEY_5 = 6,
    
    /**
     * Normal number 6 key 
     */
    KEY_6 = 7,
    
    /**
     * Normal number 7 key 
     */
    KEY_7 = 8,
    
    /**
     * Normal number 8 key 
     */
    KEY_8 = 9,
    
    /**
     * Normal number 9 key 
     */
    KEY_9 = 10,
    
    /**
     */
    KEY_A = 11,
    
    /**
     */
    KEY_B = 12,
    
    /**
     */
    KEY_C = 13,
    
    /**
     */
    KEY_D = 14,
    
    /**
     */
    KEY_E = 15,
    
    /**
     */
    KEY_F = 16,
    
    /**
     */
    KEY_G = 17,
    
    /**
     */
    KEY_H = 18,
    
    /**
     */
    KEY_I = 19,
    
    /**
     */
    KEY_J = 20,
    
    /**
     */
    KEY_K = 21,
    
    /**
     */
    KEY_L = 22,
    
    /**
     */
    KEY_M = 23,
    
    /**
     */
    KEY_N = 24,
    
    /**
     */
    KEY_O = 25,
    
    /**
     */
    KEY_P = 26,
    
    /**
     */
    KEY_Q = 27,
    
    /**
     */
    KEY_R = 28,
    
    /**
     */
    KEY_S = 29,
    
    /**
     */
    KEY_T = 30,
    
    /**
     */
    KEY_U = 31,
    
    /**
     */
    KEY_V = 32,
    
    /**
     */
    KEY_W = 33,
    
    /**
     */
    KEY_X = 34,
    
    /**
     */
    KEY_Y = 35,
    
    /**
     */
    KEY_Z = 36,
    
    /**
     * Keypad number 0 key 
     */
    KEY_PAD_0 = 37,
    
    /**
     * Keypad number 1 key 
     */
    KEY_PAD_1 = 38,
    
    /**
     * Keypad number 2 key 
     */
    KEY_PAD_2 = 39,
    
    /**
     * Keypad number 3 key 
     */
    KEY_PAD_3 = 40,
    
    /**
     * Keypad number 4 key 
     */
    KEY_PAD_4 = 41,
    
    /**
     * Keypad number 5 key 
     */
    KEY_PAD_5 = 42,
    
    /**
     * Keypad number 6 key 
     */
    KEY_PAD_6 = 43,
    
    /**
     * Keypad number 7 key 
     */
    KEY_PAD_7 = 44,
    
    /**
     * Keypad number 8 key 
     */
    KEY_PAD_8 = 45,
    
    /**
     * Keypad number 9 key 
     */
    KEY_PAD_9 = 46,
    
    /**
     * Keypad division/slash key (/) 
     */
    KEY_PAD_DIVIDE = 47,
    
    /**
     * Keypad asterisk key (*) 
     */
    KEY_PAD_MULTIPLY = 48,
    
    /**
     * Keypad minus key 
     */
    KEY_PAD_MINUS = 49,
    
    /**
     * Keypad plus key 
     */
    KEY_PAD_PLUS = 50,
    
    /**
     * Keypad enter key 
     */
    KEY_PAD_ENTER = 51,
    
    /**
     * Keypad dot key (.) 
     */
    KEY_PAD_DECIMAL = 52,
    
    /**
     */
    KEY_LBRACKET = 53,
    
    /**
     */
    KEY_RBRACKET = 54,
    
    /**
     */
    KEY_SEMICOLON = 55,
    
    /**
     */
    KEY_APOSTROPHE = 56,
    
    /**
     */
    KEY_BACKQUOTE = 57,
    
    /**
     */
    KEY_COMMA = 58,
    
    /**
     */
    KEY_PERIOD = 59,
    
    /**
     */
    KEY_SLASH = 60,
    
    /**
     */
    KEY_BACKSLASH = 61,
    
    /**
     */
    KEY_MINUS = 62,
    
    /**
     */
    KEY_EQUAL = 63,
    
    /**
     */
    KEY_ENTER = 64,
    
    /**
     */
    KEY_SPACE = 65,
    
    /**
     */
    KEY_BACKSPACE = 66,
    
    /**
     */
    KEY_TAB = 67,
    
    /**
     */
    KEY_CAPSLOCK = 68,
    
    /**
     */
    KEY_NUMLOCK = 69,
    
    /**
     */
    KEY_ESCAPE = 70,
    
    /**
     */
    KEY_SCROLLLOCK = 71,
    
    /**
     */
    KEY_INSERT = 72,
    
    /**
     */
    KEY_DELETE = 73,
    
    /**
     */
    KEY_HOME = 74,
    
    /**
     */
    KEY_END = 75,
    
    /**
     */
    KEY_PAGEUP = 76,
    
    /**
     */
    KEY_PAGEDOWN = 77,
    
    /**
     */
    KEY_BREAK = 78,
    
    /**
     * The left Shift key, has been seen to be triggered by Right Shift in {{HookFunction|PANEL|OnKeyCodePressed}} 
     */
    KEY_LSHIFT = 79,
    
    /**
     */
    KEY_RSHIFT = 80,
    
    /**
     */
    KEY_LALT = 81,
    
    /**
     */
    KEY_RALT = 82,
    
    /**
     */
    KEY_LCONTROL = 83,
    
    /**
     */
    KEY_RCONTROL = 84,
    
    /**
     * The left Windows key or the Command key on Mac OSX 
     */
    KEY_LWIN = 85,
    
    /**
     * The right Windows key or the Command key on Mac OSX 
     */
    KEY_RWIN = 86,
    
    /**
     */
    KEY_APP = 87,
    
    /**
     */
    KEY_UP = 88,
    
    /**
     */
    KEY_LEFT = 89,
    
    /**
     */
    KEY_DOWN = 90,
    
    /**
     */
    KEY_RIGHT = 91,
    
    /**
     */
    KEY_F1 = 92,
    
    /**
     */
    KEY_F2 = 93,
    
    /**
     */
    KEY_F3 = 94,
    
    /**
     */
    KEY_F4 = 95,
    
    /**
     */
    KEY_F5 = 96,
    
    /**
     */
    KEY_F6 = 97,
    
    /**
     */
    KEY_F7 = 98,
    
    /**
     */
    KEY_F8 = 99,
    
    /**
     */
    KEY_F9 = 100,
    
    /**
     */
    KEY_F10 = 101,
    
    /**
     */
    KEY_F11 = 102,
    
    /**
     */
    KEY_F12 = 103,
    
    /**
     */
    KEY_CAPSLOCKTOGGLE = 104,
    
    /**
     */
    KEY_NUMLOCKTOGGLE = 105,
    
    /**
     */
    KEY_LAST = 106,
    
    /**
     */
    KEY_SCROLLLOCKTOGGLE = 106,
    
    /**
     */
    KEY_COUNT = 107,
    
    /**
     */
    KEY_XBUTTON_A = 114,
    
    /**
     */
    KEY_XBUTTON_B = 115,
    
    /**
     */
    KEY_XBUTTON_X = 116,
    
    /**
     */
    KEY_XBUTTON_Y = 117,
    
    /**
     */
    KEY_XBUTTON_LEFT_SHOULDER = 118,
    
    /**
     */
    KEY_XBUTTON_RIGHT_SHOULDER = 119,
    
    /**
     */
    KEY_XBUTTON_BACK = 120,
    
    /**
     */
    KEY_XBUTTON_START = 121,
    
    /**
     */
    KEY_XBUTTON_STICK1 = 122,
    
    /**
     */
    KEY_XBUTTON_STICK2 = 123,
    
    /**
     */
    KEY_XBUTTON_UP = 146,
    
    /**
     */
    KEY_XBUTTON_RIGHT = 147,
    
    /**
     */
    KEY_XBUTTON_DOWN = 148,
    
    /**
     */
    KEY_XBUTTON_LEFT = 149,
    
    /**
     */
    KEY_XSTICK1_RIGHT = 150,
    
    /**
     */
    KEY_XSTICK1_LEFT = 151,
    
    /**
     */
    KEY_XSTICK1_DOWN = 152,
    
    /**
     */
    KEY_XSTICK1_UP = 153,
    
    /**
     */
    KEY_XBUTTON_LTRIGGER = 154,
    
    /**
     */
    KEY_XBUTTON_RTRIGGER = 155,
    
    /**
     */
    KEY_XSTICK2_RIGHT = 156,
    
    /**
     */
    KEY_XSTICK2_LEFT = 157,
    
    /**
     */
    KEY_XSTICK2_DOWN = 158,
    
    /**
     */
    KEY_XSTICK2_UP = 159,
}

/**
 * Used by {{ClassFunction|Entity|SetRenderFX}} and returned by {{ClassFunction|Entity|GetRenderFX}}.
 * 
 * Most of these require alpha value of entitys color to be less than 255 to have any visible effect. 
 * !CompileMembersOnly
 */
declare enum kRenderFx {
    /**
     * None. No change. 
     */
    kRenderFxNone = 0,
    
    /**
     * Slowly pulses the entitys transparency, +-15 to the current alpha. 
     */
    kRenderFxPulseSlow = 1,
    
    /**
     * Quickly pulses the entitys transparency, +-15 to the current alpha. 
     */
    kRenderFxPulseFast = 2,
    
    /**
     * Slowly pulses the entitys transparency, +-60 to the current alpha. 
     */
    kRenderFxPulseSlowWide = 3,
    
    /**
     * Quickly pulses the entitys transparency, +-60 to the current alpha. 
     */
    kRenderFxPulseFastWide = 4,
    
    /**
     * Slowly fades away the entity, making it completely invisible.
     * Starts from whatever alpha the entity currently has set. 
     */
    kRenderFxFadeSlow = 5,
    
    /**
     * Quickly fades away the entity, making it completely invisible.
     * Starts from whatever alpha the entity currently has set. 
     */
    kRenderFxFadeFast = 6,
    
    /**
     * Slowly solidifies the entity, making it fully opaque.
     * Starts from whatever alpha the entity currently has set. 
     */
    kRenderFxSolidSlow = 7,
    
    /**
     * Quickly solidifies the entity, making it fully opaque.
     * Starts from whatever alpha the entity currently has set. 
     */
    kRenderFxSolidFast = 8,
    
    /**
     * Slowly switches the entitys transparency between its alpha and 0. 
     */
    kRenderFxStrobeSlow = 9,
    
    /**
     * Quickly switches the entitys transparency between its alpha and 0. 
     */
    kRenderFxStrobeFast = 10,
    
    /**
     * Very quickly switches the entitys transparency between its alpha and 0. 
     */
    kRenderFxStrobeFaster = 11,
    
    /**
     * Same as Strobe Slow, but the interval is more randomized. 
     */
    kRenderFxFlickerSlow = 12,
    
    /**
     * Same as Strobe Fast, but the interval is more randomized. 
     */
    kRenderFxFlickerFast = 13,
    
    /**
     */
    kRenderFxNoDissipation = 14,
    
    /**
     * Flickers ( randomizes ) the entitys transparency 
     */
    kRenderFxDistort = 15,
    
    /**
     * Same as Distort, but fades the entity away the farther you are from it. 
     */
    kRenderFxHologram = 16,
    
    /**
     */
    kRenderFxExplode = 17,
    
    /**
     */
    kRenderFxGlowShell = 18,
    
    /**
     */
    kRenderFxClampMinScale = 19,
    
    /**
     */
    kRenderFxEnvRain = 20,
    
    /**
     */
    kRenderFxEnvSnow = 21,
    
    /**
     */
    kRenderFxSpotlight = 22,
    
    /**
     */
    kRenderFxRagdoll = 23,
    
    /**
     * Quickly pulses the entitys transparency, from 0 to 255. 
     */
    kRenderFxPulseFastWider = 24,
}

/**
 * Enumerations used as trace masks in {{Struct|Trace}} and {{Struct|HullTrace}}. These enumerations are simply combinations of {{Enum|CONTENTS}}. 
 * !CompileMembersOnly
 */
declare enum MASK {
    /**
     * Anything that is not empty space 
     */
    MASK_ALL = 4294967295,
    
    /**
     * Anything that blocks line of sight for AI 
     */
    MASK_BLOCKLOS = 16449,
    
    /**
     * Anything that blocks line of sight for AI or NPCs 
     */
    MASK_BLOCKLOS_AND_NPCS = 33570881,
    
    /**
     * Water that is moving (may not work) 
     */
    MASK_CURRENT = 16515072,
    
    /**
     * Anything that blocks corpse movement 
     */
    MASK_DEADSOLID = 65547,
    
    /**
     * Anything that blocks NPC movement 
     */
    MASK_NPCSOLID = 33701899,
    
    /**
     * Anything that blocks NPC movement, except other NPCs 
     */
    MASK_NPCSOLID_BRUSHONLY = 147467,
    
    /**
     * The world entity 
     */
    MASK_NPCWORLDSTATIC = 131083,
    
    /**
     * Anything that blocks lighting 
     */
    MASK_OPAQUE = 16513,
    
    /**
     * Anything that blocks lighting, including NPCs 
     */
    MASK_OPAQUE_AND_NPCS = 33570945,
    
    /**
     * Anything that blocks player movement 
     */
    MASK_PLAYERSOLID = 33636363,
    
    /**
     * World + Brushes + Player Clips 
     */
    MASK_PLAYERSOLID_BRUSHONLY = 81931,
    
    /**
     * Anything that stops a bullet (including hitboxes) 
     */
    MASK_SHOT = 1174421507,
    
    /**
     * Anything that stops a bullet (excluding hitboxes) 
     */
    MASK_SHOT_HULL = 100679691,
    
    /**
     * Solids except for grates 
     */
    MASK_SHOT_PORTAL = 33570819,
    
    /**
     * Anything that is (normally) solid 
     */
    MASK_SOLID = 33570827,
    
    /**
     * World + Brushes 
     */
    MASK_SOLID_BRUSHONLY = 16395,
    
    /**
     * Things that split area portals 
     */
    MASK_SPLITAREAPORTAL = 48,
    
    /**
     * Anything that blocks line of sight for players 
     */
    MASK_VISIBLE = 24705,
    
    /**
     * Anything that blocks line of sight for players, including NPCs 
     */
    MASK_VISIBLE_AND_NPCS = 33579137,
    
    /**
     * Anything that has water-like physics 
     */
    MASK_WATER = 16432,
}

/**
 * Enumerations used in {{Struct|TraceResult}} and by {{ClassFunction|Entity|GetMaterialType}}. 
 * !CompileMembersOnly
 */
declare enum MAT {
    /**
     * Antlions 
     */
    MAT_ANTLION = 65,
    
    /**
     * Similar to MAT_FLESH, only used by "bloodyflesh" surface property, has different impact sound 
     */
    MAT_BLOODYFLESH = 66,
    
    /**
     * Concrete 
     */
    MAT_CONCRETE = 67,
    
    /**
     * Dirt 
     */
    MAT_DIRT = 68,
    
    /**
     * The egg sacs in the antlion tunnels in HL2: EP2 
     */
    MAT_EGGSHELL = 69,
    
    /**
     * Flesh 
     */
    MAT_FLESH = 70,
    
    /**
     * Grates, chainlink fences 
     */
    MAT_GRATE = 71,
    
    /**
     * Alien flesh - headcrabs and vortigaunts 
     */
    MAT_ALIENFLESH = 72,
    
    /**
     * Unused 
     */
    MAT_CLIP = 73,
    
    /**
     * Snow 
     */
    MAT_SNOW = 74,
    
    /**
     * Plastic 
     */
    MAT_PLASTIC = 76,
    
    /**
     * Metal 
     */
    MAT_METAL = 77,
    
    /**
     * Sand 
     */
    MAT_SAND = 78,
    
    /**
     * Plants, only used by the "foliage" surface property 
     */
    MAT_FOLIAGE = 79,
    
    /**
     * Electronics, only used by "computer" surface property 
     */
    MAT_COMPUTER = 80,
    
    /**
     * Water, slime 
     */
    MAT_SLOSH = 83,
    
    /**
     * Floor tiles 
     */
    MAT_TILE = 84,
    
    /**
     * Grass 
     */
    MAT_GRASS = 85,
    
    /**
     * Metallic vents 
     */
    MAT_VENT = 86,
    
    /**
     * Wood 
     */
    MAT_WOOD = 87,
    
    /**
     * Skybox or nodraw texture 
     */
    MAT_DEFAULT = 88,
    
    /**
     * Glass 
     */
    MAT_GLASS = 89,
    
    /**
     * "wierd-looking jello effect for advisor shield." 
     */
    MAT_WARPSHIELD = 90,
}

/**
 * Enumerations used by {{LibraryFunction|mesh|Begin}}. Clientside only. 
 * !CompileMembersOnly
 */
declare enum MATERIAL {
    /**
     */
    MATERIAL_LINES = 1,
    
    /**
     */
    MATERIAL_LINE_LOOP = 5,
    
    /**
     */
    MATERIAL_LINE_STRIP = 4,
    
    /**
     */
    MATERIAL_POINTS = 0,
    
    /**
     */
    MATERIAL_POLYGON = 6,
    
    /**
     */
    MATERIAL_QUADS = 7,
    
    /**
     */
    MATERIAL_TRIANGLES = 2,
    
    /**
     */
    MATERIAL_TRIANGLE_STRIP = 3,
}

/**
 * Enumerations used by {{LibraryFunction|render|CullMode}}. Clientside only. 
 * !CompileMembersOnly
 */
declare enum MATERIAL_CULLMODE {
    /**
     * Counter clock wise cull mode 
     */
    MATERIAL_CULLMODE_CCW = 0,
    
    /**
     * Clock wise cull mode 
     */
    MATERIAL_CULLMODE_CW = 1,
}

/**
 * Enumerations used by {{LibraryFunction|render|GetFogMode}} and {{LibraryFunction|render|FogMode}}. Clientside only. 
 * !CompileMembersOnly
 */
declare enum MATERIAL_FOG {
    /**
     * No fog 
     */
    MATERIAL_FOG_NONE = 0,
    
    /**
     * Linear fog 
     */
    MATERIAL_FOG_LINEAR = 1,
    
    /**
     * For use in conjunction with {{LibraryFunction|render|SetFogZ}}. Does not work if start distance is bigger than end distance. Ignores density setting. Seems to be broken? Used for underwater fog by the engine. 
     */
    MATERIAL_FOG_LINEAR_BELOW_FOG_Z = 2,
}

/**
 * Enumerations used by {{LibraryFunction|render|SetLocalModelLights}}. Clientside only. 
 * !CompileMembersOnly
 */
declare enum MATERIAL_LIGHT {
    /**
     * No light 
     */
    MATERIAL_LIGHT_DISABLE = 0,
    
    /**
     * Point light 
     */
    MATERIAL_LIGHT_POINT = 1,
    
    /**
     * Directional light 
     */
    MATERIAL_LIGHT_DIRECTIONAL = 2,
    
    /**
     * Spot light 
     */
    MATERIAL_LIGHT_SPOT = 3,
}

/**
 * Enumerations used by {{GlobalFunction|GetRenderTargetEx}}. Clientside only. 
 * !CompileMembersOnly
 */
declare enum MATERIAL_RT_DEPTH {
    /**
     * Do not create a depth-stencil buffer.
     * Use the default depth-stencil buffer if used as render target 0. 
     */
    MATERIAL_RT_DEPTH_SHARED = 0,
    
    /**
     * Create a depth-stencil buffer.
     * Use the created depth-stencil buffer if used as render target 0. 
     */
    MATERIAL_RT_DEPTH_SEPARATE = 1,
    
    /**
     * Do not create a depth-stencil buffer.
     * Disable depth and stencil buffer usage if used as render target 0. 
     */
    MATERIAL_RT_DEPTH_NONE = 2,
    
    /**
     * Create a depth-stencil buffer.
     * Use the created depth-stencil buffer if used as render target 0.
     * 
     * Creates a color texture despite the name.
     * 
     * Seems to behave the same as MATERIAL_RT_DEPTH_SEPARATE. 
     */
    MATERIAL_RT_DEPTH_ONLY = 3,
}

/**
 * Enumerations used by:
 * * {{LibraryFunction|input|IsMouseDown}}
 * * {{LibraryFunction|input|WasMousePressed}}
 * * {{LibraryFunction|input|WasMouseDoublePressed}}
 * 
 * It's also part of the {{Enum|BUTTON_CODE}}. 
 * !CompileMembersOnly
 */
declare enum MOUSE {
    /**
     * First mouse button 
     */
    MOUSE_FIRST = 107,
    
    /**
     * Left mouse button 
     */
    MOUSE_LEFT = 107,
    
    /**
     * Right mouse button 
     */
    MOUSE_RIGHT = 108,
    
    /**
     * Middle mouse button, aka the wheel press 
     */
    MOUSE_MIDDLE = 109,
    
    /**
     * Mouse 4 button ( Sometimes, mouse wheel tilt left ) 
     */
    MOUSE_4 = 110,
    
    /**
     * Mouse 5 button ( Sometimes, mouse wheel tilt right ) 
     */
    MOUSE_5 = 111,
    
    /**
     * Mouse wheel scroll up 
     */
    MOUSE_WHEEL_UP = 112,
    
    /**
     * Mouse wheel scroll down 
     */
    MOUSE_WHEEL_DOWN = 113,
    
    /**
     * Last mouse button 
     */
    MOUSE_LAST = 113,
    
    /**
     * Mouse button count 
     */
    MOUSE_COUNT = 7,
}

/**
 * Enumerations used by {{ClassFunction|Entity|SetMoveCollide}} and {{ClassFunction|Entity|GetMoveCollide}}. 
 * !CompileMembersOnly
 */
declare enum MOVECOLLIDE {
    /**
     * Default behavior 
     */
    MOVECOLLIDE_DEFAULT = 0,
    
    /**
     * Entity bounces, reflects, based on elasticity of surface and object - applies friction (adjust velocity) 
     */
    MOVECOLLIDE_FLY_BOUNCE = 1,
    
    /**
     * {{HookFunction|ENTITY|Touch}} will modify the velocity however it likes 
     */
    MOVECOLLIDE_FLY_CUSTOM = 2,
    
    /**
     * Entity slides along surfaces (no bounce) - applies friciton (adjusts velocity) 
     */
    MOVECOLLIDE_FLY_SLIDE = 3,
    
    /**
     * Number of different movecollides 
     */
    MOVECOLLIDE_COUNT = 4,
}

/**
 * Enumerations used by {{ClassFunction|Entity|SetMoveType}} and {{ClassFunction|Entity|GetMoveType}}. 
 * !CompileMembersOnly
 */
declare enum MOVETYPE {
    /**
     * Don't move 
     */
    MOVETYPE_NONE = 0,
    
    /**
     * For players, in TF2 commander view, etc 
     */
    MOVETYPE_ISOMETRIC = 1,
    
    /**
     * Player only, moving on the ground 
     */
    MOVETYPE_WALK = 2,
    
    /**
     * Monster/NPC movement 
     */
    MOVETYPE_STEP = 3,
    
    /**
     * Fly, no gravity 
     */
    MOVETYPE_FLY = 4,
    
    /**
     * Fly, with gravity 
     */
    MOVETYPE_FLYGRAVITY = 5,
    
    /**
     * Physics movetype 
     */
    MOVETYPE_VPHYSICS = 6,
    
    /**
     * No clip to world, but pushes and crushes things 
     */
    MOVETYPE_PUSH = 7,
    
    /**
     * Noclip 
     */
    MOVETYPE_NOCLIP = 8,
    
    /**
     * For players, when moving on a ladder 
     */
    MOVETYPE_LADDER = 9,
    
    /**
     * Spectator movetype. DO '''NOT''' use this to make player spectate 
     */
    MOVETYPE_OBSERVER = 10,
    
    /**
     * Custom movetype, can be applied to the player to prevent the default movement code from running, while still calling the related hooks 
     */
    MOVETYPE_CUSTOM = 11,
}

/**
 * Enumerations used by {{ClassFunction|CNavArea|GetAttributes}} and {{ClassFunction|CNavArea|HasAttributes}}. 
 * !CompileMembersOnly
 */
declare enum NAV_MESH {
    /**
     * The nav area is invalid. 
     */
    NAV_MESH_INVALID = 0,
    
    /**
     * Must crouch to use this node/area 
     */
    NAV_MESH_CROUCH = 1,
    
    /**
     * Must jump to traverse this area (only used during generation) 
     */
    NAV_MESH_JUMP = 2,
    
    /**
     * Do not adjust for obstacles, just move along area 
     */
    NAV_MESH_PRECISE = 4,
    
    /**
     * Inhibit discontinuity jumping 
     */
    NAV_MESH_NO_JUMP = 8,
    
    /**
     * Must stop when entering this area 
     */
    NAV_MESH_STOP = 16,
    
    /**
     * Must run to traverse this area 
     */
    NAV_MESH_RUN = 32,
    
    /**
     * Must walk to traverse this area 
     */
    NAV_MESH_WALK = 64,
    
    /**
     * Avoid this area unless alternatives are too dangerous 
     */
    NAV_MESH_AVOID = 128,
    
    /**
     * Area may become blocked, and should be periodically checked 
     */
    NAV_MESH_TRANSIENT = 256,
    
    /**
     * Area should not be considered for hiding spot generation 
     */
    NAV_MESH_DONT_HIDE = 512,
    
    /**
     * Bots hiding in this area should stand 
     */
    NAV_MESH_STAND = 1024,
    
    /**
     * Hostages shouldn't use this area 
     */
    NAV_MESH_NO_HOSTAGES = 2048,
    
    /**
     * This area represents stairs, do not attempt to climb or jump them - just walk up 
     */
    NAV_MESH_STAIRS = 4096,
    
    /**
     * Don't merge this area with adjacent areas 
     */
    NAV_MESH_NO_MERGE = 8192,
    
    /**
     * This nav area is the climb point on the tip of an obstacle 
     */
    NAV_MESH_OBSTACLE_TOP = 16384,
    
    /**
     * This nav area is adjacent to a drop of at least CliffHeight 
     */
    NAV_MESH_CLIFF = 32768,
    
    /**
     * Area has designer specified cost controlled by func_nav_cost entities 
     */
    NAV_MESH_FUNC_COST = 536870912,
    
    /**
     * Area is in an elevator's path 
     */
    NAV_MESH_HAS_ELEVATOR = 1073741824,
    
    /**
     */
    NAV_MESH_NAV_BLOCKER = -2147483648,
}

/**
 * Enumerations used by {{Type|CNavArea}} methods.
 * These Enums correspond to each corner of a {{Type|CNavArea}}
 * 
 * **Note:**
 * >These enumerations do not exist in game and are listed here only for reference! 
 * !CompileMembersOnly
 */
declare enum NavCorner {
    /**
     * North West Corner 
     */
    NORTH_WEST = 0,
    
    /**
     * North East Corner 
     */
    NORTH_EAST = 1,
    
    /**
     * South East Corner 
     */
    SOUTH_EAST = 2,
    
    /**
     * South West Corner 
     */
    SOUTH_WEST = 3,
    
    /**
     * Represents all corners, only applicable to certain functions, such as {{ClassFunction|CNavArea|PlaceOnGround}}. 
     */
    NUM_CORNERS = 4,
}

/**
 * Enumerations used by {{Type|CNavArea}} methods.
 * These Enums correspond to each side of a {{Type|CNavArea}}
 * 
 * **Note:**
 * >These enumerations do not exist in game and are listed here only for reference! 
 * !CompileMembersOnly
 */
declare enum NavDir {
    /**
     * North from given {{Type|CNavArea}} 
     */
    NORTH = 0,
    
    /**
     * East from given {{Type|CNavArea}} 
     */
    EAST = 1,
    
    /**
     * South from given {{Type|CNavArea}} 
     */
    SOUTH = 2,
    
    /**
     * West from given {{Type|CNavArea}} 
     */
    WEST = 3,
}

/**
 * Enumerations used by {{ClassFunction|CNavArea|GetParentHow}}.
 * 
 * **Note:**
 * >These enumerations do not exist in game and are listed here only for reference! 
 * !CompileMembersOnly
 */
declare enum NavTraverseType {
    /**
     */
    GO_NORTH = 0,
    
    /**
     */
    GO_EAST = 1,
    
    /**
     */
    GO_SOUTH = 2,
    
    /**
     */
    GO_WEST = 3,
    
    /**
     */
    GO_LADDER_UP = 4,
    
    /**
     */
    GO_LADDER_DOWN = 5,
    
    /**
     */
    GO_JUMP = 6,
    
    /**
     */
    GO_ELEVATOR_UP = 7,
    
    /**
     */
    GO_ELEVATOR_DOWN = 8,
}

/**
 * Enumerations used by {{LibraryFunction|notification|AddLegacy}}. Clientside only. 
 * !CompileMembersOnly
 */
declare enum NOTIFY {
    /**
     * [[File:NOTIFY_GENERIC_PREVIEW.png|middle]] Generic notification 
     */
    NOTIFY_GENERIC = 0,
    
    /**
     * [[File:NOTIFY_ERROR_PREVIEW.png|middle]] Error notification 
     */
    NOTIFY_ERROR = 1,
    
    /**
     * [[File:NOTIFY_UNDO_PREVIEW.png|middle]] Undo notification 
     */
    NOTIFY_UNDO = 2,
    
    /**
     * [[File:NOTIFY_HINT_PREVIEW.png|middle]] Hint notification 
     */
    NOTIFY_HINT = 3,
    
    /**
     * [[File:NOTIFY_CLEANUP_PREVIEW.png|middle]] Cleanup notification 
     */
    NOTIFY_CLEANUP = 4,
}

/**
 * Enumerations used by {{ClassFunction|NPC|SetNPCState}}. Serverside only. 
 * !CompileMembersOnly
 */
declare enum NPC_STATE {
    /**
     * Invalid state 
     */
    NPC_STATE_INVALID = -1,
    
    /**
     * NPC default state 
     */
    NPC_STATE_NONE = 0,
    
    /**
     * NPC is idle 
     */
    NPC_STATE_IDLE = 1,
    
    /**
     * NPC is alert and searching for enemies 
     */
    NPC_STATE_ALERT = 2,
    
    /**
     * NPC is in combat 
     */
    NPC_STATE_COMBAT = 3,
    
    /**
     * NPC is executing scripted sequence 
     */
    NPC_STATE_SCRIPT = 4,
    
    /**
     * NPC is playing dead (used for expressions) 
     */
    NPC_STATE_PLAYDEAD = 5,
    
    /**
     * NPC is prone to death 
     */
    NPC_STATE_PRONE = 6,
    
    /**
     * NPC is dead 
     */
    NPC_STATE_DEAD = 7,
}

/**
 * **Note:**
 * >These only exist serverside.
 * 
 * Various count enums. 
 * !CompileMembersOnly
 */
declare enum NUM {
    /**
     * Amount of {{Enum|CLASS}}. Used by {{GlobalFunction|Add_NPC_Class}}. 
     */
    NUM_AI_CLASSES = 36,
    
    /**
     * Amount of {{Enum|HULL}}. 
     */
    NUM_HULLS = 10,
}

/**
 * Enumerations used by {{ClassFunction|Player|SetObserverMode}}, {{ClassFunction|Player|GetObserverMode}} and {{ClassFunction|Player|Spectate}}. 
 * !CompileMembersOnly
 */
declare enum OBS_MODE {
    /**
     * Not spectating 
     */
    OBS_MODE_NONE = 0,
    
    /**
     */
    OBS_MODE_DEATHCAM = 1,
    
    /**
     * TF2-like freezecam 
     */
    OBS_MODE_FREEZECAM = 2,
    
    /**
     * Same as OBS_MODE_CHASE, but you can't rotate the view 
     */
    OBS_MODE_FIXED = 3,
    
    /**
     * First person cam 
     */
    OBS_MODE_IN_EYE = 4,
    
    /**
     * Chase cam, 3rd person cam, free rotation around the spectated target 
     */
    OBS_MODE_CHASE = 5,
    
    /**
     * Free roam/noclip-alike 
     */
    OBS_MODE_ROAMING = 6,
}

/**
 * Enumerations used by {{GlobalFunction|ParticleEffectAttach}}. 
 * !CompileMembersOnly
 */
declare enum PATTACH {
    /**
     * Particle spawns in entity's origin and does not follow it 
     */
    PATTACH_ABSORIGIN = 0,
    
    /**
     * Particle attaches to entity's origin and follows the entity 
     */
    PATTACH_ABSORIGIN_FOLLOW = 1,
    
    /**
     * Create at a custom origin, but don't follow 
     */
    PATTACH_CUSTOMORIGIN = 2,
    
    /**
     * Particle attaches to passed to {{GlobalFunction|ParticleEffectAttach}} attachment id, but does not follow the entity 
     */
    PATTACH_POINT = 3,
    
    /**
     * Particle attaches to passed to {{GlobalFunction|ParticleEffectAttach}} attachment id and follows the entity 
     */
    PATTACH_POINT_FOLLOW = 4,
    
    /**
     * Particle spawns in the beginning of coordinates ( Vector( 0, 0, 0 ) ), used for control points that don't attach to an entity 
     */
    PATTACH_WORLDORIGIN = 5,
}

/**
 * Enumerations used by {{ClassFunction|Entity|SetAnimation}} 
 * !CompileMembersOnly
 */
declare enum PLAYER_ANIM {
    /**
     */
    PLAYER_IDLE = 0,
    
    /**
     */
    PLAYER_WALK = 1,
    
    /**
     */
    PLAYER_JUMP = 2,
    
    /**
     */
    PLAYER_SUPERJUMP = 3,
    
    /**
     */
    PLAYER_DIE = 4,
    
    /**
     * Player attack according to current hold type, used in SWEPs 
     */
    PLAYER_ATTACK1 = 5,
    
    /**
     */
    PLAYER_IN_VEHICLE = 6,
    
    /**
     * Player reload according to current hold type, used in SWEPs 
     */
    PLAYER_RELOAD = 7,
    
    /**
     */
    PLAYER_START_AIMING = 8,
    
    /**
     */
    PLAYER_LEAVE_AIMING = 9,
}

/**
 * Used by {{HookFunction|GM|DoAnimationEvent}} and {{ClassFunction|Player|DoCustomAnimEvent}}. 
 * !CompileMembersOnly
 */
declare enum PLAYERANIMEVENT {
    /**
     * Primary attack 
     */
    PLAYERANIMEVENT_ATTACK_PRIMARY = 0,
    
    /**
     * Secondary attack 
     */
    PLAYERANIMEVENT_ATTACK_SECONDARY = 1,
    
    /**
     * Grenade throw 
     */
    PLAYERANIMEVENT_ATTACK_GRENADE = 2,
    
    /**
     * Reload 
     */
    PLAYERANIMEVENT_RELOAD = 3,
    
    /**
     * Looping reload (single-reload shotguns) 
     */
    PLAYERANIMEVENT_RELOAD_LOOP = 4,
    
    /**
     * Looping reload end 
     */
    PLAYERANIMEVENT_RELOAD_END = 5,
    
    /**
     * Jump 
     */
    PLAYERANIMEVENT_JUMP = 6,
    
    /**
     * Swim 
     */
    PLAYERANIMEVENT_SWIM = 7,
    
    /**
     * Die 
     */
    PLAYERANIMEVENT_DIE = 8,
    
    /**
     */
    PLAYERANIMEVENT_FLINCH_CHEST = 9,
    
    /**
     */
    PLAYERANIMEVENT_FLINCH_HEAD = 10,
    
    /**
     */
    PLAYERANIMEVENT_FLINCH_LEFTARM = 11,
    
    /**
     */
    PLAYERANIMEVENT_FLINCH_RIGHTARM = 12,
    
    /**
     */
    PLAYERANIMEVENT_FLINCH_LEFTLEG = 13,
    
    /**
     */
    PLAYERANIMEVENT_FLINCH_RIGHTLEG = 14,
    
    /**
     */
    PLAYERANIMEVENT_DOUBLEJUMP = 15,
    
    /**
     */
    PLAYERANIMEVENT_CANCEL = 16,
    
    /**
     * Spawn 
     */
    PLAYERANIMEVENT_SPAWN = 17,
    
    /**
     */
    PLAYERANIMEVENT_SNAP_YAW = 18,
    
    /**
     * Custom activity 
     */
    PLAYERANIMEVENT_CUSTOM = 19,
    
    /**
     * Play activity in gesture slot 
     */
    PLAYERANIMEVENT_CUSTOM_GESTURE = 20,
    
    /**
     * Play sequence 
     */
    PLAYERANIMEVENT_CUSTOM_SEQUENCE = 21,
    
    /**
     * Play sequence in gesture slot 
     */
    PLAYERANIMEVENT_CUSTOM_GESTURE_SEQUENCE = 22,
    
    /**
     * Cancel reload animation 
     */
    PLAYERANIMEVENT_CANCEL_RELOAD = 23,
}

/**
 * Enumerations used by {{GlobalFunction|ClientsideModel}}, ENT.RenderGroup in {{Struct|ENT}} and {{ClassFunction|Entity|GetRenderGroup}}. 
 * !CompileMembersOnly
 */
declare enum RENDERGROUP {
    /**
     * Huge static prop, possibly leftover from goldsrc 
     */
    RENDERGROUP_STATIC_HUGE = 0,
    
    /**
     * Huge opaque entity, possibly leftover from goldsrc 
     */
    RENDERGROUP_OPAQUE_HUGE = 1,
    
    /**
     * Static props? 
     */
    RENDERGROUP_STATIC = 6,
    
    /**
     * For non transparent/solid entities.
     * 
     * For scripted entities, this will have {{HookFunction|ENTITY|Draw}} called 
     */
    RENDERGROUP_OPAQUE = 7,
    
    /**
     * For translucent/transparent entities
     * 
     * For scripted entities, this will have {{HookFunction|ENTITY|DrawTranslucent}} called 
     */
    RENDERGROUP_TRANSLUCENT = 8,
    
    /**
     * For both translucent/transparent and opaque/solid anim entities
     * 
     * For scripted entities, this will have both, {{HookFunction|ENTITY|Draw}} and {{HookFunction|ENTITY|DrawTranslucent}} called 
     */
    RENDERGROUP_BOTH = 9,
    
    /**
     * Solid weapon view models 
     */
    RENDERGROUP_VIEWMODEL = 10,
    
    /**
     * Transparent overlays etc 
     */
    RENDERGROUP_VIEWMODEL_TRANSLUCENT = 11,
    
    /**
     * For brush entities 
     */
    RENDERGROUP_OPAQUE_BRUSH = 12,
    
    /**
     * Unclassfied. Won't get drawn. 
     */
    RENDERGROUP_OTHER = 13,
}

/**
 * Enumerations used by {{ClassFunction|Entity|SetRenderMode}} and {{ClassFunction|Entity|GetRenderMode}}. 
 * !CompileMembersOnly
 */
declare enum RENDERMODE {
    /**
     * Normal render mode 
     */
    RENDERMODE_NORMAL = 0,
    
    /**
     */
    RENDERMODE_TRANSCOLOR = 1,
    
    /**
     */
    RENDERMODE_TRANSTEXTURE = 2,
    
    /**
     */
    RENDERMODE_GLOW = 3,
    
    /**
     * Use this to make alpha of {{GlobalFunction|Color}} work for your entity. For players, it must be set for their active weapon aswell. 
     */
    RENDERMODE_TRANSALPHA = 4,
    
    /**
     */
    RENDERMODE_TRANSADD = 5,
    
    /**
     */
    RENDERMODE_ENVIROMENTAL = 6,
    
    /**
     */
    RENDERMODE_TRANSADDFRAMEBLEND = 7,
    
    /**
     */
    RENDERMODE_TRANSALPHADD = 8,
    
    /**
     */
    RENDERMODE_WORLDGLOW = 9,
    
    /**
     */
    RENDERMODE_NONE = 10,
}

/**
 * Enumerations used by {{GlobalFunction|GetRenderTargetEx}}. Clientside only. 
 * !CompileMembersOnly
 */
declare enum RT_SIZE {
    /**
     * Only allowed for render targets that don't want a depth buffer (because if they have a depth buffer, the render target must be less than or equal to the size of the framebuffer). 
     */
    RT_SIZE_NO_CHANGE = 0,
    
    /**
     * Don't play with the specified width and height other than making sure it fits in the framebuffer. 
     */
    RT_SIZE_DEFAULT = 1,
    
    /**
     * Apply picmip to the render target's width and height. 
     */
    RT_SIZE_PICMIP = 2,
    
    /**
     * frame_buffer_width / 4 
     */
    RT_SIZE_HDR = 3,
    
    /**
     * Same size as frame buffer, or next lower power of 2 if we can't do that. 
     */
    RT_SIZE_FULL_FRAME_BUFFER = 4,
    
    /**
     * Target of specified size, don't mess with dimensions 
     */
    RT_SIZE_OFFSCREEN = 5,
    
    /**
     * Same size as the frame buffer, rounded up if necessary for systems that can't do non-power of two textures. 
     */
    RT_SIZE_FULL_FRAME_BUFFER_ROUNDED_UP = 6,
}

/**
 * Enumerations for NPC schedules, used by {{HookFunction|ENTITY|StartEngineSchedule}} and {{ClassFunction|NPC|SetSchedule}}. Serverside only. 
 * !CompileMembersOnly
 */
declare enum SCHED {
    /**
     * The schedule enum limit 
     */
    LAST_SHARED_SCHEDULE = 88,
    
    /**
     * Begins AI script based on NPC's ''m_hCine'' save value. 
     */
    SCHED_AISCRIPT = 56,
    
    /**
     * Idle stance and face ideal yaw angles. 
     */
    SCHED_ALERT_FACE = 5,
    
    /**
     */
    SCHED_ALERT_FACE_BESTSOUND = 6,
    
    /**
     */
    SCHED_ALERT_REACT_TO_COMBAT_SOUND = 7,
    
    /**
     * Rotate 180 degrees and back to check for enemies. 
     */
    SCHED_ALERT_SCAN = 8,
    
    /**
     * Remain idle until an enemy is heard or found. 
     */
    SCHED_ALERT_STAND = 9,
    
    /**
     * Walk until an enemy is heard or found. 
     */
    SCHED_ALERT_WALK = 10,
    
    /**
     * Remain idle until provoked or an enemy is found. 
     */
    SCHED_AMBUSH = 52,
    
    /**
     * Performs ACT_ARM. 
     */
    SCHED_ARM_WEAPON = 48,
    
    /**
     * Back away from enemy. If not possible to back away then go behind enemy. 
     */
    SCHED_BACK_AWAY_FROM_ENEMY = 24,
    
    /**
     */
    SCHED_BACK_AWAY_FROM_SAVE_POSITION = 26,
    
    /**
     * Heavy damage was taken for the first time in a while. 
     */
    SCHED_BIG_FLINCH = 23,
    
    /**
     * Begin chasing an enemy. 
     */
    SCHED_CHASE_ENEMY = 17,
    
    /**
     * Failed to chase enemy. 
     */
    SCHED_CHASE_ENEMY_FAILED = 18,
    
    /**
     * Face current enemy. 
     */
    SCHED_COMBAT_FACE = 12,
    
    /**
     */
    SCHED_COMBAT_PATROL = 75,
    
    /**
     */
    SCHED_COMBAT_STAND = 15,
    
    /**
     */
    SCHED_COMBAT_SWEEP = 13,
    
    /**
     */
    SCHED_COMBAT_WALK = 16,
    
    /**
     * When not moving, will perform ACT_COWER. 
     */
    SCHED_COWER = 40,
    
    /**
     * Regular NPC death. 
     */
    SCHED_DIE = 53,
    
    /**
     * Plays NPC death sound (doesn't kill NPC). 
     */
    SCHED_DIE_RAGDOLL = 54,
    
    /**
     * Holsters active weapon. (Only works with NPC's that can holster weapons) 
     */
    SCHED_DISARM_WEAPON = 49,
    
    /**
     */
    SCHED_DROPSHIP_DUSTOFF = 79,
    
    /**
     * Preform Ducking animation. (Only works with npc_alyx) 
     */
    SCHED_DUCK_DODGE = 84,
    
    /**
     * Search for a place to shoot current enemy. 
     */
    SCHED_ESTABLISH_LINE_OF_FIRE = 35,
    
    /**
     */
    SCHED_ESTABLISH_LINE_OF_FIRE_FALLBACK = 36,
    
    /**
     * Failed doing current schedule. 
     */
    SCHED_FAIL = 81,
    
    /**
     * Failed to establish a line of fire. 
     */
    SCHED_FAIL_ESTABLISH_LINE_OF_FIRE = 38,
    
    /**
     */
    SCHED_FAIL_NOSTOP = 82,
    
    /**
     * Failed to take cover. 
     */
    SCHED_FAIL_TAKE_COVER = 31,
    
    /**
     * Fall to ground when in the air. 
     */
    SCHED_FALL_TO_GROUND = 78,
    
    /**
     */
    SCHED_FEAR_FACE = 14,
    
    /**
     */
    SCHED_FLEE_FROM_BEST_SOUND = 29,
    
    /**
     * Plays ACT_FLINCH_PHYSICS. 
     */
    SCHED_FLINCH_PHYSICS = 80,
    
    /**
     * Force walk to position (debug). 
     */
    SCHED_FORCED_GO = 71,
    
    /**
     * Force run to position (debug). 
     */
    SCHED_FORCED_GO_RUN = 72,
    
    /**
     * Pick up item if within a radius of 5 units. 
     */
    SCHED_GET_HEALTHKIT = 66,
    
    /**
     * Take cover and reload weapon. 
     */
    SCHED_HIDE_AND_RELOAD = 50,
    
    /**
     * Idle stance 
     */
    SCHED_IDLE_STAND = 1,
    
    /**
     * Walk to position. 
     */
    SCHED_IDLE_WALK = 2,
    
    /**
     * Walk to random position within a radius of 200 units. 
     */
    SCHED_IDLE_WANDER = 3,
    
    /**
     */
    SCHED_INTERACTION_MOVE_TO_PARTNER = 85,
    
    /**
     */
    SCHED_INTERACTION_WAIT_FOR_PARTNER = 86,
    
    /**
     */
    SCHED_INVESTIGATE_SOUND = 11,
    
    /**
     */
    SCHED_MELEE_ATTACK1 = 41,
    
    /**
     */
    SCHED_MELEE_ATTACK2 = 42,
    
    /**
     * Move away from player. 
     */
    SCHED_MOVE_AWAY = 68,
    
    /**
     * Stop moving and continue enemy scan. 
     */
    SCHED_MOVE_AWAY_END = 70,
    
    /**
     * Failed to move away; stop moving. 
     */
    SCHED_MOVE_AWAY_FAIL = 69,
    
    /**
     * Move away from enemy while facing it and checking for new enemies. 
     */
    SCHED_MOVE_AWAY_FROM_ENEMY = 25,
    
    /**
     * Move to the range the weapon is preferably used at. 
     */
    SCHED_MOVE_TO_WEAPON_RANGE = 34,
    
    /**
     * Pick up a new weapon if within a radius of 5 units. 
     */
    SCHED_NEW_WEAPON = 63,
    
    /**
     * Fail safe: Create the weapon that the NPC went to pick up if it was removed during pick up schedule. 
     */
    SCHED_NEW_WEAPON_CHEAT = 64,
    
    /**
     * No schedule is being performed. 
     */
    SCHED_NONE = 0,
    
    /**
     * Prevents movement until COND_NPC_UNFREEZE(68) is set. 
     */
    SCHED_NPC_FREEZE = 73,
    
    /**
     * Run to random position and stop if enemy is heard or found. 
     */
    SCHED_PATROL_RUN = 76,
    
    /**
     * Walk to random position and stop if enemy is heard or found. 
     */
    SCHED_PATROL_WALK = 74,
    
    /**
     */
    SCHED_PRE_FAIL_ESTABLISH_LINE_OF_FIRE = 37,
    
    /**
     */
    SCHED_RANGE_ATTACK1 = 43,
    
    /**
     */
    SCHED_RANGE_ATTACK2 = 44,
    
    /**
     * Stop moving and reload until danger is heard. 
     */
    SCHED_RELOAD = 51,
    
    /**
     */
    SCHED_RUN_FROM_ENEMY = 32,
    
    /**
     */
    SCHED_RUN_FROM_ENEMY_FALLBACK = 33,
    
    /**
     */
    SCHED_RUN_FROM_ENEMY_MOB = 83,
    
    /**
     * Run to random position within a radius of 500 units. 
     */
    SCHED_RUN_RANDOM = 77,
    
    /**
     */
    SCHED_SCENE_GENERIC = 62,
    
    /**
     */
    SCHED_SCRIPTED_CUSTOM_MOVE = 59,
    
    /**
     */
    SCHED_SCRIPTED_FACE = 61,
    
    /**
     */
    SCHED_SCRIPTED_RUN = 58,
    
    /**
     */
    SCHED_SCRIPTED_WAIT = 60,
    
    /**
     */
    SCHED_SCRIPTED_WALK = 57,
    
    /**
     * Shoot cover that the enemy is behind. 
     */
    SCHED_SHOOT_ENEMY_COVER = 39,
    
    /**
     * Sets the NPC to a sleep-like state. 
     */
    SCHED_SLEEP = 87,
    
    /**
     */
    SCHED_SMALL_FLINCH = 22,
    
    /**
     */
    SCHED_SPECIAL_ATTACK1 = 45,
    
    /**
     */
    SCHED_SPECIAL_ATTACK2 = 46,
    
    /**
     */
    SCHED_STANDOFF = 47,
    
    /**
     */
    SCHED_SWITCH_TO_PENDING_WEAPON = 65,
    
    /**
     */
    SCHED_TAKE_COVER_FROM_BEST_SOUND = 28,
    
    /**
     * Take cover from current enemy. 
     */
    SCHED_TAKE_COVER_FROM_ENEMY = 27,
    
    /**
     */
    SCHED_TAKE_COVER_FROM_ORIGIN = 30,
    
    /**
     * Chase set NPC target. 
     */
    SCHED_TARGET_CHASE = 21,
    
    /**
     * Face NPC target. 
     */
    SCHED_TARGET_FACE = 20,
    
    /**
     * Human victory dance. 
     */
    SCHED_VICTORY_DANCE = 19,
    
    /**
     */
    SCHED_WAIT_FOR_SCRIPT = 55,
    
    /**
     */
    SCHED_WAIT_FOR_SPEAK_FINISH = 67,
    
    /**
     * Spot an enemy and go from an idle state to combat state. 
     */
    SCHED_WAKE_ANGRY = 4,
}

/**
 * Enumerations used by {{ClassFunction|Player|ScreenFade}}. 
 */
declare enum SCREENFADE {
    /**
     * Fade out after the hold time has passed 
     */
    IN = 1,
    
    /**
     * Fade in, hold time passes, disappear 
     */
    OUT = 2,
    
    /**
     * With white color, turns the screen black 
     */
    MODULATE = 4,
    
    /**
     * No effects, never disappear 
     */
    STAYOUT = 8,
    
    /**
     * Appear, Disappear, no effects 
     */
    PURGE = 16,
}

/**
 * Enumerations used by Kinect SDK bindings. 
 */
declare enum SENSORBONE {
    /**
     */
    SHOULDER_RIGHT = 8,
    
    /**
     */
    SHOULDER_LEFT = 4,
    
    /**
     */
    HIP = 0,
    
    /**
     */
    ELBOW_RIGHT = 9,
    
    /**
     */
    KNEE_RIGHT = 17,
    
    /**
     */
    WRIST_RIGHT = 10,
    
    /**
     */
    ANKLE_LEFT = 14,
    
    /**
     */
    FOOT_LEFT = 15,
    
    /**
     */
    WRIST_LEFT = 6,
    
    /**
     */
    FOOT_RIGHT = 19,
    
    /**
     */
    HAND_RIGHT = 11,
    
    /**
     */
    SHOULDER = 2,
    
    /**
     */
    HIP_LEFT = 12,
    
    /**
     */
    HIP_RIGHT = 16,
    
    /**
     */
    HAND_LEFT = 7,
    
    /**
     */
    ANKLE_RIGHT = 18,
    
    /**
     */
    SPINE = 1,
    
    /**
     */
    ELBOW_LEFT = 5,
    
    /**
     */
    KNEE_LEFT = 13,
    
    /**
     */
    HEAD = 3,
}

/**
 * Enumerations describing certain spawnflags. Everything except for SF_PHYS* is serverside only.
 * 
 * * SF_CITIZEN_* spawnflags represent spawnflags only usable on [https://developer.valvesoftware.com/wiki/Npc_citizen npc_citizen].
 * * SF_NPC_* - Usable on all NPCs
 * * SF_PHYSBOX_* - Usable on [https://developer.valvesoftware.com/wiki/Func_physbox func_physbox]
 * * SF_PHYSPROP_* - Usable on [https://developer.valvesoftware.com/wiki/Prop_physics prop_physics] entities
 * 
 * **Note:**
 * >This is not a full list of available spawnflags, there are ''a lot'' more, each unique to each entity, you can find out more on the Valve Developer Community website for the entities in question. 
 * !CompileMembersOnly
 */
declare enum SF {
    /**
     * Citizen that resupplies ammo 
     */
    SF_CITIZEN_AMMORESUPPLIER = 524288,
    
    /**
     * "Follow the player as soon as I spawn" 
     */
    SF_CITIZEN_FOLLOW = 65536,
    
    /**
     * "Work outside the speech semaphore system" 
     */
    SF_CITIZEN_IGNORE_SEMAPHORE = 2097152,
    
    /**
     * Makes the citizen a medic 
     */
    SF_CITIZEN_MEDIC = 131072,
    
    /**
     * Citizen cannot join players squad, and will not able to be commanded by the Half-Life 2 command system for Citizens 
     */
    SF_CITIZEN_NOT_COMMANDABLE = 1048576,
    
    /**
     * Gives the citizen a random head 
     */
    SF_CITIZEN_RANDOM_HEAD = 262144,
    
    /**
     * Gives the citizen a random female head 
     */
    SF_CITIZEN_RANDOM_HEAD_FEMALE = 8388608,
    
    /**
     * Gives the citizen a random male head 
     */
    SF_CITIZEN_RANDOM_HEAD_MALE = 4194304,
    
    /**
     * "Use render bounds instead of human hull for guys sitting in chairs, etc". Must be set before Spawn() is called to take effect 
     */
    SF_CITIZEN_USE_RENDER_BOUNDS = 16777216,
    
    /**
     * Makes the floor turret friendly 
     */
    SF_FLOOR_TURRET_CITIZEN = 512,
    
    /**
     * Do Alternate collision for this NPC (player avoidance) 
     */
    SF_NPC_ALTCOLLISION = 4096,
    
    /**
     * [https://developer.valvesoftware.com/wiki/NPC_Sensing Think outside PVS] 
     */
    SF_NPC_ALWAYSTHINK = 1024,
    
    /**
     * NPC Drops health kit when it dies 
     */
    SF_NPC_DROP_HEALTHKIT = 8,
    
    /**
     */
    SF_NPC_FADE_CORPSE = 512,
    
    /**
     * If not set, means *teleport* to ground 
     */
    SF_NPC_FALL_TO_GROUND = 4,
    
    /**
     * No IDLE sounds until angry 
     */
    SF_NPC_GAG = 2,
    
    /**
     */
    SF_NPC_LONG_RANGE = 256,
    
    /**
     * Ignore player push - Don't give way to player 
     */
    SF_NPC_NO_PLAYER_PUSHAWAY = 16384,
    
    /**
     * NPC Doesn't drop weapon on death 
     */
    SF_NPC_NO_WEAPON_DROP = 8192,
    
    /**
     * Don't acquire enemies or avoid obstacles 
     */
    SF_NPC_START_EFFICIENT = 16,
    
    /**
     * This entity is a template for the [https://developer.valvesoftware.com/wiki/Npc_template_maker npc_template_maker]. It will not spawn automatically and cannot be used with [https://developer.valvesoftware.com/wiki/Point_template point_template]. 
     */
    SF_NPC_TEMPLATE = 2048,
    
    /**
     * Wait for script 
     */
    SF_NPC_WAIT_FOR_SCRIPT = 128,
    
    /**
     * Wait till seen 
     */
    SF_NPC_WAIT_TILL_SEEN = 1,
    
    /**
     * If set, calls {{ClassFunction|PhysObj|EnableMotion}}( false ) on the func_physbox when the physics are created 
     */
    SF_PHYSBOX_MOTIONDISABLED = 32768,
    
    /**
     * Gravity gun is NOT allowed to pick this up. 
     */
    SF_PHYSBOX_NEVER_PICK_UP = 2097152,
    
    /**
     * If set, calls {{ClassFunction|PhysObj|EnableMotion}}( false ) on the func_physbox when the physics are created. See [https://developer.valvesoftware.com/wiki/Physics_optimization Physics optimization] 
     */
    SF_PHYSPROP_MOTIONDISABLED = 8,
    
    /**
     * Prevent that physbox from being picked up 
     */
    SF_PHYSPROP_PREVENT_PICKUP = 512,
    
    /**
     * Makes the rollermine friendly 
     */
    SF_ROLLERMINE_FRIENDLY = 65536,
}

/**
 * Enumerations used by {{HookFunction|ENTITY|PhysicsSimulate}}. 
 * !CompileMembersOnly
 */
declare enum SIM {
    /**
     * Don't simulate physics 
     */
    SIM_NOTHING = 0,
    
    /**
     * Vectors in local coordinate system 
     */
    SIM_LOCAL_ACCELERATION = 1,
    
    /**
     * Vectors in local coordinate system 
     */
    SIM_LOCAL_FORCE = 2,
    
    /**
     * Vectors in world coordinate system 
     */
    SIM_GLOBAL_ACCELERATION = 3,
    
    /**
     * Vectors in world coordinate system 
     */
    SIM_GLOBAL_FORCE = 4,
}

/**
 * Sound flags used by {{GlobalFunction|EmitSound}} and {{ClassFunction|Entity|EmitSound}}. 
 * !CompileMembersOnly
 */
declare enum SND {
    /**
     * To keep the compiler happy 
     */
    SND_NOFLAGS = 0,
    
    /**
     * Change sound vol 
     */
    SND_CHANGE_VOL = 1,
    
    /**
     * Change sound pitch 
     */
    SND_CHANGE_PITCH = 2,
    
    /**
     * Stop the sound 
     */
    SND_STOP = 4,
    
    /**
     * We're spawning, used in some cases for ambients. Not sent over net, only a param between dll and server. 
     */
    SND_SPAWNING = 8,
    
    /**
     * Sound has an initial delay 
     */
    SND_DELAY = 16,
    
    /**
     * Stop all looping sounds on the entity. 
     */
    SND_STOP_LOOPING = 32,
    
    /**
     * This sound should be paused if the game is paused 
     */
    SND_SHOULDPAUSE = 128,
    
    /**
     */
    SND_IGNORE_PHONEMES = 256,
    
    /**
     * Used to change all sounds emitted by an entity, regardless of scriptname 
     */
    SND_IGNORE_NAME = 512,
    
    /**
     */
    SND_DO_NOT_OVERWRITE_EXISTING_ON_CHANNEL = 1024,
}

/**
 * The sound's attenuation; how fast it drops away, enumerations used by {{GlobalFunction|EmitSound}} and {{ClassFunction|Entity|EmitSound}}.
 * 
 * {{Validate}}
 * 
 * The engine starts running into trouble below 60dB.
 * 
 * {{Warning|These enumerations do not exist in the game and are listed here purely for reference purposes only.}} 
 * !CompileMembersOnly
 */
declare enum SNDLVL {
    /**
     * Sound plays everywhere 
     */
    SNDLVL_NONE = 0,
    
    /**
     * Rustling leaves 
     */
    SNDLVL_20dB = 20,
    
    /**
     * Whispering 
     */
    SNDLVL_25dB = 25,
    
    /**
     * Library 
     */
    SNDLVL_30dB = 30,
    
    /**
     */
    SNDLVL_35dB = 35,
    
    /**
     */
    SNDLVL_40dB = 40,
    
    /**
     * Refrigerator 
     */
    SNDLVL_45dB = 45,
    
    /**
     * Average home 
     */
    SNDLVL_50dB = 50,
    
    /**
     * Stop the sound 
     */
    SNDLVL_55dB = 55,
    
    /**
     * Normal conversation, clothes dryer 
     */
    SNDLVL_60dB = 60,
    
    /**
     * Washing machine, dishwasher 
     */
    SNDLVL_65dB = 65,
    
    /**
     */
    SNDLVL_STATIC = 66,
    
    /**
     * Car, vacuum cleaner, mixer, electric sewing machine 
     */
    SNDLVL_70dB = 70,
    
    /**
     * Busy traffic 
     */
    SNDLVL_75dB = 75,
    
    /**
     * Mini-bike, alarm clock, noisy restaurant, office tabulator, outboard motor, passing snowmobile 
     */
    SNDLVL_80dB = 80,
    
    /**
     * Average factory, electric shaver 
     */
    SNDLVL_85dB = 85,
    
    /**
     * Screaming child, passing motorcycle, convertible ride on freeway 
     */
    SNDLVL_90dB = 90,
    
    /**
     */
    SNDLVL_95dB = 95,
    
    /**
     * Subway train, diesel truck, woodworking shop, pneumatic drill, boiler shop, jackhammer 
     */
    SNDLVL_100dB = 100,
    
    /**
     * Helicopter, power mower 
     */
    SNDLVL_105dB = 105,
    
    /**
     * Snowmobile (drivers seat), inboard motorboat, sandblasting 
     */
    SNDLVL_110dB = 110,
    
    /**
     * Car horn, propeller aircraft 
     */
    SNDLVL_120dB = 120,
    
    /**
     * Air raid siren 
     */
    SNDLVL_130dB = 130,
    
    /**
     * Threshold of pain, gunshot, jet engine 
     */
    SNDLVL_140dB = 140,
    
    /**
     */
    SNDLVL_150dB = 150,
    
    /**
     * Rocket launching 
     */
    SNDLVL_180dB = 180,
}

/**
 * For use with {{ClassFunction|Entity|PhysicsInit}}, {{ClassFunction|Entity|SetSolid}} and {{ClassFunction|Entity|GetSolid}}. 
 * !CompileMembersOnly
 */
declare enum SOLID {
    /**
     * Does not collide with anything
     * **Note:**
     * >No Physics Object will be created when using this. 
     */
    SOLID_NONE = 0,
    
    /**
     * A BSP tree 
     */
    SOLID_BSP = 1,
    
    /**
     * Uses the entity's axis-aligned bounding box for collisions 
     */
    SOLID_BBOX = 2,
    
    /**
     * Uses the entity's object-aligned bounding box for collisions 
     */
    SOLID_OBB = 3,
    
    /**
     * Same as SOLID_OBB but restricts orientation to the Z-axis
     * **Note:**
     * >Seems to be broken. 
     */
    SOLID_OBB_YAW = 4,
    
    /**
     * Always call into the entity for tests 
     */
    SOLID_CUSTOM = 5,
    
    /**
     * Uses the {{Type|PhysObj}}ects of the entity 
     */
    SOLID_VPHYSICS = 6,
}

/**
 * Enumerations for use with {{LibraryFunction|render|SetStencilCompareFunction}}.
 * 
 * The comparison is between the reference value set by {{LibraryFunction|render|SetStencilReferenceValue}}, and the value of each pixel in the stencil buffer.
 * 
 * Clientside only.
 * <noinclude>**Note:**
 * >These enumerations are also mirrored as {{Enum|STENCIL}}.
 * 
 * </noinclude><includeonly>
 * These enumerations are mirrors of {{Enum|STENCILCOMPARISONFUNCTION}}.</includeonly>
 * 
 * Also see this corresponding MSDN entry: http://msdn.microsoft.com/en-us/library/windows/desktop/ff476101%28v=vs.85%29.aspx. 
 * !CompileMembersOnly
 */
declare enum STENCILCOMPARISONFUNCTION {
    /**
     * Never passes. 
     */
    STENCILCOMPARISONFUNCTION_NEVER = 1,
    
    /**
     * Passes where the reference value is less than the stencil value. 
     */
    STENCILCOMPARISONFUNCTION_LESS = 2,
    
    /**
     * Passes where the reference value is equal to the stencil value. 
     */
    STENCILCOMPARISONFUNCTION_EQUAL = 3,
    
    /**
     * Passes where the reference value is less than or equal to the stencil value. 
     */
    STENCILCOMPARISONFUNCTION_LESSEQUAL = 4,
    
    /**
     * Passes where the reference value is greater than the stencil value. 
     */
    STENCILCOMPARISONFUNCTION_GREATER = 5,
    
    /**
     * Passes where the reference value is not equal to the stencil value. 
     */
    STENCILCOMPARISONFUNCTION_NOTEQUAL = 6,
    
    /**
     * Passes where the reference value is greater than or equal to the stencil value. 
     */
    STENCILCOMPARISONFUNCTION_GREATEREQUAL = 7,
    
    /**
     * Always passes. 
     */
    STENCILCOMPARISONFUNCTION_ALWAYS = 8,
}

/**
 * Enumerations for use with {{LibraryFunction|render|SetStencilPassOperation}}, {{LibraryFunction|render|SetStencilFailOperation}} and {{LibraryFunction|render|SetStencilZFailOperation}}. Clientside only.
 * <noinclude>**Note:**
 * >These enumerations are also mirrored as {{Enum|STENCIL}}.
 * 
 * </noinclude><includeonly>
 * These enumerations are mirrors of {{Enum|STENCILOPERATION}}.</includeonly>
 * 
 * Also see this corresponding MSDN entry: http://msdn.microsoft.com/en-us/library/windows/desktop/ff476219%28v=vs.85%29.aspx. 
 * !CompileMembersOnly
 */
declare enum STENCILOPERATION {
    /**
     * Preserves the existing stencil buffer value. 
     */
    STENCILOPERATION_KEEP = 1,
    
    /**
     * Sets the value in the stencil buffer to 0. 
     */
    STENCILOPERATION_ZERO = 2,
    
    /**
     * Sets the value in the stencil buffer to the reference value, set using {{LibraryFunction|render|SetStencilReferenceValue}}. 
     */
    STENCILOPERATION_REPLACE = 3,
    
    /**
     * Increments the value in the stencil buffer by 1, clamping the result. 
     */
    STENCILOPERATION_INCRSAT = 4,
    
    /**
     * Decrements the value in the stencil buffer by 1, clamping the result. 
     */
    STENCILOPERATION_DECRSAT = 5,
    
    /**
     * Inverts the value in the stencil buffer. 
     */
    STENCILOPERATION_INVERT = 6,
    
    /**
     * Increments the value in the stencil buffer by 1, wrapping around on overflow. 
     */
    STENCILOPERATION_INCR = 7,
    
    /**
     * Decrements the value in the stencil buffer by 1, wrapping around on overflow. 
     */
    STENCILOPERATION_DECR = 8,
}

/**
 * Enumerations used in {{HookFunction|GM|PlayerStepSoundTime}} hook. 
 * !CompileMembersOnly
 */
declare enum STEPSOUNDTIME {
    /**
     * Normal step 
     */
    STEPSOUNDTIME_NORMAL = 0,
    
    /**
     * Step on ladder 
     */
    STEPSOUNDTIME_ON_LADDER = 1,
    
    /**
     * Step in water, with water reaching knee 
     */
    STEPSOUNDTIME_WATER_KNEE = 2,
    
    /**
     * Step in water, with water reaching foot 
     */
    STEPSOUNDTIME_WATER_FOOT = 3,
}

/**
 * Used by {{HookFunction|ENTITY|Draw}} and {{HookFunction|ENTITY|DrawTranslucent}}. 
 * !CompileMembersOnly
 */
declare enum STUDIO {
    /**
     */
    STUDIO_RENDER = 1,
    
    /**
     */
    STUDIO_VIEWXFORMATTACHMENTS = 2,
    
    /**
     */
    STUDIO_DRAWTRANSLUCENTSUBMODELS = 4,
    
    /**
     */
    STUDIO_TWOPASS = 8,
    
    /**
     */
    STUDIO_STATIC_LIGHTING = 16,
    
    /**
     */
    STUDIO_WIREFRAME = 32,
    
    /**
     */
    STUDIO_ITEM_BLINK = 64,
    
    /**
     */
    STUDIO_NOSHADOWS = 128,
    
    /**
     */
    STUDIO_WIREFRAME_VCOLLIDE = 256,
    
    /**
     * Not a studio flag, but used to flag when we want studio stats 
     */
    STUDIO_GENERATE_STATS = 16777216,
    
    /**
     * Not a studio flag, but used to flag model as using shadow depth material override 
     */
    STUDIO_SSAODEPTHTEXTURE = 134217728,
    
    /**
     * Not a studio flag, but used to flag model as using shadow depth material override 
     */
    STUDIO_SHADOWDEPTHTEXTURE = 1073741824,
    
    /**
     * Not a studio flag, but used to flag model as a non-sorting brush model 
     */
    STUDIO_TRANSPARENCY = 2147483648,
}

/**
 * Surface flags, currently unused, these would've been returned by the {{Struct|TraceResult}}. 
 * !CompileMembersOnly
 */
declare enum SURF {
    /**
     * Value will hold the light strength 
     */
    SURF_LIGHT = 1,
    
    /**
     * This surface is a skybox, equivalent to HitSky in {{Struct|TraceResult}} 
     */
    SURF_SKY = 4,
    
    /**
     * This surface is animated water 
     */
    SURF_WARP = 8,
    
    /**
     * This surface is translucent 
     */
    SURF_TRANS = 16,
    
    /**
     * This surface cannot have portals placed on, used by Portal's gun 
     */
    SURF_NOPORTAL = 32,
    
    /**
     * This surface is a trigger, seems unused 
     */
    SURF_TRIGGER = 64,
    
    /**
     * This surface is an invisible entity, equivalent to HitNoDraw in {{Struct|TraceResult}} 
     */
    SURF_NODRAW = 128,
    
    /**
     * Make a primary bsp splitter 
     */
    SURF_HINT = 256,
    
    /**
     * This surface can be ignored by impact effects 
     */
    SURF_SKIP = 512,
    
    /**
     * This surface has no lights calculated 
     */
    SURF_NOLIGHT = 1024,
    
    /**
     * Calculate three lightmaps for the surface for bumpmapping 
     */
    SURF_BUMPLIGHT = 2048,
    
    /**
     * No shadows are cast on this surface 
     */
    SURF_NOSHADOWS = 4096,
    
    /**
     * No decals are applied to this surface 
     */
    SURF_NODECALS = 8192,
    
    /**
     * Don't subdivide patches on this surface 
     */
    SURF_NOCHOP = 16384,
    
    /**
     * This surface is part of an entity's hitbox 
     */
    SURF_HITBOX = 32768,
}

/**
 * Default defined teams in Garry's Mod. This does not include any custom teams created in custom gamemodes. Enumerations to use with {{ClassFunction|Player|Team}} 
 * !CompileMembersOnly
 */
declare enum TEAM {
    /**
     * Connecting team ID, set when player connects to the server 
     */
    TEAM_CONNECTING = 0,
    
    /**
     * Unassigned team ID, set right after player connected 
     */
    TEAM_UNASSIGNED = 1001,
    
    /**
     * Spectator team ID 
     */
    TEAM_SPECTATOR = 1002,
}

/**
 * Enumerations used by {{LibraryFunction|render|PushFilterMin}} and {{LibraryFunction|render|PushFilterMag}}.
 * 
 * See [https://msdn.microsoft.com/en-us/library/windows/desktop/bb172615(v=vs.85).aspx this] and [https://en.wikipedia.org/wiki/Texture_filtering this page] for more information on texture filtering. 
 */
declare enum TEXFILTER {
    /**
     */
    NONE = 0,
    
    /**
     */
    POINT = 1,
    
    /**
     */
    LINEAR = 2,
    
    /**
     */
    ANISOTROPIC = 3,
}

/**
 * Enumerations used by {{LibraryFunction|draw|SimpleText}}, {{LibraryFunction|draw|DrawText}} and in {{Struct|TextData}}. 
 * !CompileMembersOnly
 */
declare enum TEXT_ALIGN {
    /**
     * Align the text on the left 
     */
    TEXT_ALIGN_LEFT = 0,
    
    /**
     * Align the text in center 
     */
    TEXT_ALIGN_CENTER = 1,
    
    /**
     * Align the text on the right 
     */
    TEXT_ALIGN_RIGHT = 2,
    
    /**
     * Align the text on the top 
     */
    TEXT_ALIGN_TOP = 3,
    
    /**
     * Align the text on the bottom 
     */
    TEXT_ALIGN_BOTTOM = 4,
}

/**
 * Bit flags used by {{GlobalFunction|GetRenderTargetEx}}. Clientside only. Information taken from [https://developer.valvesoftware.com/wiki/Valve_Texture_Format#Image_flags here]
 * 
 * {{Warning|These enumerations do not exist in the game and are listed here purely for reference purposes only.}} 
 * !CompileMembersOnly
 */
declare enum TEXTUREFLAGS {
    /**
     * Low quality, "pixel art" texture filtering. 
     */
    TEXTUREFLAGS_POINTSAMPLE = 1,
    
    /**
     * Medium quality texture filtering. 
     */
    TEXTUREFLAGS_TRILINEAR = 2,
    
    /**
     * Clamp S coordinates. 
     */
    TEXTUREFLAGS_CLAMPS = 4,
    
    /**
     * Clamp T coordinates. 
     */
    TEXTUREFLAGS_CLAMPT = 8,
    
    /**
     * High quality texture filtering. 
     */
    TEXTUREFLAGS_ANISOTROPIC = 16,
    
    /**
     * Used in skyboxes. Makes sure edges are seamless. 
     */
    TEXTUREFLAGS_HINT_DXT5 = 32,
    
    /**
     * Purpose unknown. 
     */
    TEXTUREFLAGS_PWL_CORRECTED = 64,
    
    /**
     * Texture is a normal map. 
     */
    TEXTUREFLAGS_NORMAL = 128,
    
    /**
     * Render largest mipmap only. (Does not delete existing mipmaps, just disables them.) 
     */
    TEXTUREFLAGS_NOMIP = 256,
    
    /**
     * Not affected by texture resolution settings. 
     */
    TEXTUREFLAGS_NOLOD = 512,
    
    /**
     * No Minimum Mipmap 
     */
    TEXTUREFLAGS_ALL_MIPS = 1024,
    
    /**
     * Texture is an procedural texture (code can modify it). 
     */
    TEXTUREFLAGS_PROCEDURAL = 2048,
    
    /**
     * One bit alpha channel used. 
     */
    TEXTUREFLAGS_ONEBITALPHA = 4096,
    
    /**
     * Eight bit alpha channel used. 
     */
    TEXTUREFLAGS_EIGHTBITALPHA = 8192,
    
    /**
     * Texture is an environment map. 
     */
    TEXTUREFLAGS_ENVMAP = 16384,
    
    /**
     * Texture is a render target. 
     */
    TEXTUREFLAGS_RENDERTARGET = 32768,
    
    /**
     * Texture is a depth render target. 
     */
    TEXTUREFLAGS_DEPTHRENDERTARGET = 65536,
    
    /**
     */
    TEXTUREFLAGS_NODEBUGOVERRIDE = 131072,
    
    /**
     */
    TEXTUREFLAGS_SINGLECOPY = 262144,
    
    /**
     */
    TEXTUREFLAGS_UNUSED_00080000 = 524288,
    
    /**
     * **Deprecated!**
     * 
     * Immediately destroy this texture when its reference count hits zero
     * 
     * (aka TEXTUREFLAGS_UNUSED_00100000) 
     */
    TEXTUREFLAGS_IMMEDIATE_CLEANUP = 1048576,
    
    /**
     */
    TEXTUREFLAGS_UNUSED_00200000 = 2097152,
    
    /**
     */
    TEXTUREFLAGS_UNUSED_00400000 = 4194304,
    
    /**
     * Do not buffer for Video Processing, generally render distance. 
     */
    TEXTUREFLAGS_NODEPTHBUFFER = 8388608,
    
    /**
     */
    TEXTUREFLAGS_UNUSED_01000000 = 16777216,
    
    /**
     * Clamp U coordinates (for volumetric textures). 
     */
    TEXTUREFLAGS_CLAMPU = 33554432,
    
    /**
     * Usable as a vertex texture 
     */
    TEXTUREFLAGS_VERTEXTEXTURE = 67108864,
    
    /**
     * Texture is a SSBump. (SSB) 
     */
    TEXTUREFLAGS_SSBUMP = 134217728,
    
    /**
     */
    TEXTUREFLAGS_UNUSED_10000000 = 268435456,
    
    /**
     * Clamp to border colour on all texture coordinates 
     */
    TEXTUREFLAGS_BORDER = 536870912,
    
    /**
     */
    TEXTUREFLAGS_UNUSED_40000000 = 1073741824,
    
    /**
     */
    TEXTUREFLAGS_UNUSED_80000000 = 2147483648,
}

/**
 * Enumerations used by {{Struct|AmmoData}}. 
 * !CompileMembersOnly
 */
declare enum TRACER {
    /**
     * Generates no tracer effects 
     */
    TRACER_NONE = 0,
    
    /**
     * Generates tracer effects 
     */
    TRACER_LINE = 1,
    
    /**
     * Unused. 
     */
    TRACER_RAIL = 2,
    
    /**
     * Unused. 
     */
    TRACER_BEAM = 3,
    
    /**
     * Generates tracer and makes whizzing noises if the bullet flies past the player being shot at 
     */
    TRACER_LINE_AND_WHIZ = 4,
}

/**
 * Enumerations used in {{HookFunction|ENTITY|UpdateTransmitState}} hook. 
 * !CompileMembersOnly
 */
declare enum TRANSMIT {
    /**
     * Always transmit the entity 
     */
    TRANSMIT_ALWAYS = 0,
    
    /**
     * Never transmit the entity, default for point entities 
     */
    TRANSMIT_NEVER = 1,
    
    /**
     * Transmit when entity is in players view 
     */
    TRANSMIT_PVS = 2,
}

/**
 * Enumerations used by {{LibraryFunction|net|ReadType}} and returned by {{GlobalFunction|TypeID}} 
 * !CompileMembersOnly
 */
declare enum TYPE {
    /**
     * Invalid type 
     */
    TYPE_NONE = -1,
    
    /**
     * **Deprecated:**
     * >Use TYPE_NONE instead!
     * 
     * Invalid type 
     */
    TYPE_INVALID = -1,
    
    /**
     * {{Type|nil}} 
     */
    TYPE_NIL = 0,
    
    /**
     * {{Type|boolean}} 
     */
    TYPE_BOOL = 1,
    
    /**
     * {{Type|light userdata}} 
     */
    TYPE_LIGHTUSERDATA = 2,
    
    /**
     * {{Type|number}} 
     */
    TYPE_NUMBER = 3,
    
    /**
     * {{Type|string}} 
     */
    TYPE_STRING = 4,
    
    /**
     * {{Type|table}} 
     */
    TYPE_TABLE = 5,
    
    /**
     * {{Type|function}} 
     */
    TYPE_FUNCTION = 6,
    
    /**
     * {{Type|userdata}} 
     */
    TYPE_USERDATA = 7,
    
    /**
     * {{Type|thread}} 
     */
    TYPE_THREAD = 8,
    
    /**
     * {{Type|Entity}} and entity sub-classes including {{Type|Player}}, {{Type|Weapon}}, {{Type|NPC}}, {{Type|Vehicle}}, {{Type|CSEnt}}, and {{Type|NextBot}} 
     */
    TYPE_ENTITY = 9,
    
    /**
     * {{Type|Vector}} 
     */
    TYPE_VECTOR = 10,
    
    /**
     * {{Type|Angle}} 
     */
    TYPE_ANGLE = 11,
    
    /**
     * {{Type|PhysObj}} 
     */
    TYPE_PHYSOBJ = 12,
    
    /**
     * {{Type|ISave}} 
     */
    TYPE_SAVE = 13,
    
    /**
     * {{Type|IRestore}} 
     */
    TYPE_RESTORE = 14,
    
    /**
     * {{Type|CTakeDamageInfo}} 
     */
    TYPE_DAMAGEINFO = 15,
    
    /**
     * {{Type|CEffectData}} 
     */
    TYPE_EFFECTDATA = 16,
    
    /**
     * {{Type|CMoveData}} 
     */
    TYPE_MOVEDATA = 17,
    
    /**
     * {{Type|CRecipientFilter}} 
     */
    TYPE_RECIPIENTFILTER = 18,
    
    /**
     * {{Type|CUserCmd}} 
     */
    TYPE_USERCMD = 19,
    
    /**
     * **Deprecated:**
     * >Category=No
     * 
     * Leftover from pre-GMod 13 days 
     */
    TYPE_SCRIPTEDVEHICLE = 20,
    
    /**
     * {{Type|IMaterial}} 
     */
    TYPE_MATERIAL = 21,
    
    /**
     * {{Type|Panel}} 
     */
    TYPE_PANEL = 22,
    
    /**
     * {{Type|CLuaParticle}} 
     */
    TYPE_PARTICLE = 23,
    
    /**
     * {{Type|CLuaEmitter}} 
     */
    TYPE_PARTICLEEMITTER = 24,
    
    /**
     * {{Type|ITexture}} 
     */
    TYPE_TEXTURE = 25,
    
    /**
     * {{Type|bf_read}} 
     */
    TYPE_USERMSG = 26,
    
    /**
     * {{Type|ConVar}} 
     */
    TYPE_CONVAR = 27,
    
    /**
     * {{Type|IMesh}} 
     */
    TYPE_IMESH = 28,
    
    /**
     * {{Type|VMatrix}} 
     */
    TYPE_MATRIX = 29,
    
    /**
     * {{Type|CSoundPatch}} 
     */
    TYPE_SOUND = 30,
    
    /**
     * {{Type|pixelvis_handle_t}} 
     */
    TYPE_PIXELVISHANDLE = 31,
    
    /**
     * dlight_t. Metatable of a {{Struct|DynamicLight}} 
     */
    TYPE_DLIGHT = 32,
    
    /**
     * {{Type|IVideoWriter}} 
     */
    TYPE_VIDEO = 33,
    
    /**
     * {{Type|File}} 
     */
    TYPE_FILE = 34,
    
    /**
     * {{Type|CLuaLocomotion}} 
     */
    TYPE_LOCOMOTION = 35,
    
    /**
     * {{Type|PathFollower}} 
     */
    TYPE_PATH = 36,
    
    /**
     * {{Type|CNavArea}} 
     */
    TYPE_NAVAREA = 37,
    
    /**
     * {{Type|IGModAudioChannel}} 
     */
    TYPE_SOUNDHANDLE = 38,
    
    /**
     * {{Type|CNavLadder}} 
     */
    TYPE_NAVLADDER = 39,
    
    /**
     * {{Type|CNewParticleEffect}} 
     */
    TYPE_PARTICLESYSTEM = 40,
    
    /**
     * {{Type|ProjectedTexture}} 
     */
    TYPE_PROJECTEDTEXTURE = 41,
    
    /**
     * {{Type|PhysCollide}} 
     */
    TYPE_PHYSCOLLIDE = 42,
    
    /**
     * Amount of TYPE_* enums 
     */
    TYPE_COUNT = 43,
    
    /**
     * Metatable of a {{Struct|Color}}.
     * 
     * **Note:**
     * >This doesn't actually represent a unique type returned by {{GlobalFunction|TypeID}}, but instead is a hack for networking colors with {{LibraryFunction|net|WriteType}}. 
     */
    TYPE_COLOR = 255,
}

/**
 * Enumerations used by {{HookFunction|ENTITY|Use}}.
 * 
 * Not to be confused with {{Enum|_USE}} used by {{ClassFunction|Entity|SetUseType}}. 
 * !CompileMembersOnly
 */
declare enum USE {
    /**
     */
    USE_OFF = 0,
    
    /**
     */
    USE_ON = 1,
    
    /**
     */
    USE_SET = 2,
    
    /**
     */
    USE_TOGGLE = 3,
}

/**
 * Enumerations used by {{ClassFunction|NPC|SetCurrentWeaponProficiency}} and  {{ClassFunction|NPC|GetCurrentWeaponProficiency}}. 
 * !CompileMembersOnly
 */
declare enum WEAPON_PROFICIENCY {
    /**
     */
    WEAPON_PROFICIENCY_POOR = 0,
    
    /**
     */
    WEAPON_PROFICIENCY_AVERAGE = 1,
    
    /**
     */
    WEAPON_PROFICIENCY_GOOD = 2,
    
    /**
     */
    WEAPON_PROFICIENCY_VERY_GOOD = 3,
    
    /**
     */
    WEAPON_PROFICIENCY_PERFECT = 4,
}
/**
 * Tables used for bullets see {{LibraryFunction|game|AddAmmoType}}. 
 */
interface AmmoData {
    /**
     * Damage type using {{Enum|DMG}}.
     * 
     * Related function is {{LibraryFunction|game|GetAmmoDamageType}}. 
     */
    dmgtype?: DMG;
    
    /**
     * The force of the ammo.
     * 
     * Related function is {{LibraryFunction|game|GetAmmoForce}}. 
     */
    force?: number;
    
    /**
     * The maximum water splash size. 
     */
    maxsplash?: number;
    
    /**
     * The minimum water splash size. 
     */
    minsplash?: number;
    
    /**
     * Name of the ammo.
     * 
     * Related functions are {{LibraryFunction|game|GetAmmoName}} and {{LibraryFunction|game|GetAmmoID}}. 
     */
    name: string;
    
    /**
     * **Note:**
     * >Can also be a string pointing to a convar. The value will automatically update with the convar's.
     * 
     * The damage dealt to NPCs.
     * 
     * Related function is {{LibraryFunction|game|GetAmmoNPCDamage}}. 
     */
    npcdmg?: number;
    
    /**
     * **Note:**
     * >Can also be a string pointing to a convar. The value will automatically update with the convar's.
     * 
     * The damage dealt to players.
     * 
     * Related function is {{LibraryFunction|game|GetAmmoPlayerDamage}}. 
     */
    plydmg?: number;
    
    /**
     * Tracer type using {{Enum|TRACER}}. 
     */
    tracer?: TRACER;
    
    /**
     * **Note:**
     * >Can also be a string pointing to a convar. The value will automatically update with the convar's.
     * 
     * **Note:**
     * >This does not actually affect ammo max carry. 9999 will always be the max.
     * 
     * Maximum amount of ammo of this type the player should be able to carry in reserve.
     * 
     * Related function is {{LibraryFunction|game|GetAmmoMax}}. 
     */
    maxcarry?: number;
    
    /**
     * Flags for the ammo type using {{Enum|AMMO}}. 
     */
    flags?: AMMO;
}

/**
 * Table used by various functions, such as {{ClassFunction|Entity|GetAttachment}}. 
 */
interface AngPos {
    /**
     * Angle object 
     */
    Ang: Angle;
    
    /**
     * Vector object 
     */
    Pos: Vector;
}

/**
 * Table used by panel animation methods, primarily {{ClassFunction|Panel|AnimationThinkInternal}}, and returned by {{ClassFunction|Panel|NewAnimation}}. 
 */
interface AnimationData {
    /**
     * The system time value returned by {{GlobalFunction|SysTime}} when the animation starts/will start. 
     */
    StartTime: number;
    
    /**
     * The system time value returned by {{GlobalFunction|SysTime}} when the animation ends/will end. 
     */
    EndTime: number;
    
    /**
     * The ease in/out level of the animation. 
     */
    Ease?: number;
    
    /**
     * The callback function that will be called upon completion of the animation. The arguments passed to it are:
     * * {{FuncArg|table|animData|This structure.}}
     * * {{FuncArg|Panel|tgtPanel|The panel the animation was run on.}} 
     */
    OnEnd: Function;
    
    /**
     * The ''think'' function called every frame that will animate the panel object. This varies based on the animation. You can create a custom function for this if you aren't using the stock panel methods. The arguments passed to it are:
     * * {{FuncArg|table|animData|This structure.}}
     * * {{FuncArg|Panel|tgtPanel|The panel the animation is being run on.}}
     * * {{FuncArg|number|fraction|The progress fraction of the animation, between 0 and 1. The change rate of this number will not be linear if you are easing.}} 
     */
    Think: Function;
    
    /**
     * The target position, or target translation of the panel object. Used by {{ClassFunction|Panel|MoveTo}} and {{ClassFunction|Panel|MoveBy}} respectively. 
     */
    Pos: Vector;
    
    /**
     * The position of the panel object when the animation started. Used by {{ClassFunction|Panel|MoveTo}} and {{ClassFunction|Panel|MoveBy}}. 
     */
    StartPos: Vector;
    
    /**
     * Whether to resize the panel horizontally or not. Only used by {{ClassFunction|Panel|SizeTo}}. 
     */
    SizeX: boolean;
    
    /**
     * Whether to resize the panel vertically or not. Only used by {{ClassFunction|Panel|SizeTo}}. 
     */
    SizeY: boolean;
    
    /**
     * The target size of the panel object. Only used by {{ClassFunction|Panel|SizeTo}}. 
     */
    Size?: Vector;
    
    /**
     * The size of the panel object when the animation started. Only used by {{ClassFunction|Panel|SizeTo}}. 
     */
    StartSize: Vector;
    
    /**
     * The target colour of the panel object. Only used by {{ClassFunction|Panel|ColorTo}}. 
     */
    Color: table;
    
    /**
     * The colour of the panel object when the animation started. Only used by {{ClassFunction|Panel|ColorTo}}. 
     */
    StartColor: table;
    
    /**
     * The target alpha (0-255) of the panel object. Only used by {{ClassFunction|Panel|AlphaTo}}. 
     */
    Alpha: number;
    
    /**
     * The alpha (0-255) of the panel object when the animation started. Only used by {{ClassFunction|Panel|AlphaTo}}. 
     */
    StartAlpha: number;
    
    /**
     * The speed to use for transitions when using linear interpolation (Lerp) animations. Only used by {{ClassFunction|Panel|LerpPositions}}. 
     */
    Speed: number;
    
    /**
     * Whether or not to use easing to make the panel 'jump' at its target, slowing as it approaches. Only used by {{ClassFunction|Panel|LerpPositions}}. 
     */
    UseGravity: boolean;
}

/**
 * Table returned by {{ClassFunction|Entity|GetAttachments}}. 
 */
interface AttachmentData {
    /**
     * Index of the attachment. 
     */
    id: number;
    
    /**
     * Name of the attachment. 
     */
    name: string;
}

/**
 * Table returned by {{ClassFunction|Entity|GetBodyGroups}}. 
 */
interface BodyGroupData {
    /**
     * Index of the body group. 
     */
    id: number;
    
    /**
     * Name of the body group. 
     */
    name: string;
    
    /**
     * Amount of subgroups. 
     */
    num: number;
}

/**
 * Structure used for storing/restoring bone manipulations.
 * Data is stored from {{ClassFunction|Entity|GetManipulateBoneScale}}, {{ClassFunction|Entity|GetManipulateBoneAngles}}, and {{ClassFunction|Entity|GetManipulateBonePosition}}.
 * Data is restored using {{ClassFunction|Entity|ManipulateBoneScale}}, {{ClassFunction|Entity|ManipulateBoneAngles}}, and {{ClassFunction|Entity|ManipulateBonePosition}}.
 * 
 * The function {{LibraryFunction|duplicator|DoBoneManipulator}} and {{Struct|EntityCopyData}} use a table
 * containing a BoneManipulationData structure for each bone (that has manipulations applied) with the bone ID as the struct index in the table.
 * 
 * Fields '''s''', '''a''', and '''p''' are set if they don't equal '''Vector( 1, 1, 1 )''', '''Angle( 0, 0, 0 )''', and '''Vector( 0, 0, 0 )''' respectively. 
 */
interface BoneManipulationData {
    /**
     * The entity's scale manipulation of the bone 
     */
    s?: Vector;
    
    /**
     * The entity's angle manipulation of the bone 
     */
    a?: Angle;
    
    /**
     * The entity's position manipulation of the given bone 
     */
    p?: Vector;
}

/**
 * Tables used for bullets see {{ClassFunction|Entity|FireBullets}} and {{HookFunction|GM|EntityFireBullets}}. 
 */
interface Bullet {
    /**
     * The entity that should be reported as attacker eg. a player
     * 
     * By default this would be set to the entity {{ClassFunction|Entity|FireBullets}} is called on. 
     */
    Attacker?: Entity;
    
    /**
     * Function to be called '''after''' the bullet was fired. The arguments are:
     * * {{FuncArg|Entity|attacker}}
     * * {{FuncArg|table|tr|See {{Struct|TraceResult}}}}
     * * {{FuncArg|CTakeDamageInfo|dmgInfo}} 
     */
    Callback?: Function;
    
    /**
     * The damage dealt by the bullet 
     */
    Damage?: number;
    
    /**
     * The force of the bullets 
     */
    Force?: number;
    
    /**
     * Maximum distance the bullet can travel 
     */
    Distance?: number;
    
    /**
     * The hull size of the bullet 
     */
    HullSize?: number;
    
    /**
     * The amount of bullets to fire 
     */
    Num?: number;
    
    /**
     * Show tracer for every x bullets 
     */
    Tracer?: number;
    
    /**
     * The ammunition name 
     */
    AmmoType?: string;
    
    /**
     * The tracer name 
     */
    TracerName?: string;
    
    /**
     * The fire direction 
     */
    Dir?: Vector;
    
    /**
     * The spread, only x and y are needed 
     */
    Spread?: Vector;
    
    /**
     * The position to fire the bullets from 
     */
    Src?: Vector;
    
    /**
     * The entity that the bullet will ignore when it will be shot. 
     */
    IgnoreEntity?: Entity;
}

/**
 * Table structure used {{HookFunction|GM|CalcView}} and {{HookFunction|GM|CalcVehicleView}} hook. 
 */
interface CamData {
    /**
     * The camera's position 
     */
    origin: Vector;
    
    /**
     * The camera's angles 
     */
    angles: Angle;
    
    /**
     * The camera's FOV 
     */
    fov: number;
    
    /**
     * Distance to near clipping plane 
     */
    znear: number;
    
    /**
     * Distance to far clipping plane 
     */
    zfar: number;
    
    /**
     * Set true to draw local players player model. 
     */
    drawviewer?: boolean;
    
    /**
     * If set, enables orthographic mode. The table has following arguments:
     * * {{FuncArg|number|left}}
     * * {{FuncArg|number|right}}
     * * {{FuncArg|number|top}}
     * * {{FuncArg|number|bottom}} 
     */
    ortho?: table;
}

/**
 * Passed as argument of {{HookFunction|ENTITY|PhysicsCollide}}.
 * 
 * **Note:**
 * >Sometimes, the value of 'Speed' can be different from getting the length calculated from 'OurOldVelocity', even though they should be the same, or close to same. It's recommended to do 'OurOldVelocity:Length()' instead. 
 * ```
 * ENT:PhysicsCollide( colData, collider )
 *     -- you may get two completely different values, and the second one should be more accurate.
 *     print(colData.Speed)
 *     print(colData.OurOldVelocity:Length())
 * end
 * ``` 
 */
interface CollisionData {
    /**
     * The collision position 
     */
    HitPos: Vector;
    
    /**
     * The other collision entity 
     */
    HitEntity: Entity;
    
    /**
     * The entity's velocity before the collision 
     */
    OurOldVelocity: Vector;
    
    /**
     * Other entity's physics object 
     */
    HitObject: PhysObj;
    
    /**
     * Time since the last collision ''with this HitEntity'' 
     */
    DeltaTime: number;
    
    /**
     * Speed of the other entity before the collision 
     */
    TheirOldVelocity: Vector;
    
    /**
     * The speed of the entity before the collision 
     */
    Speed: number;
    
    /**
     * Normal of the surface that hit the other entity 
     */
    HitNormal: Vector;
    
    /**
     * Entity's physics object 
     */
    PhysObject: PhysObj;
}

/**
 * Table created by the {{GlobalFunction|Color}} function and used in various situations. 
 */
interface Color {
    /**
     * The red channel 
     */
    r: number;
    
    /**
     * The green channel 
     */
    g: number;
    
    /**
     * The blue channel 
     */
    b: number;
    
    /**
     * The alpha channel 
     */
    a: number;
}

/**
 * Table that maintains information on the creation menu tabs. Each key of the table represents the name of the tab. See {{LibraryFunction|spawnmenu|AddCreationTab}} and {{LibraryFunction|spawnmenu|GetCreationTabs}}. 
 */
interface CreationMenus {
    /**
     * The function used to generate the content of the tab. 
     */
    Function: Function;
    
    /**
     * The icon material that will accompany the title of the tab. 
     */
    Icon: string;
    
    /**
     * The order in which a tab will be displayed relative to the other tabs. 
     */
    Order: number;
    
    /**
     * The tooltip to be shown with the tab. 
     */
    Tooltip: string;
}

/**
 * Table returned by {{LibraryFunction|os|date}} and used by {{LibraryFunction|os|time}}. 
 */
interface DateData {
    /**
     * The current day of the month 
     */
    day: number;
    
    /**
     * The current hour 
     */
    hour: number;
    
    /**
     * Daylight saving 
     */
    isdst: boolean;
    
    /**
     * The current minutes 
     */
    min: number;
    
    /**
     * The current month 
     */
    month: number;
    
    /**
     * The current seconds of the minute 
     */
    sec: number;
    
    /**
     * The current day of the week 
     */
    wday: number;
    
    /**
     * The current day of the year 
     */
    yday: number;
    
    /**
     * The current year 
     */
    year: number;
}

/**
 * Table returned by {{LibraryFunction|debug|getinfo}}.
 * 
 * **Note:**
 * >If a filter is applied to {{LibraryFunction|debug|getinfo}}, some members may not exist!
 * 
 * For functions defined in C/C++ the following members will always have the given values: 
 * * what = "C"
 * * source = "[C]"
 * * nparams = 0
 * * isvararg = true
 * * namewhat = ""
 * * short_src = "[C]"
 * * linedefined = -1
 * * currentline = -1
 * * lastlinedefined = -1 
 */
interface DebugInfo {
    /**
     * Reference to the function that was passed in. If a stack level was specified, this will be the function at that stack level. 0 {{eq}} debug.getinfo, 1 {{eq}} function that called debug.getinfo, etc.
     * 
     * '''Option: f''' 
     */
    func: Function;
    
    /**
     * The line where the function definiton starts (where "function" is located).
     * 
     * '''Option: S''' 
     */
    linedefined: number;
    
    /**
     * The line the function definition ended (where "end" is located).
     * 
     * '''Option: S''' 
     */
    lastlinedefined: number;
    
    /**
     * The path to the file where the passed function is defined prepended by an @ (ex. "@lua/autorun/mytestfile.lua"). This will be the {{GlobalFunction|CompileString}} or {{GlobalFunction|RunString}} identifier if the function wasn't defined in a file, also prepended by an @.
     * 
     * '''Option: S''' 
     */
    source: string;
    
    /**
     * The shortened name of the source (without the @). May be truncated if the source path is long.
     * 
     * '''Option: S''' 
     */
    short_src: string;
    
    /**
     * The language used. Either "Lua" or "C".
     * 
     * '''Option: S''' 
     */
    what: string;
    
    /**
     * The current line. This will be -1 if the code is not executed from a file.
     * 
     * '''Option: l''' (lowercase L) 
     */
    currentline: number;
    
    /**
     * The function name. This will be nil if the name cannot be found. Only works if stack level is passed rather than function pointer.
     * 
     * '''Option: n''' 
     */
    name: string;
    
    /**
     * The function "type". This will be "global", "local", "method", "field". Can also be an empty string if the function name could not be found. Only works if stack level is passed rather than function pointer.
     * 
     * '''Option: n''' 
     */
    namewhat: string;
    
    /**
     * Whether the function is variadic (has a <kbd>...</kbd> argument).
     * 
     * '''Option: u''' 
     */
    isvararg: boolean;
    
    /**
     * The number of arguments the function uses excluding varargs.
     * 
     * '''Option: u''' 
     */
    nparams: number;
    
    /**
     * Upvalue count. Max index that can be used with {{LibraryFunction|debug|getupvalue}}. C functions can have upvalues but they cannot be accessed from Lua.
     * 
     * '''Option: u''' 
     */
    nups: number;
    
    /**
     * A table of all the active lines in the function - that is, lines with code that actually does something (not blank lines or lines with comments only).
     * 
     * The table keys will be line numbers, and their values will all be true. Lines that are inactive are simply not included in the table - they have the value nil.
     * 
     * '''Option: L''' 
     */
    activelines: table;
}

/**
 * Structure for {{GlobalFunction|DynamicLight}}.
 * All members are case insensitive.
 * 
 * **Note:**
 * >This is an actual class named '''dlight_t''', not a table. 
 */
interface DynamicLight {
    /**
     * The brightness of the light. 
     */
    brightness: number;
    
    /**
     * Fade out speed.
     * Here's a formula for calculating Decay for your light: 1000 / fadeOutTimeInSeconds. For example setting decay to 1000 would fade out the light in 1 second, 2000 - 0.5 seconds. 
     */
    decay: number;
    
    /**
     * Time after which light will be removed.
     * 
     * This is relative to {{GlobalFunction|CurTime}}. If you put in a value that is less than or equal to {{GlobalFunction|CurTime}}, the light will not behave properly.
     * 
     * Note, that it does not affect fading out. Light will be removed regardless of it being fully faded out or not. 
     */
    dietime: number;
    
    /**
     * The light direction. Used with '''InnerAngle''' and '''OuterAngle'''. 
     */
    dir?: Vector;
    
    /**
     * The closer this is to zero, the smoother the light will be. Requires '''Dir''' and '''OuterAngle''' to be set. 
     */
    innerangle?: number;
    
    /**
     * The angle of the Dynamic Light. Requires '''Dir''' to be set. 
     */
    outerangle?: number;
    
    /**
     * Makes the light brighter and flicker? Changing the value does not seem to affect anything. 
     */
    key: number;
    
    /**
     * Minimum light 
     */
    minlight?: number;
    
    /**
     * Don't light the world 
     */
    noworld?: boolean;
    
    /**
     * Don't light models 
     */
    nomodel?: boolean;
    
    /**
     * Position of the light 
     */
    pos: Vector;
    
    /**
     * Radius of the light 
     */
    size: number;
    
    /**
     * Flicker style, see [https://developer.valvesoftware.com/wiki/Light_dynamic#Appearances this page] for examples. 
     */
    style: number;
    
    /**
     * The blue part of the color 
     */
    b: number;
    
    /**
     * The green part of the color 
     */
    g: number;
    
    /**
     * The red part of the color 
     */
    r: number;
}

/**
 * Passed as argument of {{HookFunction|GM|EntityEmitSound}}. 
 */
interface EmitSoundInfo {
    /**
     * The file path of the played sound.
     * 
     * Sounds prefixed with ) tell the sound engine that it is a spatial sound; this allows the sound to emit from a specific location within the world.
     * 
     * Sounds prefixed with ^ tell the sound engine that it is a distance based sound. The left channel of the .wav is the 'near' sound that will play when the sound originates close to you, and the right channel is the 'far' sound that will play when the sound originates far from you. 
     */
    SoundName: string;
    
    /**
     * The original file path or soundscript name.
     * 
     * Even if the SoundName value is changed, the OriginalSoundName value will remain the same.
     * 
     * Sounds may be returned as soundscripts (for example, "Weapon_357.Single") instead of the sound's file path. You can use {{LibraryFunction|sound|GetProperties}} to retrieve the actual file path. 
     */
    OriginalSoundName: string;
    
    /**
     * The time at which the sound should be played.
     * 
     * If equal to 0 or CurTime(), the sound is played immediately. If greater than CurTime(), the sound is played with a delay. If less than CurTime(), part of the sound is skipped. 
     */
    SoundTime?: number;
    
    /**
     * The DSP (digital signal processing) preset applied to the sound.
     * 
     * There are approximately 134 different presets defined by the Source engine between 0 and 133. These presets represent different types of 'rooms' or environments.
     * 
     * [https://developer.valvesoftware.com/wiki/Dsp_presets List of DSP's] 
     */
    DSP?: number;
    
    /**
     * The sound's attenuation, a number between 0 (low) and 511 (high)
     * 
     * This determines how fast the sound drops away. A higher value means the sound can be heard farther away.
     * 
     * See {{Enum|SNDLVL}}. 
     */
    SoundLevel?: SNDLVL;
    
    /**
     * The pitch of the played sound, a number between 0 (low) and 255 (high), where 100 is the sound's original pitch. 
     */
    Pitch?: number;
    
    /**
     * The bit flags of the played sound. See {{Enum|SND}} for available options. 
     */
    Flags?: SND;
    
    /**
     * The sound's channel. See {{Enum|CHAN}} for available options. 
     */
    Channel: CHAN;
    
    /**
     * The volume of the played sound, return as a decimal number between 0 (low) and 1 (high). 
     */
    Volume: number;
    
    /**
     * The entity that played the sound. 
     */
    Entity: Entity;
    
    /**
     * The origin of the played sound. 
     */
    Pos: Vector;
}

/**
 * Information about the ENT structure.
 * 
 * To learn more about scripted entities, [[Scripted_Entities|see this page]].
 * 
 * For list of callbacks, see [[:Category:ENTITY_Hooks|ENT Hooks]].
 * 
 * While some of the fields may be serverside or clientside only, it is recommended to provide them on both so addons could use their values. 
 */
interface ENT {
    /**
     * The base entity to derive from. This '''must''' be a valid Lua entity 
     */
    Base?: string;
    
    /**
     * Type of the entity. This '''must be one of these:'''
     * * '''anim'''
     * * '''brush'''
     * * '''point'''
     * * '''ai'''
     * * '''nextbot'''
     * * '''filter'''
     * 
     * See [[Scripted Entities]] for a more detailed explanation of what each one is.
     * 
     * **Bug:**
     * >2745||1521||No 
     */
    Type?: string;
    
    /**
     * Entity class name of the ENT (File or folder name of your ENT).
     * '''This is set automatically ''after'' the entity file is loaded.''' 
     */
    ClassName: string;
    
    /**
     * The folder from where the entity was loaded. This should always be "entity/ent_myentity", regardless whether your ENT is stored as a file, or multiple files in a folder. '''This is set automatically ''before'' the entity file is loaded.''' 
     */
    Folder: string;
    
    /**
     * (Clientside) Set this to true if your entity has animations. 
     */
    AutomaticFrameAdvance?: boolean;
    
    /**
     * (Clientside) Category the ENT is in 
     */
    Category?: string;
    
    /**
     * Whether this ENT should be displayed in the Q menu 
     */
    Spawnable?: boolean;
    
    /**
     * Whether the entity supports Editing. See [[Editable Entities]] for more info. 
     */
    Editable?: boolean;
    
    /**
     * Whether or not only admins can spawn the ENT from their Q menu 
     */
    AdminOnly?: boolean;
    
    /**
     * (Clientside) Nice name of the ENT 
     */
    PrintName?: string;
    
    /**
     * (Clientside) The author of the ENT 
     */
    Author?: string;
    
    /**
     * (Clientside) The contacts of the ENT creator 
     */
    Contact?: string;
    
    /**
     * (Clientside) The purpose of the ENT creation 
     */
    Purpose?: string;
    
    /**
     * (Clientside) How to use your entity 
     */
    Instructions?: string;
    
    /**
     * (Clientside) The SENT's render group, see {{Enum|RENDERGROUP}}. 
     */
    RenderGroup?: RENDERGROUP;
    
    /**
     * (Serverside) Disable the ability for players to duplicate this SENT. 
     */
    DisableDuplicator?: boolean;
    
    /**
     * (Clientside) Sets the spawnmenu content icon type for the entity, used by spawnmenu in the Sandbox-derived gamemodes.
     * See {{LibraryFunction|spawnmenu|AddContentType}} for more information. 
     */
    ScriptedEntityType?: string;
}

/**
 * Information about the ENT structure.
 * 
 * To learn more about scripted entities, [[Scripted_Entities|see this page]].
 * 
 * For list of callbacks, see [[:Category:ENTITY_Hooks|ENT Hooks]].
 * 
 * While some of the fields may be serverside or clientside only, it is recommended to provide them on both so addons could use their values. 
 */
interface Entity {
    /**
     * The base entity to derive from. This '''must''' be a valid Lua entity 
     */
    Base?: string;
    
    /**
     * Type of the entity. This '''must be one of these:'''
     * * '''anim'''
     * * '''brush'''
     * * '''point'''
     * * '''ai'''
     * * '''nextbot'''
     * * '''filter'''
     * 
     * See [[Scripted Entities]] for a more detailed explanation of what each one is.
     * 
     * **Bug:**
     * >2745||1521||No 
     */
    Type?: string;
    
    /**
     * Entity class name of the ENT (File or folder name of your ENT).
     * '''This is set automatically ''after'' the entity file is loaded.''' 
     */
    ClassName: string;
    
    /**
     * The folder from where the entity was loaded. This should always be "entity/ent_myentity", regardless whether your ENT is stored as a file, or multiple files in a folder. '''This is set automatically ''before'' the entity file is loaded.''' 
     */
    Folder: string;
    
    /**
     * (Clientside) Set this to true if your entity has animations. 
     */
    AutomaticFrameAdvance?: boolean;
    
    /**
     * (Clientside) Category the ENT is in 
     */
    Category?: string;
    
    /**
     * Whether this ENT should be displayed in the Q menu 
     */
    Spawnable?: boolean;
    
    /**
     * Whether the entity supports Editing. See [[Editable Entities]] for more info. 
     */
    Editable?: boolean;
    
    /**
     * Whether or not only admins can spawn the ENT from their Q menu 
     */
    AdminOnly?: boolean;
    
    /**
     * (Clientside) Nice name of the ENT 
     */
    PrintName?: string;
    
    /**
     * (Clientside) The author of the ENT 
     */
    Author?: string;
    
    /**
     * (Clientside) The contacts of the ENT creator 
     */
    Contact?: string;
    
    /**
     * (Clientside) The purpose of the ENT creation 
     */
    Purpose?: string;
    
    /**
     * (Clientside) How to use your entity 
     */
    Instructions?: string;
    
    /**
     * (Clientside) The SENT's render group, see {{Enum|RENDERGROUP}}. 
     */
    RenderGroup?: RENDERGROUP;
    
    /**
     * (Serverside) Disable the ability for players to duplicate this SENT. 
     */
    DisableDuplicator?: boolean;
    
    /**
     * (Clientside) Sets the spawnmenu content icon type for the entity, used by spawnmenu in the Sandbox-derived gamemodes.
     * See {{LibraryFunction|spawnmenu|AddContentType}} for more information. 
     */
    ScriptedEntityType?: string;
}

/**
 * Data structure used by the {{Lib|duplicator}} to store and load entity data.
 * 
 * It is created by {{LibraryFunction|duplicator|CopyEntTable}} and can be loaded by {{LibraryFunction|duplicator|CreateEntityFromTable}}.
 * 
 * It also shows up in several other contexts:
 * * {{LibraryFunction|duplicator|RegisterEntityClass}}
 * * {{HookFunction|ENTITY|OnEntityCopyTableFinish}}
 * * {{HookFunction|ENTITY|OnDuplicated}}
 * <nowiki />
 * **Note:**
 * >1=In addition to all fields listed here, any field saved on the entity will be saved as-is to this table. For example, if you set ent.FavoriteFood = "Steak" before duplicating it, this structure will also contain the field FavoriteFood with the value "Steak". 
 */
interface EntityCopyData {
    /**
     * The entity's name, see {{ClassFunction|Entity|GetName}}. 
     */
    Name: string;
    
    /**
     * The entity's class name, see {{ClassFunction|Entity|GetClass}}. 
     */
    Class: string;
    
    /**
     * The entity's position, relative to the duplication origin point. 
     */
    Pos: Vector;
    
    /**
     * The entity's angle, relative to the duplication angle. 
     */
    Angle: Angle;
    
    /**
     * The entity's Network Vars, see {{HookFunction|ENTITY|SetupDataTables}} and [[Networking Entities]]. 
     */
    DT: table;
    
    /**
     * The entity's model, see {{ClassFunction|Entity|GetModel}}. 
     */
    Model: string;
    
    /**
     * The entity's model scale, see {{ClassFunction|Entity|GetModelScale}}. This will only be present if the model scale isn't 1. 
     */
    ModelScale: number;
    
    /**
     * The entity's active skin, see {{ClassFunction|Entity|GetSkin}}. 
     */
    Skin: number;
    
    /**
     * The entity's collision group, see {{ClassFunction|Entity|GetCollisionGroup}}. Uses the {{Enum|COLLISION_GROUP}}. 
     */
    ColGroup: COLLISION_GROUP;
    
    /**
     * The entity's collision bound minimums, see {{ClassFunction|Entity|GetCollisionBounds}}. 
     */
    Mins: Vector;
    
    /**
     * The entity's collision bound maximums, see {{ClassFunction|Entity|GetCollisionBounds}}. 
     */
    Maxs: Vector;
    
    /**
     * Data about the entity's {{Type|PhysObj}}s, see {{ClassFunction|Entity|GetPhysicsObjectNum}}. The key is the physics object index (starts from 0), and the value is a {{Struct|PhysicsObjectSave}}. Unlike other tables in this structure, if there are no physics objects for this entity this will be an empty table. 
     */
    PhysicsObjects: PhysicsObjectSave;
    
    /**
     * The entity's Flex Scale, see {{ClassFunction|Entity|GetFlexScale}}. 
     */
    FlexScale: number;
    
    /**
     * Each flex bone's flex weight, see {{ClassFunction|Entity|GetFlexWeight}}. The key is the flex's index and the value is the weight. Only flexes with a non-default (nonzero) weight are listed, and if none exist, this field will be nil. 
     */
    Flex: table;
    
    /**
     * The entity's body groups, see {{ClassFunction|Entity|GetBodygroup}}. The key is the bodygroup ID and the value is the assigned bodygroup number. Only body groups with a non-default (> 0) value are listed, and if none exist, this field will be nil. 
     */
    BodyG: table;
    
    /**
     * Bone manipulation data, see {{ClassFunction|Entity|HasBoneManipulations}}. The key is the bone index and the value is a {{Struct|BoneManipulationData}}. Only bones that have been manipulated with non-default values are listed, and if none exist, this field will be nil. 
     */
    BoneManip: BoneManipulationData;
    
    /**
     * The entity's MapCreationID, only exists for entities that were created by the map. See {{ClassFunction|Entity|MapCreationID}}. 
     */
    MapCreationID: number;
    
    /**
     * Deprecated, always 0. See {{ClassFunction|Entity|GetWorkshopID}}. 
     */
    WorkshopID: number;
}

/**
 * Used for {{LibraryFunction|surface|CreateFont}}. 
 */
interface FontData {
    /**
     * The font source. This must be the actual name of the font, not a file name.
     * Font files are stored in resource/fonts/. This cannot be an existing game font, i.e. "ChatText", "Trebuchet18", etc. ([[Default Fonts]])
     * 
     * The length is limited to 31 characters maximum. 
     */
    font?: string;
    
    /**
     * Allow the font to display glyphs that are outside of the Latin-1 range. Unicode code points above 0xFFFF are not supported. 
     */
    extended?: boolean;
    
    /**
     * The font height in pixels
     * 
     * ''Maximum:'' 128 
     */
    size?: number;
    
    /**
     * The font boldness 
     */
    weight?: number;
    
    /**
     * The strength of the font blurring
     * 
     * **Bug:**
     * >2699||||No
     * 
     * **Bug:**
     * >3579||||No 
     */
    blursize?: number;
    
    /**
     * The "scanline" interval
     * Must be > 1 to work. This setting is per blursize per font - so if you create a font using "Arial" without scanlines, you cannot create an Arial font using scanlines with the same blursize 
     */
    scanlines?: number;
    
    /**
     * Smooth the font 
     */
    antialias?: boolean;
    
    /**
     * Add an underline to the font 
     */
    underline?: boolean;
    
    /**
     * Make the font italic 
     */
    italic?: boolean;
    
    /**
     * Add a strike through 
     */
    strikeout?: boolean;
    
    /**
     * Enables the use of symbolic fonts such as Webdings 
     */
    symbol?: boolean;
    
    /**
     * Seems to add a line in the middle of each letter 
     */
    rotary?: boolean;
    
    /**
     * Add shadow casting to the font 
     */
    shadow?: boolean;
    
    /**
     * Additive rendering 
     */
    additive?: boolean;
    
    /**
     * Add a black outline to the font.
     * 
     * This does not work well with antialias, and only allows black 1-pixel outlines. It may be preferable to not use this parameter, and instead use {{LibraryFunction|draw|SimpleTextOutlined}} when drawing text that you want outlined. 
     */
    outline?: boolean;
}

/**
 * Information about a gamemode, used in [[Gamemode Creation]]. For list of hooks, see [[:Category:GM_Hooks|GM Hooks]].
 * 
 * While some of the fields may be serverside or clientside only, it is recommended to provide them on both so addons could use their values. 
 */
interface Gamemode {
    /**
     * The fancy name of your gamemode. 
     */
    Name: string;
    
    /**
     * The name/contact info of the gamemode author. 
     */
    Author: string;
    
    /**
     * The contact email associated with the gamemode. 
     */
    Email: string;
    
    /**
     * The website associated with the gamemode. 
     */
    Website: string;
    
    /**
     * The name of the gamemode folder, automatically set. 
     */
    FolderName: string;
    
    /**
     * The name of the gamemode folder prepended with "gamemodes/" (such as "gamemodes/sandbox"), automatically set. 
     */
    Folder: string;
    
    /**
     * Set this to true if your gamemode is team-based. Used to enable/disable the base gamemode team system. 
     */
    TeamBased: boolean;
    
    /**
     * True if the gamemode is derived from sandbox. 
     */
    IsSandboxDerived: boolean;
    
    /**
     * The name of the gamemode folder prepended with "gamemode_" (such as "gamemode_sandbox"), automatically set. 
     */
    ThisClass: string;
    
    /**
     * The table of the base gamemode to derive from, set automatically by {{GlobalFunction|DeriveGamemode}}.
     * 
     * **Note:**
     * >It is recommended to use {{GlobalFunction|DEFINE_BASECLASS}} when referencing the gamemode's BaseClass to prevent unintended behavior
     * 
     * **Note:**
     * >{{GlobalFunction|DeriveGamemode}} modifies the main gamemode's BaseClass, which is shared with parent gamemodes. Because of this, in parent gamemodes the BaseClass can be incorrect, so for instance you need to use ''self.BaseClass.BaseClass'' in the 1st parent instead 
     */
    BaseClass: table;
}

/**
 * Table used by {{GlobalFunction|HTTP}} function. 
 */
interface HTTPRequest {
    /**
     * Function to be called on failure. Arguments are
     * * {{FuncArg|string|reason}} 
     */
    failed: Function;
    
    /**
     * Function to be called on success. Arguments are
     * * {{FuncArg|number|code}}
     * * {{FuncArg|string|body}}
     * * {{FuncArg|table|headers}} 
     */
    success: Function;
    
    /**
     * Request method, case insensitive. Possible values are:
     * * GET
     * * POST
     * * HEAD
     * * PUT
     * * DELETE
     * * PATCH
     * * OPTIONS 
     */
    method: string;
    
    /**
     * The target url 
     */
    url: string;
    
    /**
     * KeyValue table for parameters. This is only applicable to the following request methods:
     * * GET
     * * POST
     * * HEAD 
     */
    parameters: table;
    
    /**
     * KeyValue table for headers 
     */
    headers: table;
    
    /**
     * Body string for POST data. If set, will override parameters 
     */
    body: string;
    
    /**
     * Content type for body. 
     */
    type?: string;
}

/**
 * Table used by {{LibraryFunction|util|TraceHull}}. 
 */
interface HullTrace {
    /**
     * The start position of the trace 
     */
    start: Vector;
    
    /**
     * The end position of the trace 
     */
    endpos: Vector;
    
    /**
     * The 3D vector local to the start/endpos with the highest values. This will represent the corner with the upper bounds of the box. 
     */
    maxs: Vector;
    
    /**
     * The 3D vector local to the start/endpos with the lowest (often negative) values. This will represent the corner with the lower bounds of the box. 
     */
    mins: Vector;
    
    /**
     * Things the trace should not hit. Can also be a table of entities or a function with one argument:
     * 
     * * {{FuncArg|Entity|ent|The entity that the trace hit}}
     * 
     * Using a function here is super slow. Try to avoid it. 
     */
    filter?: Entity;
    
    /**
     * The trace mask {{Enum|MASK}}. This determines what the trace should hit and what it shouldn't hit. 
     */
    mask?: MASK;
    
    /**
     * The collision group {{Enum|COLLISION_GROUP}}. This determines what the trace should hit in regards to the entity's collision group. 
     */
    collisiongroup?: COLLISION_GROUP;
    
    /**
     * Should the trace ignore world or not. 
     */
    ignoreworld?: boolean;
    
    /**
     * If set, the trace result will be written to the supplied table instead of returning a new table 
     */
    output?: table;
}

/**
 * Table structure used for {{LibraryFunction|render|SetLocalModelLights}}. 
 */
interface LocalLight {
    /**
     * The type of the light source, see {{Enum|MATERIAL_LIGHT}}. 
     */
    type?: MATERIAL_LIGHT;
    
    /**
     * The color of the light source (x is red, y is green, z is blue). Values are not restricted to a specific range, higher values will result in a brighter light. 
     */
    color?: Vector;
    
    /**
     * The origin of the light in world coordinates. 
     */
    pos?: Vector;
    
    /**
     * The direction of the light. Only required for directional and spot lights. 
     */
    dir?: Vector;
    
    /**
     * The maximum range of the light source. Does not actually control light attenuation. Usually left at 0 for infinite range. 
     */
    range?: number;
    
    /**
     * Angular falloff exponent for spot lights. Higher values result in a sharper transition between the inner cone and the outer cone. 
     */
    angularFalloff?: number;
    
    /**
     * The inner cone angle for spot lights, in degrees. No angular falloff will occur inside that cone. 
     */
    innerAngle?: number;
    
    /**
     * The outer cone angle for spot lights, in degrees. 
     */
    outerAngle?: number;
    
    /**
     * The distance at which the light will fade to 50% of its brightness. 
     */
    fiftyPercentDistance: number;
    
    /**
     * The distance at which the light will completely fade out. 
     */
    zeroPercentDistance: number;
    
    /**
     * The quadratic term of the light falloff. This will only be used if fiftyPercentDistance and zeroPercentDistance are not supplied, and allows finer control over light attenuation. 
     */
    quadraticFalloff?: number;
    
    /**
     * The linear term of the light falloff. This will only be used if fiftyPercentDistance and zeroPercentDistance are not supplied, and allows finer control over light attenuation. 
     */
    linearFalloff?: number;
    
    /**
     * The constant term of the light falloff. This will only be used if fiftyPercentDistance and zeroPercentDistance are not supplied, and allows finer control over light attenuation. 
     */
    constantFalloff?: number;
}

/**
 * Table structure used by {{LibraryFunction|matproxy|Add}}. 
 */
interface MatProxyData {
    /**
     * The name of the material proxy 
     */
    name: string;
    
    /**
     * The function used to get variables from the ".vmt". Called once per each ".vmt". Arguments are:
     * * {{FuncArg|table|self}}
     * * {{FuncArg|string|materialName}}
     * * {{FuncArg|table|values}} 
     */
    init: Function;
    
    /**
     * The function used to apply the proxy. This is called every frame while any materials with this proxy are used in world. Arguments are:
     * * {{FuncArg|table|self}}
     * * {{FuncArg|string|materialName}}
     * * {{FuncArg|Entity|ent}} 
     */
    bind: Function;
}

/**
 * Table used by various functions, such as {{ClassFunction|IMesh|BuildFromTriangles}}. 
 */
interface MeshVertex {
    /**
     * The vertex color. Uses the {{Struct|Color}}. 
     */
    color: Color;
    
    /**
     * The triangles normal required to calculate lighting(optional). 
     */
    normal: Vector;
    
    /**
     * The triangles tangent. Not used by the VertexLitGeneric shader. 
     */
    tangent: Vector;
    
    /**
     * The triangles binormal. Not used by the VertexLitGeneric shader. 
     */
    binormal: Vector;
    
    /**
     * The vertex position. 
     */
    pos: Vector;
    
    /**
     * The u texture scale. 
     */
    u: number;
    
    /**
     * The v texture scale. 
     */
    v: number;
    
    /**
     * A table of four numbers. This is used by most shaders in Source to hold tangent information of the vertex ( tangentX, tangentY, tangentZ, tangentHandedness ). 
     */
    userdata: table;
}

/**
 * The structure used by {{ClassFunction|Vehicle|GetOperatingParams}}. 
 */
interface OperatingParams {
    /**
     * The current RPM of the vehicle 
     */
    RPM: number;
    
    /**
     * The current gear of the vehicle, starting from 0 
     */
    gear: number;
    
    /**
     * Is the vehicle boosting? 
     */
    isTorqueBoosting: boolean;
    
    /**
     * The current speed, in inches per second 
     */
    speed: number;
    
    /**
     * Steering angle 
     */
    steeringAngle: number;
    
    /**
     * Wheels on ground 
     */
    wheelsInContact: number;
}

/**
 * Structure represents a path segment, returned by {{ClassFunction|PathFollower|GetCurrentGoal}}, {{ClassFunction|PathFollower|FirstSegment}} and {{ClassFunction|PathFollower|LastSegment}}. 
 */
interface PathSegment {
    /**
     * The navmesh area this segment occupies. 
     */
    area: CNavArea;
    
    /**
     * How much of a curve should the bot execute when navigating this segment. 0 = none, 1 = 180° 
     */
    curvature: number;
    
    /**
     * Distance of this segment from the start of the path. 
     */
    distanceFromStart: number;
    
    /**
     * The direction of travel to reach the end of this segment from the start, represented as a normalised vector. 
     */
    forward: Vector;
    
    /**
     * The direction of travel to reach the end of this segment from the start, represented as a cardinal direction integer 0 to 3, or 9 for vertical movement. 
     */
    how: number;
    
    /**
     * The navmesh ladder this segment occupies, if any. 
     */
    ladder: CNavLadder;
    
    /**
     * Length of this segment. 
     */
    length: number;
    
    /**
     */
    m_portalCenter: Vector;
    
    /**
     */
    m_portalHalfWidth: number;
    
    /**
     * The position of the end of this segment. 
     */
    pos: Vector;
    
    /**
     * The movement type of this segment, indicating how bots are expected to move along this segment.
     * 
     * * 0 is ground movement
     * * 1 is falling down
     * * 2 is climbing up or jumping
     * * 3 is jumping over a gap
     * * 4 is climbing a ladder up (unused)
     * * 5 is climbing a ladder down (unused) 
     */
    type: number;
}

/**
 * Table used by {{LibraryFunction|physenv|SetPerformanceSettings}}. 
 */
interface PhysEnvPerformanceSettings {
    /**
     * Maximum amount of seconds to precalculate collisions with objects. 
     */
    LookAheadTimeObjectsVsObject: number;
    
    /**
     * Maximum amount of seconds to precalculate collisions with world. 
     */
    LookAheadTimeObjectsVsWorld: number;
    
    /**
     * Maximum rotation velocity. 
     */
    MaxAngularVelocity: number;
    
    /**
     * Maximum collision checks per tick. 
     */
    MaxCollisionChecksPerTimestep: number;
    
    /**
     * Maximum collision per object per tick. 
     */
    MaxCollisionsPerObjectPerTimestep: number;
    
    /**
     * Maximum mass of an object to be affected by friction. 
     */
    MaxFrictionMass: number;
    
    /**
     * Maximum speed of an object. 
     */
    MaxVelocity: number;
    
    /**
     * Minimum mass of an object to be affected by friction. 
     */
    MinFrictionMass: number;
}

/**
 * Structure used in storing/restoring physics object attributes.
 * {{LibraryFunction|duplicator|GenericDuplicatorFunction}} and {{LibraryFunction|duplicator|DoGenericPhysics}} use a table of PhysicsObjectSaves with the struct's index in the table being the physics object ID.
 * 
 * Pos and Angle are set by the following:
 * ```
 * Pos, Angle = WorldToLocal(phys:GetPos(), phys:GetAngle(), Vector( 0, 0, 0 ), Angle( 0, 0, 0 ))
 * ``` 
 */
interface PhysicsObjectSave {
    /**
     * The entity's world position made local with {{GlobalFunction|WorldToLocal}} 
     */
    Pos: Vector;
    
    /**
     * The entity's world angles made local with {{GlobalFunction|WorldToLocal}} 
     */
    Angle: Angle;
    
    /**
     * Whether the entity is moveable. Equal to (''not'' {{ClassFunction|PhysObj|IsMoveable}}) 
     */
    Frozen: boolean;
    
    /**
     * Whether the entity's gravity is affected by gravity or not. {{ClassFunction|PhysObj|IsGravityEnabled}} 
     */
    NoGrav: boolean;
    
    /**
     * Whether the entity is dormant or not. {{ClassFunction|PhysObj|IsAsleep}} 
     */
    Sleep: boolean;
}

/**
 * Structure used by {{LibraryFunction|construct|SetPhysProp}}. 
 */
interface PhysProperties {
    /**
     * Enables or disables gravity for the entity 
     */
    GravityToggle?: boolean;
    
    /**
     * Sets the physics material for the entity 
     */
    Material?: string;
}

/**
 * A structure containing vertex information for use with {{LibraryFunction|surface|DrawPoly}}.
 * 
 * UV coordinates describe which part of a given texture should be drawn at a vertex - your graphics card's interpolator will fill in space between vertices. UV coords range from 0-1, with 0 being top/left and 1 being bottom/right. If you're using a texture these are mandatory.
 * 
 * **Note:**
 * >You must pass a table of tables with this structure to the function. '''You need to pass at least 3 points.'''
 * 
 * **Note:**
 * >Your points must be defined in a '''clockwise order.''' Otherwise, your shape will not render. 
 */
interface PolygonVertex {
    /**
     * The x coordinate of the vertex. 
     */
    x: number;
    
    /**
     * The y coordinate of the vertex. 
     */
    y: number;
    
    /**
     * The u texture coordinate of the vertex. ''Can be left blank.'' 
     */
    u: number;
    
    /**
     * The v texture coordinate of the vertex. ''Can be left blank.'' 
     */
    v: number;
}

/**
 * Structure used for {{LibraryFunction|properties|Add}}. 
 */
interface PropertyAdd {
    /**
     * Can be set to "toggle" to make this property a toggle property. 
     */
    Type?: string;
    
    /**
     * Label to show on opened menu 
     */
    MenuLabel: string;
    
    /**
     * Icon to show on opened menu for this item. Optional for simple properties and unused for toggle properties. 
     */
    MenuIcon?: string;
    
    /**
     * Where in the list should the property be positioned, relative to other properties.
     * 
     * For reference, here are the default properties and their Order values:
     * {{{!}} class{{eq}}"mw-collapsible mw-collapsed wikitable"
     * ! Property
     * ! Order
     * {{!}}-
     * {{!}} Make Persistent
     * {{!}} 400
     * {{!}}-
     * {{!}} Bone Manipulate
     * {{!}} 500
     * {{!}}-
     * {{!}} Bodygroups
     * {{!}} 600
     * {{!}}-
     * {{!}} Skin
     * {{!}} 601
     * {{!}}-
     * {{!}} Keep Upright
     * {{!}} 900
     * {{!}}-
     * {{!}} Ignite/Extinguish
     * {{!}} 999
     * {{!}}-
     * {{!}} Remove
     * {{!}} 1000
     * {{!}}-
     * {{!}} Gravity
     * {{!}} 1001
     * {{!}}-
     * {{!}} Drive
     * {{!}} 1100
     * {{!}}-
     * {{!}} Collision
     * {{!}} 1500
     * {{!}}-
     * {{!}} Statue
     * {{!}} 1501
     * {{!}}-
     * {{!}} NPC Biggify/Smallify
     * {{!}} 1799, 1800
     * {{!}}-
     * {{!}} Motion Control (Kinect)
     * {{!}} 2500
     * {{!}}-
     * {{!}} [[Editable Entities|Edit Properties]]
     * {{!}} 90001
     * {{!}}} 
     */
    Order: number;
    
    /**
     * Whether to add a spacer before this property. This should generally be true for the first property in a group of properties. 
     */
    PrependSpacer?: boolean;
    
    /**
     * Used '''clientside''' to decide whether this property should be shown for an entity. Gets these arguments:
     * * {{FuncArg|table|self|the property table}}
     * * {{FuncArg|Entity|ent|the entity the player clicked}}
     * 
     * Return true if the property should be shown for this entity. It's good practice to call {{HookFunction|SANDBOX|CanProperty}} in this hook via {{LibraryFunction|gamemode|Call}} or {{LibraryFunction|hook|Run}}. 
     */
    Filter: Function;
    
    /**
     * Required for toggle properties (clientside). Must return a boolean value to either check or uncheck the toggle property.
     * * {{FuncArg|table|self|the property table}}
     * * {{FuncArg|Entity|ent|the entity the player clicked}}
     * * {{FuncArg|table|tr|the player's eye trace}} 
     */
    Checked: Function;
    
    /**
     * Called '''clientside''' when the property is clicked with these arguments:
     * * {{FuncArg|table|self|the property table}}
     * * {{FuncArg|Entity|ent|the entity the player clicked}}
     * * {{FuncArg|table|tr|the player's eye trace}}
     * 
     * When appropriate, within this function you can call <kbd>self:MsgStart()</kbd>, write data with the {{Lib|net}} 'Write' functions, and finish with <kbd>self:MsgEnd()</kbd>. This will activate the 'Receive' function on the server. In most cases, you will want to send the entity to the server, as it's not done by default. 
     */
    Action: Function;
    
    /**
     * Called '''serverside''' if the client sends a message in the 'Action' function (see above).
     * * {{FuncArg|table|self|the property table}}
     * * {{FuncArg|number|len|the net message length, although this includes the property identifier used internally (the name of the property)}}
     * * {{FuncArg|table|ply|the player who clicked the property}}
     * 
     * You can read data received from the client with the {{Lib|net}} 'Read' functions. It's good practice to check {{HookFunction|SANDBOX|CanProperty}} here via {{LibraryFunction|gamemode|Call}} or {{LibraryFunction|hook|Run}}. 
     */
    Receive?: Function;
    
    /**
     * Called '''clientside''' when the property option has been created in the right-click menu. This is not called for toggle properties!
     * * {{FuncArg|table|self|the property table}}
     * * {{FuncArg|Panel|option|the menu option <!-- to do: what type of panel? -->}}
     * * {{FuncArg|Entity|ent|the entity the player right-clicked}}
     * * {{FuncArg|table|tr|the player's eye trace}} 
     */
    MenuOpen?: Function;
    
    /**
     * Same as MenuOpen, but also called for toggle properties and has different arguments. This is called immediately after MenuOpen, but nothing happens in between so you should only ever use one or the other.
     * * {{FuncArg|table|self|the property table}}
     * * {{FuncArg|Panel|menu|the property menu <!-- to do: what type of panel? -->}}
     * * {{FuncArg|Panel|option|the menu option <!-- to do: what type of panel? -->}} 
     */
    OnCreate?: Function;
}

/**
 * Used for {{LibraryFunction|cam|Start}}.
 * 
 * Unless stated otherwise, the default values for all these keys would be inherited from the engine's current CViewSetup and do not have static representations. 
 */
interface RenderCamData {
    /**
     * The x position of the view port 
     */
    x: number;
    
    /**
     * The y position of the view port 
     */
    y: number;
    
    /**
     * The width of the view port 
     */
    w: number;
    
    /**
     * The height of the view port 
     */
    h: number;
    
    /**
     * The type of cam. Valid types are:
     * * "2D" - No additional arguments are required
     * * "3D" - Only origin and angles are needed, all other parameters are optional. 
     */
    type?: string;
    
    /**
     * The position to render from 
     */
    origin: Vector;
    
    /**
     * The angles to render from 
     */
    angles: Angle;
    
    /**
     * The field of view 
     */
    fov: number;
    
    /**
     * The aspect ratio of the view port (Note that this is NOT set to w/h by default) 
     */
    aspect: number;
    
    /**
     * The distance to the far clipping plane 
     */
    zfar: number;
    
    /**
     * The distance to the near clipping plane 
     */
    znear: number;
    
    /**
     * m_bRenderToSubrectOfLargerScreen 
     */
    subrect: boolean;
    
    /**
     * m_bDoBloomAndToneMapping 
     */
    bloomtone?: boolean;
    
    /**
     * A table having these keys: ( all floats )
     * * left
     * * right
     * * bottom
     * * top 
     */
    offcenter: table;
    
    /**
     * If set, makes the view/camera orthogonal. A table having these keys: ( all floats )
     * * left
     * * right
     * * bottom
     * * top 
     */
    ortho: table;
}

/**
 * Used for {{LibraryFunction|render|Capture}}. 
 */
interface RenderCaptureData {
    /**
     * Format of the capture. Valid formats are: jpeg, png 
     */
    format: string;
    
    /**
     * X coordinate of the capture origin 
     */
    x: number;
    
    /**
     * Y coordinate of the capture origin 
     */
    y: number;
    
    /**
     * Width of the capture 
     */
    w: number;
    
    /**
     * Height of the capture 
     */
    h: number;
    
    /**
     * The quality of the capture. Affects jpeg only. 
     */
    quality: number;
    
    /**
     * Set to false to capture an image with alpha channel set to fully opaque. Affects png only. 
     */
    alpha?: boolean;
}

/**
 * Used for {{LibraryFunction|serverlist|Query}}. 
 */
interface ServerQueryData {
    /**
     * The game directory to get the servers for 
     */
    GameDir?: string;
    
    /**
     * Type of servers to retrieve. Valid values are:
     * * "internet"
     * * "favorite"
     * * "history"
     * * "lan" 
     */
    Type: string;
    
    /**
     * Steam application ID to get the servers for 
     */
    AppID?: number;
    
    /**
     * Called when a new server is found and queried. Arguments:
     * 
     * {{FuncArg|number|ping|Latency to the server.}}
     * 
     * {{FuncArg|string|name|Name of the server}}
     * 
     * {{FuncArg|string|desc|"Nice" gamemode name}}
     * 
     * {{FuncArg|string|map|Current map}}
     * 
     * {{FuncArg|number|players|Total player number ( bot + human )}}
     * 
     * {{FuncArg|number|maxplayers|Maximum reported amount of players}}
     * 
     * {{FuncArg|number|botplayers|Amount of bots on the server}}
     * 
     * {{FuncArg|boolean|pass|Whether this server has password or not}}
     * 
     * {{FuncArg|number|lastplayed|Time when you last played on this server, as UNIX timestamp or 0}}
     * 
     * {{FuncArg|string|address|IP Address of the server}}
     * 
     * {{FuncArg|string|gamemode|Gamemode folder name}}
     * 
     * {{FuncArg|number|workshopid|Gamemode Steam Workshop ID}}
     * 
     * Return false to stop the query. 
     */
    Callback: Function;
    
    /**
     * Called when the query is finished. No arguments 
     */
    Finished: Function;
}

/**
 * Table used in {{LibraryFunction|sound|Add}} and {{LibraryFunction|sound|GetProperties}}. 
 */
interface SoundData {
    /**
     * The sound channel to play in. See {{Enum|CHAN}} 
     */
    channel: CHAN;
    
    /**
     * The name of the sound. 
     */
    name: string;
    
    /**
     * The pitch end. Deprecated, use pitch. 
     */
    pitchend: number;
    
    /**
     * The initial pitch. Deprecated, use pitch. 
     */
    pitchstart: number;
    
    /**
     * The soundlevel of the sound in dB. See {{Enum|SNDLVL}}. 
     */
    level: SNDLVL;
    
    /**
     * The sound file to be used in this sound effect. Can be a table of sound files. Relative to "sound" directory. 
     */
    sound: string;
    
    /**
     * The volume of the sound. Can be a table of two numbers, a minimum and a maximum values. 
     */
    volume: number;
    
    /**
     * The pitch of the sound. Can be a table of two numbers, a minimum and a maximum values. 
     */
    pitch: number;
}

/**
 * Returned by {{LibraryFunction|util|GetSunInfo}}. 
 */
interface SunInfo {
    /**
     * The suns direction relative to 0,0,0 
     */
    direction: Vector;
    
    /**
     * Indicates how obstructed the sun is, 1 not visible, 0 fully visible 
     */
    obstruction: number;
}

/**
 * Table returned by {{LibraryFunction|util|GetSurfaceData}}. 
 */
interface SurfacePropertyData {
    /**
     * The name of the surface property, identical to {{LibraryFunction|util|GetSurfacePropName}}. 
     */
    name: string;
    
    /**
     * How hard a surface is. If this is greater than or equal to another surfaces's hardThreshold, a hard impact sound will be used. 
     */
    hardnessFactor: number;
    
    /**
     * Hardness threshold for impact sounds. HitSurface.hardnessFactor >{{eq}} InflictorSurface.hardThreshold - hard impact sound (depends on hardVelocityThreshold's value), HitSurface.hardnessFactor < InflictorSurface.hardThreshold - soft impact sound (always). 
     */
    hardThreshold: number;
    
    /**
     * Velocity threshold for impact sounds. impactSpeed >{{eq}} HitSurface.hardVelocityThreshold - hard impact sound (depends on hardThreshold's value), impactSpeed < HitSurface.hardVelocityThreshold - soft impact sound (always). 
     */
    hardVelocityThreshold: number;
    
    /**
     * Amount of sound reflected from the surface represented as a number 0.0 - 1.0. 0 - no reflection, 1 - fully reflected. 
     */
    reflectivity: number;
    
    /**
     * How rough a surface is. If this is greater than or equal to another surfaces's roughThreshold, a rough scrape sound will be used. 
     */
    roughnessFactor: number;
    
    /**
     * Roughness threshold for friction sounds. HitSurface.roughnessFactor >{{eq}} InflictorSurface.roughThreshold - rough friction sound, HitSurface.roughnessFactor < InflictorSurface.roughThreshold - soft friction sound. 
     */
    roughThreshold: number;
    
    /**
     * Indicates whether or not the surface is a ladder. Used to detect whether a player is on a ladder. 0 - false, > 0 - true. 
     */
    climbable: number;
    
    /**
     * Scalar multiplier for player jump height - or more accurately, applied z-axis velocity on a surface. For example, 1 - normal jump, 2 - twice as high, and 0.5 - half as high. 
     */
    jumpFactor: number;
    
    /**
     * The surface material. See {{Enum|MAT}}. 
     */
    material: MAT;
    
    /**
     * Scalar multiplier for player speed. Achieves this by multiplying {{ClassFunction|CMoveData|SetMaxSpeed}} in {{HookFunction|GM|Move}}. 
     */
    maxSpeedFactor: number;
    
    /**
     * This is the physical drag on an object when in contact with this surface (0 - x, 0 none to x a lot).
     * 
     * {{Validate}} 
     */
    dampening: number;
    
    /**
     * Material density in kg / m^3 (water is 1000). If a surface's density is < 1000, it will float in water. This is used to calculate the total mass of an object. 
     */
    density: number;
    
    /**
     * Collision elasticity - used to compute coefficient of restitution represented as a number 0.0 - 1.0. 0.01 is soft, 1.0 is hard. 
     */
    elasticity: number;
    
    /**
     * Physical friction used to slow entities touching the surface represented as a number 0.0 - 1.0. 0.01 is slick, 1.0 is completely rough. 
     */
    friction: number;
    
    /**
     * Material thickness. If this is 0, the material is not volumetrically solid, and thus the object mass will be calculated as "volume * 0.0254^3 * density" where 0.0254 is meters per inch. If non-zero, the mass will be "surfacearea * thickness * 0.0254^3 * density". 
     */
    thickness: number;
    
    /**
     * Sound to play when a prop or func_breakable is broken. 
     */
    breakSound: string;
    
    /**
     * Bullet impact sound with this surface. 
     */
    bulletImpactSound: string;
    
    /**
     * Physical impact sound when hitting surfaces hard. 
     */
    impactHardSound: string;
    
    /**
     * Physical impact sound when hitting surfaces softly. 
     */
    impactSoftSound: string;
    
    /**
     * Unused sound. 
     */
    rollingSound: string;
    
    /**
     * Friction sound when roughly scraping against an entity. 
     */
    scrapeRoughSound: string;
    
    /**
     * Friction sound when smoothly scraping against an entity. 
     */
    scrapeSmoothSound: string;
    
    /**
     * Footstep sound for left foot. 
     */
    stepLeftSound: string;
    
    /**
     * Footstep sound for right foot. 
     */
    stepRightSound: string;
    
    /**
     * Unused sound. 
     */
    strainSound: string;
}

/**
 * Information about a SWEP, used by {{HookFunction|SANDBOX|PlayerGiveSWEP}} and SWEP creation. For list of callbacks, see [[:Category:WEAPON_Hooks]].
 * 
 * While some of the fields may be serverside or clientside only, it is recommended to provide them on both so addons could use their values. 
 */
interface SWEP {
    /**
     * Entity class name of the SWEP (file or folder name of your SWEP). This is set automatically 
     */
    ClassName: string;
    
    /**
     * (Clientside) Category the SWEP is in 
     */
    Category?: string;
    
    /**
     * Whether this SWEP should be displayed in the Q menu 
     */
    Spawnable?: boolean;
    
    /**
     * Whether or not only admins can spawn the SWEP from their Q menu 
     */
    AdminOnly?: boolean;
    
    /**
     * Nice name of the SWEP 
     */
    PrintName?: string;
    
    /**
     * The base weapon to derive from. This '''must''' be a Lua weapon 
     */
    Base?: string;
    
    /**
     * Multiplier of deploy speed 
     */
    m_WeaponDeploySpeed?: number;
    
    /**
     * The entity that owns/wields this SWEP, if any 
     */
    Owner: Entity;
    
    /**
     * (Clientside) The author of the SWEP to be shown in weapon selection 
     */
    Author?: string;
    
    /**
     * (Clientside) The contacts of the SWEP creator to be shown in weapon selection 
     */
    Contact?: string;
    
    /**
     * (Clientside) The purpose of the SWEP creator to be shown in weapon selection 
     */
    Purpose?: string;
    
    /**
     * (Clientside) How to use your weapon, to be shown in weapon selection 
     */
    Instructions?: string;
    
    /**
     * Path to the view model for your SWEP (what the wielder will see) 
     */
    ViewModel?: string;
    
    /**
     * (Clientside) Should we flip the view model? This is needed for some CS:S view models 
     */
    ViewModelFlip?: boolean;
    
    /**
     * (Clientside) Same as ViewModelFlip, but for the second viewmodel 
     */
    ViewModelFlip1?: boolean;
    
    /**
     * (Clientside) Same as ViewModelFlip, but for the third viewmodel 
     */
    ViewModelFlip2?: boolean;
    
    /**
     * (Clientside) An angle of FOV used for the view model (Half-Life value is 90; Half-Life 2 is 54; Counter-Strike: Source is 74; Day of Defeat is 45) 
     */
    ViewModelFOV?: number;
    
    /**
     * The world model for your SWEP (what you will see in other players hands) 
     */
    WorldModel?: string;
    
    /**
     * (Serverside) Whether this weapon can be autoswitched away from when the player runs out of ammo in this weapon or picks up another weapon or ammo 
     */
    AutoSwitchFrom?: boolean;
    
    /**
     * (Serverside) Whether this weapon can be autoswitched to when the player runs out of ammo in their current weapon or they pick this weapon up 
     */
    AutoSwitchTo?: boolean;
    
    /**
     * (Serverside) Decides whether we should switch from/to this 
     */
    Weight?: number;
    
    /**
     * (Clientside) The scale of the viewmodel bob (viewmodel movement from left to right when walking around) 
     */
    BobScale?: number;
    
    /**
     * (Clientside) The scale of the viewmodel sway (viewmodel position lerp when looking around). 
     */
    SwayScale?: number;
    
    /**
     * (Clientside) Should the weapon icon bounce in weapon selection? 
     */
    BounceWeaponIcon?: boolean;
    
    /**
     * (Clientside) Should draw the weapon selection info box, containing SWEP.Instructions, etc. 
     */
    DrawWeaponInfoBox?: boolean;
    
    /**
     * (Clientside) Should we draw the default HL2 ammo counter? 
     */
    DrawAmmo?: boolean;
    
    /**
     * (Clientside) Should we draw the default crosshair? 
     */
    DrawCrosshair?: boolean;
    
    /**
     * (Clientside) The SWEP render group, see {{Enum|RENDERGROUP}} 
     */
    RenderGroup?: RENDERGROUP;
    
    /**
     * Slot in the weapon selection menu, starts with 0 
     */
    Slot?: number;
    
    /**
     * Position in the slot, should be in the range 0-128 
     */
    SlotPos?: number;
    
    /**
     * (Clientside) Internal variable for drawing the info box in weapon selection 
     */
    SpeechBubbleLid?: number;
    
    /**
     * (Clientside) Path to an texture. Override this in your SWEP to set the icon in the weapon selection. This must be the texture ID, see {{LibraryFunction|surface|GetTextureID}} 
     */
    WepSelectIcon?: number;
    
    /**
     * (Clientside) Should we use Counter-Strike muzzle flashes upon firing? This is required for DoD:S or CS:S view models to fix their muzzle flashes. 
     */
    CSMuzzleFlashes?: boolean;
    
    /**
     * (Clientside) Use the X shape muzzle flash instead of the default Counter-Strike muzzle flash. Requires CSMuzzleFlashes to be set to true 
     */
    CSMuzzleX?: boolean;
    
    /**
     * Primary attack settings. The table contains these fields:
     * * {{FuncArg|string|Ammo|Ammo type ("Pistol", "SMG1" etc)}}
     * * {{FuncArg|number|ClipSize|The maximum amount of bullets one clip can hold}}
     * * {{FuncArg|number|DefaultClip|Default ammo in the clip, making it higher than ClipSize will give player additional ammo on spawn}}
     * * {{FuncArg|boolean|Automatic|If true makes the weapon shoot automatically as long as the player has primary attack button held down}} 
     */
    Primary: table;
    
    /**
     * Secondary attack settings, has same fields as Primary attack settings 
     */
    Secondary: table;
    
    /**
     * (Clientside) Makes the player models hands bonemerged onto the view model
     * 
     * {{Warning|The gamemode and view models '''must''' support this feature for it to work!
     * You can find more information here: [[Using_Viewmodel_Hands|Using Viewmodel Hands]]}} 
     */
    UseHands?: boolean;
    
    /**
     * The folder from where the weapon was loaded. This should always be "weapons/weapon_myweapon", regardless whether your SWEP is stored as a file, or multiple files in a folder. It is set automatically on load 
     */
    Folder: string;
    
    /**
     * (Clientside) Makes the default SWEP crosshair be positioned in 3D space where your aim actually is (like on Jeep), instead of simply sitting in the middle of the screen at all times 
     */
    AccurateCrosshair?: boolean;
    
    /**
     * Disable the ability for players to duplicate this SWEP 
     */
    DisableDuplicator?: boolean;
    
    /**
     * (Clientside) Sets the spawnmenu content icon type for the entity, used by spawnmenu in the Sandbox-derived gamemodes.
     * See {{LibraryFunction|spawnmenu|AddContentType}} for more information. 
     */
    ScriptedEntityType?: string;
    
    /**
     * If set to false, the weapon will not play the weapon pick up sound when picked up. 
     */
    m_bPlayPickupSound?: boolean;
}

/**
 * Table is one element from {{LibraryFunction|team|GetAllTeams}}. 
 */
interface TeamData {
    /**
     * Color of the team 
     */
    Color: table;
    
    /**
     * Whether the team is joinable or not. 
     */
    Joinable: boolean;
    
    /**
     * Name of the team 
     */
    Name: string;
    
    /**
     * Score of the team 
     */
    Score: number;
}

/**
 * Used for {{LibraryFunction|draw|Text}}. 
 */
interface TextData {
    /**
     * Text to be drawn. 
     */
    text: string;
    
    /**
     * The font to draw with. List of default fonts can be found [[Default_Fonts|here]]. 
     */
    font?: string;
    
    /**
     * This holds the X and Y coordinates. Key value 1 is x, key value 2 is y. 
     */
    pos: table;
    
    /**
     * The alignment of the X position. See {{Enum|TEXT_ALIGN}} 
     */
    xalign?: TEXT_ALIGN;
    
    /**
     * The alignment of the Y position. See {{Enum|TEXT_ALIGN}} 
     */
    yalign?: TEXT_ALIGN;
    
    /**
     * The text color 
     */
    color?: table;
}

/**
 * Used for {{LibraryFunction|draw|TexturedQuad}}. 
 */
interface TextureData {
    /**
     * surface.GetTextureID number of the texture to be drawn. 
     */
    texture: number;
    
    /**
     * The x Coordinate. 
     */
    x: number;
    
    /**
     * The y Coordinate. 
     */
    y: number;
    
    /**
     * The width of the texture. 
     */
    w: number;
    
    /**
     * The height of the texture. 
     */
    h: number;
    
    /**
     * The texture color 
     */
    color?: number;
}

/**
 * The TOOL table is used in Sandbox tool creation. You can find a list of callbacks on the [[:Category:TOOL Hooks|TOOL Hooks]] page and a list of methods on the [[:Category:Tool|Tool Functions]] page. Do note that some of the fields below have no effect on server-side operations.
 * 
 * The tool information box drawn on the HUD while your tool is selected has 2 values that are set by {{LibraryFunction|language|Add}}.
 * 
 * "tool.[tool mode].name" - The tool name (Note this is NOT the same as TOOL.Name)
 * 
 * "tool.[tool mode].desc" - The tool description
 * 
 * Ensure that all tool file names are entirely lowercase.  Including capital letters can lead to unintended behavior. 
 */
interface TOOL {
    /**
     * If set to false, the tool won't be added to the tool menu and players will have to access it by other means. 
     */
    AddToMenu?: boolean;
    
    /**
     * The tool menu category under which the tool should be listed. 
     */
    Category?: string;
    
    /**
     * The console command to execute upon being selected in the Q menu. 
     */
    Command?: string;
    
    /**
     * The name of the tool in the Q menu.
     * Common practice is to set this to "#tool.[lua filename].name" to match the name displayed in the tool information box. 
     */
    Name?: string;
    
    /**
     * The name of the configuration file. 
     */
    ConfigName?: string;
    
    /**
     * A key-value ( convar name-default value ) table containing the client-side convars to create. All convars will be prefixed with the filename of the tool.
     * 
     * You can later use {{ClassFunction|Tool|GetClientNumber}} or {{ClassFunction|Tool|GetClientInfo}} to retrieve these values. 
     */
    ClientConVar: table;
    
    /**
     * Same as above, but created server-side instead. 
     */
    ServerConVar: table;
    
    /**
     * The function that is called to build the context menu for your tool. It has one argument, namely the context menu's base panel to which all of your custom panels are going to be parented to.
     * 
     * While it might sound like a hook, it isn't - you won't receive a self argument inside the function. 
     */
    BuildCPanel: Function;
    
    /**
     * Allows you to override the tool usage information shown when the tool is equipped.
     * See [[Tool Information Display]] for more information. 
     */
    Information: table;
    
    /**
     * Set this to CurTime() on the client to make the tools information box on the HUD flash white. 
     */
    LastMessage?: number;
    
    /**
     * **Deprecated!**
     * 
     * Does nothing. Was used in conjunction with LastMessage in very old versions of the game. 
     */
    Message?: string;
    
    /**
     * Class name of the tool. (name of the .lua file)
     * 
     * This is set automatically. 
     */
    Mode: string;
}

/**
 * Table returned by {{ClassFunction|Vector|ToScreen}}. 
 */
interface ToScreenData {
    /**
     * The x coordinate on the players screen 
     */
    x: number;
    
    /**
     * The y coordinate on the players screen 
     */
    y: number;
    
    /**
     * The coordinate is not behind the player. '''This does not mean the coordinate is on the screen.''' When this is false, it means that the coordinate would not be on the screen even if the player had a full 180 degree FOV. 
     */
    visible: boolean;
}

/**
 * Table structure used for {{LibraryFunction|util|TraceLine}}. 
 */
interface Trace {
    /**
     * The start position of the trace 
     */
    start?: Vector;
    
    /**
     * The end position of the trace 
     */
    endpos?: Vector;
    
    /**
     * Things the trace should not hit. Can also be a table of entities or a function with one argument:
     * 
     * * {{FuncArg|Entity|ent|The entity that the trace hit}}
     * 
     * Return true in the function to hit the entity, false to skip it.
     * 
     * {{Warning|Using a function here is super slow - try to avoid it.}} 
     */
    filter?: Entity;
    
    /**
     * The trace mask {{Enum|MASK}}. This determines what the trace should hit and what it shouldn't hit. A mask is a combination of {{Enum|CONTENTS}} - you can use these for more advanced masks. 
     */
    mask?: MASK | CONTENTS;
    
    /**
     * The collision group {{Enum|COLLISION_GROUP}}. This determines what the trace should hit in regards to the entity's collision group. 
     */
    collisiongroup?: COLLISION_GROUP;
    
    /**
     * Should the trace ignore world or not 
     */
    ignoreworld?: boolean;
    
    /**
     * If set, the trace result will be written to the supplied table instead of returning a new table 
     */
    output?: table;
}

/**
 * Table structure used as trace result. 
 */
interface TraceResult {
    /**
     * The entity hit by the trace 
     */
    Entity: Entity;
    
    /**
     * This indicates the how much of your trace length was used from 0-1 (resultLength/originalLength) 
     */
    Fraction: number;
    
    /**
     * Given the trace started in a solid enviroment, this will return at what distance the trace left the solid from 0-1. Doesn't work on entities. 
     */
    FractionLeftSolid: number;
    
    /**
     * Indicates whether the trace hit something 
     */
    Hit: boolean;
    
    /**
     * The id of the hitbox hit by the trace. 
     */
    HitBox: number;
    
    /**
     * {{Enum|HITGROUP}} describing what hitgroup the trace hit (not the same as HitBox) 
     */
    HitGroup: HITGROUP;
    
    /**
     * Indicates whenever the trace hit a no-draw brush 
     */
    HitNoDraw: boolean;
    
    /**
     * Indicates whenever the trace did not hit the world 
     */
    HitNonWorld: boolean;
    
    /**
     * The direction of the surface that was hit as a normal/direction vector. ( Vector with length of 1 ) 
     */
    HitNormal: Vector;
    
    /**
     * Position of the traces hit point 
     */
    HitPos: Vector;
    
    /**
     * Indicates whenever the trace hit the sky 
     */
    HitSky: boolean;
    
    /**
     * The surface MATERIAL (not texture) of whatever the trace hit 
     */
    HitTexture: string;
    
    /**
     * Indicates whenever the trace hit the world 
     */
    HitWorld: boolean;
    
    /**
     * {{Enum|MAT}} of the material hit by the trace 
     */
    MatType: MAT;
    
    /**
     * The direction of the trace as a normal/direction vector. ( Vector with length of 1 ) 
     */
    Normal: Vector;
    
    /**
     * The physics bone enum hit 
     */
    PhysicsBone: number;
    
    /**
     * The origin of the trace 
     */
    StartPos: Vector;
    
    /**
     * ID of hit surface property, from scripts/surfaceproperties.txt
     * 
     * You can get the name using {{LibraryFunction|util|GetSurfacePropName}}
     * 
     * Used for {{ClassFunction|CEffectData|SetSurfaceProp}} in "Impact" effect. 
     */
    SurfaceProps: number;
    
    /**
     * Indicates whenever the trace started in a solid enviroment 
     */
    StartSolid: boolean;
    
    /**
     * True if the entire trace is inside a solid 
     */
    AllSolid: boolean;
}

/**
 * Table structure used by {{LibraryFunction|undo|Do_Undo}}. 
 */
interface Undo {
    /**
     * The player responsible who owns the undo 
     */
    Owner: Player;
    
    /**
     * The name of the text to report to the player 
     */
    Name: string;
    
    /**
     * A table of entities to be removed by the undo 
     */
    Entities: table;
    
    /**
     * A table of {function_to_call, func_arg2, func_arg3} 
     */
    Functions: table;
    
    /**
     * A custom undo text to show the client 
     */
    CustomUndoText: string;
}

/**
 * The structure used by {{ClassFunction|Vehicle|SetVehicleParams}} and {{ClassFunction|Vehicle|GetVehicleParams}}. 
 */
interface VehicleParams {
    /**
     * Wheels per axle 
     */
    wheelsPerAxle: number;
    
    /**
     * Number of axles 
     */
    axleCount: number;
    
    /**
     * A table of {{Struct|VehicleParamsAxle}} tables. 
     */
    axles: VehicleParamsAxle[];
    
    /**
     * See {{Struct|VehicleParamsBody}} 
     */
    body: VehicleParamsBody;
    
    /**
     * See {{Struct|VehicleParamsEngine}} 
     */
    engine: VehicleParamsEngine;
    
    /**
     * See {{Struct|VehicleParamsSteering}} 
     */
    steering: VehicleParamsSteering;
}

/**
 * The structure used by {{Struct|VehicleParams}}. 
 */
interface VehicleParamsAxle {
    /**
     */
    brakeFactor: number;
    
    /**
     */
    offset: Vector;
    
    /**
     */
    raytraceCenterOffset: Vector;
    
    /**
     */
    raytraceOffset: Vector;
    
    /**
     */
    suspension_maxBodyForce: number;
    
    /**
     */
    suspension_springConstant: number;
    
    /**
     */
    suspension_springDamping: number;
    
    /**
     */
    suspension_springDampingCompression: number;
    
    /**
     */
    suspension_stabilizerConstant: number;
    
    /**
     */
    torqueFactor: number;
    
    /**
     */
    wheelOffset: Vector;
    
    /**
     * Material index of braking material of the wheels. Upon braking, the wheels will be set to this material. 
     */
    wheels_brakeMaterialIndex: number;
    
    /**
     */
    wheels_damping: number;
    
    /**
     */
    wheels_frictionScale: number;
    
    /**
     */
    wheels_inertia: number;
    
    /**
     * Mass of each wheel. 
     */
    wheels_mass: number;
    
    /**
     * Material index of the wheels by default. 
     */
    wheels_materialIndex: number;
    
    /**
     * Radius of the wheels. 
     */
    wheels_radius: number;
    
    /**
     */
    wheels_rotdamping: number;
    
    /**
     * Material index of skid material of the wheels. Upon skidding ( pressing Space and sliding the vehicle ), the wheels will be set to this material. 
     */
    wheels_skidMaterialIndex: number;
    
    /**
     */
    wheels_springAdditionalLength: number;
}

/**
 * The structure used by {{Struct|VehicleParams}}. 
 */
interface VehicleParamsBody {
    /**
     * Additional gravity to be applied to the vehicle 
     */
    addGravity: number;
    
    /**
     */
    counterTorqueFactor: number;
    
    /**
     */
    keepUprightTorque: number;
    
    /**
     * Mass center override 
     */
    massCenterOverride: Vector;
    
    /**
     * Mass override 
     */
    massOverride: number;
    
    /**
     * Maximum angular velocity 
     */
    maxAngularVelocity: number;
    
    /**
     */
    tiltForce: number;
    
    /**
     */
    tiltForceHeight: number;
}

/**
 * The structure used by {{Struct|VehicleParams}}. 
 */
interface VehicleParamsEngine {
    /**
     */
    autobrakeSpeedFactor: number;
    
    /**
     */
    autobrakeSpeedGain: number;
    
    /**
     * This acts as the final ratio of the gearbox.
     * 
     * It's like a master coefficient of the gearbox. 
     */
    axleRatio: number;
    
    /**
     * Amount of seconds between being able to use the boost ( by pressing Shift key by default ) 
     */
    boostDelay: number;
    
    /**
     * Duration of the boost in seconds 
     */
    boostDuration: number;
    
    /**
     */
    boostForce: number;
    
    /**
     * Maximum speed while boosting
     * 
     * '''WARNING!''' The SetVehicleParams function takes this in MILES PER HOUR, but GetVehicleParams returns this IN HAMMER UNITS!
     * 
     * 1MPH is roughly 17.6 HU. 
     */
    boostMaxSpeed: number;
    
    /**
     * Amount of gears this vehicle has 
     */
    gearCount: number;
    
    /**
     * A table of numbers, of gear rations.
     * Table length is equal to "gearCount" member of this table. 
     */
    gearRatio: table;
    
    /**
     * The HP amount of the vehicle
     * 
     * This value is used to calculate the effectively applied torque, along with ratios and ''maxRPM''. 
     */
    horsepower: number;
    
    /**
     * If ''true'', the gearbox shifts gears, if ''false'' the gearbox stays stuck to the 1st gear (gear number 0). 
     */
    isAutoTransmission: boolean;
    
    /**
     * Maximum RPM of the vehicle.
     * Despite this being a maximum value, the vehicle can exceed it.
     * 
     * '''WARNING!''' Attempts to exceed the max RPM will force the active gear ratio to be that of the 1st gear, which will provide even more torque. This is the opposite of a rev limiter. This value is only used for the calculation of the effectively applied torque. 
     */
    maxRPM: number;
    
    /**
     * Maximum reverse speed of the vehicle
     * 
     * '''WARNING!''' The SetVehicleParams function takes this in MILES PER HOUR, but GetVehicleParams returns this IN HAMMER UNITS!
     * 
     * 1MPH is roughly 17.6 HU. 
     */
    maxRevSpeed: number;
    
    /**
     * Maximum forward going speed of the vehicle without boosting
     * 
     * '''WARNING!''' The SetVehicleParams function takes this in MILES PER HOUR, but GetVehicleParams returns this IN HAMMER UNITS!
     * 
     * 1MPH is roughly 17.6 HU. 
     */
    maxSpeed: number;
    
    /**
     * Amount of RPM to automatically shift one gear down 
     */
    shiftDownRPM: number;
    
    /**
     * Amount of RPM to automatically shift one gear up 
     */
    shiftUpRPM: number;
    
    /**
     */
    throttleTime: number;
    
    /**
     */
    torqueBoost: boolean;
}

/**
 * The structure used by {{Struct|VehicleParams}}. 
 */
interface VehicleParamsSteering {
    /**
     */
    boostSteeringRateFactor: number;
    
    /**
     */
    boostSteeringRestRateFactor: number;
    
    /**
     */
    brakeSteeringRateFactor: number;
    
    /**
     * The maximum angle at which the vehicle can turn while boosting 
     */
    degreesBoost: number;
    
    /**
     * The maximum angle at which the vehicle can turn while moving at max speed and not boosting 
     */
    degreesFast: number;
    
    /**
     * The maximum angle at which the vehicle can turn while moving slowest 
     */
    degreesSlow: number;
    
    /**
     * Disabled in Garry's Mod. In Half-Life 2: Episode 2 this dictates whether the vehicle should leave wheel dust effects when driving around 
     */
    dustCloud: boolean;
    
    /**
     * Whether the vehicle is allowed to skid/drift 
     */
    isSkidAllowed: boolean;
    
    /**
     * In Hammer Units 
     */
    powerSlideAccel: number;
    
    /**
     */
    speedFast: number;
    
    /**
     */
    speedSlow: number;
    
    /**
     */
    steeringExponent: number;
    
    /**
     */
    steeringRateFast: number;
    
    /**
     */
    steeringRateSlow: number;
    
    /**
     */
    steeringRestRateFast: number;
    
    /**
     */
    steeringRestRateSlow: number;
    
    /**
     */
    throttleSteeringRestRateFactor: number;
    
    /**
     */
    turnThrottleReduceFast: number;
    
    /**
     */
    turnThrottleReduceSlow: number;
}

/**
 * Table used by {{LibraryFunction|video|Record}}. 
 */
interface VideoData {
    /**
     * The video container format.
     * 
     * '''Valid options are:''' webm, ogg 
     */
    container: string;
    
    /**
     * The video codec.
     * 
     * '''Valid options are:''' vp8, theora 
     */
    video: string;
    
    /**
     * The audio codec.
     * 
     * '''Valid options are:''' vorbis 
     */
    audio: string;
    
    /**
     * The video quality 
     */
    quality: number;
    
    /**
     * The record bitrate 
     */
    bitrate: number;
    
    /**
     * Frames per second 
     */
    fps: number;
    
    /**
     * Lock the frame count per second 
     */
    lockfps: boolean;
    
    /**
     * The file name for the video 
     */
    name: string;
    
    /**
     * The videos width 
     */
    width: number;
    
    /**
     * The videos height 
     */
    height: number;
}

/**
 * Table structure used for {{LibraryFunction|render|RenderView}}.
 * 
 * Unless stated otherwise, the default values for all these keys would be inherited from the engine's CViewSetup and do not have static representations. 
 */
interface ViewData {
    /**
     * The view's original position 
     */
    origin: Vector;
    
    /**
     * The view's angles 
     */
    angles: Angle;
    
    /**
     * Default width divided by height 
     */
    aspectratio: number;
    
    /**
     * The x position of the viewport to render in 
     */
    x: number;
    
    /**
     * The y position of the viewport to render in 
     */
    y: number;
    
    /**
     * The width of the viewport to render in 
     */
    w: number;
    
    /**
     * The height of the viewport to render in 
     */
    h: number;
    
    /**
     * Draw the HUD and call the hud painting related hooks 
     */
    drawhud?: boolean;
    
    /**
     * Draw monitors 
     */
    drawmonitors?: boolean;
    
    /**
     * The weapon's viewmodel 
     */
    drawviewmodel?: boolean;
    
    /**
     * The viewmodel's FOV 
     */
    viewmodelfov: number;
    
    /**
     * The main view's FOV 
     */
    fov: number;
    
    /**
     * Render the view orthogonal. Can also be a table with these keys: ( In which case orthogonal view is automatically set to true )
     * * left
     * * right
     * * top
     * * bottom 
     */
    ortho?: boolean;
    
    /**
     * Coordinate for the left clipping plane 
     */
    ortholeft: number;
    
    /**
     * Coordinate for the right clipping plane 
     */
    orthoright: number;
    
    /**
     * Coordinate for the top clipping plane 
     */
    orthotop: number;
    
    /**
     * Coordinate for the bottom clipping plane 
     */
    orthobottom: number;
    
    /**
     * The distance of the view's origin to the near clipping plane 
     */
    znear: number;
    
    /**
     * The distance of the view's origin to the far clipping plane 
     */
    zfar: number;
    
    /**
     * The distance of the view's origin to the near clipping plane for the viewmodel 
     */
    znearviewmodel: number;
    
    /**
     * The distance of the view's origin to the far clipping plane for the viewmodel 
     */
    zfarviewmodel: number;
    
    /**
     * <!--Call the {{HookFunction|GM|RenderScreenspaceEffects}} hook-->
     * Currently works identically to the "bloomtone" option (it also overrides it if you set this to false). 
     */
    dopostprocess?: boolean;
    
    /**
     * Disables default engine bloom and pauses the "brightness changes" on HDR maps. 
     */
    bloomtone?: boolean;
    
    /**
     * This allows you to "zoom in" on a part of the screen - for example, the top-left quarter of the screen. This is similar to how [https://garry.tv/2012/02/25/poster-screenshots/ poster splits the screen] into separate renders.
     * 
     * It's a table with 4 keys, controlling what portion of the screen to draw:
     * * left - where the left edge starts. Natural value is 0.
     * * right - where the right edge ends. Natural value is equal to w (the width of the viewport).
     * * top - where the ''bottom'' edge starts. Natural value is 0.
     * * bottom - where the ''top'' edge ends. Natural value is equal to h (the height of the viewport).
     * 
     * Note that top and bottom are reversed.
     * 
     * Values outside the viewport are allowed, but not recommended - instead you should increase the view FOV. 
     */
    offcenter: table;
}

/**
 * Information about a SWEP, used by {{HookFunction|SANDBOX|PlayerGiveSWEP}} and SWEP creation. For list of callbacks, see [[:Category:WEAPON_Hooks]].
 * 
 * While some of the fields may be serverside or clientside only, it is recommended to provide them on both so addons could use their values. 
 */
interface Weapon {
    /**
     * Entity class name of the SWEP (file or folder name of your SWEP). This is set automatically 
     */
    ClassName: string;
    
    /**
     * (Clientside) Category the SWEP is in 
     */
    Category?: string;
    
    /**
     * Whether this SWEP should be displayed in the Q menu 
     */
    Spawnable?: boolean;
    
    /**
     * Whether or not only admins can spawn the SWEP from their Q menu 
     */
    AdminOnly?: boolean;
    
    /**
     * Nice name of the SWEP 
     */
    PrintName?: string;
    
    /**
     * The base weapon to derive from. This '''must''' be a Lua weapon 
     */
    Base?: string;
    
    /**
     * Multiplier of deploy speed 
     */
    m_WeaponDeploySpeed?: number;
    
    /**
     * The entity that owns/wields this SWEP, if any 
     */
    Owner: Entity;
    
    /**
     * (Clientside) The author of the SWEP to be shown in weapon selection 
     */
    Author?: string;
    
    /**
     * (Clientside) The contacts of the SWEP creator to be shown in weapon selection 
     */
    Contact?: string;
    
    /**
     * (Clientside) The purpose of the SWEP creator to be shown in weapon selection 
     */
    Purpose?: string;
    
    /**
     * (Clientside) How to use your weapon, to be shown in weapon selection 
     */
    Instructions?: string;
    
    /**
     * Path to the view model for your SWEP (what the wielder will see) 
     */
    ViewModel?: string;
    
    /**
     * (Clientside) Should we flip the view model? This is needed for some CS:S view models 
     */
    ViewModelFlip?: boolean;
    
    /**
     * (Clientside) Same as ViewModelFlip, but for the second viewmodel 
     */
    ViewModelFlip1?: boolean;
    
    /**
     * (Clientside) Same as ViewModelFlip, but for the third viewmodel 
     */
    ViewModelFlip2?: boolean;
    
    /**
     * (Clientside) An angle of FOV used for the view model (Half-Life value is 90; Half-Life 2 is 54; Counter-Strike: Source is 74; Day of Defeat is 45) 
     */
    ViewModelFOV?: number;
    
    /**
     * The world model for your SWEP (what you will see in other players hands) 
     */
    WorldModel?: string;
    
    /**
     * (Serverside) Whether this weapon can be autoswitched away from when the player runs out of ammo in this weapon or picks up another weapon or ammo 
     */
    AutoSwitchFrom?: boolean;
    
    /**
     * (Serverside) Whether this weapon can be autoswitched to when the player runs out of ammo in their current weapon or they pick this weapon up 
     */
    AutoSwitchTo?: boolean;
    
    /**
     * (Serverside) Decides whether we should switch from/to this 
     */
    Weight?: number;
    
    /**
     * (Clientside) The scale of the viewmodel bob (viewmodel movement from left to right when walking around) 
     */
    BobScale?: number;
    
    /**
     * (Clientside) The scale of the viewmodel sway (viewmodel position lerp when looking around). 
     */
    SwayScale?: number;
    
    /**
     * (Clientside) Should the weapon icon bounce in weapon selection? 
     */
    BounceWeaponIcon?: boolean;
    
    /**
     * (Clientside) Should draw the weapon selection info box, containing SWEP.Instructions, etc. 
     */
    DrawWeaponInfoBox?: boolean;
    
    /**
     * (Clientside) Should we draw the default HL2 ammo counter? 
     */
    DrawAmmo?: boolean;
    
    /**
     * (Clientside) Should we draw the default crosshair? 
     */
    DrawCrosshair?: boolean;
    
    /**
     * (Clientside) The SWEP render group, see {{Enum|RENDERGROUP}} 
     */
    RenderGroup?: RENDERGROUP;
    
    /**
     * Slot in the weapon selection menu, starts with 0 
     */
    Slot?: number;
    
    /**
     * Position in the slot, should be in the range 0-128 
     */
    SlotPos?: number;
    
    /**
     * (Clientside) Internal variable for drawing the info box in weapon selection 
     */
    SpeechBubbleLid?: number;
    
    /**
     * (Clientside) Path to an texture. Override this in your SWEP to set the icon in the weapon selection. This must be the texture ID, see {{LibraryFunction|surface|GetTextureID}} 
     */
    WepSelectIcon?: number;
    
    /**
     * (Clientside) Should we use Counter-Strike muzzle flashes upon firing? This is required for DoD:S or CS:S view models to fix their muzzle flashes. 
     */
    CSMuzzleFlashes?: boolean;
    
    /**
     * (Clientside) Use the X shape muzzle flash instead of the default Counter-Strike muzzle flash. Requires CSMuzzleFlashes to be set to true 
     */
    CSMuzzleX?: boolean;
    
    /**
     * Primary attack settings. The table contains these fields:
     * * {{FuncArg|string|Ammo|Ammo type ("Pistol", "SMG1" etc)}}
     * * {{FuncArg|number|ClipSize|The maximum amount of bullets one clip can hold}}
     * * {{FuncArg|number|DefaultClip|Default ammo in the clip, making it higher than ClipSize will give player additional ammo on spawn}}
     * * {{FuncArg|boolean|Automatic|If true makes the weapon shoot automatically as long as the player has primary attack button held down}} 
     */
    Primary: table;
    
    /**
     * Secondary attack settings, has same fields as Primary attack settings 
     */
    Secondary: table;
    
    /**
     * (Clientside) Makes the player models hands bonemerged onto the view model
     * 
     * {{Warning|The gamemode and view models '''must''' support this feature for it to work!
     * You can find more information here: [[Using_Viewmodel_Hands|Using Viewmodel Hands]]}} 
     */
    UseHands?: boolean;
    
    /**
     * The folder from where the weapon was loaded. This should always be "weapons/weapon_myweapon", regardless whether your SWEP is stored as a file, or multiple files in a folder. It is set automatically on load 
     */
    Folder: string;
    
    /**
     * (Clientside) Makes the default SWEP crosshair be positioned in 3D space where your aim actually is (like on Jeep), instead of simply sitting in the middle of the screen at all times 
     */
    AccurateCrosshair?: boolean;
    
    /**
     * Disable the ability for players to duplicate this SWEP 
     */
    DisableDuplicator?: boolean;
    
    /**
     * (Clientside) Sets the spawnmenu content icon type for the entity, used by spawnmenu in the Sandbox-derived gamemodes.
     * See {{LibraryFunction|spawnmenu|AddContentType}} for more information. 
     */
    ScriptedEntityType?: string;
    
    /**
     * If set to false, the weapon will not play the weapon pick up sound when picked up. 
     */
    m_bPlayPickupSound?: boolean;
}
/**
 * Used to show an icon for any of the [http://steamcommunity.com/stats/GarrysMod/achievements Garry's Mod Steam achievements].
 * 
 * If the viewer has not unlocked the achievement on Steam, the icon will be grayed out. 
 */
declare class AchievementIcon extends Panel {
    /**
     * Sets the achievement to be displayed by {{Type|AchievementIcon}}.[[Category:AchievementIcon]] 
     * @param id  Achievement number ID 
     */
    public SetAchievement(id: number): void;
    
    /**
     * Sets the achievement to be displayed by {{Type|AchievementIcon}}.[[Category:AchievementIcon]] 
     * @param id  Achievement number ID 
     */
    public SetAchievement(id: number): void;
}

/**
 * This library is used internally by Garry's Mod to help keep track of achievement progress and unlock the appropriate achievements once a certain number is reached.
 * 
 * However, this library can also be used by anyone else to forcefully unlock certain achievements. 
 */
declare namespace achievements {
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Adds one to the count of balloons burst. Once this count reaches 1000, the 'Popper' achievement is unlocked. 
     */
    function BalloonPopped(): void;
    
    /**
     * Returns the amount of achievements in Garry's Mod. 
     * @returns The amount of achievements available. 
     */
    function Count(): number;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Adds one to the count of balls eaten. Once this count reaches 200, the 'Ball Eater' achievement is unlocked. 
     */
    function EatBall(): void;
    
    /**
     * Retrieves progress of given achievement 
     * @param achievementID  The ID of achievement to retrieve progress of. Note: IDs start from 0, not 1. 
     * @example
     * 
     * for i = 0, achievements.Count() - 1 do
     * 	print( achievements.GetCount( i ) )
     * end
     * 
     * // Will print achievement progress for all of your achievements into console 
     */
    function GetCount(achievementID: number): void;
    
    /**
     * Retrieves description of given achievement 
     * @param achievementID  The ID of achievement to retrieve description of. Note: IDs start from 0, not 1. 
     * @returns Description of an achievement 
     * @example
     * 
     * for i = 0, achievements.Count() - 1 do
     * 	print( achievements.GetDesc( i ) )
     * end
     * 
     * // Will print achievement descriptions for all of your achievements into console 
     */
    function GetDesc(achievementID: number): string;
    
    /**
     * Retrieves progress goal of given achievement 
     * @param achievementID  The ID of achievement to retrieve goal of. Note: IDs start from 0, not 1. 
     * @returns Progress goal of an achievement 
     * @example
     * 
     * for i = 0, achievements.Count() - 1 do
     * 	print( achievements.GetCount( i ) .. " / " .. achievements.GetGoal( i ) )
     * end
     * 
     * // Will print achievement progress and goals for all of your achievements into console 
     */
    function GetGoal(achievementID: number): number;
    
    /**
     * Retrieves name of given achievement 
     * @param achievementID  The ID of achievement to retrieve name of. Note: IDs start from 0, not 1. 
     * @returns Name of an achievement 
     * @example
     * 
     * for i = 0, achievements.Count() - 1 do
     * 	print( achievements.GetName( i ) )
     * end
     * 
     * // Will print all achievement names into console 
     */
    function GetName(achievementID: number): string;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Adds one to the count of baddies killed. Once this count reaches 1000, the 'War Zone' achievement is unlocked. 
     */
    function IncBaddies(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Adds one to the count of innocent animals killed. Once this count reaches 1000, the 'Innocent Bystander' achievement is unlocked. 
     */
    function IncBystander(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Adds one to the count of friendly NPCs killed. Once this count reaches 1000, the 'Bad Friend' achievement is unlocked. 
     */
    function IncGoodies(): void;
    
    /**
     * Used in GMod 12 in the achievements menu to show the user if they have unlocked certain achievements. 
     * @param AchievementID  Internal Achievement ID number 
     * @returns Returns true if the given achievementID is achieved. 
     * @example
     * 
     * print("Did you get achievement number 7?, " .. achievements.IsAchieved(7))
     * 
     * // Prints true if you got the achievement. 
     */
    function IsAchieved(AchievementID: number): boolean;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Adds one to the count of things removed. Once this count reaches 5000, the 'Destroyer' achievement is unlocked. 
     */
    function Remover(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Adds one to the count of NPCs spawned. Once this count reaches 1000, the 'Procreator' achievement is unlocked. 
     */
    function SpawnedNPC(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Adds one to the count of props spawned. Once this count reaches 5000, the 'Creator' achievement is unlocked. 
     */
    function SpawnedProp(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Adds one to the count of ragdolls spawned. Once this count reaches 2000, the 'Dollhouse' achievement is unlocked. 
     */
    function SpawnedRagdoll(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Adds one to the count of how many times the spawnmenu has been opened. Once this count reaches 100,000, the 'Menu User' achievement is unlocked. 
     */
    function SpawnMenuOpen(): void;
}

/**
 * The ai library. 
 */
declare namespace ai {
    /**
     * @param sched  Schedule, see {{Enum|SCHED}} 
     * @returns The ID 
     */
    function GetScheduleID(sched: string): number;
    
    /**
     * Returns the task Id corresponding to the given task name. 
     * @param taskName  The task name to get the ID of 
     * @returns The ID 
     */
    function GetTaskID(taskName: string): number;
}

/**
 * Allows you to set up a schedule for NPCs to follow. This lets you dictate their actions. 
 */
declare namespace ai_schedule {
    /**
     * Creates a schedule for scripted NPC. 
     * @param name  Name of the schedule. 
     * @returns A table containing schedule information to be used with {{HookFunction|ENTITY|StartSchedule}}. 
     */
    function New(name: string): number;
}

/**
 * Used to create tasks for scripted NPCs. 
 */
declare namespace ai_task {
    /**
     * Create a new empty task. Used by {{ClassFunction|Schedule|AddTask}} and {{ClassFunction|Schedule|EngTask}}. 
     * @returns The new task object. 
     */
    function New(): Task;
}

/**
 * List of all possible functions to manipulate angles.
 * 
 * Created by {{GlobalFunction|Angle}} & many more functions.
 * {{ClassFields
 * |Fields=
 * {{ClassField|number|pitch|The pitch component of the angle}}
 * {{ClassField|number|yaw|The yaw component of the angle}}
 * {{ClassField|number|roll|The roll component of the angle}}
 * {{ClassField|number|p|The pitch component of the angle}}
 * {{ClassField|number|y|The yaw component of the angle}}
 * {{ClassField|number|r|The roll component of the angle}}
 * }} 
 * !CustomConstructor Angle */
declare class Angle {
    /**
     * The pitch component of the angle 
     */
    pitch: number;
    
    /**
     * The yaw component of the angle 
     */
    yaw: number;
    
    /**
     * The roll component of the angle 
     */
    roll: number;
    
    /**
     * The pitch component of the angle 
     */
    p: number;
    
    /**
     * The yaw component of the angle 
     */
    y: number;
    
    /**
     * The roll component of the angle 
     */
    r: number;
    
    /**
     * Creates an {{Type|Angle}} object. 
     * @param pitch [=0] The pitch value of the angle.
     * 
     * If this is an {{Type|Angle}}, this function will return a copy of the given angle.
     * 
     * If this is a {{Type|string}}, this function will try to parse the string as a angle. If it fails, it returns a 0 angle.
     * (See examples) 
     * @param yaw [=0] The yaw value of the angle. 
     * @param roll [=0] The roll value of the angle. 
     * @example
     * 
     * print( Angle( 1, 2, 3 ) )
     * print( Angle( "4 5 6" ) )
     * local test = Angle( 7, 8, 9 )
     * print( Angle( test ) )
     * 
     * print( Angle( "4 5 test" ) )
     * print( Angle() )
     * 
     * // Creates an angle and prints the value to the console. 
     */
    public constructor(pitch?: number, yaw?: number, roll?: number);
    
    /**
     * Adds the values of the argument angle to the orignal angle. This functions the same as angle1 + angle2 without creating a new angle object, skipping object construction and garbage collection. 
     * @param angle  The angle to add. 
     */
    public Add(angle: Angle): void;
    
    /**
     * Divides all values of the original angle by a scalar. This functions the same as angle1 / num without creating a new angle object, skipping object construction and garbage collection. 
     * @param scalar  The number to divide by. 
     */
    public Div(scalar: number): void;
    
    /**
     * Returns a normal vector facing in the direction that the angle points. 
     * @returns The forward direction of the angle 
     */
    public Forward(): Vector;
    
    /**
     * Returns whether the pitch, yaw and roll are 0 or not. 
     * @returns Whether the pitch, yaw and roll are 0 or not. 
     */
    public IsZero(): boolean;
    
    /**
     * Multiplies a scalar to all the values of the orignal angle. This functions the same as num * angle without creating a new angle object, skipping object construction and garbage collection. 
     * @param scalar  The number to multiply. 
     */
    public Mul(scalar: number): void;
    
    /**
     * Normalizes the angles by applying a module with 360 to pitch, yaw and roll. 
     * @example
     * 
     * local a = Angle( 0, 181, 1 )
     * a:Normalize()
     * print( a )
     * 
     * // Example usage of the function 
     */
    public Normalize(): void;
    
    /**
     * Returns a normal vector facing in the direction that points right relative to the angle's direction. 
     * @returns The right direction of the angle 
     */
    public Right(): Vector;
    
    /**
     * Rotates the angle around the specified axis by the specified degrees. 
     * @param axis  The axis to rotate around. 
     * @param rotation  The degrees to rotate around the specified axis. 
     */
    public RotateAroundAxis(axis: Vector, rotation: number): void;
    
    /**
     * Copies pitch, yaw and roll from the second angle to the first. 
     * @param originalAngle  The angle to copy the values from. 
     */
    public Set(originalAngle: Angle): void;
    
    /**
     * Snaps the angle to nearest interval of degrees.
     * 
     * **Note:**
     * >This will modify the original angle too! 
     * @param axis  The component/axis to snap. Can be either "p"/"pitch", "y"/"yaw" or "r"/"roll". 
     * @param target  The target angle snap interval 
     * @returns The snapped angle. 
     * @example
     * 
     * print( Angle( 0, 92, 0 ):SnapTo( "y", 90 ) )
     * print( Angle( 0, 115, 0 ):SnapTo( "y", 45 ) )
     * print( Angle( 12, 98, 167 ):SnapTo( "p", 30 ):SnapTo( "y", 45 ):SnapTo( "r", 45 ) )
     * 
     * // Example usage 
     */
    public SnapTo(axis: string, target: number): Angle;
    
    /**
     * Subtracts the values of the argument angle to the orignal angle. This functions the same as angle1 - angle2 without creating a new angle object, skipping object construction and garbage collection. 
     * @param angle  The angle to subtract. 
     */
    public Sub(angle: Angle): void;
    
    /**
     * Returns a normal vector facing in the direction that points up relative to the angle's direction. 
     * @returns The up direction of the angle. 
     */
    public Up(): Vector;
    
    /**
     * Sets pitch, yaw and roll to 0.
     * This function is faster than doing it manually. 
     */
    public Zero(): void;
}

/**
 * Used to show a player's Steam avatar. You are recommended but not limited to pick one of the following sizes: 16, 32, 64, 84, 128, 184. 
 * @example
 * 
 * local Avatar = vgui.Create( "AvatarImage", Panel )
 * Avatar:SetSize( 64, 64 )
 * Avatar:SetPos( 4, 4 )
 * Avatar:SetPlayer( LocalPlayer(), 64 )
 * 
 * // Creates an AvatarImage with the LocalPlayer's avatar inside. 
 */
declare class AvatarImage extends Panel {
    /**
     * Used by {{Type|AvatarImage}} to load an avatar for given player.[[Category:AvatarImage]] 
     * @param player  The player to use avatar of. 
     * @param size  The size of the avatar to use. Acceptable sizes are 32, 64, 184. 
     */
    public SetPlayer(player: Player, size: number): void;
    
    /**
     * Used by {{Type|AvatarImage}} to load an avatar for given player.[[Category:AvatarImage]] 
     * @param player  The player to use avatar of. 
     * @param size  The size of the avatar to use. Acceptable sizes are 32, 64, 184. 
     */
    public SetPlayer(player: Player, size: number): void;
    
    /**
     * Used by {{Type|AvatarImage}} panels to load an avatar by its 64-bit Steam ID (community ID).[[Category:AvatarImage]] 
     * @param steamid  The 64bit SteamID of the player to load avatar of 
     * @param size  The size of the avatar to use. Acceptable sizes are 32, 64, 184. 
     * @example
     * 
     * // Returns a random 64-bit Steam ID between STEAM_0:0:1 and STEAM_0:1:100000000
     * function GetRandomSteamID()
     * 	return "7656119"..tostring(7960265728+math.random(1, 200000000))
     * end
     * 
     * // Create the Steam User Grid
     * // Arg1: the size of each avatar
     * // Arg2: the size to load each avatar (16, 32, 64, 84, 128, 184)
     * function CreateSteamUserGrid(av_size, av_res)
     * 
     * 	// Remove this block of code if you do not mind loading thousands of avatars
     * 	if(av_size < 64) then
     * 		Error("Avatar size cannot be less than 64 square pixels.\n")
     * 		return
     * 	end
     * 	
     * 	// Delete existing grid
     * 	if(SteamUserGrid) then SteamUserGrid:Remove() end
     * 	
     * 	// The amount of avatars we can fit width-wise and height-wise
     * 	local w_count = math.floor(ScrW()/av_size)
     * 	local h_count = math.floor((ScrH()-25)/av_size)	// 25 = frame header size
     * 		
     * 	// Container panel
     * 	SteamUserGrid = vgui.Create("DFrame")
     * 	SteamUserGrid:SetSize(w_count*av_size, (h_count*av_size)+25)
     * 	SteamUserGrid:Center()
     * 	SteamUserGrid:SetTitle("Randomly Generated Grid of Steam Users")
     * 	SteamUserGrid:MakePopup()
     * 	
     * 	// Loop variables
     * 	local avatar, random_id
     * 	
     * 	// Create enough avatars to fill up screen without overflowing
     * 	for i = 0, (w_count*h_count)-1 do
     * 	
     * 		random_id = GetRandomSteamID()
     * 		
     * 		// Add avatar to container panel
     * 		avatar = vgui.Create("AvatarImage", SteamUserGrid)
     * 		
     * 		// Layout the avatars in a grid
     * 		avatar:SetPos((i%w_count)*av_size, 25+math.floor(i/w_count)*av_size)
     * 		
     * 		// Load the avatar image
     * 		avatar:SetSteamID(random_id, av_res)
     * 
     * 		avatar:SetSize(av_size, av_size)
     * 		
     * 		// Open user's Steam page on avatar click
     * 		avatar.OnMousePressed = function(self)
     * 			
     * 			local url = <nowiki>"http://steamcommunity.com/profiles/"</nowiki>..random_id
     * 			
     * 			gui.OpenURL(url)
     * 			
     * 		end
     * 		
     * 	end
     * 	
     * end
     * 
     * // Creates a grid of randomly generated Steam avatars which link to their corresponding Steam user pages. 
     */
    public SetSteamID(steamid: string, size: number): void;
    
    /**
     * Used by {{Type|AvatarImage}} panels to load an avatar by its 64-bit Steam ID (community ID).[[Category:AvatarImage]] 
     * @param steamid  The 64bit SteamID of the player to load avatar of 
     * @param size  The size of the avatar to use. Acceptable sizes are 32, 64, 184. 
     * @example
     * 
     * // Returns a random 64-bit Steam ID between STEAM_0:0:1 and STEAM_0:1:100000000
     * function GetRandomSteamID()
     * 	return "7656119"..tostring(7960265728+math.random(1, 200000000))
     * end
     * 
     * // Create the Steam User Grid
     * // Arg1: the size of each avatar
     * // Arg2: the size to load each avatar (16, 32, 64, 84, 128, 184)
     * function CreateSteamUserGrid(av_size, av_res)
     * 
     * 	// Remove this block of code if you do not mind loading thousands of avatars
     * 	if(av_size < 64) then
     * 		Error("Avatar size cannot be less than 64 square pixels.\n")
     * 		return
     * 	end
     * 	
     * 	// Delete existing grid
     * 	if(SteamUserGrid) then SteamUserGrid:Remove() end
     * 	
     * 	// The amount of avatars we can fit width-wise and height-wise
     * 	local w_count = math.floor(ScrW()/av_size)
     * 	local h_count = math.floor((ScrH()-25)/av_size)	// 25 = frame header size
     * 		
     * 	// Container panel
     * 	SteamUserGrid = vgui.Create("DFrame")
     * 	SteamUserGrid:SetSize(w_count*av_size, (h_count*av_size)+25)
     * 	SteamUserGrid:Center()
     * 	SteamUserGrid:SetTitle("Randomly Generated Grid of Steam Users")
     * 	SteamUserGrid:MakePopup()
     * 	
     * 	// Loop variables
     * 	local avatar, random_id
     * 	
     * 	// Create enough avatars to fill up screen without overflowing
     * 	for i = 0, (w_count*h_count)-1 do
     * 	
     * 		random_id = GetRandomSteamID()
     * 		
     * 		// Add avatar to container panel
     * 		avatar = vgui.Create("AvatarImage", SteamUserGrid)
     * 		
     * 		// Layout the avatars in a grid
     * 		avatar:SetPos((i%w_count)*av_size, 25+math.floor(i/w_count)*av_size)
     * 		
     * 		// Load the avatar image
     * 		avatar:SetSteamID(random_id, av_res)
     * 
     * 		avatar:SetSize(av_size, av_size)
     * 		
     * 		// Open user's Steam page on avatar click
     * 		avatar.OnMousePressed = function(self)
     * 			
     * 			local url = <nowiki>"http://steamcommunity.com/profiles/"</nowiki>..random_id
     * 			
     * 			gui.OpenURL(url)
     * 			
     * 		end
     * 		
     * 	end
     * 	
     * end
     * 
     * // Creates a grid of randomly generated Steam avatars which link to their corresponding Steam user pages. 
     */
    public SetSteamID(steamid: string, size: number): void;
}

/**
 * Base panel for elements using the [http://www.awesomium.com Awesomium] UI engine. 
 */
declare class Awesomium extends Panel {
    /**
     * Returns the panel's HTML material. Only works with {{Type|Awesomium}}, {{Type|HTML}} and {{Type|DHTML}} panels that have been fully loaded.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     * @returns The HTML material used by the panel. Typically starts with "__vgui_texture_" followed by an incremental number. 
     * @example
     * 
     * AddCSLuaFile()
     * 
     * ENT.Type = "anim"
     * ENT.Base = "base_entity"
     * 
     * ENT.PrintName = "Web Screen"
     * ENT.Author = "Microflash"
     * ENT.Spawnable = true
     * 
     * if ( CLIENT ) then
     * 	ENT.Mat = nil
     * 	ENT.Panel = nil
     * end
     * 
     * function ENT:Initialize()
     * 
     * 	if ( SERVER ) then
     * 		
     * 		self:SetModel("models/props_phx/rt_screen.mdl")
     * 		self:SetMoveType(MOVETYPE_VPHYSICS)
     * 		self:SetSolid(SOLID_VPHYSICS)
     * 		
     * 		self:PhysicsInit(SOLID_VPHYSICS)
     * 		
     * 		self:Freeze()
     * 		
     * 	else
     * 	
     * 		// Reset material and panel and load DHTML panel
     * 		self.Mat = nil
     * 		self.Panel = nil
     * 		self:OpenPage()
     * 		
     * 	end
     * 	
     * end
     * 
     * function ENT:Freeze()
     * 	local phys = self:GetPhysicsObject()
     * 	if (IsValid(phys)) then phys:EnableMotion(false) end
     * end
     * 
     * // Load the DHTML reference panel
     * function ENT:OpenPage()
     * 
     * 	// Iff for some reason a panel is already loaded, delete it
     * 	if(self.Panel) then
     * 	
     * 		self.Panel:Remove()
     * 		self.Panel = nil
     * 	
     * 	end
     * 
     * 	// Create a web page panel and fill the entire screen
     * 	self.Panel = vgui.Create("DHTML")
     * 	self.Panel:Dock(FILL)
     * 	
     * 	// Wiki page URL
     * 	local url = <nowiki>"http://wiki.garrysmod.com/page/Category:Material"</nowiki>
     * 	
     * 	// Load the wiki page
     * 	self.Panel:OpenURL(url)
     * 	
     * 	// Hide the panel
     * 	self.Panel:SetAlpha(0)
     * 	self.Panel:SetMouseInputEnabled(false)
     * 	
     * 	// Disable HTML messages
     * 	function self.Panel:ConsoleMessage(msg) end
     * 
     * end
     * 
     * function ENT:Draw()
     * 
     * 	// Iff the material has already been grabbed from the panel
     * 	if(self.Mat) then
     * 		
     * 		// Apply it to the screen/model
     * 		if(render.MaterialOverrideByIndex) then
     * 			render.MaterialOverrideByIndex(1, self.Mat)
     * 		else
     * 			render.ModelMaterialOverride(self.Mat)
     * 		end
     * 		
     * 	// Otherwise, check that the panel is valid and the HTML material is finished loading
     * 	elseif(self.Panel && self.Panel:GetHTMLMaterial()) then
     * 
     * 		// Get the html material
     * 		local html_mat = self.Panel:GetHTMLMaterial()
     * 		
     * 		// Used to make the material fit the model screen
     * 		// May need to be changed iff using a different model
     * 		// For the multiplication number it goes in segments of 512
     * 		// Based off the players screen resolution
     * 		local scale_x, scale_y = ScrW()/2048, ScrH()/1024
     * 		
     * 		// Create a new material with the proper scaling and shader
     * 		local matdata =
     * 		{
     * 			["$basetexture"]=html_mat:GetName(),
     * 			["$basetexturetransform"]="center 0 0 scale "..scale_x.." "..scale_y.." rotate 0 translate 0 0",
     * 			["$model"]=1
     * 		}
     * 		// Unique ID used for material name
     * 		local uid = string.Replace(html_mat:GetName(), "__vgui_texture_", "")
     * 		
     * 		// Create the model material
     * 		self.Mat = CreateMaterial("WebMaterial_"..uid, "VertexLitGeneric", matdata)
     * 	
     * 	end
     * 
     * 	// Render the model
     * 	self:DrawModel()
     * 	
     * 	// Reset the material override or else everything will have a HTML material!
     * 	render.ModelMaterialOverride(nil)
     * 
     * end
     * 
     * function ENT:OnRemove()
     * 	// Make sure the panel is removed too
     * 	if(self.Panel) then self.Panel:Remove() end
     * end
     * 
     * // Defines a new entity which can display a web page on a TV screen. 
     */
    public GetHTMLMaterial(): IMaterial;
    
    /**
     * Returns the panel's HTML material. Only works with {{Type|Awesomium}}, {{Type|HTML}} and {{Type|DHTML}} panels that have been fully loaded.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     * @returns The HTML material used by the panel. Typically starts with "__vgui_texture_" followed by an incremental number. 
     * @example
     * 
     * AddCSLuaFile()
     * 
     * ENT.Type = "anim"
     * ENT.Base = "base_entity"
     * 
     * ENT.PrintName = "Web Screen"
     * ENT.Author = "Microflash"
     * ENT.Spawnable = true
     * 
     * if ( CLIENT ) then
     * 	ENT.Mat = nil
     * 	ENT.Panel = nil
     * end
     * 
     * function ENT:Initialize()
     * 
     * 	if ( SERVER ) then
     * 		
     * 		self:SetModel("models/props_phx/rt_screen.mdl")
     * 		self:SetMoveType(MOVETYPE_VPHYSICS)
     * 		self:SetSolid(SOLID_VPHYSICS)
     * 		
     * 		self:PhysicsInit(SOLID_VPHYSICS)
     * 		
     * 		self:Freeze()
     * 		
     * 	else
     * 	
     * 		// Reset material and panel and load DHTML panel
     * 		self.Mat = nil
     * 		self.Panel = nil
     * 		self:OpenPage()
     * 		
     * 	end
     * 	
     * end
     * 
     * function ENT:Freeze()
     * 	local phys = self:GetPhysicsObject()
     * 	if (IsValid(phys)) then phys:EnableMotion(false) end
     * end
     * 
     * // Load the DHTML reference panel
     * function ENT:OpenPage()
     * 
     * 	// Iff for some reason a panel is already loaded, delete it
     * 	if(self.Panel) then
     * 	
     * 		self.Panel:Remove()
     * 		self.Panel = nil
     * 	
     * 	end
     * 
     * 	// Create a web page panel and fill the entire screen
     * 	self.Panel = vgui.Create("DHTML")
     * 	self.Panel:Dock(FILL)
     * 	
     * 	// Wiki page URL
     * 	local url = <nowiki>"http://wiki.garrysmod.com/page/Category:Material"</nowiki>
     * 	
     * 	// Load the wiki page
     * 	self.Panel:OpenURL(url)
     * 	
     * 	// Hide the panel
     * 	self.Panel:SetAlpha(0)
     * 	self.Panel:SetMouseInputEnabled(false)
     * 	
     * 	// Disable HTML messages
     * 	function self.Panel:ConsoleMessage(msg) end
     * 
     * end
     * 
     * function ENT:Draw()
     * 
     * 	// Iff the material has already been grabbed from the panel
     * 	if(self.Mat) then
     * 		
     * 		// Apply it to the screen/model
     * 		if(render.MaterialOverrideByIndex) then
     * 			render.MaterialOverrideByIndex(1, self.Mat)
     * 		else
     * 			render.ModelMaterialOverride(self.Mat)
     * 		end
     * 		
     * 	// Otherwise, check that the panel is valid and the HTML material is finished loading
     * 	elseif(self.Panel && self.Panel:GetHTMLMaterial()) then
     * 
     * 		// Get the html material
     * 		local html_mat = self.Panel:GetHTMLMaterial()
     * 		
     * 		// Used to make the material fit the model screen
     * 		// May need to be changed iff using a different model
     * 		// For the multiplication number it goes in segments of 512
     * 		// Based off the players screen resolution
     * 		local scale_x, scale_y = ScrW()/2048, ScrH()/1024
     * 		
     * 		// Create a new material with the proper scaling and shader
     * 		local matdata =
     * 		{
     * 			["$basetexture"]=html_mat:GetName(),
     * 			["$basetexturetransform"]="center 0 0 scale "..scale_x.." "..scale_y.." rotate 0 translate 0 0",
     * 			["$model"]=1
     * 		}
     * 		// Unique ID used for material name
     * 		local uid = string.Replace(html_mat:GetName(), "__vgui_texture_", "")
     * 		
     * 		// Create the model material
     * 		self.Mat = CreateMaterial("WebMaterial_"..uid, "VertexLitGeneric", matdata)
     * 	
     * 	end
     * 
     * 	// Render the model
     * 	self:DrawModel()
     * 	
     * 	// Reset the material override or else everything will have a HTML material!
     * 	render.ModelMaterialOverride(nil)
     * 
     * end
     * 
     * function ENT:OnRemove()
     * 	// Make sure the panel is removed too
     * 	if(self.Panel) then self.Panel:Remove() end
     * end
     * 
     * // Defines a new entity which can display a web page on a TV screen. 
     */
    public GetHTMLMaterial(): IMaterial;
    
    /**
     * Goes back one page in the HTML panel's history if available.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     */
    public GoBack(): void;
    
    /**
     * Goes back one page in the HTML panel's history if available.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     */
    public GoBack(): void;
    
    /**
     * Goes forward one page in the HTML panel's history if available.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     */
    public GoForward(): void;
    
    /**
     * Goes forward one page in the HTML panel's history if available.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     */
    public GoForward(): void;
    
    /**
     * Goes to the page in the HTML panel's history at the specified relative offset.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     * @param offset  The offset in the panel's back/forward history, relative to the current page, that you would like to skip to. Because this is relative, 0 = current page while negative goes back and positive goes forward. For example, -2 will go back 2 pages in the history. 
     */
    public GoToHistoryOffset(offset: number): void;
    
    /**
     * Goes to the page in the HTML panel's history at the specified relative offset.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     * @param offset  The offset in the panel's back/forward history, relative to the current page, that you would like to skip to. Because this is relative, 0 = current page while negative goes back and positive goes forward. For example, -2 will go back 2 pages in the history. 
     */
    public GoToHistoryOffset(offset: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     * @param objectName 
     */
    public NewObject(objectName: string): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     * @param objectName 
     */
    public NewObject(objectName: string): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     * @param objectName 
     * @param callbackName 
     */
    public NewObjectCallback(objectName: string, callbackName: string): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     * @param objectName 
     * @param callbackName 
     */
    public NewObjectCallback(objectName: string, callbackName: string): void;
    
    /**
     * [[Category:HTML]][[Category:Awesomium]]Instructs a HTML control to download and parse a HTML script using the passed URL. 
     * @param URL  URL to open 
     * @example
     * 
     * local frame = vgui.Create( "DFrame" )
     * frame:SetTitle( "HTML Example" )
     * frame:SetSize( ScrW() * 0.75, ScrH() * 0.75 )
     * frame:Center()
     * frame:MakePopup()
     * 
     * local html = vgui.Create( "HTML", frame )
     * html:Dock( FILL )
     * html:OpenURL( "wiki.garrysmod.com" )
     * 
     * // Displays the Garry's Mod wiki page.@example
     * 
     * local frame = vgui.Create( "DFrame" )
     * frame:SetTitle( "HTML Example" )
     * frame:SetSize( ScrW() * 0.75, ScrH() * 0.75 )
     * frame:Center()
     * frame:MakePopup()
     * 
     * local html = vgui.Create( "HTML", frame )
     * html:Dock( FILL )
     * html:OpenURL( "asset://garrysmod/html/loading.html" )
     * 
     * // Displays the default loading screen from the html folder. 
     */
    public OpenURL(URL: string): void;
    
    /**
     * [[Category:HTML]][[Category:Awesomium]]Instructs a HTML control to download and parse a HTML script using the passed URL. 
     * @param URL  URL to open 
     * @example
     * 
     * local frame = vgui.Create( "DFrame" )
     * frame:SetTitle( "HTML Example" )
     * frame:SetSize( ScrW() * 0.75, ScrH() * 0.75 )
     * frame:Center()
     * frame:MakePopup()
     * 
     * local html = vgui.Create( "HTML", frame )
     * html:Dock( FILL )
     * html:OpenURL( "wiki.garrysmod.com" )
     * 
     * // Displays the Garry's Mod wiki page.@example
     * 
     * local frame = vgui.Create( "DFrame" )
     * frame:SetTitle( "HTML Example" )
     * frame:SetSize( ScrW() * 0.75, ScrH() * 0.75 )
     * frame:Center()
     * frame:MakePopup()
     * 
     * local html = vgui.Create( "HTML", frame )
     * html:Dock( FILL )
     * html:OpenURL( "asset://garrysmod/html/loading.html" )
     * 
     * // Displays the default loading screen from the html folder. 
     */
    public OpenURL(URL: string): void;
    
    /**
     * Refreshes the HTML panel's current page.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     * @param ignoreCache [=false] If true, the refresh will ignore cached content similar to "ctrl+f5" in most browsers. 
     */
    public Refresh(ignoreCache?: boolean): void;
    
    /**
     * Refreshes the HTML panel's current page.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     * @param ignoreCache [=false] If true, the refresh will ignore cached content similar to "ctrl+f5" in most browsers. 
     */
    public Refresh(ignoreCache?: boolean): void;
    
    /**
     * [[Category:HTML]][[Category:Awesomium]]Allows you to set HTML code within a panel. 
     * @param HTML_code  The code to set. 
     * @example
     * 
     * local HTML = vgui.Create( "HTML", DPanel )
     * HTML:SetHTML( "<p>Put HTML code here</p>" )
     * HTML:SetSize( 390, 400 )
     * 
     * // 
     */
    public SetHTML(HTML_code: string): void;
    
    /**
     * [[Category:HTML]][[Category:Awesomium]]Allows you to set HTML code within a panel. 
     * @param HTML_code  The code to set. 
     * @example
     * 
     * local HTML = vgui.Create( "HTML", DPanel )
     * HTML:SetHTML( "<p>Put HTML code here</p>" )
     * HTML:SetSize( 390, 400 )
     * 
     * // 
     */
    public SetHTML(HTML_code: string): void;
    
    /**
     * Stops the loading of the HTML panel's current page.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     */
    public StopLoading(): void;
    
    /**
     * Forcibly updates the panels' HTML Material, similar to when Paint is called on it.
     * This is only useful if the panel is not normally visible, i.e the panel exists purely for its HTML Material.
     * **Note:**
     * >Only works on with panels that have a HTML Material. See {{ClassFunction|Panel|GetHTMLMaterial}} for more details.
     * 
     * **Note:**
     * >A good place to call this is in the {{HookFunction|GM|PreRender}} hook
     * 
     * [[Category:HTML]][[Category:Awesomium]] 
     */
    public UpdateHTMLTexture(): void;
    
    /**
     * Forcibly updates the panels' HTML Material, similar to when Paint is called on it.
     * This is only useful if the panel is not normally visible, i.e the panel exists purely for its HTML Material.
     * **Note:**
     * >Only works on with panels that have a HTML Material. See {{ClassFunction|Panel|GetHTMLMaterial}} for more details.
     * 
     * **Note:**
     * >A good place to call this is in the {{HookFunction|GM|PreRender}} hook
     * 
     * [[Category:HTML]][[Category:Awesomium]] 
     */
    public UpdateHTMLTexture(): void;
}

/**
 * The baseclass library. 
 */
declare namespace baseclass {
    /**
     * Gets the base class of an an object.
     * 
     * This is used not just by entities, but also by widgets, panels, drive modes, weapons and gamemodes (with "gamemode_" prefix).
     * 
     * The keyword '''DEFINE_BASECLASS''' translates into a call to this function. In the engine, it is replaced with:
     * ```local BaseClass = baseclass.Get``` 
     * @param name  The child class. 
     * @returns The base class's meta table. 
     * @example
     * 
     * AddCSLuaFile()
     * DEFINE_BASECLASS( "weapon_csbasegun" ) //this is equivalent to local BaseClass = baseclass.Get( "weapon_csbasegun" )
     * 
     * //omitted generic swep definitions
     * 
     * function SWEP:Initialize()
     * 	BaseClass.Initialize( self ) //calls SWEP:Initialize() from weapon_csbasegun
     * 	self:SetHoldType( "pistol" )
     * end
     * 
     * function SWEP:Deploy()
     * 	self:SetAccuracy( 0.9 )
     * 	return BaseClass.Deploy( self ) //calls SWEP:Deploy() from weapon_csbasegun and returns its result
     * end
     * 
     * function SWEP:SetupDataTables()
     * 	BaseClass.SetupDataTables( self ) //calls SWEP:SetupDataTables() from weapon_csbasegun and inits its dtvars
     * end
     * 
     * // Inherits the weapon from weapon_csbasegun and calls its base functions 
     */
    function Get(name: string): table;
    
    /**
     * Add a new base class that can be derived by others. This is done automatically for:
     * * widgets
     * * panels
     * * drive modes
     * * entities
     * * weapons
     * * gamemodes (with prefix "gamemode_") 
     * @param name  The name of this base class. Must be completely unique. 
     * @param tab  The base class. 
     */
    function Set(name: string, tab: table): void;
}

/**
 * This is the object passed to {{LibraryFunction|usermessage|Hook}} when a message is received. It contains each value stored in the message in sequential order. You should read values from it in the order you wrote them. 
 */
declare class bf_read {
    /**
     * Reads an returns an angle object from the bitstream. 
     * @returns The read angle 
     */
    public ReadAngle(): Angle;
    
    /**
     * Reads 1 bit an returns a bool representing the bit. 
     * @returns bit 
     */
    public ReadBool(): boolean;
    
    /**
     * Reads a signed char and returns a number from -127 to 127 representing the ascii value of that char. 
     * @returns asciiVal 
     */
    public ReadChar(): number;
    
    /**
     * Reads a short representing an entity index and returns the matching entity handle. 
     * @returns ent 
     */
    public ReadEntity(): Entity;
    
    /**
     * Reads a 4 byte float from the bitstream and returns it. 
     * @returns float 
     */
    public ReadFloat(): number;
    
    /**
     * Reads a 4 byte long from the bitstream and returns it. 
     * @returns int 
     */
    public ReadLong(): number;
    
    /**
     * Reads a 2 byte short from the bitstream and returns it. 
     * @returns short 
     */
    public ReadShort(): number;
    
    /**
     * Reads a null terminated string from the bitstream. 
     * @returns str 
     */
    public ReadString(): string;
    
    /**
     * Reads a special encoded vector from the bitstream and returns it, this function is not suitable to send normals. 
     * @returns vec 
     */
    public ReadVector(): Vector;
    
    /**
     * Reads a special encoded vector normal from the bitstream and returns it, this function is not suitable to send vectors that represent a position. 
     * @returns normal 
     */
    public ReadVectorNormal(): Vector;
    
    /**
     * Rewinds the bitstream so it can be read again. 
     */
    public Reset(): void;
}

/**
 * The bitwise library contains useful functions for bitwise operations.
 * Make sure you're familiar with [https://code.tutsplus.com/articles/understanding-bitwise-operators--active-11301 Bitwise Operators]
 * {{Example
 * |Description=Displays some bitwise operator functionality.
 * |Code=local mybits = 0
 * mybits = bit.bor(mybits, 2) -- Add 2 4 and 8 to mybits
 * mybits = bit.bor(mybits, 4)
 * mybits = bit.bor(mybits, 8)
 * 
 * print(bit.band(mybits, 4) == 4) -- Does mybits have 4?
 * 
 * mybits = bit.band(mybits, bit.bnot(4)) -- Remove 4 from mybits
 * 
 * print(bit.band(mybits, 4) == 4) -- Does mybits have 4?
 * 
 * print(bit.band(mybits, 2) == 2) -- Does mybits have 2?
 * |Output=```
 * true
 * false
 * true
 * ```
 * }} 
 * @example
 * 
 * local mybits = 0
 * mybits = bit.bor(mybits, 2) // Add 2 4 and 8 to mybits
 * mybits = bit.bor(mybits, 4)
 * mybits = bit.bor(mybits, 8)
 * 
 * print(bit.band(mybits, 4) == 4) // Does mybits have 4?
 * 
 * mybits = bit.band(mybits, bit.bnot(4)) // Remove 4 from mybits
 * 
 * print(bit.band(mybits, 4) == 4) // Does mybits have 4?
 * 
 * print(bit.band(mybits, 2) == 2) // Does mybits have 2?
 * 
 * // Displays some bitwise operator functionality. 
 */
declare namespace bit {
    /**
     * Returns the arithmetically shifted value. 
     * @param value  The value to be manipulated. 
     * @param shiftCount  Amounts of bits to shift. 
     * @returns shiftedValue 
     */
    function arshift(value: number, shiftCount: number): number;
    
    /**
     * Performs the bitwise "and" for all values specified. 
     * @param value  The value to be manipulated. 
     * @param otherValues [=nil] Values bit to perform bitwise "and" with. Optional. 
     * @returns Result of bitwise "and" operation. 
     * @example
     * 
     * a = 170    // 10101010 in binary form
     * b = 146    // 10010010 in binary form
     * print( bit.band( a, b ) )
     * 
     * // 
     */
    function band(value: number, otherValues?: number): number;
    
    /**
     * Returns the bitwise not of the value. 
     * @param value  The value to be inverted. 
     * @returns bitwiseNot 
     */
    function bnot(value: number): number;
    
    /**
     * Returns the bitwise OR of all values specified. 
     * @param value1  The first value. 
     * @param args  Extra values to be evaluated. (must all be numbers) 
     * @returns The bitwise OR result between all numbers. 
     * @example
     * 
     * local a = math.BinToInt("1000")
     * local b = math.BinToInt("0100")
     * local c = math.BinToInt("0001")
     * 
     * local result = bit.bor(a, b, c)
     * 
     * print(math.IntToBin(result))
     * print(result)
     * 
     * // Performs the bitwise OR operation between three values@example
     * 
     * NPC:CapabilitiesAdd( bit.bor(CAP_MOVE_GROUND, CAP_ANIMATEDFACE, CAP_TURN_HEAD) )
     * 
     * // If you were to add capabilities to an NPC. 
     */
    function bor(value1: number, ...args: (any)[]): number;
    
    /**
     * Swaps the byte order. 
     * @param value  The value to be byte swapped. 
     * @returns swapped 
     */
    function bswap(value: number): number;
    
    /**
     * Returns the bitwise xor of all values specified. 
     * @param value  The value to be manipulated. 
     * @param otherValues [=nil] Values bit xor with. Optional. 
     * @returns bitwiseXOr 
     */
    function bxor(value: number, otherValues?: number): number;
    
    /**
     * Returns the left shifted value. 
     * @param value  The value to be manipulated. 
     * @param shiftCount  Amounts of bits to shift left by. 
     * @returns shiftedValue 
     */
    function lshift(value: number, shiftCount: number): number;
    
    /**
     * Returns the left rotated value. 
     * @param value  The value to be manipulated. 
     * @param shiftCount  Amounts of bits to rotate left by. 
     * @returns shiftedValue 
     */
    function rol(value: number, shiftCount: number): number;
    
    /**
     * Returns the right rotated value. 
     * @param value  The value to be manipulated. 
     * @param shiftCount  Amounts of bits to rotate right by. 
     * @returns shiftedValue 
     */
    function ror(value: number, shiftCount: number): number;
    
    /**
     * Returns the right shifted value. 
     * @param value  The value to be manipulated. 
     * @param shiftCount  Amounts of bits to shift right by. 
     * @returns shiftedValue 
     */
    function rshift(value: number, shiftCount: number): number;
    
    /**
     * Normalizes the specified value and clamps it in the range of a signed 32bit integer. 
     * @param value  The value to be normalized. 
     * @returns swapped 
     */
    function tobit(value: number): number;
    
    /**
     * Returns the hexadecimal representation of the number with the specified digits. 
     * @param value  The value to be normalized. 
     * @param digits [=8] The number of digits. Optional 
     * @returns hexString 
     */
    function tohex(value: number, digits?: number): string;
}

/**
 * **Deprecated:**
 * >Only exists for backwards compatibility with {{ClassFunction|Panel|SetActionFunction}}. Use {{Type|DButton}} instead.
 * 
 * Creates a button that players can click on. 
 * @example
 * 
 * local button = vgui.Create( "Button" )
 * button:SetSize( 150, 30 )
 * button:Center()
 * button:SetVisible( true )
 * button:SetText( "Click Me" )
 * function button:OnMousePressed()
 * 	print( "Hello World!" )
 * end
 * 
 * // Creates a button with the text "Click Me" that when pressed prints "Hello World!" in the console. 
 */
declare class Button extends DLabel {
    /**
     * **Deprecated:**
     * >Only used in deprecated Derma controls.
     * 
     * Used in {{Type|Button}} to call a function when the button is clicked and in {{Type|Slider}} when the value changes.
     * [[Category:Button]]
     * [[Category:Slider]] 
     * @param func  Function to call when the {{Type|Button}} is clicked or the {{Type|Slider}} value is changed.
     * 
     * Arguments given are:
     * * {{FuncArg|Panel|self|The panel itself}}
     * * {{FuncArg|string|action|"Command" on button press, "SliderMoved" on slider move.}}
     * * {{FuncArg|number|val|The new value of the {{Type|Slider}}. Will always equal 0 for buttons.}}
     * * {{FuncArg|number||Always equals 0.}} 
     */
    public SetActionFunction(func: Button | Slider | Slider): void;
    
    /**
     * **Deprecated:**
     * >Only used in deprecated Derma controls.
     * 
     * Used in {{Type|Button}} to call a function when the button is clicked and in {{Type|Slider}} when the value changes.
     * [[Category:Button]]
     * [[Category:Slider]] 
     * @param func  Function to call when the {{Type|Button}} is clicked or the {{Type|Slider}} value is changed.
     * 
     * Arguments given are:
     * * {{FuncArg|Panel|self|The panel itself}}
     * * {{FuncArg|string|action|"Command" on button press, "SliderMoved" on slider move.}}
     * * {{FuncArg|number|val|The new value of the {{Type|Slider}}. Will always equal 0 for buttons.}}
     * * {{FuncArg|number||Always equals 0.}} 
     */
    public SetActionFunction(func: Button | Slider | Slider): void;
}

/**
 * This directs all drawing to be done to a certain 2D or 3D plane or position, until the corresponding "End" function is called.
 * 
 * The matrix functions exist, but are mostly unusable unless you're familiar with the source engine's layout for each aspect. 
 */
declare namespace cam {
    /**
     * Shakes the screen at a certain position. 
     * @param pos  Origin of the shake. 
     * @param angles  Angles of the shake. 
     * @param factor  The shake factor. 
     */
    function ApplyShake(pos: Vector, angles: Angle, factor: number): void;
    
    /**
     * Switches the renderer back to the previous drawing mode from a 3D context.
     * 
     * This function is an alias of {{LibraryFunction|cam|End3D}}.
     * 
     * **Bug [#1091](https://github.com/Facepunch/garrysmod-issues/issues/1091):**
     * >This will crash the game if there is no context to end. 
     */
    function End(): void;
    
    /**
     * Switches the renderer back to the previous drawing mode from a 2D context.
     * 
     * **Bug [#1091](https://github.com/Facepunch/garrysmod-issues/issues/1091):**
     * >This will crash the game if there is no context to end. 
     */
    function End2D(): void;
    
    /**
     * Switches the renderer back to the previous drawing mode from a 3D context.
     * 
     * **Bug [#1091](https://github.com/Facepunch/garrysmod-issues/issues/1091):**
     * >This will crash the game if there is no context to end. 
     */
    function End3D(): void;
    
    /**
     * Switches the renderer back to the previous drawing mode from a 3D2D context.
     * 
     * **Bug [#1091](https://github.com/Facepunch/garrysmod-issues/issues/1091):**
     * >This will crash the game if there is no context to end. 
     */
    function End3D2D(): void;
    
    /**
     * Switches the renderer back to the previous drawing mode from a 3D orthographic rendering context. 
     */
    function EndOrthoView(): void;
    
    /**
     * Tells the renderer to ignore the depth buffer and draw any upcoming operation "ontop" of everything that was drawn yet. 
     * @param ignoreZ  Determines whenever to ignore the depth buffer or not. 
     */
    function IgnoreZ(ignoreZ: boolean): void;
    
    /**
     * Pops the current active rendering matrix from the stack and reinstates the previous one. 
     */
    function PopModelMatrix(): void;
    
    /**
     * Pushes the specified matrix onto the render matrix stack. Unlike opengl, this will replace the current model matrix.
     * 
     * **Bug [#1663](https://github.com/Facepunch/garrysmod-issues/issues/1663):**
     * >This does not work with {{LibraryFunction|cam|Start3D2D}} in certain hooks. 
     * @param matrix  The matrix to push. 
     * @example
     * 
     * hook.Add("HUDPaint", "2d rotation test", function()
     * 	local w, h = ScrW(), ScrH()
     * 	local t = RealTime()*50
     * 	
     * 	local mat = Matrix()
     * 
     * 	mat:Translate(Vector(w/2, h/2))
     * 	mat:Rotate(Angle(0,t,0))
     * 	mat:Scale(Vector(1,1,1) * math.sin(t/100) *10)
     * 	mat:Translate(-Vector(w/2, h/2))
     * 
     * 	cam.PushModelMatrix(mat)
     * 		surface.SetFont("DermaDefault")
     * 		surface.SetTextColor(255, 255, 255, 255)
     * 		surface.SetTextPos(w/2, h/2)
     * 		surface.DrawText("LOLLOLOLOL")
     * 	cam.PopModelMatrix()	
     * end)
     * 
     * // Rotates and scales text in the center of the screen.@example
     * 
     * function draw.TextRotated(text, x, y, color, font, ang)
     * 	render.PushFilterMag(TEXFILTER.ANISOTROPIC)
     * 	render.PushFilterMin(TEXFILTER.ANISOTROPIC)
     * 	surface.SetFont(font)
     * 	surface.SetTextColor(color)
     * 	surface.SetTextPos(0, 0)
     * 	local textWidth, textHeight = surface.GetTextSize( text )
     * 	local rad = -math.rad( ang )
     * 	x = x - ( math.cos( rad ) * textWidth / 2 + math.sin( rad ) * textHeight / 2 )
     * 	y = y + ( math.sin( rad ) * textWidth / 2 + math.cos( rad ) * textHeight / 2 )
     * 	local m = Matrix()
     * 	m:SetAngles(Angle(0, ang, 0))
     * 	m:SetTranslation(Vector(x, y, 0))
     * 	cam.PushModelMatrix(m)
     * 		surface.DrawText(text)
     * 	cam.PopModelMatrix()
     * 	render.PopFilterMag()
     * 	render.PopFilterMin()
     * end
     * 
     * // Simple function to draw rotated text 
     */
    function PushModelMatrix(matrix: VMatrix): void;
    
    /**
     * Sets up a new rendering context. This is an extended version of {{LibraryFunction|cam|Start3D}} and {{LibraryFunction|cam|Start2D}}. Must be finished by {{LibraryFunction|cam|End3D}} or {{LibraryFunction|cam|End2D}}.
     * 
     * **Bug [#2682](https://github.com/Facepunch/garrysmod-issues/issues/2682):**
     * >This will not update current view properties for 3D contexts. 
     * @param dataTbl  Render context config. See {{Struct|RenderCamData}} 
     */
    function Start(dataTbl: RenderCamData): void;
    
    /**
     * Sets up a new 2D rendering context. Must be finished by {{LibraryFunction|cam|End2D}}.
     * 
     * This is almost always used with a render target from the {{Lib|render}}. To set its position use {{LibraryFunction|render|SetViewPort}} with a target already stored.
     * 
     * **Note:**
     * >This will put an identity matrix at the top of the model matrix stack. If you are trying to use {{LibraryFunction|cam|PushModelMatrix}}, call it after this function and not before.
     * 
     * {{RenderingContext|Start|2D}} 
     * @example
     * 
     * local oldW, oldH = ScrW(), ScrH()
     * render.SetViewPort( 0, 100, 50, 50 )
     * cam.Start2D()
     * 	surface.SetDrawColor( 255, 255, 255 )
     * 	surface.DrawLine( 10, 10, 100, 100 )
     * cam.End2D()
     * render.SetViewPort( 0, 0, oldW, oldH )
     * 
     * // Sets the viewport then draws on the view with 2d methods 
     */
    function Start2D(): void;
    
    /**
     * Sets up a new 3D rendering context. Must be finished by {{LibraryFunction|cam|End3D}}.
     * 
     * For more advanced settings such as an orthographic view, use {{LibraryFunction|cam|Start}} instead.
     * 
     * {{RenderingContext|Start|3D}}
     * 
     * **Bug [#1995](https://github.com/Facepunch/garrysmod-issues/issues/1995):**
     * >Negative x/y values won't work.
     * 
     * **Bug [#2682](https://github.com/Facepunch/garrysmod-issues/issues/2682):**
     * >This will not update current view properties. 
     * @param pos [={{GlobalFunction|EyePos}}()] Render cam position. 
     * @param angles [={{GlobalFunction|EyeAngles}}()] Render cam angles. 
     * @param fov [=nil] Field of view. 
     * @param x [=0] X coordinate of where to start the new view port. 
     * @param y [=0] Y coordinate of where to start the new view port. 
     * @param w [={{GlobalFunction|ScrW}}()] Width of the new viewport. 
     * @param h [={{GlobalFunction|ScrH}}()] Height of the new viewport. 
     * @param zNear [=nil] Distance to near clipping plane. 
     * @param zFar [=nil] Distance to far clipping plane. 
     * @example
     * 
     * hook.Add( "HUDPaint", "3d_camera_example", function()
     * 	cam.Start3D()
     * 		for id, ply in pairs( player.GetAll() ) do
     * 			ply:DrawModel()
     * 		end
     * 	cam.End3D()
     * end )
     * 
     * // Set up a 3D rendering environment in a 2D rendering hook to render models on HUD. 
     */
    function Start3D(pos?: Vector, angles?: Angle, fov?: number, x?: number, y?: number, w?: number, h?: number, zNear?: number, zFar?: number): void;
    
    /**
     * Sets up a new 2D rendering context. Must be finished by {{LibraryFunction|cam|End3D2D}}.
     * 
     * {{RenderingContext|Start|2D}}
     * {{RenderingContext|Function|3D}} 
     * @param pos  Origin of the 3D2D context, ie. the top left corner, (0, 0). 
     * @param angles  Angles of the 3D2D context.
     * 
     * +x in the 2d context corresponds to +x of the angle (its forward direction).
     * 
     * +y in the 2d context corresponds to -y of the angle (its right direction).
     * 
     * If (dx, dy) are your desired (+x, +y) unit vectors, the angle you want is dx:AngleEx(dx:Cross(-dy)). 
     * @param scale  The scale of the render context.
     * If scale is 1 then 1 pixel in 2D context will equal to 1 unit in 3D context. 
     * @example
     * 
     * hook.Add("PostDrawOpaqueRenderables", "example", function()
     * 	local trace = LocalPlayer():GetEyeTrace()
     * 	local angle = trace.HitNormal:Angle()
     * 		
     * 	render.DrawLine( trace.HitPos, trace.HitPos + 8 * angle:Forward(), Color( 255, 0, 0 ), true )
     * 	render.DrawLine( trace.HitPos, trace.HitPos + 8 * -angle:Right(), Color( 0, 255, 0 ), true )
     * 	render.DrawLine( trace.HitPos, trace.HitPos + 8 * angle:Up(), Color( 0, 0, 255 ), true )
     * 		
     * 	cam.Start3D2D( trace.HitPos, angle, 1 )
     * 		surface.SetDrawColor( 255, 165, 0, 255 )
     * 		surface.DrawRect( 0, 0, 8, 8 )
     * 		render.DrawLine( Vector( 0, 0, 0 ), Vector( 8, 8, 8 ), Color( 100, 149, 237, 255 ), true )
     * 	cam.End3D2D()
     * end )
     * 
     * // 
     */
    function Start3D2D(pos: Vector, angles: Angle, scale: number): void;
    
    /**
     * Sets up a new 3d context using orthographic projection. 
     * @param leftOffset  The left plane offset. 
     * @param topOffset  The top plane offset. 
     * @param rightOffset  The right plane offset. 
     * @param bottomOffset  The bottom plane offset. 
     */
    function StartOrthoView(leftOffset: number, topOffset: number, rightOffset: number, bottomOffset: number): void;
}

/**
 * List of all possible functions available for effect data. This is the object returned by the [[Global/EffectData|EffectData]] function and is required for [[util/Effect|util.Effect]] function. 
 */
declare class CEffectData {
    /**
     * Returns the angles of the effect. 
     * @returns The angles of the effect 
     */
    public GetAngles(): Angle;
    
    /**
     * Returns the attachment ID for the effect. 
     * @returns The attachment ID of the effect. 
     */
    public GetAttachment(): number;
    
    /**
     * Returns byte which represents the color of the effect. 
     * @returns The color of the effect 
     */
    public GetColor(): number;
    
    /**
     * Returns the damage type of the effect 
     * @returns Damage type of the effect, see {{Enum|DMG}} 
     */
    public GetDamageType(): DMG;
    
    /**
     * Returns the entity index of the entity set for the effect. 
     * @returns The entity index of the entity set for the effect. 
     */
    public GetEntIndex(): number;
    
    /**
     * Returns the entity assigned to the effect. 
     * @returns The entity assigned to the effect 
     */
    public GetEntity(): Entity;
    
    /**
     * Returns the flags of the effect. 
     * @returns The flags of the effect. 
     */
    public GetFlags(): number;
    
    /**
     * Returns the hit box ID of the effect. 
     * @returns The hit box ID of the effect. 
     */
    public GetHitBox(): number;
    
    /**
     * Returns the magnitude of the effect. 
     * @returns The magnitude of the effect. 
     */
    public GetMagnitude(): number;
    
    /**
     * Returns the material ID of the effect. 
     * @returns The material ID of the effect. 
     */
    public GetMaterialIndex(): number;
    
    /**
     * Returns the normalized direction vector of the effect. 
     * @returns The normalized direction vector of the effect. 
     */
    public GetNormal(): Vector;
    
    /**
     * Returns the origin position of the effect. 
     * @returns The origin position of the effect. 
     */
    public GetOrigin(): Vector;
    
    /**
     * Returns the radius of the effect. 
     * @returns The radius of the effect. 
     */
    public GetRadius(): number;
    
    /**
     * Returns the scale of the effect. 
     * @returns The scale of the effect 
     */
    public GetScale(): number;
    
    /**
     * Returns the start position of the effect. 
     * @returns The start position of the effect 
     */
    public GetStart(): Vector;
    
    /**
     * Returns the surface property index of the effect. 
     * @returns The surface property index of the effect 
     */
    public GetSurfaceProp(): number;
    
    /**
     * Sets the angles of the effect. 
     * @param ang  The new angles to be set. 
     */
    public SetAngles(ang: Angle): void;
    
    /**
     * Sets the attachment id of the effect to be created with this effect data.
     * 
     * **Note:**
     * >This is internally stored as an integer, but only the first 5 bits will be networked. 
     * @param attachment  New attachment ID of the effect. 
     */
    public SetAttachment(attachment: number): void;
    
    /**
     * Sets the color of the effect. 
     * @param color  Color represented by a byte. 
     */
    public SetColor(color: number): void;
    
    /**
     * Sets the damage type of the effect to be created with this effect data. 
     * @param damageType  Damage type, see {{Enum|DMG}}. 
     */
    public SetDamageType(damageType: DMG): void;
    
    /**
     * Sets the entity of the effect via its index. 
     * @param entIndex  The entity index to be set. 
     */
    public SetEntIndex(entIndex: number): void;
    
    /**
     * Sets the entity of the effect to be created with this effect data. 
     * @param entity  Entity of the effect, mostly used for parenting. 
     */
    public SetEntity(entity: Entity): void;
    
    /**
     * Sets the flags of the effect.
     * 
     * **Note:**
     * >This is internally stored as an integer, but only the first 8 bits will be networked. 
     * @param flags  The flags of the effect. Each effect has their own flags. 
     */
    public SetFlags(flags: number): void;
    
    /**
     * Sets the hit box index of the effect.
     * 
     * **Note:**
     * >This is internally stored as an integer, but only the first 11 bits will be networked. 
     * @param hitBoxIndex  The hit box index of the effect. 
     */
    public SetHitBox(hitBoxIndex: number): void;
    
    /**
     * Sets the magnitude of the effect. 
     * @param magnitude  The magnitude of the effect. 
     */
    public SetMagnitude(magnitude: number): void;
    
    /**
     * Sets the material index of the effect.
     * 
     * **Note:**
     * >This is internally stored as an integer, but only the first 11 bits will be networked. 
     * @param materialIndex  The material index of the effect. 
     */
    public SetMaterialIndex(materialIndex: number): void;
    
    /**
     * Sets the normalized direction vector of the effect to be created with this effect data. 
     * @param normal  The normalized direction vector of the effect. 
     */
    public SetNormal(normal: Vector): void;
    
    /**
     * Sets the origin of the effect to be created with this effect data. 
     * @param origin  Origin of the effect. 
     */
    public SetOrigin(origin: Vector): void;
    
    /**
     * Sets the radius of the effect to be created with this effect data.
     * 
     * **Note:**
     * >This is clamped internally from 0 to 1023. 
     * @param radius  Radius of the effect. 
     */
    public SetRadius(radius: number): void;
    
    /**
     * Sets the scale of the effect to be created with this effect data. 
     * @param scale  Scale of the effect. 
     */
    public SetScale(scale: number): void;
    
    /**
     * Sets the start of the effect to be created with this effect data. 
     * @param start  Start of the effect. 
     */
    public SetStart(start: Vector): void;
    
    /**
     * Sets the surface property index of the effect. 
     * @param surfaceProperties  The surface property index of the effect. 
     */
    public SetSurfaceProp(surfaceProperties: number): void;
}

/**
 * The chat library's purpose is to interface with the default chatbox. 
 */
declare namespace chat {
    /**
     * Adds text to the local player's chat box (which only they can read). 
     * @param arguments  The arguments. Arguments can be:
     * * {{Type|table}} - {{Struct|Color}}. Will set the color for all following strings until the next Color argument.
     * * {{Type|string}} - Text to be added to the chat box.
     * * {{Type|Player}} - Adds the name of the player in the player's team color to the chat box.
     * * {{Type|any}} - Any other type, such as {{Type|Entity}} will be converted to string and added as text. 
     * @example
     * 
     * local ply = LocalPlayer()
     * chat.AddText( Color( 100, 100, 255 ), ply, ", you are holding ", Color( 100, 255, 100 ), ply:GetActiveWeapon():GetClass() )
     * 
     * // Prints the player's name and current weapon to their chat area. 
     */
    function AddText(...arguments: (table | string | Player | any | Entity)[]): void;
    
    /**
     * Closes the chat window. 
     */
    function Close(): void;
    
    /**
     * Returns the chatbox position. 
     * @returns [The X coordinate of the chatbox's position., The Y coordinate of the chatbox's position.] 
     * @example
     * 
     * print( chat.GetChatBoxPos() )
     * 
     * // Prints the x and y coordinates of the chatbox. 
     * !TupleReturn
     */
    function GetChatBoxPos(): [number, number];
    
    /**
     * Returns the chatbox size. 
     * @returns [The width of the chatbox., The height of the chatbox.] 
     * @example
     * 
     * print( chat.GetChatBoxSize() )
     * 
     * // Prints the width and the height of the chatbox. 
     * !TupleReturn
     */
    function GetChatBoxSize(): [number, number];
    
    /**
     * Opens the chat window. 
     * @param mode  If equals 1, opens public chat, otherwise opens team chat 
     */
    function Open(mode: number): void;
    
    /**
     * Plays the chat "tick" sound. 
     */
    function PlaySound(): void;
}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * Engine checkbox 
 */
declare class CheckButton {

}

/**
 * The cleanup library allows you to control what happens to custom entities when the clean-up buttons are pressed in the Utilities tab of the Spawn menu (default Q). 
 */
declare namespace cleanup {
    /**
     * Adds an entity to a player's cleanup list. 
     * @param pl  Who's cleanup list to add the entity to. 
     * @param type  The type of cleanup. 
     * @param ent  The entity to add to the player's cleanup list. 
     */
    function Add(pl: Player, type: string, ent: Entity): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Called by the ''gmod_admin_cleanup'' console command. Allows admins to clean up the server. 
     * @param pl  The player that called the console command. 
     * @param command  The console command that called this function. 
     * @param args  First and only arg is the cleanup type. 
     */
    function CC_AdminCleanup(pl: Player, command: string, args: table): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Called by the ''gmod_cleanup'' console command. Allows players to cleanup their own props. 
     * @param pl  The player that called the console command. 
     * @param command  The console command that called this function. 
     * @param args  First and only arg is the cleanup type. 
     */
    function CC_Cleanup(pl: Player, command: string, args: table): void;
    
    /**
     * Gets the cleanup list. 
     */
    function GetList(): void;
    
    /**
     * Gets the table of cleanup types. 
     * @returns cleanup_types 
     */
    function GetTable(): table;
    
    /**
     * Registers a new cleanup type. 
     * @param type  Name of type. 
     */
    function Register(type: string): void;
    
    /**
     * Replaces one entity in the cleanup module with another 
     * @param from  Old entity 
     * @param to  New entity 
     * @returns Whether any action was taken. 
     */
    function ReplaceEntity(from: Entity, to: Entity): boolean;
    
    /**
     * Repopulates the clients cleanup menu 
     */
    function UpdateUI(): void;
}

/**
 * List of all possible functions available for LuaEmitters. This is the object returned by the {{GlobalFunction|ParticleEmitter}} function. 
 */
declare class CLuaEmitter {
    /**
     * Creates a new {{Type|CLuaParticle}} with the given material and position. 
     * @param material  The particles material. Can also be an {{Type|IMaterial}}. 
     * @param position  The position to spawn the particle on. 
     * @returns The created particle, if any. 
     */
    public Add(material: string, position: Vector): CLuaParticle;
    
    /**
     * Manually renders all particles the emitter has created. 
     */
    public Draw(): void;
    
    /**
     * Removes the emitter and all its particles. 
     */
    public Finish(): void;
    
    /**
     * Returns the amount of active particles of this emitter. 
     * @returns The amount of active particles of this emitter 
     */
    public GetNumActiveParticles(): number;
    
    /**
     * Returns the position of this emitter. This is set when creating the emitter with {{GlobalFunction|ParticleEmitter}}. 
     * @returns Position of this particle emitter. 
     */
    public GetPos(): Vector;
    
    /**
     * Returns whether this emitter is 3D or not. This is set when creating the emitter with {{GlobalFunction|ParticleEmitter}}. 
     * @returns Whether this emitter is 3D or not. 
     */
    public Is3D(): boolean;
    
    /**
     * Returns whether this {{Type|CLuaEmitter}} is valid or not. 
     * @returns Whether this {{Type|CLuaEmitter}} is valid or not. 
     */
    public IsValid(): CLuaEmitter;
    
    /**
     * Sets the bounding box for this emitter.
     * 
     * Usually the bounding box is automatically determined by the particles, but this function overrides it. 
     * @param mins  The minimum position of the box 
     * @param maxs  The maximum position of the box 
     */
    public SetBBox(mins: Vector, maxs: Vector): void;
    
    /**
     * This function sets the the distance between the render camera and the emitter at which the particles should start fading and at which distance fade ends ( alpha becomes 0 ). 
     * @param distanceMin  Min distance where the alpha becomes 0. 
     * @param distanceMax  Max distance where the alpha starts fading. 
     */
    public SetNearClip(distanceMin: number, distanceMax: number): void;
    
    /**
     * Prevents all particles of the emitter from automatically drawing. 
     * @param noDraw  Whether we should draw the particles ( false ) or not ( true ) 
     */
    public SetNoDraw(noDraw: boolean): void;
    
    /**
     * The function name has not much in common with its actual function, it applies a radius to every particles that affects the building of the bounding box, as it, usually is constructed by the particle that has the lowest x, y and z and the highest x, y and z, this function just adds/subtracts the radius and inflates the bounding box. 
     * @param radius  Particle radius. 
     */
    public SetParticleCullRadius(radius: number): void;
    
    /**
     * Sets the position of the particle emitter. 
     * @param position  New position. 
     */
    public SetPos(position: Vector): void;
}

/**
 * This class is essentially what controls a {{Type|NextBot}} NPC. You can access it in a {{Type|NextBot}} NPC by using '''self.loco''' variable. 
 */
declare class CLuaLocomotion {
    /**
     * Sets the location we want to get to 
     * @param goal  The vector we want to get to 
     * @param goalweight  If unsure then set this to 1 
     */
    public Approach(goal: Vector, goalweight: number): void;
    
    /**
     * Removes the stuck status from the bot 
     */
    public ClearStuck(): void;
    
    /**
     * Sets the direction we want to face 
     * @param goal  The vector we want to face 
     */
    public FaceTowards(goal: Vector): void;
    
    /**
     * Returns the acceleration speed 
     * @returns Current acceleration speed 
     */
    public GetAcceleration(): number;
    
    /**
     * Returns the current acceleration as a vector 
     * @returns Current acceleration 
     */
    public GetCurrentAcceleration(): Vector;
    
    /**
     * Gets the height the bot is scared to fall from 
     * @returns Current death drop height 
     */
    public GetDeathDropHeight(): number;
    
    /**
     * Gets the deceleration speed 
     * @returns Current deceleration speed 
     */
    public GetDeceleration(): number;
    
    /**
     * Return unit vector in XY plane describing our direction of motion - even if we are currently not moving 
     * @returns A vector representing the X and Y movement 
     */
    public GetGroundMotionVector(): Vector;
    
    /**
     * Gets the height of the bot's jump 
     * @returns Current jump height 
     */
    public GetJumpHeight(): number;
    
    /**
     * Returns maximum jump height of this {{Type|CLuaLocomotion}}. 
     * @returns The maximum jump height. 
     */
    public GetMaxJumpHeight(): number;
    
    /**
     * Returns the max rate at which the NextBot can visually rotate. 
     * @returns Maximum yaw rate 
     */
    public GetMaxYawRate(): number;
    
    /**
     * Gets the max height the bot can step up 
     * @returns Current step height 
     */
    public GetStepHeight(): number;
    
    /**
     * Returns the current movement velocity as a vector 
     * @returns Current velocity 
     */
    public GetVelocity(): Vector;
    
    /**
     * Returns whether this {{Type|CLuaLocomotion}} can reach and/or traverse/move in given {{Type|CNavArea}}. 
     * @param area  The area to test 
     * @returns Whether this {{Type|CLuaLocomotion}} can traverse given {{Type|CNavArea}}. 
     */
    public IsAreaTraversable(area: CNavArea): CLuaLocomotion | CNavArea;
    
    /**
     * Returns true if we're trying to move. 
     * @returns Whether we're trying to move or not. 
     */
    public IsAttemptingToMove(): boolean;
    
    /**
     * Returns true of the locomotion engine is jumping or climbing 
     * @returns Whether we're climbing or jumping or not 
     */
    public IsClimbingOrJumping(): boolean;
    
    /**
     * Returns whether the locomotion/nextbot is on ground or not. 
     * @returns Whether the locomotion/nextbot is on ground or not. 
     */
    public IsOnGround(): boolean;
    
    /**
     * Returns true if we're stuck 
     * @returns Whether we're stuck or not 
     */
    public IsStuck(): boolean;
    
    /**
     * Returns whether or not the target in question is on a ladder or not. 
     * @returns If the target is on a ladder or not. 
     */
    public IsUsingLadder(): boolean;
    
    /**
     * Makes the bot jump 
     */
    public Jump(): void;
    
    /**
     * @param landingGoal 
     * @param landingForward 
     */
    public JumpAcrossGap(landingGoal: Vector, landingForward: Vector): void;
    
    /**
     * Sets the acceleration speed 
     * @param speed  Speed acceleration (default is 400) 
     */
    public SetAcceleration(speed: number): void;
    
    /**
     * Sets the height the bot is scared to fall from. 
     * @param height  Height (default is 200) 
     */
    public SetDeathDropHeight(height: number): void;
    
    /**
     * Sets the deceleration speed. 
     * @param deceleration  New deceleration speed (default is 400) 
     */
    public SetDeceleration(deceleration: number): void;
    
    /**
     * Sets movement speed. 
     * @param speed  The new desired speed 
     */
    public SetDesiredSpeed(speed: number): void;
    
    /**
     * Sets the height of the bot's jump 
     * @param height  Height (default is 58) 
     */
    public SetJumpHeight(height: number): void;
    
    /**
     * Sets the max rate at which the NextBot can visually rotate. This will not affect moving or pathing. 
     * @param yawRate  Desired new maximum yaw rate 
     */
    public SetMaxYawRate(yawRate: number): void;
    
    /**
     * Sets the max height the bot can step up 
     * @param height  Height (default is 18) 
     */
    public SetStepHeight(height: number): void;
    
    /**
     * Sets the current movement velocity 
     * @param velocity 
     */
    public SetVelocity(velocity: Vector): void;
}

/**
 * List of all possible functions available for Lua particles. This is the object returned by the {{ClassFunction|CLuaEmitter|Add}} function. 
 */
declare class CLuaParticle {
    /**
     * Returns the air resistance of the particle. 
     * @returns The air resistance of the particle 
     */
    public GetAirResistance(): number;
    
    /**
     * Returns the current orientation of the particle. 
     * @returns The angles of the particle 
     */
    public GetAngles(): Angle;
    
    /**
     * Returns the angular velocity of the particle 
     * @returns The angular velocity of the particle 
     */
    public GetAngleVelocity(): Angle;
    
    /**
     * Returns the 'bounciness' of the particle. 
     * @returns The 'bounciness' of the particle
     * 
     * 2 means it will gain 100% of its previous velocity,
     * 
     * 1 means it will not lose velocity,
     * 
     * 0.5 means it will lose half of its velocity with each bounce. 
     */
    public GetBounce(): number;
    
    /**
     * Returns the color of the particle. 
     * @returns [Red part of the color, Green part of the color, Blue part of the color] 
     * !TupleReturn
     */
    public GetColor(): [number, number, number];
    
    /**
     * Returns the amount of time in seconds after which the particle will be destroyed. 
     * @returns The amount of time in seconds after which the particle will be destroyed 
     */
    public GetDieTime(): number;
    
    /**
     * Returns the alpha value that the particle will reach on its death. 
     * @returns The alpha value the particle will fade to 
     */
    public GetEndAlpha(): number;
    
    /**
     * Returns the length that the particle will reach on its death. 
     * @returns The length the particle will reach 
     */
    public GetEndLength(): number;
    
    /**
     * Returns the size that the particle will reach on its death. 
     * @returns The size the particle will reach 
     */
    public GetEndSize(): number;
    
    /**
     * Returns the gravity of the particle. 
     * @returns The gravity of the particle. 
     */
    public GetGravity(): Vector;
    
    /**
     * Returns the 'life time' of the particle, how long the particle existed since its creation.
     * 
     * This value will always be between 0 and {{ClassFunction|CLuaParticle|GetDieTime}}.
     * 
     * It changes automatically as time goes.
     * 
     * It can be manipulated using {{ClassFunction|CLuaParticle|SetLifeTime}}.
     * 
     * If the life time of the particle will be more than {{ClassFunction|CLuaParticle|GetDieTime}}, it will be removed. 
     * @returns How long the particle existed, in seconds. 
     */
    public GetLifeTime(): number;
    
    /**
     * Returns the absolute position of the particle. 
     * @returns The absolute position of the particle. 
     */
    public GetPos(): Vector;
    
    /**
     * Returns the current rotation of the particle in radians, this should only be used for 2D particles. 
     * @returns The current rotation of the particle in radians 
     */
    public GetRoll(): number;
    
    /**
     * Returns the current rotation speed of the particle in radians, this should only be used for 2D particles. 
     * @returns The current rotation speed of the particle in radians 
     */
    public GetRollDelta(): number;
    
    /**
     * Returns the alpha value which the particle has when it's created. 
     * @returns The alpha value which the particle has when it's created. 
     */
    public GetStartAlpha(): number;
    
    /**
     * Returns the length which the particle has when it's created. 
     * @returns The length which the particle has when it's created. 
     */
    public GetStartLength(): number;
    
    /**
     * Returns the size which the particle has when it's created. 
     * @returns The size which the particle has when it's created. 
     */
    public GetStartSize(): number;
    
    /**
     * Returns the current velocity of the particle. 
     * @returns The current velocity of the particle. 
     */
    public GetVelocity(): Vector;
    
    /**
     * Sets the air resistance of the the particle. 
     * @param airResistance  New air resistance. 
     */
    public SetAirResistance(airResistance: number): void;
    
    /**
     * Sets the angles of the particle. 
     * @param ang  New angle. 
     */
    public SetAngles(ang: Angle): void;
    
    /**
     * Sets the angular velocity of the the particle. 
     * @param angVel  New angular velocity. 
     */
    public SetAngleVelocity(angVel: Angle): void;
    
    /**
     * Sets the 'bounciness' of the the particle. 
     * @param bounce  New 'bounciness' of the particle
     * 
     * 2 means it will gain 100% of its previous velocity,
     * 
     * 1 means it will not lose velocity,
     * 
     * 0.5 means it will lose half of its velocity with each bounce. 
     */
    public SetBounce(bounce: number): void;
    
    /**
     * Sets the whether the particle should collide with the world or not. 
     * @param shouldCollide  Whether the particle should collide with the world or not 
     */
    public SetCollide(shouldCollide: boolean): void;
    
    /**
     * Sets the function that gets called whenever the particle collides with the world. 
     * @param collideFunc  Collide callback, the arguments are:
     * 
     * {{FuncArg|CLuaParticle|particle|The particle itself}}
     * {{FuncArg|Vector|hitPos|Position of the collision}}
     * {{FuncArg|Vector|hitNormal|Direction of the collision, perpendicular to the hit surface}} 
     * @example
     * 
     * MyParticle:SetCollideCallback( function( part, hitpos, hitnormal ) //This is an in-line function
     *     local efdata = EffectData() //Grab base EffectData table
     *     efdata:SetOrigin( hitpos ) //Sets the origin of it to the hitpos of the particle
     *     util.Effect( "Explosion", efdata ) //Create the effect
     * end )
     * 
     * // Creates an explosion every time an particle collides with something. 
     */
    public SetCollideCallback(collideFunc: Function): void;
    
    /**
     * Sets the color of the particle. 
     * @param r  The red component. 
     * @param g  The green component. 
     * @param b  The blue component. 
     */
    public SetColor(r: number, g: number, b: number): void;
    
    /**
     * Sets the time where the particle will be removed. 
     * @param dieTime  The new die time. 
     */
    public SetDieTime(dieTime: number): void;
    
    /**
     * Sets the alpha value of the particle that it will reach when it dies. 
     * @param endAlpha  The new alpha value of the particle that it will reach when it dies. 
     */
    public SetEndAlpha(endAlpha: number): void;
    
    /**
     * Sets the length of the particle that it will reach when it dies. 
     * @param endLength  The new length of the particle that it will reach when it dies. 
     */
    public SetEndLength(endLength: number): void;
    
    /**
     * Sets the size of the particle that it will reach when it dies. 
     * @param endSize  The new size of the particle that it will reach when it dies. 
     */
    public SetEndSize(endSize: number): void;
    
    /**
     * Sets the directional gravity aka. acceleration of the particle. 
     * @param gravity  The directional gravity. 
     */
    public SetGravity(gravity: Vector): void;
    
    /**
     * Sets the 'life time' of the particle, how long the particle existed since its creation.
     * 
     * This value should always be between 0 and {{ClassFunction|CLuaParticle|GetDieTime}}.
     * 
     * It changes automatically as time goes.
     * 
     * If the life time of the particle will be more than {{ClassFunction|CLuaParticle|GetDieTime}}, it will be removed. 
     * @param lifeTime  The new life time of the particle. 
     */
    public SetLifeTime(lifeTime: number): void;
    
    /**
     * Sets whether the particle should be lighted. 
     * @param useLighting  Whether the particle should be lighted. 
     */
    public SetLighting(useLighting: boolean): void;
    
    /**
     * Sets when the particles think function should be called next, this uses the synchronized server time returned by {{GlobalFunction|CurTime}}. 
     * @param nextThink  Next think time. 
     */
    public SetNextThink(nextThink: number): void;
    
    /**
     * Sets the absolute position of the particle. 
     * @param pos  The new particle position. 
     */
    public SetPos(pos: Vector): void;
    
    /**
     * Sets the roll of the particle in radians. This should only be used for 2D particles. 
     * @param roll  The new rotation of the particle in radians. 
     */
    public SetRoll(roll: number): void;
    
    /**
     * Sets the rotation speed of the particle in radians. This should only be used for 2D particles. 
     * @param rollDelta  The new rotation speed of the particle in radians. 
     */
    public SetRollDelta(rollDelta: number): void;
    
    /**
     * Sets the initial alpha value of the particle. 
     * @param startAlpha  Initial alpha. 
     */
    public SetStartAlpha(startAlpha: number): void;
    
    /**
     * Sets the initial length value of the particle. 
     * @param startLength  Initial length. 
     */
    public SetStartLength(startLength: number): void;
    
    /**
     * Sets the initial size value of the particle. 
     * @param startSize  Initial size. 
     */
    public SetStartSize(startSize: number): void;
    
    /**
     * Sets the think function of the particle. 
     * @param thinkFunc  Think function. It has only one argument:
     * 
     * {{FuncArg|CLuaParticle|particle|The particle the think hook is set on}} 
     * @example
     * 
     * p:SetNextThink( 1e99 ) // Makes sure the think hook is used on all particles of the particle emitter
     * p:SetThinkFunction( function( pa )
     * 	pa:SetColor( math.random( 0, 255 ), math.random( 0, 255 ), math.random( 0, 255 ) ) // Randomize it
     * 	pa:SetNextThink( 1e99 ) // Makes sure the think hook is actually ran.
     * end )
     * 
     * // Example on how to use a think function, randomizes the colors of a particle 
     */
    public SetThinkFunction(thinkFunc: Function): void;
    
    /**
     * Sets the velocity of the particle. 
     * @param vel  The new velocity of the particle. 
     */
    public SetVelocity(vel: Vector): void;
    
    /**
     * Scales the velocity based on the particle speed. 
     * @param doScale [=false] Use velocity scaling. 
     */
    public SetVelocityScale(doScale?: boolean): void;
}

/**
 * A class used to store the inputs from {{Type|CUserCmd}} and other information related to the current movement simulation, such as velocity, position and so on.
 * 
 * This can only be accessed during {{HookFunction|GM|SetupMove}} , {{HookFunction|GM|Move}} , {{HookFunction|GM|PlayerTick}} and {{HookFunction|GM|FinishMove}}. 
 */
declare class CMoveData {
    /**
     * Adds keys to the move data, as if player pressed them. 
     * @param keys  Keys to add, see {{Enum|IN}} 
     */
    public AddKey(keys: IN): void;
    
    /**
     * Gets the aim angle. Seems to be same as {{ClassFunction|CMoveData|GetAngles}}. 
     * @returns Aiming angle 
     */
    public GetAbsMoveAngles(): Angle;
    
    /**
     * Gets the aim angle. On client is the same as {{ClassFunction|Entity|GetAngles}}. 
     * @returns Aiming angle 
     */
    public GetAngles(): Angle;
    
    /**
     * Gets which buttons are down 
     * @returns An integer representing which buttons are down, see {{Enum|IN}} 
     */
    public GetButtons(): IN;
    
    /**
     * Returns the radius that constrains the players movement. 
     * @returns The constraint radius 
     */
    public GetConstraintRadius(): number;
    
    /**
     * Returns the players forward speed. 
     * @returns speed 
     */
    public GetForwardSpeed(): number;
    
    /**
     * Gets the number passed to "impulse" console command 
     * @returns The impulse 
     */
    public GetImpulseCommand(): number;
    
    /**
     * Returns the maximum client speed of the player 
     * @returns The maximum client speed 
     */
    public GetMaxClientSpeed(): number;
    
    /**
     * Returns the maximum speed of the player. 
     * @returns The maximum speed 
     */
    public GetMaxSpeed(): number;
    
    /**
     * Returns the angle the player is moving at. For more info, see {{ClassFunction|CMoveData|SetMoveAngles}}. 
     * @returns The move direction 
     */
    public GetMoveAngles(): Angle;
    
    /**
     * Gets the aim angle. Only works clientside, server returns same as {{ClassFunction|CMoveData|GetAngles}}. 
     * @returns The aim angle 
     */
    public GetOldAngles(): Angle;
    
    /**
     * Get which buttons were down last frame 
     * @returns An integer representing which buttons were down, see {{Enum|IN}} 
     */
    public GetOldButtons(): IN;
    
    /**
     * Gets the player's position. 
     * @returns The player's position. 
     * @example
     * 
     * function GM:SetupMove( ply, movedata )
     *     print( movedata:GetOrigin() )
     * end
     * 
     * // Print's the players position. 
     */
    public GetOrigin(): Vector;
    
    /**
     * Returns the strafe speed of the player. 
     * @returns speed 
     */
    public GetSideSpeed(): number;
    
    /**
     * Returns the vertical speed of the player. ( Z axis of {{ClassFunction|CMoveData|GetVelocity}} ) 
     * @returns Vertical speed 
     */
    public GetUpSpeed(): number;
    
    /**
     * Gets the players velocity.
     * 
     * **Bug [#3413](https://github.com/Facepunch/garrysmod-issues/issues/3413):**
     * >This will return Vector(0,0,0) sometimes when walking on props. 
     * @returns The players velocity 
     * @example
     * 
     * function GM:Move( ply, movedata )
     *     print( movedata:GetVelocity() )
     * end
     * 
     * // Prints the player's velocity. 
     */
    public GetVelocity(): Vector;
    
    /**
     * Returns whether the key is down or not 
     * @param key  The key to test, see {{Enum|IN}} 
     * @returns Is the key down or not 
     */
    public KeyDown(key: IN): boolean;
    
    /**
     * Returns whether the key was pressed. If you want to check if the key is held down, try {{ClassFunction|CMoveData|KeyDown}} 
     * @param key  The key to test, see {{Enum|IN}} 
     * @returns Was the key pressed or not. 
     */
    public KeyPressed(key: IN): boolean;
    
    /**
     * Returns whether the key was released 
     * @param key  A key to test, see {{Enum|IN}} 
     * @returns Was the key released or not. 
     */
    public KeyReleased(key: IN): boolean;
    
    /**
     * Returns whether the key was down or not.
     * 
     * Unlike {{ClassFunction|CMoveData|KeyDown}}, it will return false if {{ClassFunction|CMoveData|KeyPressed}} is true and it will return true if {{ClassFunction|CMoveData|KeyReleased}} is true. 
     * @param key  The key to test, seee {{Enum|IN}} 
     * @returns Was the key down or not 
     */
    public KeyWasDown(key: IN): boolean;
    
    /**
     * Sets absolute move angles.( ? ) Doesn't seem to do anything. 
     * @param ang  New absolute move angles 
     */
    public SetAbsMoveAngles(ang: Angle): void;
    
    /**
     * Sets angles.
     * 
     * **Bug [#2382](https://github.com/Facepunch/garrysmod-issues/issues/2382):**
     * >This function does nothing. 
     * @param ang  The angles. 
     */
    public SetAngles(ang: Angle): void;
    
    /**
     * Sets the pressed buttons on the move data 
     * @param buttons  A number representing which buttons are down, see {{Enum|IN}} 
     */
    public SetButtons(buttons: IN): void;
    
    /**
     * Sets the radius that constrains the players movement.
     * 
     * It is unknown what this function does as changing its values doesn't affect player movement. 
     * @param radius  The new constraint radius 
     */
    public SetConstraintRadius(radius: number): void;
    
    /**
     * Sets players forward speed. 
     * @param speed  New forward speed 
     */
    public SetForwardSpeed(speed: number): void;
    
    /**
     * Sets the impulse command. This isn't actually utilised in the engine anywhere. 
     * @param impulse  The impulse to set 
     */
    public SetImpulseCommand(impulse: number): void;
    
    /**
     * Sets the maximum player speed. Player won't be able to run or sprint faster then this value.
     * 
     * This also automatically sets {{ClassFunction|CMoveData|SetMaxSpeed}} when used in the {{HookFunction|GM|SetupMove}} hook. You must set it manually in the {{HookFunction|GM|Move}} hook.
     * 
     * This must be called on both client and server to avoid prediction errors.
     * 
     * This will '''not''' reduce speed in air.
     * **Note:**
     * >Setting this to 0 will not make the player stationary. It won't do anything. 
     * @param maxSpeed  The new maximum speed 
     * @example
     * 
     * hook.Add("SetupMove","MySpeed", function( ply, mv )
     *     mv:SetMaxClientSpeed( 100 )
     * end )
     * 
     * // Doesn't let the player to run or sprint faster then 100 units.@example
     * 
     * hook.Add( "Move", "testestst", function( ply, mv, usrcmd )
     * 	local speed = mv:GetMaxSpeed() * 2
     * 	mv:SetMaxSpeed( speed )
     * 	mv:SetMaxClientSpeed( speed )
     * end )
     * 
     * // Doubles the players speed properly. 
     */
    public SetMaxClientSpeed(maxSpeed: number): void;
    
    /**
     * Sets the maximum speed of the player. This must match with {{ClassFunction|CMoveData|SetMaxClientSpeed}} both, on server and client.
     * 
     * Doesn't seem to be doing anything on it's own, use {{ClassFunction|CMoveData|SetMaxClientSpeed}} instead. 
     * @param maxSpeed  The new maximum speed 
     */
    public SetMaxSpeed(maxSpeed: number): void;
    
    /**
     * Sets the serverside move angles, making the movement keys act as if player was facing that direction.
     * 
     * **Bug [#1181](https://github.com/Facepunch/garrysmod-issues/issues/1181):**
     * >This does nothing clientside. 
     * @param dir  The aim direction. 
     */
    public SetMoveAngles(dir: Angle): void;
    
    /**
     * Sets old aim angles. ( ? ) Doesn't seem to be doing anything. 
     * @param aimAng  The old angles 
     */
    public SetOldAngles(aimAng: Angle): void;
    
    /**
     * Sets the 'old' pressed buttons on the move data. These buttons are used to work out which buttons have been released, which have just been pressed and which are being held down. 
     * @param buttons  A number representing which buttons were down, see {{Enum|IN}} 
     */
    public SetOldButtons(buttons: IN): void;
    
    /**
     * Sets the players position. 
     * @param pos  The position 
     * @example
     * 
     * function GM:SetupMove( ply, movedata )
     *     movedata:SetOrigin( vector_origin )
     * end
     * 
     * // Make the player freeze at the origin of the map. 
     */
    public SetOrigin(pos: Vector): void;
    
    /**
     * Sets players strafe speed. 
     * @param speed  Strafe speed 
     */
    public SetSideSpeed(speed: number): void;
    
    /**
     * Sets vertical speed of the player. ( Z axis of {{ClassFunction|CMoveData|SetVelocity}} ) 
     * @param speed  Vertical speed to set 
     */
    public SetUpSpeed(speed: number): void;
    
    /**
     * Sets the player's velocity 
     * @param velocity  The velocity to set 
     * @example
     * 
     * function GM:SetupMove( ply, movedata )
     *     movedata:SetVelocity( VectorRand() * 800 )
     * end
     * 
     * // Make the player shake to hell and back. 
     */
    public SetVelocity(velocity: Vector): void;
}

/**
 * An object returned by {{Lib|navmesh}} functions. 
 */
declare class CNavArea {
    /**
     * Adds this {{Type|CNavArea}} to the closed list, a list of areas that have been checked by A* pathfinding algorithm.
     * 
     * Used in pathfinding via the [https://en.wikipedia.org/wiki/A*_search_algorithm A* algorithm].
     * 
     * More information can be found on the [[Simple Pathfinding]] page. 
     */
    public AddToClosedList(): void;
    
    /**
     * Adds this {{Type|CNavArea}} to the Open List.
     * 
     * Used in pathfinding via the [https://en.wikipedia.org/wiki/A*_search_algorithm A* algorithm].
     * 
     * More information can be found on the [[Simple Pathfinding]] page. 
     */
    public AddToOpenList(): void;
    
    /**
     * Clears the open and closed lists for a new search.
     * 
     * Used in pathfinding via the [https://en.wikipedia.org/wiki/A*_search_algorithm A* algorithm].
     * 
     * More information can be found on the [[Simple Pathfinding]] page. 
     */
    public ClearSearchLists(): void;
    
    /**
     * Returns the height difference between the edges of two connected navareas. 
     * @param navarea 
     * @returns The height change 
     */
    public ComputeAdjacentConnectionHeightChange(navarea: CNavArea): number;
    
    /**
     * Returns the {{Enum|NavDir}} direction that the given vector faces on this {{Type|CNavArea}}. 
     * @param pos  The position to compute direction towards. 
     * @returns The direction the vector is in relation to this {{Type|CNavArea}}. See {{Enum|NavDir}}. 
     */
    public ComputeDirection(pos: Vector): NavDir;
    
    /**
     * Returns the height difference on the Z axis of the two {{Type|CNavArea}}s. This is calculated from the center most point on both {{Type|CNavArea}}s. 
     * @param navArea  The nav area to test against. 
     * @returns The ground height change. 
     */
    public ComputeGroundHeightChange(navArea: CNavArea): number;
    
    /**
     * Connects this {{Type|CNavArea}} to another {{Type|CNavArea}} or {{Type|CNavLadder}} with a one way connection. ( From this area to the target )
     * 
     * See {{ClassFunction|CNavLadder|ConnectTo}} for making the connection from ladder to area. 
     * @param area  The {{Type|CNavArea}} or {{Type|CNavLadder}} this area leads to. 
     */
    public ConnectTo(area: CNavArea | CNavLadder): void;
    
    /**
     * Returns true if this {{Type|CNavArea}} contains the given vector. 
     * @param pos  The position to test. 
     * @returns True if the vector was inside and false otherwise. 
     */
    public Contains(pos: Vector): boolean;
    
    /**
     * Disconnects this nav area from given area or ladder. (Only disconnects one way) 
     * @param area  The {{Type|CNavArea}} or {{Type|CNavLadder}} this to disconnect from. 
     */
    public Disconnect(area: CNavArea | CNavLadder): void;
    
    /**
     * Draws this navarea on debug overlay. 
     */
    public Draw(): void;
    
    /**
     * Draws the hiding spots on debug overlay. This includes sniper/exposed spots too! 
     */
    public DrawSpots(): void;
    
    /**
     * Returns a table of all the {{Type|CNavArea}}s that have a  ( one and two way ) connection '''from''' this {{Type|CNavArea}}.
     * 
     * If an area has a one-way incoming connection to this {{Type|CNavArea}}, then it will '''not''' be returned from this function, use {{ClassFunction|CNavArea|GetIncomingConnections}} to get all one-way incoming connections.
     * 
     * See {{ClassFunction|CNavArea|GetAdjacentAreasAtSide}} for a function that only returns areas from one side/direction. 
     * @returns A table of all {{Type|CNavArea}} that have a ( one and two way ) connection '''from''' this {{Type|CNavArea}}. 
     * Returns an empty table if this area has no outgoing connections to any other areas. 
     */
    public GetAdjacentAreas(): CNavArea[];
    
    /**
     * Returns a table of all the {{Type|CNavArea}}s that have a ( one and two way ) connection '''from''' this {{Type|CNavArea}} in given direction.
     * 
     * If an area has a one-way incoming connection to this {{Type|CNavArea}}, then it will '''not''' be returned from this function, use {{ClassFunction|CNavArea|GetIncomingConnections}} to get all incoming connections.
     * 
     * See {{ClassFunction|CNavArea|GetAdjacentAreas}} for a function that returns all areas from all sides/directions. 
     * @param navDir  The direction, in which to look for {{Type|CNavArea}}s, see {{Enum|NavDir}}. 
     * @returns A table of all {{Type|CNavArea}} that have a ( one and two way ) connection '''from''' this {{Type|CNavArea}} in given direction.
     * Returns an empty table if this area has no outgoing connections to any other areas in given direction. 
     */
    public GetAdjacentAreasAtSide(navDir: NavDir): CNavArea[];
    
    /**
     * Returns the amount of {{Type|CNavArea}}s that have a connection ( one and two way ) '''from''' this {{Type|CNavArea}}.
     * 
     * See {{ClassFunction|CNavArea|GetAdjacentCountAtSide}} for a function that only returns area count from one side/direction. 
     * @returns The amount of {{Type|CNavArea}}s that have a connection ( one and two way ) '''from''' this {{Type|CNavArea}}. 
     */
    public GetAdjacentCount(): number;
    
    /**
     * Returns the amount of {{Type|CNavArea}}s that have a connection ( one or two way ) '''from''' this {{Type|CNavArea}} in given direction.
     * 
     * See {{ClassFunction|CNavArea|GetAdjacentCount}} for a function that returns {{Type|CNavArea}} count from/in all sides/directions. 
     * @param navDir  The direction, in which to look for {{Type|CNavArea}}s, see {{Enum|NavDir}}. 
     * @returns The amount of {{Type|CNavArea}}s that have a connection ( one or two way ) '''from''' this {{Type|CNavArea}} in given direction. 
     */
    public GetAdjacentCountAtSide(navDir: NavDir): number;
    
    /**
     * Returns the attribute mask for the given {{Type|CNavArea}}. 
     * @returns Attribute mask for this {{Type|CNavArea}}, see {{Enum|NAV_MESH}} for the specific flags.
     * 
     * **Note:**
     * >A navmesh that was generated with nav_quicksave set to 1 will have all {{Type|CNavArea}}s attribute masks set to 0 
     */
    public GetAttributes(): CNavArea | CNavArea;
    
    /**
     * Returns the center most vector point for the given {{Type|CNavArea}}. 
     * @returns The center vector. 
     */
    public GetCenter(): Vector;
    
    /**
     * Returns the closest point of this Nav Area from the given position. 
     * @param pos  The given position, can be outside of the Nav Area bounds. 
     * @returns The closest position on this Nav Area. 
     */
    public GetClosestPointOnArea(pos: Vector): Vector;
    
    /**
     * Returns the vector position of the corner for the given {{Type|CNavArea}}. 
     * @param cornerid  The target corner to get the position of, takes {{Enum|NavCorner}}. 
     * @returns The corner position. 
     */
    public GetCorner(cornerid: NavCorner): Vector;
    
    /**
     * Returns the cost from starting area this area when pathfinding. Set by {{ClassFunction|CNavArea|SetCostSoFar}}.
     * 
     * Used in pathfinding via the [https://en.wikipedia.org/wiki/A*_search_algorithm A* algorithm].
     * 
     * More information can be found on the [[Simple Pathfinding]] page. 
     * @returns The cost so far. 
     */
    public GetCostSoFar(): number;
    
    /**
     * Returns a table of very bad hiding spots in this area 
     * @returns A table of {{Type|Vector}}s 
     */
    public GetExposedSpots(): Vector[];
    
    /**
     * @returns Returns a table containing the following keys:
     * * {{FuncArg|Vector|hi|}}
     * * {{FuncArg|Vector|lo|}}
     * * {{FuncArg|number|SizeX|}}
     * * {{FuncArg|number|SizeY|}}
     * * {{FuncArg|number|SizeZ|}} 
     */
    public GetExtentInfo(): table;
    
    /**
     * Returns a table of good hiding spots in this area 
     * @returns A table of {{Type|Vector}}s 
     */
    public GetHidingSpots(): Vector[];
    
    /**
     * Returns this {{Type|CNavArea}}s unique ID. 
     * @returns The unique ID. 
     */
    public GetID(): number;
    
    /**
     * Returns a table of all the {{Type|CNavArea}}s that have a one-way connection '''to''' this {{Type|CNavArea}}.
     * 
     * If a {{Type|CNavArea}} has a two-way connection '''to or from''' this {{Type|CNavArea}} then it will not be returned from this function, use {{ClassFunction|CNavArea|GetAdjacentAreas}} to get outgoing ( one and two way ) connections.
     * 
     * See {{ClassFunction|CNavArea|GetIncomingConnectionsAtSide}} for a function that returns one-way incoming connections from  only one side/direction. 
     * @returns A table of all {{Type|CNavArea}}s with one-way connection '''to''' this {{Type|CNavArea}}.
     * Returns an empty table if there are no one-way incoming connections '''to''' this {{Type|CNavArea}}. 
     */
    public GetIncomingConnections(): CNavArea[];
    
    /**
     * Returns a table of all the {{Type|CNavArea}}s that have a one-way connection '''to''' this {{Type|CNavArea}} from given direction.
     * 
     * If a {{Type|CNavArea}} has a two-way connection '''to or from''' this {{Type|CNavArea}} then it will not be returned from this function, use {{ClassFunction|CNavArea|GetAdjacentAreas}} to get outgoing ( one and two way ) connections.
     * 
     * See {{ClassFunction|CNavArea|GetIncomingConnections}} for a function that returns one-way incoming connections from  all sides/directions. 
     * @param navDir  The direction, from which to look for {{Type|CNavArea}}s, see {{Enum|NavDir}}. 
     * @returns A table of all {{Type|CNavArea}}s with one-way connection '''to''' this {{Type|CNavArea}} from given direction.
     * Returns an empty table if there are no one-way incoming connections '''to''' this {{Type|CNavArea}} from given direction. 
     */
    public GetIncomingConnectionsAtSide(navDir: NavDir): CNavArea[];
    
    /**
     * Returns all {{Type|CNavLadder}}s that have a ( one or two way ) connection '''from''' this {{Type|CNavArea}}.
     * 
     * See {{ClassFunction|CNavArea|GetLaddersAtSide}} for a function that only returns {{Type|CNavLadder}}s in given direction. 
     * @returns The {{Type|CNavLadder}}s that have a ( one or two way ) connection '''from''' this {{Type|CNavArea}}. 
     */
    public GetLadders(): table;
    
    /**
     * Returns all {{Type|CNavLadder}}s that have a ( one or two way ) connection '''from''' ( one and two way ) this {{Type|CNavArea}} in given direction.
     * 
     * See {{ClassFunction|CNavArea|GetLadders}} for a function that returns {{Type|CNavLadder}} from/in all sides/directions. 
     * @param navDir  The direction, in which to look for {{Type|CNavLadder}}s.
     * 
     * 0 = Up ( LadderDirectionType::LADDER_UP )
     * 1 = Down ( LadderDirectionType::LADDER_DOWN ) 
     * @returns The {{Type|CNavLadder}}s that have a ( one or two way ) connection '''from''' this {{Type|CNavArea}} in given direction. 
     */
    public GetLaddersAtSide(navDir: number): table;
    
    /**
     * Returns the parent {{Type|CNavArea}} 
     * @returns The parent {{Type|CNavArea}} 
     */
    public GetParent(): CNavArea;
    
    /**
     * Returns how this {{Type|CNavArea}} is connected to its parent. 
     * @returns See {{Enum|NavTraverseType}} 
     */
    public GetParentHow(): NavTraverseType;
    
    /**
     * {{NextUpdate}}Returns the Place of the nav area. 
     * @returns The place of the nav area, or no value if it doesn't have a place set. 
     */
    public GetPlace(): string;
    
    /**
     * Returns a random {{Type|CNavArea}} that has an outgoing ( one or two way ) connection '''from''' this {{Type|CNavArea}} in given direction. 
     * @param navDir  The direction, in which to look for {{Type|CNavArea}}s, see {{Enum|NavDir}}. 
     * @returns The random {{Type|CNavArea}} that has an outgoing ( one or two way ) connection '''from''' this {{Type|CNavArea}} in given direction, if any. 
     */
    public GetRandomAdjacentAreaAtSide(navDir: NavDir): CNavArea | CNavArea;
    
    /**
     * Returns a random point on the nav area. 
     * @returns The random point on the nav area. 
     */
    public GetRandomPoint(): Vector;
    
    /**
     * Returns the width this Nav Area. 
     * @returns 
     */
    public GetSizeX(): number;
    
    /**
     * Returns the height of this Nav Area. 
     * @returns 
     */
    public GetSizeY(): number;
    
    /**
     * Returns the total cost when passing from starting area to the goal area through this node. Set by {{ClassFunction|CNavArea|SetTotalCost}}.
     * 
     * Used in pathfinding via the [https://en.wikipedia.org/wiki/A*_search_algorithm A* algorithm].
     * 
     * More information can be found on the [[Simple Pathfinding]] page. 
     * @returns The total cost 
     */
    public GetTotalCost(): number;
    
    /**
     * Returns the elevation of this Nav Area at the given position. 
     * @param pos  The position to get the elevation from, the z value from this position is ignored and only the X and Y values are used to this task. 
     * @returns The elevation. 
     */
    public GetZ(pos: Vector): number;
    
    /**
     * Returns true if the given {{Type|CNavArea}} has this attribute flag set. 
     * @param attribs  Attribute mask to check for, see {{Enum|NAV_MESH}} 
     * @returns True if the {{Type|CNavArea}} matches the given mask. False otherwise. 
     */
    public HasAttributes(attribs: NAV_MESH): CNavArea;
    
    /**
     * @param teamID 
     * @param ignoreNavBlockers [=false] 
     * @returns 
     */
    public IsBlocked(teamID: number, ignoreNavBlockers?: boolean): boolean;
    
    /**
     * Returns whether this node is in the Closed List.
     * 
     * Used in pathfinding via the [https://en.wikipedia.org/wiki/A*_search_algorithm A* algorithm].
     * 
     * More information can be found on the [[Simple Pathfinding]] page. 
     * @returns Whether this node is in the Closed List. 
     */
    public IsClosed(): boolean;
    
    /**
     * Returns whether this {{Type|CNavArea}} has an outgoing ( one or two way ) connection '''to''' given {{Type|CNavArea}}.
     * 
     * See {{ClassFunction|CNavArea|IsConnectedAtSide}} for a function that only checks for outgoing connections in one direction. 
     * @param navArea  The {{Type|CNavArea}} to test against. 
     * @returns Whether this {{Type|CNavArea}} has an outgoing ( one or two way ) connection '''to''' given {{Type|CNavArea}}. 
     */
    public IsConnected(navArea: CNavArea): CNavArea | CNavArea;
    
    /**
     * Returns whether this {{Type|CNavArea}} has an outgoing ( one or two way ) connection '''to''' given {{Type|CNavArea}} in given direction.
     * 
     * See {{ClassFunction|CNavArea|IsConnected}} for a function that checks all sides. 
     * @param navArea  The {{Type|CNavArea}} to test against. 
     * @param navDirType  The direction, in which to look for the connection. See {{Enum|NavDir}} 
     * @returns Whether this {{Type|CNavArea}} has an outgoing ( one or two way ) connection '''to''' given {{Type|CNavArea}} in given direction. 
     */
    public IsConnectedAtSide(navArea: CNavArea, navDirType: NavDir): CNavArea | CNavArea;
    
    /**
     * Returns whether this Nav Area is in the same plane as the given one. 
     * @param navArea  The Nav Area to test. 
     * @returns Whether we're coplanar or not. 
     */
    public IsCoplanar(navArea: CNavArea): boolean;
    
    /**
     * Returns whether this Nav Area is flat within the tolerance of the '''nav_coplanar_slope_limit_displacement''' and '''nav_coplanar_slope_limit''' convars. 
     * @returns Whether this CNavArea is mostly flat. 
     */
    public IsFlat(): boolean;
    
    /**
     * Returns whether this area is in the Open List.
     * 
     * Used in pathfinding via the [https://en.wikipedia.org/wiki/A*_search_algorithm A* algorithm].
     * 
     * More information can be found on the [[Simple Pathfinding]] page. 
     * @returns Whether this area is in the Open List. 
     */
    public IsOpen(): boolean;
    
    /**
     * Returns whether the Open List is empty or not.
     * 
     * Used in pathfinding via the [https://en.wikipedia.org/wiki/A*_search_algorithm A* algorithm].
     * 
     * More information can be found on the [[Simple Pathfinding]] page. 
     * @returns Whether the Open List is empty or not. 
     */
    public IsOpenListEmpty(): boolean;
    
    /**
     * Returns if this position overlaps the Nav Area within the given tolerance. 
     * @param pos  The overlapping position to test. 
     * @param tolerance [=0] The tolerance of the overlapping, set to 0 for no tolerance. 
     * @returns Whether the given position overlaps the Nav Area or not. 
     */
    public IsOverlapping(pos: Vector, tolerance?: number): boolean;
    
    /**
     * Returns true if this {{Type|CNavArea}} is overlapping the given {{Type|CNavArea}}. 
     * @param navArea  The {{Type|CNavArea}} to test against. 
     * @returns True if the given {{Type|CNavArea}} overlaps this {{Type|CNavArea}} at any point. 
     */
    public IsOverlappingArea(navArea: CNavArea): CNavArea | CNavArea;
    
    /**
     * Returns if we're shaped like a square. 
     * @returns If we're a square or not. 
     */
    public IsRoughlySquare(): boolean;
    
    /**
     * Whether this Nav Area is placed underwater. 
     * @returns Whether we're underwater or not. 
     */
    public IsUnderwater(): boolean;
    
    /**
     * Returns whether this {{Type|CNavArea}} is valid or not. 
     * @returns Whether this {{Type|CNavArea}} is valid or not. 
     */
    public IsValid(): CNavArea;
    
    /**
     * Returns whether we can be seen from the given position. 
     * @param pos  The position to check. 
     * @returns [Whether we can be seen or not., If we can be seen, this is returned with either the center or one of the corners of the Nav Area.] 
     * !TupleReturn
     */
    public IsVisible(pos: Vector): [boolean, Vector];
    
    /**
     * Drops a corner or all corners of a {{Type|CNavArea}} to the ground below it. 
     * @param corner  The corner(s) to drop, uses {{Enum|NavCorner}} 
     */
    public PlaceOnGround(corner: NavCorner): void;
    
    /**
     * Removes a CNavArea from the Open List with the lowest cost to traverse to from the starting node, and returns it.
     * 
     * Used in pathfinding via the [https://en.wikipedia.org/wiki/A*_search_algorithm A* algorithm].
     * 
     * More information can be found on the [[Simple Pathfinding]] page. 
     * @returns The CNavArea from the Open List with the lowest cost to traverse to from the starting node. 
     */
    public PopOpenList(): CNavArea;
    
    /**
     * Removes the given nav area. 
     */
    public Remove(): void;
    
    /**
     * Removes this node from the Closed List.
     * 
     * Used in pathfinding via the [https://en.wikipedia.org/wiki/A*_search_algorithm A* algorithm].
     * 
     * More information can be found on the [[Simple Pathfinding]] page. 
     */
    public RemoveFromClosedList(): void;
    
    /**
     * Sets the attributes for given CNavArea. 
     * @param attribs  The attribute bitflag. See {{Enum|NAV_MESH}} 
     */
    public SetAttributes(attribs: NAV_MESH): void;
    
    /**
     * Sets the position of a corner of a nav area. 
     * @param corner  The corner to set, uses {{Enum|NavCorner}} 
     * @param position  The new position to set. 
     */
    public SetCorner(corner: NavCorner, position: Vector): void;
    
    /**
     * Sets the cost from starting area this area when pathfinding.
     * 
     * Used in pathfinding via the [https://en.wikipedia.org/wiki/A*_search_algorithm A* algorithm].
     * 
     * More information can be found on the [[Simple Pathfinding]] page. 
     * @param cost  The cost so far 
     */
    public SetCostSoFar(cost: number): void;
    
    /**
     * Sets the new parent of this {{Type|CNavArea}}. 
     * @param parent  The new parent to set 
     */
    public SetParent(parent: CNavArea): void;
    
    /**
     * {{NextUpdate}}Sets the Place of the nav area.
     * 
     * There is a limit of 256 Places per nav file. 
     * @param place  Set to "" to remove place from the nav area. 
     * @returns Returns true of operation succeeded, false otherwise. 
     */
    public SetPlace(place: string): boolean;
    
    /**
     * Sets the total cost when passing from starting area to the goal area through this node.
     * 
     * Used in pathfinding via the [https://en.wikipedia.org/wiki/A*_search_algorithm A* algorithm].
     * 
     * More information can be found on the [[Simple Pathfinding]] page. 
     * @param cost  The total cost of the path to set.
     * 
     * Must be above or equal 0. 
     */
    public SetTotalCost(cost: number): void;
    
    /**
     * Moves this open list to appropriate position based on its {{ClassFunction|CNavArea|GetTotalCost}} compared to the total cost of other areas in the open list.
     * 
     * Used in pathfinding via the [https://en.wikipedia.org/wiki/A*_search_algorithm A* algorithm].
     * 
     * More information can be found on the [[Simple Pathfinding]] page. 
     */
    public UpdateOnOpenList(): void;
}

/**
 * An object that represents a ladder for Nextbots. 
 */
declare class CNavLadder {
    /**
     * Connects this ladder to a {{Type|CNavArea}} with a one way connection. ( From this ladder to the target area ).
     * 
     * See {{ClassFunction|CNavArea|ConnectTo}} for making the connection from area to ladder. 
     * @param area  The area this ladder leads to. 
     */
    public ConnectTo(area: CNavArea): void;
    
    /**
     * Disconnects this ladder from given area in a single direction. 
     * @param area  The {{Type|CNavArea}} this to disconnect from. 
     */
    public Disconnect(area: CNavArea): void;
    
    /**
     * Returns the bottom most position of the ladder. 
     * @returns The bottom most position of the ladder. 
     */
    public GetBottom(): Vector;
    
    /**
     * Returns the bottom area of the {{Type|CNavLadder}}. 
     * @returns 
     */
    public GetBottomArea(): CNavArea;
    
    /**
     * Returns this {{Type|CNavLadder}}s unique ID. 
     * @returns The unique ID. 
     */
    public GetID(): number;
    
    /**
     * Returns the length of the ladder. 
     * @returns The length of the ladder. 
     */
    public GetLength(): number;
    
    /**
     * Returns the direction of this {{Type|CNavLadder}}. ( The direction in which players back will be facing if they are looking directly at the ladder ) 
     * @returns The direction of this {{Type|CNavLadder}}. 
     */
    public GetNormal(): CNavLadder;
    
    /**
     * Returns the world position based on given height relative to the ladder. 
     * @param height  The Z position in world space coordinates. 
     * @returns The closest point on the ladder to that height. 
     */
    public GetPosAtHeight(height: number): Vector;
    
    /**
     * Returns the topmost position of the ladder. 
     * @returns The topmost position of the ladder. 
     */
    public GetTop(): Vector;
    
    /**
     * Returns the top behind {{Type|CNavArea}} of the {{Type|CNavLadder}}. 
     * @returns The top behind {{Type|CNavArea}} of the {{Type|CNavLadder}}. 
     */
    public GetTopBehindArea(): CNavArea | CNavLadder;
    
    /**
     * Returns the top forward {{Type|CNavArea}} of the {{Type|CNavLadder}}. 
     * @returns The top forward {{Type|CNavArea}} of the {{Type|CNavLadder}}. 
     */
    public GetTopForwardArea(): CNavArea | CNavLadder;
    
    /**
     * Returns the top left {{Type|CNavArea}} of the {{Type|CNavLadder}}. 
     * @returns The top left {{Type|CNavArea}} of the {{Type|CNavLadder}}. 
     */
    public GetTopLeftArea(): CNavArea | CNavLadder;
    
    /**
     * Returns the top right {{Type|CNavArea}} of the {{Type|CNavLadder}}. 
     * @returns The top right {{Type|CNavArea}} of the {{Type|CNavLadder}}. 
     */
    public GetTopRightArea(): CNavArea | CNavLadder;
    
    /**
     * Returns the width of the ladder in Hammer Units. 
     * @returns The width of the ladder in Hammer Units. 
     */
    public GetWidth(): number;
    
    /**
     * Returns whether this {{Type|CNavLadder}} has an outgoing ( one or two way ) connection '''to''' given {{Type|CNavArea}} in given direction. 
     * @param navArea  The {{Type|CNavArea}} to test against. 
     * @param navDirType  The direction, in which to look for the connection. See {{Enum|NavDir}} 
     * @returns Whether this {{Type|CNavLadder}} has an outgoing ( one or two way ) connection '''to''' given {{Type|CNavArea}} in given direction. 
     */
    public IsConnectedAtSide(navArea: CNavArea, navDirType: NavDir): CNavLadder | CNavArea;
    
    /**
     * Returns whether this {{Type|CNavLadder}} is valid or not. 
     * @returns Whether this {{Type|CNavLadder}} is valid or not. 
     */
    public IsValid(): CNavLadder;
    
    /**
     * Removes the given nav ladder. 
     */
    public Remove(): void;
    
    /**
     * Sets the bottom area of the {{Type|CNavLadder}}. 
     * @param area 
     */
    public SetBottomArea(area: CNavArea): void;
    
    /**
     * Sets the top behind area of the {{Type|CNavLadder}}. 
     * @param area 
     */
    public SetTopBehindArea(area: CNavArea): void;
    
    /**
     * Sets the top forward area of the {{Type|CNavLadder}}. 
     * @param area 
     */
    public SetTopForwardArea(area: CNavArea): void;
    
    /**
     * Sets the top left area of the {{Type|CNavLadder}}. 
     * @param area 
     */
    public SetTopLeftArea(area: CNavArea): void;
    
    /**
     * Sets the top right area of the {{Type|CNavLadder}}. 
     * @param area 
     */
    public SetTopRightArea(area: CNavArea): void;
}

/**
 * This object represents a .pcf ( Orange Box ) particle system. Created by {{ClassFunction|Entity|CreateParticleEffect}} and {{GlobalFunction|CreateParticleSystem}}. 
 * !CustomConstructor CreateParticleSystem */
declare class CNewParticleEffect {
    /**
     * Creates a new particle system.
     * 
     * **Note:**
     * >The particle effect must be precached with {{GlobalFunction|PrecacheParticleSystem}} and the file its from must be added via {{LibraryFunction|game|AddParticles}} before it can be used! 
     * @param ent  The entity to attach the control point to. 
     * @param effect  The name of the effect to create. It must be precached. 
     * @param partAttachment  See {{Enum|PATTACH}}. 
     * @param entAttachment [=0] The attachment ID on the entity to attach the particle system to 
     * @param offset [=Vector( 0, 0, 0 )] The offset from the {{ClassFunction|Entity|GetPos}} of the entity we are attaching this CP to. 
     */
    public constructor(ent: Entity, effect: string, partAttachment: PATTACH, entAttachment?: number, offset?: Vector);
    
    /**
     * Adds a control point to the particle system.
     * 
     * **Note:**
     * >This function will not work if the {{ClassFunction|CNewParticleEffect|GetOwner}} entity is not valid 
     * @param cpID  The control point ID, 0 to 63. 
     * @param ent  The entity to attach the control point to. 
     * @param partAttachment  See {{Enum|PATTACH}}. 
     * @param entAttachment [=0] The attachment ID on the entity to attach the particle system to 
     * @param offset [=Vector( 0, 0, 0 )] The offset from the {{ClassFunction|Entity|GetPos}} of the entity we are attaching this CP to. 
     */
    public AddControlPoint(cpID: number, ent: Entity, partAttachment: PATTACH, entAttachment?: number, offset?: Vector): void;
    
    /**
     * @returns 
     */
    public GetAutoUpdateBBox(): boolean;
    
    /**
     * Returns the name of the particle effect this system is set to emit. 
     * @returns The name of the particle effect. 
     */
    public GetEffectName(): string;
    
    /**
     * Returns the highest control point number for given particle system. 
     * @returns The highest control point number for given particle system, 0 to 63. 
     */
    public GetHighestControlPoint(): boolean;
    
    /**
     * Returns the owner of the particle system, the entity the particle system is attached to. 
     * @returns The owner of the particle system. 
     */
    public GetOwner(): Entity;
    
    /**
     * Returns whether the particle system has finished emitting particles or not. 
     * @returns Whether the particle system has finished emitting particles or not. 
     */
    public IsFinished(): boolean;
    
    /**
     * Returns whether the particle system is valid or not. 
     * @returns Whether the particle system is valid or not. 
     */
    public IsValid(): boolean;
    
    /**
     * Returns whether the particle system is intended to be used on a view model? 
     * @returns 
     */
    public IsViewModelEffect(): boolean;
    
    /**
     * Forces the particle system to render using current rendering context.
     * 
     * Can be used to render the particle system in vgui panels, etc.
     * 
     * Used in conjunction with {{ClassFunction|CNewParticleEffect|SetShouldDraw}}. 
     */
    public Render(): void;
    
    /**
     * Forces the particle system to restart emitting particles. 
     */
    public Restart(): void;
    
    /**
     * Sets a value for given control point. 
     * @param cpID  The control point ID, 0 to 63. 
     * @param value  The value to set for given control point. 
     */
    public SetControlPoint(cpID: number, value: Vector): void;
    
    /**
     * Essentially makes child control point follow the parent entity. 
     * @param child  The child control point ID, 0 to 63. 
     * @param parent  The parent entity to follow. 
     */
    public SetControlPointEntity(child: number, parent: Entity): void;
    
    /**
     * Sets the forward direction for given control point. 
     * @param cpID  The control point ID, 0 to 63. 
     * @param forward  The forward direction for given control point 
     */
    public SetControlPointForwardVector(cpID: number, forward: Vector): void;
    
    /**
     * Sets the orientation for given control point. 
     * @param cpID  The control point ID, 0 to 63. 
     * @param forward  The forward direction for given control point 
     * @param right  The right direction for given control point 
     * @param up  The up direction for given control point 
     */
    public SetControlPointOrientation(cpID: number, forward: Vector, right: Vector, up: Vector): void;
    
    /**
     * Essentially makes child control point follow the parent control point. 
     * @param child  The child control point ID, 0 to 63. 
     * @param parent  The parent control point ID, 0 to 63. 
     */
    public SetControlPointParent(child: number, parent: number): void;
    
    /**
     * Sets the right direction for given control point. 
     * @param cpID  The control point ID, 0 to 63. 
     * @param right  The right direction for given control point. 
     */
    public SetControlPointRightVector(cpID: number, right: Vector): void;
    
    /**
     * Sets the upward direction for given control point. 
     * @param cpID  The control point ID, 0 to 63. 
     * @param upward  The upward direction for given control point 
     */
    public SetControlPointUpVector(cpID: number, upward: Vector): void;
    
    /**
     * @param isViewModel 
     */
    public SetIsViewModelEffect(isViewModel: boolean): void;
    
    /**
     * Forces the particle system to stop automatically rendering.
     * 
     * Used in conjunction with {{ClassFunction|CNewParticleEffect|Render}}. 
     * @param should  Whether to automatically draw the particle effect or not. 
     */
    public SetShouldDraw(should: boolean): void;
    
    /**
     * Sets the sort origin for given particle system. This is used as a helper to determine which particles are in front of which. 
     * @param origin  The new sort origin. 
     */
    public SetSortOrigin(origin: Vector): void;
    
    /**
     * Starts the particle emission. 
     * @param infiniteOnly [=false] 
     */
    public StartEmission(infiniteOnly?: boolean): void;
    
    /**
     * Stops the particle emission. 
     * @param infiniteOnly [=false] 
     * @param removeAllParticles [=false] 
     * @param wakeOnStop [=false] 
     */
    public StopEmission(infiniteOnly?: boolean, removeAllParticles?: boolean, wakeOnStop?: boolean): void;
    
    /**
     * Stops particle emission and destroys all particles instantly. Also detaches the particle effect from the entity it was attached to.
     * 
     * **Note:**
     * >This function will work identically to {{ClassFunction|CNewParticleEffect|StopEmission}}( false, true ) if  {{ClassFunction|CNewParticleEffect|GetOwner}} entity is not valid.
     * 
     * Consider using {{ClassFunction|CNewParticleEffect|StopEmission}}( false, true ) instead, which has same effect, but doesn't require owner entity, and does't detach the particle system from its entity. 
     */
    public StopEmissionAndDestroyImmediately(): void;
}

/**
 * The concommand library is used to create console commands which can be used to network (basic) information & events between the client and the server. 
 */
declare namespace concommand {
    /**
     * Creates a console command that runs a function in lua with optional autocompletion function and help text.
     * 
     * **Bug [#1183](https://github.com/Facepunch/garrysmod-issues/issues/1183):**
     * >This will fail if the concommand was previously removed with {{LibraryFunction|concommand|Remove}} in a different realm (creating a command on the client that was removed from the server and vice-versa). 
     * @param name  The command name to be used in console.
     * 
     * This cannot be a name of existing console command or console variable. It will silently fail if it is. 
     * @param callback  The function to run when the concommand is executed. Arguments passed are:
     * * {{FuncArg|Player|ply|The player the ran the concommand. NULL entity if command was entered with the dedicated server console.}}
     * * {{FuncArg|string|cmd|The concommand string (if one callback is used for several concommands).}}
     * * {{FuncArg|table|args|A table of all string arguments.}}
     * * {{FuncArg|string|argStr|The arguments as a string.}} 
     * @param autoComplete [=nil] The function to call which should return a table of options for autocompletion. ([[Autocomplete Tutorial|Autocompletion Tutorial]])
     * 
     * This only properly works on the client since it is '''not''' networked. Arguments passed are:
     * * {{FuncArg|string|cmd|The concommand this autocompletion is for.}}
     * * {{FuncArg|string|args|The arguments typed so far.}} 
     * @param helpText [=nil] The text to display should a user run 'help cmdName'. 
     * @param flags [=0] Concommand modifier flags. See {{Enum|FCVAR}}. 
     * @example
     * 
     * concommand.Add("killyourself",function( ply, cmd, args )
     *     ply:Kill()
     *     print("You killed yourself!")
     * end)
     * 
     * // Adds a concommand ''killyourself'' which will kill the user.@example
     * 
     * concommand.Add( "retrieveplayers", function()  
     * 	for _, ply in ipairs( player.GetAll() ) do
     * 		print( ply:Nick() .. ", " .. ply:SteamID() .. "\n" )
     * 	end
     * end)
     * 
     * // A concommand that prints the SteamID and nickname of every player on the server. 
     */
    function Add(name: string, callback: Function, autoComplete?: Function, helpText?: string, flags?: FCVAR): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Used by the engine to call the autocomplete function for a console command, and retrieve returned options. 
     * @param command  Name of command 
     * @param arguments  Arguments given to the command 
     * @returns Possibilities for auto-completion. This is the return value of the auto-complete callback. 
     */
    function AutoComplete(command: string, arguments: string): table;
    
    /**
     * Returns the tables of all console command callbacks, and autocomplete functions, that were added to the game with {{LibraryFunction|concommand|Add}}. 
     * @returns [Table of command callback functions., Table of command autocomplete functions.] 
     * !TupleReturn
     */
    function GetTable(): [table, table];
    
    /**
     * Removes a console command.
     * 
     * **Bug [#1183](https://github.com/Facepunch/garrysmod-issues/issues/1183):**
     * >This will not always remove the command from auto-complete.
     * 
     * **Bug [#1183](https://github.com/Facepunch/garrysmod-issues/issues/1183):**
     * >{{LibraryFunction|concommand|Add}} will fail if the concommand was previously removed with this function in a different realm (creating a command on the client that was removed from the server and vice-versa). 
     * @param name  The name of the command to be removed. 
     * @example
     * 
     * concommand.Remove("gmod_camera")
     * 
     * // Removes the built-in concommand "gmod_camera" which would normally quickly select the camera swep 
     */
    function Remove(name: string): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Used by the engine to run a console command's callback function, that was added with {{LibraryFunction|concommand|Add}}. An error is sent to the player's chat if no callback is found. 
     * @param ply  Player to run concommand on 
     * @param cmd  Command name 
     * @param args  Command arguments.
     * Can be table or string 
     * @param argumentString  string of all arguments sent to the command 
     * @returns ''true'' if the console command with the given name exists, and ''false'' if it doesn't. 
     */
    function Run(ply: Player, cmd: string, args: any, argumentString: string): boolean;
}

/**
 * The constraint library allows you to control the constraint system built into the physics engine (rope, weld, ballsockets, etc). 
 */
declare namespace constraint {
    /**
     * Stores information about constraints in an entity's table. 
     * @param ent1  The entity to store the information on. 
     * @param constrt  The constraint to store in the entity's table. 
     * @param ent2 [=nil] Optional. If different from ''ent1'', the info will also be stored in the table for this entity. 
     * @param ent3 [=nil] Optional. Same as ''ent2''. 
     * @param ent4 [=nil] Optional. Same as ''ent2''. 
     */
    function AddConstraintTable(ent1: Entity, constrt: Entity, ent2?: Entity, ent3?: Entity, ent4?: Entity): void;
    
    /**
     * Stores info about the constraints on the entity's table. The only difference between this and {{LibraryFunction|constraint|AddConstraintTable}} is that the constraint does not get deleted when the entity is removed. 
     * @param ent1  The entity to store the information on. 
     * @param constrt  The constraint to store in the entity's table. 
     * @param ent2 [=nil] Optional. If different from ''ent1'', the info will also be stored in the table for this entity. 
     * @param ent3 [=nil] Optional. Same as ''ent2''. 
     * @param ent4 [=nil] Optional. Same as ''ent2''. 
     */
    function AddConstraintTableNoDelete(ent1: Entity, constrt: Entity, ent2?: Entity, ent3?: Entity, ent4?: Entity): void;
    
    /**
     * Creates an advanced ballsocket (ragdoll) constraint.
     * 
     * Uses a https://developer.valvesoftware.com/wiki/Phys_ragdollconstraint 
     * @param Ent1  First entity. 
     * @param Ent2  Second entity. 
     * @param Bone1  Bone of first entity (0 for non-ragdolls) 
     * @param Bone2  Bone of second entity (0 for non-ragdolls) 
     * @param LPos1  Position on the first entity, in its local space coordinates. 
     * @param LPos2  Position on the second entity, in its local space coordinates. 
     * @param forcelimit  Amount of force until it breaks (0 = unbreakable) 
     * @param torquelimit  Amount of torque (rotation speed) until it breaks (0 = unbreakable) 
     * @param xmin  Minimum angle in rotations around the X axis local to the constraint. 
     * @param ymin  Minimum angle in rotations around the Y axis local to the constraint. 
     * @param zmin  Minimum angle in rotations around the Z axis local to the constraint. 
     * @param xmax  Maximum angle in rotations around the X axis local to the constraint. 
     * @param ymax  Maximum angle in rotations around the Y axis local to the constraint. 
     * @param zmax  Maximum angle in rotations around the Z axis local to the constraint. 
     * @param xfric  Rotational friction in the X axis local to the constraint. 
     * @param yfric  Rotational friction in the Y axis local to the constraint. 
     * @param zfric  Rotational friction in the Z axis local to the constraint. 
     * @param onlyrotation  Only limit rotation, free movement. 
     * @param nocollide  Whether the entities should be no-collided. 
     * @returns A phys_ragdollconstraint entity. Will return false if the constraint could not be created. 
     */
    function AdvBallsocket(Ent1: Entity, Ent2: Entity, Bone1: number, Bone2: number, LPos1: Vector, LPos2: Vector, forcelimit: number, torquelimit: number, xmin: number, ymin: number, zmin: number, xmax: number, ymax: number, zmax: number, xfric: number, yfric: number, zfric: number, onlyrotation: number, nocollide: number): Entity;
    
    /**
     * Creates an axis constraint. 
     * @param Ent1  First entity. 
     * @param Ent2  Second entity. 
     * @param Bone1  Bone of first entity (0 for non-ragdolls) 
     * @param Bone2  Bone of second entity (0 for non-ragdolls) 
     * @param LPos1  Position on the first entity, in its local space coordinates. 
     * @param LPos2  Position on the second entity, in its local space coordinates. 
     * @param forcelimit  Amount of force until it breaks (0 = unbreakable) 
     * @param torquelimit  Amount of torque (rotational force) until it breaks (0 = unbreakable) 
     * @param friction  Constraint friction. 
     * @param nocollide  Whether the entities should be no-collided. 
     * @param LocalAxis  If you include the LocalAxis then LPos2 will not be used in the final constraint. However, LPos2 is still a required argument. 
     * @param DontAddTable  Whether or not to add the constraint info on the entity table. See {{LibraryFunction|constraint|AddConstraintTable}}. 
     * @returns Constraint. Will return false if the constraint could not be created. 
     */
    function Axis(Ent1: Entity, Ent2: Entity, Bone1: number, Bone2: number, LPos1: Vector, LPos2: Vector, forcelimit: number, torquelimit: number, friction: number, nocollide: number, LocalAxis: Vector, DontAddTable: boolean): Entity;
    
    /**
     * Creates a ballsocket joint. 
     * @param Ent1  First entity 
     * @param Ent2  Second entity 
     * @param Bone1  Bone of first entity (0 for non-ragdolls) 
     * @param Bone2  Bone of second entity (0 for non-ragdolls) 
     * @param LocalPos  Centerposition of the joint, relative to the <b>second</b> entity. 
     * @param forcelimit  Amount of force until it breaks (0 = unbreakable) 
     * @param torquelimit  Amount of torque (rotation speed) until it breaks (0 = unbreakable) 
     * @param nocollide  Whether the entities should be nocollided 
     * @returns Constraint. Will return false if the constraint could not be created. 
     */
    function Ballsocket(Ent1: Entity, Ent2: Entity, Bone1: number, Bone2: number, LocalPos: Vector, forcelimit: number, torquelimit: number, nocollide: number): Entity;
    
    /**
     * Basic checks to make sure that the specified entity and bone are valid. Returns false if we should not be constraining the entity. 
     * @param ent  The entity to check 
     * @param bone  The bone of the entity to check (use 0 for mono boned ents) 
     * @returns shouldConstrain 
     * @example
     * 
     * function Weld( Ent1, Ent2, Bone1, Bone2, forcelimit, nocollide, deleteonbreak )
     *  if ( !CanConstrain( Ent1, Bone1 ) ) then return false end
     *  if ( !CanConstrain( Ent2, Bone2 ) ) then return false end
     * 
     * // From modules/constraint.lua 
     */
    function CanConstrain(ent: Entity, bone: number): boolean;
    
    /**
     * Creates a rope without any constraint 
     * @param pos 
     * @param width 
     * @param material 
     * @param Constraint 
     * @param Ent1 
     * @param LPos1 
     * @param Bone1 
     * @param Ent2 
     * @param LPos2 
     * @param Bone2 
     * @param kv 
     * @returns rope 
     */
    function CreateKeyframeRope(pos: Vector, width: number, material: string, Constraint: Entity, Ent1: Entity, LPos1: Vector, Bone1: number, Ent2: Entity, LPos2: Vector, Bone2: number, kv: table): Entity;
    
    /**
     * Creates an invisible, non-moveable anchor point in the world to which things can be attached. 
     * @param pos  The position to spawn the anchor at 
     * @returns [anchor, physicsObject,, bone, LPos] 
     * !TupleReturn
     */
    function CreateStaticAnchorPoint(pos: Vector): [Entity, PhysObj, number, Vector];
    
    /**
     * Creates an elastic constraint. 
     * @param Ent1  First entity. 
     * @param Ent2  Second entity 
     * @param Bone1  Bone of first entity (0 for non-ragdolls) 
     * @param Bone2  Bone of second entity (0 for non-ragdolls) 
     * @param LPos1  Position of first end of the rope. Local to Ent1. 
     * @param LPos2  Position of second end of the rope. Local to Ent2. 
     * @param constant 
     * @param damping 
     * @param rdamping 
     * @param material  The material of the rope. 
     * @param width  Width of rope. 
     * @param stretchonly 
     * @returns [Constraint. Will return false if the constraint could not be created., rope.  Will return nil if the constraint could not be created.] 
     * !TupleReturn
     */
    function Elastic(Ent1: Entity, Ent2: Entity, Bone1: number, Bone2: number, LPos1: Vector, LPos2: Vector, constant: number, damping: number, rdamping: number, material: string, width: number, stretchonly: boolean): [Entity, Entity];
    
    /**
     * Returns the constraint of a specified type between two entities, if it exists 
     * @param ent1  The first entity to check 
     * @param ent2  The second entity to check 
     * @param type  The constraint type to look for (eg. "Weld", "Elastic", "NoCollide") 
     * @param bone1  The bone number for the first entity (0 for monoboned entities) 
     * @param bone2  The bone number for the second entity 
     * @returns constraint 
     */
    function Find(ent1: Entity, ent2: Entity, type: string, bone1: number, bone2: number): Entity;
    
    /**
     * Returns the first constraint of a specific type directly connected to the entity found 
     * @param ent  The entity to check 
     * @param type  The type of constraint (eg. "Weld", "Elastic", "NoCollide") 
     * @returns The constraint table, set with {{LibraryFunction|constraint|AddConstraintTable}} 
     */
    function FindConstraint(ent: Entity, type: string): table;
    
    /**
     * Returns the other entity involved in the first constraint of a specific type directly connected to the entity 
     * @param ent  The entity to check 
     * @param type  The type of constraint (eg. "Weld", "Elastic", "NoCollide") 
     * @returns The other entity. 
     */
    function FindConstraintEntity(ent: Entity, type: string): Entity;
    
    /**
     * Returns a table of all constraints of a specific type directly connected to the entity 
     * @param ent  The entity to check 
     * @param type  The type of constraint (eg. "Weld", "Elastic", "NoCollide") 
     * @returns All the constraints of this entity. 
     */
    function FindConstraints(ent: Entity, type: string): table;
    
    /**
     * Make this entity forget any constraints it knows about. Note that this will not actually remove the constraints. 
     * @param ent  The entity that will forget its constraints. 
     */
    function ForgetConstraints(ent: Entity): void;
    
    /**
     * Returns a table of all entities recursively constrained to an entitiy. 
     * @param ent  The entity to check 
     * @param ResultTable [=nil] Table used to return result. Optional. 
     * @returns A table containing all of the constrained entities. This includes all entities constrained to entities constrained to the supplied entity, etc. 
     * @example
     * 
     * // Remove this entity and everything constrained
     * function TOOL:RightClick( trace )
     * 	if ( !IsValid( trace.Entity ) or trace.Entity:IsPlayer() ) then return false end
     * 	// Loop through all the entities in the system
     * 	for _, Entity in pairs( constraint.GetAllConstrainedEntities( trace.Entity ) ) do
     * 		DoRemoveEntity( Entity )
     * 	end
     * 	return true
     * end
     * 
     * // Adapted from stools/remover.lua 
     */
    function GetAllConstrainedEntities(ent: Entity, ResultTable?: table): table;
    
    /**
     * Returns a table of all constraints directly connected to the entity 
     * @param ent  The entity to check 
     * @returns A list of all constraints connected to the entity. 
     */
    function GetTable(ent: Entity): table;
    
    /**
     * Returns true if the entity has constraints attached to it 
     * @param ent  The entity to check 
     * @returns Whether the entity has any constraints or not. 
     */
    function HasConstraints(ent: Entity): boolean;
    
    /**
     * Creates a Hydraulic constraint. 
     * @param pl  The player that will be used to call {{LibraryFunction|numpad|OnDown}}. 
     * @param Ent1  First entity. 
     * @param Ent2  Second entity. 
     * @param Bone1  Bone of first entity (0 for non-ragdolls), 
     * @param Bone2  Bone of second entity (0 for non-ragdolls). 
     * @param LPos1 
     * @param LPos2 
     * @param Length1 
     * @param Length2 
     * @param width  The width of the rope. 
     * @param key  The key binding, corresponding to an {{Enum|KEY}} 
     * @param fixed  Whether the hydraulic is fixed. 
     * @param speed 
     * @param material  The material of the rope. 
     * @returns [Constraint. Will return false if the constraint could not be created., rope. Will return nil if the constraint could not be created., controller. Can return nil depending on how the constraint was created. Will return nil if the constraint could not be created., slider. Can return nil depending on how the constraint was created. Will return nil if the constraint could not be created.] 
     * !TupleReturn
     */
    function Hydraulic(pl: Player, Ent1: Entity, Ent2: Entity, Bone1: number, Bone2: number, LPos1: Vector, LPos2: Vector, Length1: number, Length2: number, width: number, key: KEY, fixed: number, speed: number, material: string): [Entity, Entity, Entity, Entity];
    
    /**
     * Creates a keep upright constraint.
     * 
     * **Note:**
     * >This function only works on prop_physics or prop_ragdoll. 
     * @param ent  The entity to keep upright 
     * @param ang  The angle defined as "upright" 
     * @param bone  The bone of the entity to constrain (0 for boneless) 
     * @param angularLimit  Basically, the strength of the constraint 
     * @returns The created constraint, if any or false if the constraint failed to set 
     * @example
     * 
     * constraint.Keepupright( ent, Phys:GetAngles(), 0, 999999 )
     * 
     * // From properties/keep_upright.lua (the right click menu) 
     */
    function Keepupright(ent: Entity, ang: Angle, bone: number, angularLimit: number): Entity;
    
    /**
     * Creates a motor constraint. 
     * @param Ent1  First entity. 
     * @param Ent2  Second entity. 
     * @param Bone1  Bone of first entity (0 for non-ragdolls) 
     * @param Bone2  Bone of second entity (0 for non-ragdolls) 
     * @param LPos1 
     * @param LPos2 
     * @param friction 
     * @param torque 
     * @param forcetime 
     * @param nocollide  Whether the entities should be no-collided. 
     * @param toggle  Whether the constraint is on toggle. 
     * @param pl  The player that will be used to call {{LibraryFunction|numpad|OnDown}} and {{LibraryFunction|numpad|OnUp}}. 
     * @param forcelimit  Amount of force until it breaks (0 = unbreakable) 
     * @param numpadkey_fwd  The key binding for "forward", corresponding to an {{Enum|KEY}} 
     * @param numpadkey_bwd  The key binding for "backwards", corresponding to an {{Enum|KEY}} 
     * @param direction 
     * @param LocalAxis 
     * @returns [Constraint. Will return false if the constraint could not be created., axis. Will return nil if the constraint could not be created.] 
     * !TupleReturn
     */
    function Motor(Ent1: Entity, Ent2: Entity, Bone1: number, Bone2: number, LPos1: Vector, LPos2: Vector, friction: number, torque: number, forcetime: number, nocollide: number, toggle: number, pl: Player, forcelimit: number, numpadkey_fwd: KEY, numpadkey_bwd: KEY, direction: number, LocalAxis: Vector): [Entity, Entity];
    
    /**
     * Creates a muscle constraint. 
     * @param pl  The player that will be used to call {{LibraryFunction|numpad|OnDown}}. 
     * @param Ent1  First entity. 
     * @param Ent2  Second entity. 
     * @param Bone1  Bone of first entity (0 for non-ragdolls) 
     * @param Bone2  Bone of second entity (0 for non-ragdolls) 
     * @param LPos1 
     * @param LPos2 
     * @param Length1 
     * @param Length2 
     * @param width  Width of the rope. 
     * @param key  The key binding, corresponding to an {{Enum|KEY}} 
     * @param fixed  Whether the constraint is fixed. 
     * @param period 
     * @param amplitude 
     * @param starton 
     * @param material  Material of the rope. 
     * @returns [Constraint. Will return false if the constraint could not be created., rope. Will return nil if the constraint could not be created., controller. Will return nil if the constraint could not be created., slider. Will return nil if the fixed argument is not 1 or if the constraint could not be created.] 
     * !TupleReturn
     */
    function Muscle(pl: Player, Ent1: Entity, Ent2: Entity, Bone1: number, Bone2: number, LPos1: Vector, LPos2: Vector, Length1: number, Length2: number, width: number, key: KEY, fixed: number, period: number, amplitude: number, starton: boolean, material: string): [Entity, Entity, Entity, Entity];
    
    /**
     * Creates an no-collide "constraint". Disables collision between two entities. 
     * @param Ent1  First entity. 
     * @param Ent2  Second entity. 
     * @param Bone1  Bone of first entity (0 for non-ragdolls). 
     * @param Bone2  Bone of second entity (0 for non-ragdolls). 
     * @returns Constraint. Will return false if the constraint could not be created. 
     */
    function NoCollide(Ent1: Entity, Ent2: Entity, Bone1: number, Bone2: number): Entity;
    
    /**
     * Creates a pulley constraint. 
     * @param Ent1 
     * @param Ent4 
     * @param Bone1 
     * @param Bone4 
     * @param LPos1 
     * @param LPos4 
     * @param WPos2 
     * @param WPos3 
     * @param forcelimit  Amount of force until it breaks (0 = unbreakable) 
     * @param rigid  Whether the constraint is rigid. 
     * @param width  Width of the rope. 
     * @param material  Material of the rope. 
     * @returns Constraint. Will return false if the constraint could not be created. 
     */
    function Pulley(Ent1: Entity, Ent4: Entity, Bone1: number, Bone4: number, LPos1: Vector, LPos4: Vector, WPos2: Vector, WPos3: Vector, forcelimit: number, rigid: boolean, width: number, material: string): Entity;
    
    /**
     * Attempts to remove all constraints associated with an entity 
     * @param ent  The entity to remove constraints from 
     * @returns [Whether any constraints were removed, Number of constraints removed] 
     * @example
     * 
     * // Reload removes all constraints on the targetted entity
     * function TOOL:Reload( trace )
     * 	if ( !IsValid( trace.Entity ) or trace.Entity:IsPlayer() ) then return false end
     * 	return constraint.RemoveAll( trace.Entity )
     * end
     * 
     * // From stools/remover.lua 
     * !TupleReturn
     */
    function RemoveAll(ent: Entity): [boolean, number];
    
    /**
     * Attempts to remove all constraints of a specified type associated with an entity 
     * @param ent  The entity to check 
     * @param type  The constraint type to remove (eg. "Weld", "Elastic", "NoCollide") 
     * @returns [Whether we removed any constraints or not, The amount of constraints removed] 
     * @example
     * 
     * function TOOL:Reload( trace )
     *  if (!trace.Entity:IsValid() or trace.Entity:IsPlayer() ) then return false end
     *  local bool = constraint.RemoveConstraints( trace.Entity, "Axis" )
     *  return bool
     * end
     * 
     * // From stools/axis.lua 
     * !TupleReturn
     */
    function RemoveConstraints(ent: Entity, type: string): [boolean, number];
    
    /**
     * Creates a rope constraint - with rope! 
     * @param Ent1  First entity 
     * @param Ent2  Second entity 
     * @param Bone1  Bone of first entity (0 for non-ragdolls) 
     * @param Bone2  Bone of second entity (0 for non-ragdolls) 
     * @param LPos1  Position of first end of the rope. Local to Ent1. 
     * @param LPos2  Position of second end of the rope. Local to Ent2. 
     * @param length  Length of the rope. 
     * @param addlength  Amount to add to the length of the rope. Works as it does in the Rope tool. 
     * @param forcelimit  Amount of force until it breaks (0 = unbreakable). 
     * @param width  Width of the rope. 
     * @param material  Material of the rope. 
     * @param rigid  Whether the constraint is rigid. 
     * @returns [Constraint. Will be a keyframe_rope if you roping to the same bone on the same entity. Will return false if the constraint could not be created., rope. Will return nil if "Constraint" is a keyframe_rope or if the constraint could not be created.] 
     * !TupleReturn
     */
    function Rope(Ent1: Entity, Ent2: Entity, Bone1: number, Bone2: number, LPos1: Vector, LPos2: Vector, length: number, addlength: number, forcelimit: number, width: number, material: string, rigid: boolean): [Entity, Entity];
    
    /**
     * Creates a slider constraint. 
     * @param Ent1  First entity. 
     * @param Ent2  Second entity. 
     * @param Bone1  Bone of first entity (0 for non-ragdolls), 
     * @param Bone2  Bone of second entity (0 for non-ragdolls). 
     * @param LPos1 
     * @param LPos2 
     * @param width  The width of the rope. 
     * @param material  The material of the rope. 
     * @returns [Constraint. Will return false if the constraint could not be created., rope. Will return nil if the constraint could not be created.] 
     * !TupleReturn
     */
    function Slider(Ent1: Entity, Ent2: Entity, Bone1: number, Bone2: number, LPos1: Vector, LPos2: Vector, width: number, material: string): [Entity, Entity];
    
    /**
     * Creates a weld constraint 
     * @param ent1  The first entity 
     * @param ent2  The second entity 
     * @param bone1  The bonenumber of the first entity (0 for monoboned entities) 
     * 
     * PhysObj number for ragdolls, see: {{ClassFunction|Entity|TranslateBoneToPhysBone}}. 
     * @param bone2  The bonenumber of the second entity 
     * @param forcelimit  The amount of force appliable to the constraint before it will break (0 is never) 
     * @param nocollide  Should ent1 be nocollided to ent2 via this constraint 
     * @param deleteent1onbreak  If true, when ent2 is removed, ent1 will also be removed 
     * @returns constraint 
     * @example
     * 
     * function TOOL:LeftClick( trace )
     *  /* Boilerplate stool code to extract ClientConVars to variables 
     *  local thruster = MakeThruster( ply, model, Ang, trace.HitPos, key, key_bk, force, toggle, effect, damageable, soundname )
     *  local weld = constraint.Weld( thruster, trace.Entity, 0, trace.PhysicsBone, 0, collision == 0, true )
     *  // If you remove the entity thrusters are welded to, the thruster is removed as well
     * end
     * 
     * // Adapted from stools/thruster.lua 
     */
    function Weld(ent1: Entity, ent2: Entity, bone1: number, bone2: number, forcelimit: number, nocollide: boolean, deleteent1onbreak: boolean): Entity;
    
    /**
     * Creates a Winch constraint. 
     * @param pl  The player that will be used to call {{LibraryFunction|numpad|OnDown}} and {{LibraryFunction|numpad|OnUp}}. 
     * @param Ent1  First entity. 
     * @param Ent2  Second entity. 
     * @param Bone1  Bone of first entity (0 for non-ragdolls), 
     * @param Bone2  Bone of second entity (0 for non-ragdolls). 
     * @param LPos1 
     * @param LPos2 
     * @param width  The width of the rope. 
     * @param fwd_bind  The key binding for "forward", corresponding to an {{Enum|KEY}} 
     * @param bwd_bind  The key binding for "backwards", corresponding to an {{Enum|KEY}} 
     * @param fwd_speed  Forward speed. 
     * @param bwd_speed  Backwards speed. 
     * @param material  The material of the rope. 
     * @param toggle  Whether the winch should be on toggle. 
     * @returns [Constraint. Can return nil. Will return false if the constraint could not be created., rope. Will return nil if the constraint could not be created., controller. Can return nil.] 
     * !TupleReturn
     */
    function Winch(pl: Player, Ent1: Entity, Ent2: Entity, Bone1: number, Bone2: number, LPos1: Vector, LPos2: Vector, width: number, fwd_bind: KEY, bwd_bind: KEY, fwd_speed: number, bwd_speed: number, material: string, toggle: boolean): [Entity, Entity, Entity];
}

/**
 * The construct library is used to control the physical properties of entities. 
 */
declare namespace construct {
    /**
     * Creates a magnet. 
     * @param ply  Player that will have the numpad control over the magnet 
     * @param pos  The position of the magnet 
     * @param ang  The angles of the magnet 
     * @param model  The model of the maget 
     * @param material  Material of the magnet ( texture ) 
     * @param key  The key to toggle the magnet, see {{Enum|KEY}} 
     * @param maxObjects  Maximum amount of objects the magnet can hold 
     * @param strength  Strength of the magnet 
     * @param nopull [=0] If > 0, disallows the magnet to pull objects towards it 
     * @param allowrot [=0] If > 0, allows rotation of the objects attached 
     * @param startOn [=0] If > 0, enabled from spawn 
     * @param toggle [=] If != 0, pressing the key toggles the magnet, otherwise you'll have to hold the key to keep it enabled 
     * @param vel [=Vector( 0, 0, 0 )] Velocity to set on spawn 
     * @param aVel [=Angle( 0, 0, 0 )] Angular velocity to set on spawn 
     * @param frozen [=false] Freeze the magnet on start 
     * @returns The magnet 
     */
    function Magnet(ply: Player, pos: Vector, ang: Angle, model: string, material: string, key: KEY, maxObjects: number, strength: number, nopull?: number, allowrot?: number, startOn?: number, toggle?: number, vel?: Vector, aVel?: Angle, frozen?: boolean): Entity;
    
    /**
     * Creates a magnet. 
     * @param ply  Player that will have the numpad control over the magnet 
     * @param pos  The position of the magnet 
     * @param ang  The angles of the magnet 
     * @param model  The model of the maget 
     * @param material  Material of the magnet ( texture ) 
     * @param key  The key to toggle the magnet, see {{Enum|KEY}} 
     * @param maxObjects  Maximum amount of objects the magnet can hold 
     * @param strength  Strength of the magnet 
     * @param toggle  If != 0, pressing the key toggles the magnet, otherwise you'll have to hold the key to keep it enabled 
     * @returns The magnet 
     */
    function Magnet(ply: Player, pos: Vector, ang: Angle, model: string, material: string, key: KEY, maxObjects: number, strength: number, toggle: number): Entity;
    
    /**
     * Sets props physical properties. 
     * @param ply  The player. This variable is not used and can be left out. 
     * @param ent  The entity to apply properties to 
     * @param physObjID  You can use this or the argument below. This will be used in case you don't provide argument below. 
     * @param physObj  The physics object to apply the properties to 
     * @param data  The table containing properties to apply. See {{Struct|PhysProperties}} 
     */
    function SetPhysProp(ply: Player, ent: Entity, physObjID: number, physObj: PhysObj, data: PhysProperties): void;
}

/**
 * The spawn icon used for SWEPs and other SENTs, commonly featured as part of the spawn menu. Do note that at least one of your ContentIcon's parents must either be an {{Type|EditablePanel}} or derived from it (like a {{Type|DFrame}}, for example), else it won't be able to focus and thus be unclickable.
 * 
 * This control only exists in Sandbox derived gamemodes. 
 */
declare class ContentIcon extends DButton {
    /**
     * Returns the color set by {{ClassFunction|ContentIcon|SetColor}} 
     * @returns See {{Struct|Color}} 
     */
    public GetColor(): Color;
    
    /**
     * Returns the "internal" desired color of the text, alias of {{ClassFunction|DLabel|GetTextStyleColor}}.
     * 
     * **Bug:**
     * >FIXED IN NEXT UPDATE: This doesn't return ACTUAL color of the text. Use the following instead for now:
     * ```local clr = DLabel:GetTextColor() or DLabel:GetTextStyleColor()``` 
     * @returns The "internal" desired color of the text 
     */
    public GetColor(): table;
    
    /**
     * Returns the content type used to save and restore the content icon in a spawnlist. 
     * @returns The content type, for example "entity" or "weapon". 
     */
    public GetContentType(): string;
    
    /**
     * Returns a table of weapon classes for the content icon with "NPC" content type to be randomly chosen from when user tries to spawn the NPC. 
     * @returns A table of weapon classes to be chosen from when user tries to spawn the NPC. 
     */
    public GetNPCWeapon(): table;
    
    /**
     * Returns the internal "name" for the content icon, usually a class name for an entity. 
     * @returns Internal "name" to be used when user left clicks the icon. 
     */
    public GetSpawnName(): string;
    
    /**
     * A hook for override, by default does nothing. Called when user right clicks on the content icon, you are supposed to open a {{GlobalFunction|DermaMenu}} here with additional options. 
     */
    public OpenMenu(): void;
    
    /**
     * Sets whether the content item is admin only. This makes the icon to display a admin icon in the top left corner of the icon. 
     * @param adminOnly  Whether this content should be admin only or not 
     */
    public SetAdminOnly(adminOnly: boolean): void;
    
    /**
     * Sets the color for the content icon. Currently is not used by the content icon panel. 
     * @param clr  The color to set. See {{Struct|Color}} 
     */
    public SetColor(clr: Color): void;
    
    /**
     * Changes color of label. Alias of {{ClassFunction|DLabel|SetTextColor}}. 
     * @param color  The color to set. Uses the Color structure. 
     * @example
     * 
     * local DLabel = vgui.Create( "DLabel" )
     * DLabel:SetPos( 90, 50 )
     * DLabel:SetColor(Color(255, 0, 0))
     * DLabel:SetText( "Hello world." )
     * DLabel:SizeToContents()
     * 
     * // Creates a label and changes it color to red. 
     */
    public SetColor(color: table): void;
    
    /**
     * Sets the content type used to save and restore the content icon in a spawnlist. 
     * @param type  The content type, for example "entity" or "weapon" 
     */
    public SetContentType(type: string): void;
    
    /**
     * Sets the material to be displayed as the content icon. 
     * @param path  Path to the icon to use. 
     */
    public SetMaterial(path: string): void;
    
    /**
     * Sets the tool tip and the "nice" name to be displayed by the content icon. 
     * @param name  "Nice" name to display. 
     */
    public SetName(name: string): void;
    
    /**
     * Sets the internal name of the panel. 
     * @param name  The new name of the panel. 
     */
    public SetName(name: string): void;
    
    /**
     * Sets a table of weapon classes for the content icon with "NPC" content type to be randomly chosen from when user tries to spawn the NPC. 
     * @param weapons  A table of weapon classes to be chosen from when user tries to spawn the NPC. 
     */
    public SetNPCWeapon(weapons: table): void;
    
    /**
     * Sets the internal "name" for the content icon, usually a class name for an entity. 
     * @param name  Internal "name" to be used when user left clicks the icon. 
     */
    public SetSpawnName(name: string): void;
}

/**
 * A base for all context menu panels ( The ones used for tool options in sandbox ) 
 */
declare class ContextBase extends Panel {
    /**
     * Called by spawnmenu functions (when creating a context menu) to fill this control with data. 
     * @param contextData  A two-membered table:
     * * {{FuncArg|string|convar|The console variable to use. Calls {{ClassFunction|ContextBase|SetConVar}}.}}
     * * {{FuncArg|string|label|The text to display inside the control's label.}} 
     */
    public ControlValues(contextData: table): void;
    
    /**
     * Returns the {{Type|ConVar}} for the panel to change/handle, set by {{ClassFunction|ContextBase|SetConVar}} 
     * @returns The {{Type|ConVar}} for the panel to change. 
     */
    public ConVar(): string;
    
    /**
     * Sets the {{Type|ConVar}} for the panel to change/handle. 
     * @param cvar  The {{Type|ConVar}} for the panel to change. 
     */
    public SetConVar(cvar: string): void;
    
    /**
     * {{Warning|This function does not exist on all panels}}
     * 
     * Sets this panel's convar. When the convar changes this panel will update automatically.
     * 
     * For developer implementation, see {{GlobalFunction|Derma_Install_Convar_Functions}}. 
     * @param convar  The console variable to check. 
     * @example
     * 
     * local checkbox = vgui.Create( "DCheckBoxLabel", myFrame )
     * checkbox:SetConVar( "sv_cheats" )
     * checkbox:SetText( "Enable cheats?" )
     * checkbox:SetPos( 5, 25 )
     * checkbox:SizeToContents()
     * 
     * // Makes a checkbox linked to the '''sv_cheats''' convar. 
     */
    public SetConVar(convar: string): void;
    
    /**
     * You should override this function and use it to check whether your convar value changed. 
     */
    public TestForChanges(): void;
}

/**
 * Retrieves the control panel for a given stool in the Q menu. 
 */
declare namespace controlpanel {
    /**
     * Clears ALL the control panels ( for tools ) 
     */
    function Clear(): void;
    
    /**
     * Returns (or creates if not exists) a controlpanel. 
     * @param name  The name of the panel. 
     * @returns ControlPanel 
     */
    function Get(name: string): Panel;
}

/**
 * Used by the context menu in sandbox.
 * 
 * **Note:**
 * >This panel is only available in Sandbox and Sandbox derived gamemodes! 
 */
declare class ControlPanel extends DForm {
    /**
     * **Deprecated:**
     * >It is recommended to use {{Type|DForm}}'s members instead.
     * 
     * Adds a control to the control panel. 
     * @param type  The control type to add. The complete list is:
     * * header
     * * textbox
     * * label
     * * checkbox/toggle
     * * slider
     * * propselect
     * * matselect
     * * ropematerial
     * * button
     * * numpad
     * * color
     * * combobox
     * * listbox
     * * materialgallery 
     * @param controlinfo  Each control takes their own table structure. You may search "AddControl" on GitHub for examples.
     * 
     * Here is a full list of each type and the table members it requires:
     * 
     * *header
     * **description
     * 
     * *textbox:
     * **label (def: "Untitled")
     * **command
     * 
     * *label:
     * **text
     * 
     * *checkbox, toggle (same thing):
     * **label (def: "Untitled")
     * **command
     * **help (boolean, if true assumes label is a language string ("#tool.toolname.stuff") and adds ".help" at the end)
     * 
     * *slider:
     * **type (optional string, if equals "float" then 2 digits after the decimal will be used, otherwise 0)
     * **label (def: "Untitled")
     * **command
     * **min (def: 0)
     * **max (def: 100)
     * *help (boolean, see above)
     * 
     * *propselect:
     * **(data goes directly to PropSelect's :ControlValues(data))
     * 
     * *matselect:
     * **(data goes directly to MatSelect's :ControlValues(data))
     * 
     * *ropematerial:
     * **convar (notice: NOT called command this time!)
     * 
     * *button:
     * **label / text (if label is missing will use text. Def: "No Label")
     * **command
     * 
     * *numpad:
     * **command
     * **command2
     * **label
     * **label2
     * 
     * *color:
     * **label
     * **red (convar)
     * **green (convar)
     * **blue (convar)
     * **alpha (convar)
     * 
     * *combobox:
     * **menubutton (if doesn't equal "1", becomes a listbox)
     * **folder
     * **options (optional, ha)
     * **cvars (optional)
     * 
     * *listbox:
     * **height (if set, becomes ListView, otherwise is ListBox)
     * **label (def: "unknown")
     * **options (optional)
     * 
     * *materialgallery:
     * **width (def: 32)
     * **height (def: 32)
     * **rows (def: 4)
     * **convar
     * **options 
     */
    public AddControl(type: string, controlinfo: table): void;
}

/**
 * A preset manager, found at the top of almost every default tool's C-menu.
 * 
 * This control only exists in Sandbox derived gamemodes. 
 */
declare class ControlPresets extends Panel {
    /**
     * Adds a convar to be managed by this control. 
     * @param convar  The convar to add. 
     */
    public AddConVar(convar: string): void;
    
    /**
     * Get a list of all Console Variables being managed by this panel. 
     * @returns numbered table of convars 
     */
    public GetConVars(): table;
    
    /**
     * Set the name label text. 
     * @param name  The text to put in the label 
     */
    public SetLabel(name: string): void;
}

/**
 * An object returned by {{GlobalFunction|GetConVar}}. It represents a console variable. See [http://wiki.garrysmod.com/page/ConVars this] page for more information. 
 */
declare class ConVar {
    /**
     * Tries to convert the current string value of a {{Type|ConVar}} to a boolean. 
     * @returns The boolean value of the console variable. If the variable is numeric and not 0, the result will be true. Otherwise the result will be false. 
     */
    public GetBool(): boolean;
    
    /**
     * Returns the default value of the {{Type|ConVar}} 
     * @returns The default value of the console variable. 
     */
    public GetDefault(): string;
    
    /**
     * Attempts to convert the {{Type|ConVar}} value to a float 
     * @returns The float value of the console variable.
     * 
     * If the value cannot be converted to a float, it will return 0. 
     */
    public GetFloat(): number;
    
    /**
     * Returns the help text assigned to that convar. 
     * @returns The help text 
     */
    public GetHelpText(): string;
    
    /**
     * Attempts to convert the {{Type|ConVar}} value to a integer. 
     * @returns The integer value of the console variable.
     * 
     * If it fails to convert to an integer, it will return 0.
     * 
     * All float/decimal values will be rounded down. ( With {{LibraryFunction|math|floor}} ) 
     */
    public GetInt(): number;
    
    /**
     * Returns the name of the {{Type|ConVar}}. 
     * @returns The name of the console variable. 
     */
    public GetName(): string;
    
    /**
     * Returns the current {{Type|ConVar}} value as a string. 
     * @returns The current console variable value as a string. 
     * @example
     * 
     * if GetConVar("gamemode"):GetString() == "sandbox" then
     *     print("Gamemode is sandbox")
     * end
     * 
     * // Will check if the gamemode is sandbox 
     */
    public GetString(): string;
    
    /**
     * Sets a ConVar's value to 1 or 0 based on the input boolean. This can only be ran on ConVars created from within Lua. 
     * @param value  Value to set the ConVar to. 
     */
    public SetBool(value: boolean): void;
    
    /**
     * Sets a ConVar's value to to the input number. This can only be ran on ConVars created from within Lua. 
     * @param value  Value to set the ConVar to. 
     */
    public SetFloat(value: number): void;
    
    /**
     * Sets a ConVar's value to the input number after converting it to an integer. This can only be ran on ConVars created from within Lua. 
     * @param value  Value to set the ConVar to. 
     */
    public SetInt(value: number): void;
    
    /**
     * Sets a ConVar's value to the input string. This can only be ran on ConVars created from within Lua. 
     * @param value  Value to set the ConVar to. 
     */
    public SetString(value: string): void;
}

/**
 * Used to store permanent variables/settings on clients that will persist between servers. They are stored in the cl.db SQLite database located in the root Garry's Mod folder. 
 */
declare namespace cookie {
    /**
     * Deletes a cookie on the client. 
     * @param name  The name of the cookie that you want to delete. 
     */
    function Delete(name: string): void;
    
    /**
     * Gets the value of a cookie on the client as a number. 
     * @param name  The name of the cookie that you want to get. 
     * @param defaultVal [=nil] Value to return if the cookie does not exist. 
     * @returns The cookie value 
     */
    function GetNumber(name: string, defaultVal?: any): number;
    
    /**
     * Gets the value of a cookie on the client as a string. 
     * @param name  The name of the cookie that you want to get. 
     * @param defaultVal [=nil] Value to return if the cookie does not exist. 
     * @returns The cookie value 
     */
    function GetString(name: string, defaultVal?: any): string;
    
    /**
     * Sets the value of a cookie, which is saved automatically by the {{Lib|sql}}.
     * 
     * These are stored in the *.db files - cl.db for clients, mn.db for menu state and sv.db for servers.
     * [[Category:Menu]] 
     * @param key  The name of the cookie that you want to set. 
     * @param value  Value to store in the cookie. 
     */
    function Set(key: string, value: string): void;
}

/**
 * Coroutines are similar to threads, however they do not run simultaneously. They offer a way to split up tasks and dynamically pause & resume functions. 
 */
declare namespace coroutine {
    /**
     * Creates a coroutine of the given function. 
     * @param func  The function for the coroutine to use 
     * @returns coroutine 
     * @example
     * 
     * do
     * 	local function displayer()
     * 		local players
     * 		while true do // endless loop: you must guarantee that coroutine.yield() is always called!
     * 			players = player.GetAll()
     * 			if not next( players ) then // empty table
     * 				coroutine.yield() // guarantee a pause in coroutine even with an empty table
     * 			else
     * 				for _, ply in pairs( players ) do
     * 					coroutine.yield() // We yield here so what you may do next will start immediatly when this for loop finishes.
     * 					if IsValid( ply ) then // The player ply may be disconnected now!
     * 						print( ply:Nick(), "is located at", ply:GetPos() )
     * 					end
     * 				end
     * 				
     * 			end
     * 		end
     * 	end
     * 	
     * 	local co
     * 	hook.Add( "Think", "DisplayPlayersLocation", function()
     * 		if not co or not coroutine.resume( co ) then
     * 			co = coroutine.create( displayer )
     * 			coroutine.resume( co )
     * 		end
     * 	end )
     * end
     * 
     * // Display the location of each player in an endless loop, but only one player per frame. 
     */
    function create(func: Function): thread;
    
    /**
     * Resumes the given coroutine and passes the given vararg to either the function arguments or the {{LibraryFunction|coroutine|yield}} that is inside that function and returns whatever yield is called with the next time or by the final return in the function. 
     * @param coroutine  Coroutine to resume. 
     * @param args  Arguments to be returned by {{LibraryFunction|coroutine|yield}}. 
     * @returns [If the executed thread code had no errors occur within it., If an error occured, this will be a string containing the error message. Otherwise, this will be arguments that were yielded.] 
     * !TupleReturn
     */
    function resume(coroutine: thread, ...args: (any)[]): [boolean, any];
    
    /**
     * Returns the active coroutine or nil if we are not within a coroutine. 
     * @returns coroutine 
     */
    function running(): thread;
    
    /**
     * Returns the status of the coroutine passed to it, the possible statuses are "suspended", "running", and "dead". 
     * @param coroutine  Coroutine to check the status of. 
     * @returns status 
     */
    function status(coroutine: thread): string;
    
    /**
     * Yields the coroutine for the given duration before continuing.
     * 
     * This only works inside a coroutine.
     * 
     * This function uses {{GlobalFunction|CurTime}} instead of {{GlobalFunction|RealTime}}. 
     * @param duration  The number of seconds to wait 
     */
    function wait(duration: number): void;
    
    /**
     * Returns a function which calling is equivalent with calling {{LibraryFunction|coroutine|resume}} with the coroutine and all extra parameters. 
     * @param coroutine  Coroutine to resume. 
     * @returns func 
     */
    function wrap(coroutine: Function): Function;
    
    /**
     * Pauses the active coroutine and passes all additional variables to the call of {{LibraryFunction|coroutine|resume}} that resumed the coroutine last time, and returns all additional variables that were passed to the previous call of resume. 
     * @param returnValue  Arguments to be returned by the last call of {{LibraryFunction|coroutine|resume}} 
     * @returns Arguments that were set previously by {{LibraryFunction|coroutine|resume}} 
     * @example
     * 
     * local co = coroutine.create( function()
     * 	coroutine.yield( "Hello world!" )
     * end )
     * print( coroutine.resume( co ) )
     * 
     * // Demonstrates the use of using varargs as a return value. 
     */
    function yield(...returnValue: (any)[]): any;
}

/**
 * List of all possible functions to manipulate Recipient Filters. Can be created with {{GlobalFunction|RecipientFilter}}. 
 */
declare class CRecipientFilter {
    /**
     * Adds all players to the recipient filter. 
     * @example
     * 
     * function SendMessage()
     * 	local filter = RecipientFilter()
     * 	filter:AddAllPlayers()
     * 	umsg.Start("message",filter)
     * 	umsg.End()
     * end
     * 
     * // Adds all players to a recipient filter, then uses the recipient filter in a usermessage. 
     */
    public AddAllPlayers(): void;
    
    /**
     * Adds all players that are in the same PAS as this position. 
     * @param pos  PAS position that players may be able to see. 
     */
    public AddPAS(pos: Vector): void;
    
    /**
     * Adds a player to the recipient filter 
     * @param Player  Player to add to the recipient filter. 
     */
    public AddPlayer(Player: Player): void;
    
    /**
     * Adds all players that are in the same PVS as this position. 
     * @param Position  PVS position. 
     * @example
     * 
     * function SendMessage()
     * 	local filter = RecipientFilter()
     * 	filter:AddPVS( Vector( 0, 0, 0 ) )
     * 	umsg.Start( "message", filter )
     * 	umsg.End()
     * end
     * 
     * // Adds players that are visible from the origin of the map to a recipient filter, then sends them a message. 
     */
    public AddPVS(Position: Vector): void;
    
    /**
     * Adds all players that are on the given team to the filter. 
     * @param teamid  Team index to add players from. 
     */
    public AddRecipientsByTeam(teamid: number): void;
    
    /**
     * Returns the number of valid players in the recipient filter. 
     * @returns Number of valid players in the recipient filter. 
     * @example
     * 
     * local rf = RecipientFilter()
     * rf:AddAllPlayers()
     * print( rf:GetCount() )
     * PrintTable( rf:GetPlayers() )
     * 
     * // Example usage of the function 
     */
    public GetCount(): number;
    
    /**
     * Returns a table of all valid players currently in the recipient filter. 
     * @returns A table of all valid players currently in the recipient filter. 
     * @example
     * 
     * local rf = RecipientFilter()
     * rf:AddAllPlayers()
     * print( rf:GetCount() )
     * PrintTable( rf:GetPlayers() )
     * 
     * // Example usage of the function 
     */
    public GetPlayers(): table;
    
    /**
     * Removes all players from the recipient filter. 
     */
    public RemoveAllPlayers(): void;
    
    /**
     * Removes all players from the filter that are in Potentially Audible Set for given position. 
     * @param position  The position to test 
     */
    public RemovePAS(position: Vector): void;
    
    /**
     * Removes the player from the recipient filter. 
     * @param Player  The player that should be in the recipient filter if you call this function. 
     * @example
     * 
     * util.AddNetworkString("message")
     * function SendMessage()
     * 	local filter = RecipientFilter()
     * 	filter:AddAllPlayers()
     * 	filter:RemovePlayer(Entity(1))
     * 	net.Start("message")
     * 	net.Send(filter)
     * end
     * 
     * // Adds all players to the recipient filter, then removes the first player and sends a message to the rest. 
     */
    public RemovePlayer(Player: Player): void;
    
    /**
     * Removes all players that can see this PVS from the recipient filter. 
     * @param pos  Position that players may be able to see. 
     * @example
     * 
     * function SendMessage()
     * 	local filter = RecipientFilter()
     * 	filter:AddPVS( Vector( 0,0,0 ) )
     * 	filter:RemovePVS( Vector( 0,10,0 ) )
     * 	umsg.Start( "message", filter )
     * 	umsg.End()
     * end
     * 
     * // Adds the first player object to the recipient filter, then sends him a message. 
     */
    public RemovePVS(pos: Vector): void;
    
    /**
     * Removes all players that are on the given team from the filter. 
     * @param teamid  Team index to remove players from. 
     */
    public RemoveRecipientsByTeam(teamid: number): void;
    
    /**
     * Removes all players that are not on the given team from the filter. 
     * @param teamid  Team index. 
     */
    public RemoveRecipientsNotOnTeam(teamid: number): void;
}

/**
 * '''CSEnt''' is a client-side only entity which can be created with {{GlobalFunction|ClientsideModel}}, {{GlobalFunction|ClientsideRagdoll}}, {{GlobalFunction|ClientsideScene}}, and {{LibraryFunction|ents|CreateClientProp}}.
 * 
 * Its base class is {{Type|Entity}} so it inherits all of the {{Type|Client}} and {{Type|Shared}} functions used by {{Type|Entity}}. 
 */
declare class CSEnt extends Entity {
    /**
     * Removes the clientside entity 
     */
    public Remove(): void;
}

/**
 * CSoundPatch class.
 * 
 * Created with {{GlobalFunction|CreateSound}} 
 * !CustomConstructor CreateSound */
declare class CSoundPatch {
    /**
     * Returns a sound parented to the specified entity.
     * 
     * **Note:**
     * >You can only create one CSoundPatch per audio file, per entity at the same time. 
     * @param targetEnt  The target entity. 
     * @param soundName  The sound to play. 
     * @param filter [=[https://developer.valvesoftware.com/wiki/CRecipientFilter#Derived_classes CPASAttenuationFilter]] A {{Type|CRecipientFilter}} of the players that will have this sound networked to them.
     * 
     * **Note:**
     * >This argument only works serverside. 
     * @example
     * 
     * local LoadedSounds
     * if CLIENT then
     * 	LoadedSounds = {} // this table caches existing CSoundPatches
     * end
     * 
     * local function ReadSound( FileName )
     * 	local sound
     * 	local filter
     * 	if SERVER then
     * 		filter = RecipientFilter()
     * 		filter:AddAllPlayers()
     * 	end
     * 	if SERVER or !LoadedSounds[FileName] then
     * 		// The sound is always re-created serverside because of the RecipientFilter.
     * 		sound = CreateSound( game.GetWorld(), FileName, filter ) // create the new sound, parented to the worldspawn (which always exists)
     * 		if sound then
     * 			sound:SetSoundLevel( 0 ) // play everywhere
     * 			if CLIENT then
     * 				LoadedSounds[FileName] = { sound, filter } // cache the CSoundPatch
     * 			end
     * 		end
     * 	else
     * 		sound = LoadedSounds[FileName][1]
     * 		filter = LoadedSounds[FileName][2]
     * 	end
     * 	if sound then
     * 		if CLIENT then
     * 			sound:Stop() // it won't play again otherwise
     * 		end
     * 		sound:Play()
     * 	end
     * 	return sound // useful if you want to stop the sound yourself
     * end
     * 
     * // When we are ready, we play the sound:
     * ReadSound( "phx/hmetal1.wav" )
     * 
     * // Play a sound everywhere, similar to {{LibraryFunction|surface|PlaySound}} but available clientside and serverside. 
     */
    public constructor(targetEnt: Entity, soundName: string, filter?: CRecipientFilter);
    
    /**
     * Adjust the pitch, alias the speed at which the sound is being played.
     * 
     * This invokes the {{HookFunction|GM|EntityEmitSound}}. 
     * @param pitch  The pitch can range from 0-255. 
     * @param deltaTime [=0] The time to fade from previous to the new pitch. 
     */
    public ChangePitch(pitch: number, deltaTime?: number): void;
    
    /**
     * Adjusts the volume of the sound played.
     * 
     * Appears to only work while the sound is being played. 
     * @param volume  The volume ranges from 0 to 1. 
     * @param deltaTime [=0] Time to fade the volume from previous to new value from. 
     */
    public ChangeVolume(volume: number, deltaTime?: number): void;
    
    /**
     * Fades out the volume of the sound from the current volume to 0 in the given amount of seconds. 
     * @param seconds  Fade time. 
     */
    public FadeOut(seconds: number): void;
    
    /**
     * Returns the DSP ( Digital Signal Processor ) effect for the sound. 
     * @returns The DSP effects of the sound
     * List of DSP's are Pick from the [https://developer.valvesoftware.com/wiki/Dsp_presets here]. 
     */
    public GetDSP(): number;
    
    /**
     * Returns the current pitch. 
     * @returns The current pitch, can range from 0-255. 
     */
    public GetPitch(): number;
    
    /**
     * Returns the current sound level. 
     * @returns The current sound level, see {{Enum|SNDLVL}}. 
     */
    public GetSoundLevel(): SNDLVL;
    
    /**
     * Returns the current volume. 
     * @returns The current volume, ranging from 0 to 1. 
     */
    public GetVolume(): number;
    
    /**
     * Returns whenever the sound is being played. 
     * @returns Is playing or not 
     */
    public IsPlaying(): boolean;
    
    /**
     * Starts to play the sound. 
     * @example
     * 
     * local mysound = CreateSound( "test.wav" )
     * mysound:Play()
     * 
     * // Example usage 
     */
    public Play(): void;
    
    /**
     * Same as {{ClassFunction|CSoundPatch|Play}} but with 2 extra arguments allowing to set volume and pitch directly. 
     * @param volume  The volume ranges from 0 to 1. 
     * @param pitch  The pitch can range from 0-255. 
     */
    public PlayEx(volume: number, pitch: number): void;
    
    /**
     * Sets the DSP ( Digital Signal Processor ) effect for the sound. Similar to {{ClassFunction|Player|SetDSP}} 
     * @param dsp  The DSP effect to set.
     * Pick from the [https://developer.valvesoftware.com/wiki/Dsp_presets list of DSP's] 
     */
    public SetDSP(dsp: number): void;
    
    /**
     * Sets the sound level in decibel. 
     * @param level  The sound level in decibel. See {{Enum|SNDLVL}} 
     */
    public SetSoundLevel(level: SNDLVL): void;
    
    /**
     * Stops the sound from being played.
     * 
     * **Bug [#3260](https://github.com/Facepunch/garrysmod-issues/issues/3260):**
     * >This will not work if the entity attached to this sound patch (specified by {{GlobalFunction|CreateSound}}) is invalid. 
     */
    public Stop(): void;
}

/**
 * A class used to store and modify all the data concerning a damage event.
 * An empty CTakeDamageInfo object can be created with {{GlobalFunction|DamageInfo}}
 * 
 * List of hooks that this object is passed to:
 * * {{HookFunction|ENTITY|OnTakeDamage}}
 * * {{HookFunction|GM|DoPlayerDeath}}
 * * {{HookFunction|GM|EntityTakeDamage}}
 * * {{HookFunction|GM|OnDamagedByExplosion}}
 * * {{HookFunction|GM|ScaleNPCDamage}}
 * * {{HookFunction|GM|ScalePlayerDamage}}
 * * {{HookFunction|NEXTBOT|OnInjured}}
 * * {{HookFunction|NEXTBOT|OnKilled}}
 * * {{HookFunction|NEXTBOT|OnOtherKilled}}
 * 
 * List of functions that use this object:
 * * {{LibraryFunction|util|BlastDamageInfo}}
 * * {{ClassFunction|Entity|TakeDamageInfo}}
 * * {{ClassFunction|Entity|TakePhysicsDamage}}
 * * {{ClassFunction|Entity|DispatchTraceAttack}} 
 */
declare class CTakeDamageInfo {
    /**
     * Increases the damage by damageIncrease. 
     * @param damageIncrease  The damage to add. 
     */
    public AddDamage(damageIncrease: number): void;
    
    /**
     * Returns the ammo type used by the weapon that inflicted the damage. 
     * @returns Ammo type ID 
     */
    public GetAmmoType(): number;
    
    /**
     * Returns the attacker ( character who originated the attack ), for example a player or an NPC that shot the weapon. 
     * @returns The attacker 
     */
    public GetAttacker(): Entity;
    
    /**
     * Returns the initial unmodified by skill level ( {{LibraryFunction|game|GetSkillLevel}} ) damage. 
     * @returns baseDamage 
     */
    public GetBaseDamage(): number;
    
    /**
     * Returns the total damage. 
     * @returns damage 
     */
    public GetDamage(): number;
    
    /**
     * Gets the current bonus damage. 
     * @returns Bonus damage 
     */
    public GetDamageBonus(): number;
    
    /**
     * Gets the custom damage type. This is used by Day of Defeat: Source and Team Fortress 2 for extended damage info, but isn't used in Garry's Mod by default. 
     * @returns The custom damage type 
     */
    public GetDamageCustom(): number;
    
    /**
     * Returns a vector representing the damage force. 
     * @returns The damage force 
     */
    public GetDamageForce(): Vector;
    
    /**
     * Returns the position where the damage was or is going to be applied to. 
     * @returns The damage position 
     */
    public GetDamagePosition(): Vector;
    
    /**
     * Returns a bitflag which indicates the damage type(s) of the damage.
     * 
     * Consider using {{ClassFunction|CTakeDamageInfo|IsDamageType}} instead. Value returned by this function can contain multiple damage types. 
     * @returns Damage type(s), a combination of {{Enum|DMG}} 
     */
    public GetDamageType(): DMG;
    
    /**
     * Returns the inflictor of the damage. This is not necessarily a weapon.
     * 
     * For hitscan weapons this is the weapon.
     * 
     * For projectile weapons this is the projectile.
     * 
     * For a more reliable method of getting the weapon that damaged an entity, use [[CTakeDamageInfo/GetAttacker|GetAttacker]] with [[Player/GetActiveWeapon|GetActiveWeapon]]. 
     * @returns The inflictor 
     */
    public GetInflictor(): Entity;
    
    /**
     * Returns the maximum damage. 
     * @returns maxDmg 
     */
    public GetMaxDamage(): number;
    
    /**
     * Returns the initial, unmodified position where the damage occured. 
     * @returns position 
     */
    public GetReportedPosition(): Vector;
    
    /**
     * Returns true if the damage was caused by a bullet. 
     * @returns isBulletDmg 
     */
    public IsBulletDamage(): boolean;
    
    /**
     * Returns whenever the damageinfo contains the damage type specified. 
     * @param dmgType  Damage type to test. See {{Enum|DMG}}. 
     * @returns Whether this damage contains specified damage type or not 
     */
    public IsDamageType(dmgType: DMG): boolean;
    
    /**
     * Returns whenever the damageinfo contains explosion damage. 
     * @returns isExplDamage 
     */
    public IsExplosionDamage(): boolean;
    
    /**
     * Returns whenever the damageinfo contains fall damage. 
     * @returns isFallDmg 
     */
    public IsFallDamage(): boolean;
    
    /**
     * Scales the damage by the given value. 
     * @param scale  Value to scale the damage with. 
     */
    public ScaleDamage(scale: number): void;
    
    /**
     * Changes the ammo type used by the weapon that inflicted the damage. 
     * @param ammoType  Ammo type ID 
     * @example
     * 
     * local dmginfo = DamageInfo()
     * 
     * dmginfo:SetAmmoType( game.GetAmmoID( 'AR2' ) )
     * 
     * // Creates a new DamageInfo object and sets the ammo that caused the damage to AR2 ammo 
     */
    public SetAmmoType(ammoType: number): void;
    
    /**
     * Sets the attacker ( character who originated the attack ) of the damage, for example a player or an NPC. 
     * @param ent  The entity to be set as the attacker. 
     */
    public SetAttacker(ent: Entity): void;
    
    /**
     * Sets the amount of damage. 
     * @param damage  The value to set the absolute damage to. 
     */
    public SetDamage(damage: number): void;
    
    /**
     * Sets the bonus damage. Bonus damage isn't automatically applied, so this will have no outer effect by default. 
     * @param damage  The extra damage to be added. 
     */
    public SetDamageBonus(damage: number): void;
    
    /**
     * Sets the custom damage type. This is used by Day of Defeat: Source and Team Fortress 2 for extended damage info, but isn't used in Garry's Mod by default. 
     * @param DamageType  Any integer - can be based on your own custom enums. 
     */
    public SetDamageCustom(DamageType: number): void;
    
    /**
     * Sets the directional force of the damage. 
     * @param force  The vector to set the force to. 
     */
    public SetDamageForce(force: Vector): void;
    
    /**
     * Sets the position of where the damage gets applied to. 
     * @param pos  The position where the damage will be applied. 
     */
    public SetDamagePosition(pos: Vector): void;
    
    /**
     * Sets the damage type. 
     * @param type  The damage type, see {{Enum|DMG}}. 
     */
    public SetDamageType(type: DMG): void;
    
    /**
     * Sets the inflictor of the damage for example a weapon.
     * 
     * For hitscan/bullet weapons this should the weapon.
     * 
     * For projectile ( rockets, etc ) weapons this should be the projectile. 
     * @param inflictor  The new inflictor. 
     */
    public SetInflictor(inflictor: Entity): void;
    
    /**
     * Sets the maximum damage the object can cause. 
     * @param maxDamage  Maximum damage value. 
     */
    public SetMaxDamage(maxDamage: number): void;
    
    /**
     * Sets the origin of the damage. 
     * @param pos  The location of where the damage is originating 
     */
    public SetReportedPosition(pos: Vector): void;
    
    /**
     * Subtracts the specified amount from the damage. 
     * @param damage  Value to subtract. 
     */
    public SubtractDamage(damage: number): void;
}

/**
 * A {{Type|DComboBox}} based dropdown menu with build in easy {{Type|ConVar}} support.
 * 
 * This control only exists in Sandbox derived gamemodes. 
 */
declare class CtrlListBox extends DComboBox {

}

/**
 * A class used to store the player inputs, such as mouse movement, view angles, {{Enum|IN}} buttons pressed and analog movement, the data from this class is then transfered to a {{Type|CMoveData}} during actual movement simulation.
 * 
 * Can be modified during {{HookFunction|GM|CreateMove}}, {{HookFunction|GM|StartCommand}} and used in read only with {{HookFunction|GM|SetupMove}} and {{ClassFunction|Player|GetCurrentCommand}}. 
 */
declare class CUserCmd {
    /**
     * Removes all keys from the command.
     * 
     * **Note:**
     * >If you are looking to affect player movement, you may need to use {{ClassFunction|CUserCmd|ClearMovement}} instead of clearing the buttons. 
     */
    public ClearButtons(): void;
    
    /**
     * Clears the movement from the command.
     * 
     * See also {{ClassFunction|CUserCmd|SetForwardMove}}, {{ClassFunction|CUserCmd|SetSideMove}} and  {{ClassFunction|CUserCmd|SetUpMove}}. 
     */
    public ClearMovement(): void;
    
    /**
     * Returns an increasing number representing the index of the user cmd. The value returned is occasionally 0 inside {{HookFunction|GM|CreateMove}}, so it's advised to check for a non-zero value if you wish to get the correct number. 
     * @returns The command number 
     */
    public CommandNumber(): number;
    
    /**
     * Returns a bitflag indicating which buttons are pressed. 
     * @returns Pressed buttons, see {{Enum|IN}} 
     */
    public GetButtons(): IN;
    
    /**
     * The speed the client wishes to move forward with, negative if the clients wants to move backwards. 
     * @returns The desired speed 
     */
    public GetForwardMove(): number;
    
    /**
     * Gets the current impulse from the client, usually 0. 
     * @returns The impulse 
     */
    public GetImpulse(): number;
    
    /**
     * Returns the scroll delta as whole number. 
     * @returns Scroll delta 
     */
    public GetMouseWheel(): number;
    
    /**
     * Returns the delta of the angular horizontal mouse movement of the player. 
     * @returns xDelta 
     */
    public GetMouseX(): number;
    
    /**
     * Returns the delta of the angular vertical mouse movement of the player. 
     * @returns yDelta 
     */
    public GetMouseY(): number;
    
    /**
     * The speed the client wishes to move sideways with, positive if it wants to move right, negative if it wants to move left. 
     * @returns requestSpeed 
     */
    public GetSideMove(): number;
    
    /**
     * The speed the client wishes to move up with, negative if the clients wants to move down. 
     * @returns requestSpeed 
     */
    public GetUpMove(): number;
    
    /**
     * Gets the direction the player is looking in. 
     * @returns requestDir 
     */
    public GetViewAngles(): Angle;
    
    /**
     * When players are not sending usercommands to the server (often due to lag), their last usercommand will be executed multiple times as a backup. This function returns true if that is happening.
     * 
     * This will never return true clientside. 
     * @returns isForced 
     */
    public IsForced(): boolean;
    
    /**
     * Returns true if the specified button(s) is pressed. 
     * @param key  Bitflag representing which button to check, see {{Enum|IN}}. 
     * @returns Is key down or not 
     */
    public KeyDown(key: IN): boolean;
    
    /**
     * Removed a key bit from the current key bitflag. 
     * @param button  Bitflag to be removed from the key bitflag, see {{Enum|IN}}. 
     */
    public RemoveKey(button: IN): void;
    
    /**
     * Forces the associated player to select a weapon. This is used internally in the default HL2 weapon selection HUD.
     * 
     * This may not work immediately if the current command is in prediction. Use {{LibraryFunction|input|SelectWeapon}} to switch the weapon from the client when the next available command can do so.
     * 
     * **Note:**
     * >This is the ideal function to use to create a custom weapon selection HUD, as it allows prediction to run properly for {{HookFunction|WEAPON|Deploy}} and {{HookFunction|GM|PlayerSwitchWeapon}} 
     * @param weapon  The weapon entity to select. 
     */
    public SelectWeapon(weapon: Weapon): void;
    
    /**
     * Sets the buttons as a bitflag. See also {{ClassFunction|CUserCmd|GetButtons}}.
     * 
     * **Note:**
     * >If you are looking to affect player movement, you may need to use {{ClassFunction|CUserCmd|SetForwardMove}} instead of setting the keys. 
     * @param buttons  Bitflag representing which buttons are "down", see {{Enum|IN}}. 
     */
    public SetButtons(buttons: IN): void;
    
    /**
     * Sets speed the client wishes to move forward with, negative if the clients wants to move backwards.
     * 
     * See also {{ClassFunction|CUserCmd|ClearMovement}}, {{ClassFunction|CUserCmd|SetSideMove}} and  {{ClassFunction|CUserCmd|SetUpMove}}. 
     * @param speed  The new speed to request. 
     */
    public SetForwardMove(speed: number): void;
    
    /**
     * Sets the impulse command to be sent to the server.
     * 
     * For example, 101 is an impulse that will give the player all Half-Life 2 weapons with sv_cheats set to 1. Impulse 100 will toggle their flashlight. 
     * @param speed  The impulse to send. 
     */
    public SetImpulse(speed: number): void;
    
    /**
     * Sets the scroll delta. 
     * @param speed  The scroll delta. 
     */
    public SetMouseWheel(speed: number): void;
    
    /**
     * Sets the delta of the angular horizontal mouse movement of the player.
     * 
     * See also {{ClassFunction|CUserCmd|SetMouseY}}. 
     * @param speed  Angular horizontal move delta. 
     */
    public SetMouseX(speed: number): void;
    
    /**
     * Sets the delta of the angular vertical mouse movement of the player.
     * 
     * See also {{ClassFunction|CUserCmd|SetMouseX}}. 
     * @param speed  Angular vertical move delta. 
     */
    public SetMouseY(speed: number): void;
    
    /**
     * Sets speed the client wishes to move sidewards with, positive to move right, negative to move left.
     * 
     * See also {{ClassFunction|CUserCmd|SetForwardMove}} and  {{ClassFunction|CUserCmd|SetUpMove}}. 
     * @param speed  The new speed to request. 
     */
    public SetSideMove(speed: number): void;
    
    /**
     * Sets speed the client wishes to move upwards with, negative to move down.
     * 
     * See also {{ClassFunction|CUserCmd|SetSideMove}} and  {{ClassFunction|CUserCmd|SetForwardMove}}. 
     * @param speed  The new speed to request. 
     */
    public SetUpMove(speed: number): void;
    
    /**
     * Sets the direction the client wants to move in.
     * 
     * **Note:**
     * >The pitch (vertical) angle should be clamped to +/- 89&deg; to prevent the player's view from glitching. 
     * @param viewAngle  New view angles. 
     * @example
     * 
     * hook.Add("InputMouseApply", "LockToPitchOnly", function( ccmd, x, y, angle )
     * 	// By leaving angle.roll and angle.yaw alone, we effectively lock them
     * 	angle.pitch = math.Clamp( angle.pitch + y / 50, -89, 89 )
     * 	ccmd:SetViewAngles( angle )
     * 	return true
     * end)
     * 
     * // Locks the player's view to only vertical movement. 
     */
    public SetViewAngles(viewAngle: Angle): void;
    
    /**
     * Returns tick count since joining the server.
     * 
     * **Note:**
     * >This will always return 0 for bots.
     * 
     * **Note:**
     * >Returns 0 clientside during prediction calls. If you are trying to use CUserCmd:Set*() on the client in a movement or command hook, keep doing so till TickCount returns a non-zero number to maintain prediction. 
     * @returns The amount of ticks passed since joining the server. 
     */
    public TickCount(): number;
}

/**
 * The cvars library allows you to control what happens when a cvar (console variable) is changed. 
 */
declare namespace cvars {
    /**
     * Adds a callback to be called when the named convar changes.
     * 
     * **Bug [#1440](https://github.com/Facepunch/garrysmod-issues/issues/1440):**
     * >This does not callback convars in the menu state.
     * 
     * **Bug [#3503](https://github.com/Facepunch/garrysmod-issues/issues/3503):**
     * >This does not callback all convars. 
     * @param name  The name of the convar to add the change callback to. 
     * @param callback  The function to be called when the convar changes. The arguments passed are:
     * * {{FuncArg|string|convar|The name of the convar.}}
     * * {{FuncArg|string|oldValue|The old value of the convar.}}
     * * {{FuncArg|string|newValue|The new value of the convar.}} 
     * @param identifier [=nil] If set, you will be able to remove the callback using {{LibraryFunction|cvars|RemoveChangeCallback}}. 
     * @example
     * 
     * cvars.AddChangeCallback("convar name", function(convar_name, value_old, value_new)
     *     print(convar_name, value_old, value_new)
     * end)
     * 
     * // Called when convar changes. 
     */
    function AddChangeCallback(name: string, callback: Function, identifier?: string): void;
    
    /**
     * Retrieves console variable as a boolean. 
     * @param cvar  Name of console variable 
     * @param defaultVal [=false] The value to return if the console variable does not exist 
     * @returns Retrieved value 
     */
    function Bool(cvar: string, defaultVal?: boolean): boolean;
    
    /**
     * Returns a table of the given {{Type|ConVar}}s callbacks. 
     * @param name  The name of the {{Type|ConVar}}. 
     * @param createIfNotFound [=false] Whether or not to create the internal callback table for given {{Type|ConVar}} if there isn't one yet.
     * 
     * This argument is internal and should not be used. 
     * @returns A table of the convar's callbacks, or nil if the convar doesn't exist. 
     */
    function GetConVarCallbacks(name: string, createIfNotFound?: ConVar): table;
    
    /**
     * Retrieves console variable as a number. 
     * @param cvar  Name of console variable 
     * @param defaultVal [=nil] The value to return if the console variable does not exist 
     * @returns Retrieved value 
     */
    function Number(cvar: string, defaultVal?: any): number;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called by the engine when a convar value changes. 
     * @param name  Convar name 
     * @param oldVal  The old value of the convar 
     * @param newVal  The new value of the convar 
     */
    function OnConVarChanged(name: string, oldVal: string, newVal: string): void;
    
    /**
     * Removes a callback for a convar using the the callback's identifier. The identifier should be the third argument specified for {{LibraryFunction|cvars|AddChangeCallback}}. 
     * @param name  The name of the convar to remove the callback from. 
     * @param indentifier  The callback's identifier. 
     */
    function RemoveChangeCallback(name: string, indentifier: string): void;
    
    /**
     * Retrieves console variable as a string. 
     * @param cvar  Name of console variable 
     * @param defaultVal [=nil] The value to return if the console variable does not exist 
     * @returns Retrieved value 
     */
    function String(cvar: string, defaultVal?: any): string;
}

/**
 * A derivative of the DModelPanel in which the user may modify the perspective of the model with their mouse and keyboard by clicking and dragging.
 * 
 * The keyboard keys {{Key|W}} {{Key|S}} {{Key|A}} {{Key|D}} {{Key|Up}} {{Key|Down}} {{Key|Left}} {{Key|Right}} {{Key|Space}} and {{Key|Ctrl}} can be used when the right mouse is held down, with {{Key|Shift}} acting as a speed multiplier. When the left mouse is used, the Shift key holds the current ''y'' angle steady.
 * 
 * This is used by {{Type|IconEditor}} for modifying spawn icons. 
 * @example
 * 
 * local AdjustableModelPanel = vgui.Create( "DAdjustableModelPanel" )
 * AdjustableModelPanel:SetPos( 10, 10 )
 * AdjustableModelPanel:SetSize( 280, 280 )
 * AdjustableModelPanel:SetLookAt( Vector( 0, 0, 0 ) )
 * AdjustableModelPanel:SetModel( "models/props_borealis/bluebarrel001.mdl" )
 * 
 * // Creates an Adjustable Model Panel 
 */
declare class DAdjustableModelPanel extends DModelPanel {
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Used by the panel to perform mouse capture operations when adjusting the model. 
     */
    public CaptureMouse(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Used to adjust the perspective in the model panel via the keyboard, when the right mouse button is used. 
     */
    public FirstPersonControls(): void;
    
    /**
     * Gets whether mouse and keyboard-based adjustment of the perspective has been enabled. See {{ClassFunction|DAdjustableModelPanel|SetFirstPerson}} for more information. 
     * @returns Whether first person controls are enabled. See {{ClassFunction|DAdjustableModelPanel|FirstPersonControls}}. 
     */
    public GetFirstPerson(): boolean;
    
    /**
     * Enables mouse and keyboard-based adjustment of the perspective.
     * 
     * This is set to ''true'' automatically each time mouse capture is enabled, and hence doesn't serve as a usable setting, other than to disable this functionality after the {{HookFunction|PANEL|OnMousePressed}} event. 
     * @param enable  Whether to enable/disable first person controls. See {{ClassFunction|DAdjustableModelPanel|FirstPersonControls}}. 
     */
    public SetFirstPerson(enable: boolean): void;
}

/**
 * A bar to select the opacity (alpha level) of a color. 
 * @example
 * 
 * local DAlphaBar = vgui.Create( "DAlphaBar" )
 * DAlphaBar:SetPos( 20, 30 )
 * DAlphaBar:SetSize( 25, 125 )
 * DAlphaBar:SetValue( 0.25 )
 * DAlphaBar.OnChange = function( newvalue )
 * 	print( "DAlphaBar value changed to " .. newvalue )
 * end
 * 
 * // Creates a DAlphaBar and sets its value to 25%. 
 */
declare class DAlphaBar extends DPanel {
    /**
     * Returns the base color of the alpha bar. This is the color for which the alpha channel is being modified. 
     * @returns The current base color. 
     */
    public GetBarColor(): table;
    
    /**
     * Returns the alpha value of the alpha bar. 
     * @returns The current alpha value. 
     */
    public GetValue(): number;
    
    /**
     * Returns the value the panel holds.
     * 
     * In engine is only implemented for {{Type|CheckButton}}, {{Type|Label}} and {{Type|TextEntry}} as a string and for those elements has a hard coded limit of 8092 characters. 
     * @returns The value the panel holds. 
     * @example
     * 
     * local TextEntry = vgui.Create( "TextEntry" )
     * TextEntry:SetText( "Hello world!" )
     * print( TextEntry:GetValue() )
     * 
     * // Returns the string typed in a TextEntry. 
     */
    public GetValue(): any;
    
    /**
     * Called when user changes the desired alpha value with the control. 
     * @param alpha  The new alpha value 
     */
    public OnChange(alpha: number): void;
    
    /**
     * Sets the base color of the alpha bar. This is the color for which the alpha channel is being modified. 
     * @param clr  The new {{Struct|Color}} to set. See {{GlobalFunction|Color}}. 
     */
    public SetBarColor(clr: Color): void;
    
    /**
     * Sets the alpha value or the alpha bar. 
     * @param alpha  The new alpha value to set 
     */
    public SetValue(alpha: number): void;
}

/**
 * Input which can bind a command to a key. Used for binding inputs and outputs of TOOLs. 
 * @example
 * 
 * local frame = vgui.Create("DFrame")
 * frame:SetSize(250,100)
 * frame:Center()
 * frame:SetTitle("DBinder Example")
 * frame:MakePopup()
 * 
 * local binder = vgui.Create( "DBinder", frame )
 * binder:SetSize( 200, 50 )
 * binder:SetPos( 25, 35 )
 * 
 * function binder:OnChange( num )
 * 	LocalPlayer():ChatPrint("New bound key: "..input.GetKeyName( num ))
 * end
 * 
 * // Creates a DBinder that prints to the player's chat when a new key is bound. 
 */
declare class DBinder extends DButton {
    /**
     * Gets the code of the key currently bound by the DBinder. Same as {{ClassFunction|DBinder|GetValue}}. 
     * @returns The key code of the bound key. See {{Enum|KEY}}. 
     */
    public GetSelectedNumber(): KEY;
    
    /**
     * Gets the code of the key currently bound by the DBinder. Same as {{ClassFunction|DBinder|GetSelectedNumber}}. 
     * @returns The key code of the bound key. See {{Enum|KEY}}. 
     */
    public GetValue(): KEY;
    
    /**
     * Returns the value the panel holds.
     * 
     * In engine is only implemented for {{Type|CheckButton}}, {{Type|Label}} and {{Type|TextEntry}} as a string and for those elements has a hard coded limit of 8092 characters. 
     * @returns The value the panel holds. 
     * @example
     * 
     * local TextEntry = vgui.Create( "TextEntry" )
     * TextEntry:SetText( "Hello world!" )
     * print( TextEntry:GetValue() )
     * 
     * // Returns the string typed in a TextEntry. 
     */
    public GetValue(): any;
    
    /**
     * Called when the player selects a new bind. 
     * @param iNum  The new bound key. See {{LibraryFunction|input|GetKeyName}}. 
     */
    public OnChange(iNum: number): void;
    
    /**
     * Sets the current key bound by the {{Type|DBinder}}, and updates the button's text as well as the {{Type|ConVar}}. 
     * @param keyCode  The key code of the key to bind. See {{Enum|KEY}}. 
     */
    public SetSelectedNumber(keyCode: KEY): void;
    
    /**
     * Alias of {{ClassFunction|DBinder|SetSelected}}. 
     * @param keyCode  The key code of the key to bind. See {{Enum|KEY}}. 
     */
    public SetValue(keyCode: KEY): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Used to set the text of the DBinder to the current key binding, or ''NONE''. 
     */
    public UpdateText(): void;
}

/**
 * A transparent gray speech bubble panel made up of a rounded box and point coming from the bottom. 
 * @example
 * 
 * //Background panel
 * BGPanel = vgui.Create("DPanel")
 * BGPanel:SetSize(300, 170)
 * BGPanel:Center()
 * BGPanel:SetDrawBackground(false)
 * 
 * // The bubble container
 * local DBubbleContainer = vgui.Create("DBubbleContainer", BGPanel)
 * 
 * // Set the dialog point 50 units from the left and make the entire bubble 280x150 pixels.
 * DBubbleContainer:OpenForPos(50, 0, 280, 150)
 * 
 * // Creates a bubble container panel in the middle of the screen. The background {{Type|DPanel}} is used to allow better control of the dialog point position.@example
 * 
 * // Image of Bill
 * local dimg = vgui.Create("DImage")
 * dimg:SetPos(0, ScrH()-512)
 * dimg:SetImage("spawnicons/models/survivors/survivor_namvet_128.png")
 * dimg:SizeToContents()
 * 
 * // Determine placement of bubble container based on image dimensions
 * local dimg_x, dimg_y = dimg:GetPos()
 * local dimg_w, dimg_h = dimg:GetSize()
 * 
 * dimg_x = dimg_x + dimg_w/2
 * dimg_y = dimg_y + dimg_h/2.5
 * 
 * // Bubble container size
 * local bubble_w, bubble_h = 150, 100
 * 
 * // Create bubble container
 * local bubble = vgui.Create("DBubbleContainer")
 * 
 * // Open it over Bill image
 * bubble:OpenForPos(dimg_x, dimg_y+bubble_h-32, bubble_w, bubble_h)
 * 
 * // Add text to bubble
 * local lbl = vgui.Create("DLabel", bubble)
 * lbl:SetPos(5, 5)
 * lbl:SetSize(150, 50)
 * lbl:SetWrap(true)
 * lbl:SetFont("GModNotify")
 * lbl:SetText("Does this example get the point across?")
 * lbl:SetDark(true)
 * 
 * // Creates a panel with Bill from Left 4 Dead talking through a speech bubble. 
 */
declare class DBubbleContainer extends DPanel {
    /**
     * Sets the speech bubble position and size along with the dialog point position. 
     * @param x  The x position of the dialog point. If this is set to a value greater than half of the set width, the entire bubble container will be moved in addition to the dialog point. 
     * @param y  The y position of the bubble container. Has no effect unless set to a value greater than the set height + 64 pixels. 
     * @param w  The width of the bubble container. 
     * @param h  The height of the bubble container. 
     * @example
     * 
     * // Length and width of background panel
     * local size = 200
     * 		
     * // Background panel
     * BGPanel = vgui.Create("DPanel")
     * BGPanel:SetSize(size, size)
     * BGPanel:Center()
     * 
     * local bubble1 = vgui.Create("DBubbleContainer", BGPanel)
     * 
     * // x = 100 (Set pointer in the middle of the speech bubble)
     * // y = 0 (Don't adjust height)
     * // w = 180 (20 pixel right margin)
     * // h = 184 (16 pixel bottom margin)
     * bubble1:OpenForPos(size/2, 0, size-20, size-16)
     * 
     * // Creates a bubble container that properly fits a 200x200 background panel. 
     */
    public OpenForPos(x: number, y: number, w: number, h: number): void;
}

/**
 * A standard Derma button.
 * 
 * By default, a {{Type|DButton}} is 22px tall. 
 * @example
 * 
 * local frame = vgui.Create( "DFrame" )
 * frame:SetSize( 300, 250 )
 * frame:Center()
 * frame:MakePopup()
 * 
 * local DermaButton = vgui.Create( "DButton", frame ) // Create the button and parent it to the frame
 * DermaButton:SetText( "Say hi" )					// Set the text on the button
 * DermaButton:SetPos( 25, 50 )					// Set the position on the frame
 * DermaButton:SetSize( 250, 30 )					// Set the size
 * DermaButton.DoClick = function()				// A custom function run when clicked ( note the . instead of : )
 * 	RunConsoleCommand( "say", "Hi" )			// Run the console command "say hi" when you click it ( command, args )
 * end
 * 
 * // The DButton is exactly what you think it is - a button! 
 */
declare class DButton extends DLabel {
    /**
     * Called when the label is left clicked (on key release) by the player.
     * 
     * This will be called after {{ClassFunction|DLabel|OnDepressed}} and {{ClassFunction|DLabel|OnReleased}}.
     * 
     * This can be overridden; by default, it calls {{ClassFunction|DLabel|Toggle}}.
     * 
     * See also {{ClassFunction|DLabel|DoRightClick}}, {{ClassFunction|DLabel|DoMiddleClick}} and {{ClassFunction|DLabel|DoDoubleClick}}.
     * 
     * [[Category:DButton]] 
     * @example
     * 
     * local lbl = vgui.Create( "DLabel" ) // Creates our label
     * lbl:SetFont( "DermaLarge" )
     * lbl:SetText( "Click me!" )
     * lbl:SizeToContents()
     * lbl:Center()
     * lbl:SetMouseInputEnabled( true ) // We must accept mouse input
     * function lbl:DoClick() // Defines what should happen when the label is clicked
     * 	print("I was clicked!")
     * 	self:Remove()
     * end
     * 
     * // Creates a label in the center of the screen, that prints ''I was clicked!'' to the console and disappears when clicked. 
     */
    public DoClick(): void;
    
    /**
     * Called when the label is left clicked (on key release) by the player.
     * 
     * This will be called after {{ClassFunction|DLabel|OnDepressed}} and {{ClassFunction|DLabel|OnReleased}}.
     * 
     * This can be overridden; by default, it calls {{ClassFunction|DLabel|Toggle}}.
     * 
     * See also {{ClassFunction|DLabel|DoRightClick}}, {{ClassFunction|DLabel|DoMiddleClick}} and {{ClassFunction|DLabel|DoDoubleClick}}.
     * 
     * [[Category:DButton]] 
     * @example
     * 
     * local lbl = vgui.Create( "DLabel" ) // Creates our label
     * lbl:SetFont( "DermaLarge" )
     * lbl:SetText( "Click me!" )
     * lbl:SizeToContents()
     * lbl:Center()
     * lbl:SetMouseInputEnabled( true ) // We must accept mouse input
     * function lbl:DoClick() // Defines what should happen when the label is clicked
     * 	print("I was clicked!")
     * 	self:Remove()
     * end
     * 
     * // Creates a label in the center of the screen, that prints ''I was clicked!'' to the console and disappears when clicked. 
     */
    public DoClick(): void;
    
    /**
     * Called when the label is middle mouse (Mouse wheel, also known as mouse 3) clicked (on key release) by the player.
     * 
     * This will be called after {{ClassFunction|DLabel|OnDepressed}} and {{ClassFunction|DLabel|OnReleased}}.
     * 
     * See also {{ClassFunction|DLabel|DoClick}}, {{ClassFunction|DLabel|DoRightClick}} and {{ClassFunction|DLabel|DoDoubleClick}}.
     * 
     * [[Category:DButton]] 
     */
    public DoMiddleClick(): void;
    
    /**
     * Called when the label is middle mouse (Mouse wheel, also known as mouse 3) clicked (on key release) by the player.
     * 
     * This will be called after {{ClassFunction|DLabel|OnDepressed}} and {{ClassFunction|DLabel|OnReleased}}.
     * 
     * See also {{ClassFunction|DLabel|DoClick}}, {{ClassFunction|DLabel|DoRightClick}} and {{ClassFunction|DLabel|DoDoubleClick}}.
     * 
     * [[Category:DButton]] 
     */
    public DoMiddleClick(): void;
    
    /**
     * Called when the label is right clicked (on key release) by the player.
     * 
     * This will be called after {{ClassFunction|DLabel|OnDepressed}} and {{ClassFunction|DLabel|OnReleased}}.
     * 
     * See also {{ClassFunction|DLabel|DoClick}}, {{ClassFunction|DLabel|DoMiddleClick}} and {{ClassFunction|DLabel|DoDoubleClick}}.
     * 
     * [[Category:DButton]] 
     * @example
     * 
     * local lbl = vgui.Create( "DLabel" )
     * lbl:SetFont( "DermaLarge" )
     * lbl:SetText( "Click me!" )
     * lbl:SizeToContents()
     * lbl:Center()
     * lbl:SetMouseInputEnabled( true )
     * function lbl:DoRightClick()
     * 	print("I was right clicked!")
     * 	self:Remove()
     * end
     * 
     * // Creates a label in the center of the screen, that prints ''I was right clicked!'' to the console and disappears when right clicked. 
     */
    public DoRightClick(): void;
    
    /**
     * Called when the label is right clicked (on key release) by the player.
     * 
     * This will be called after {{ClassFunction|DLabel|OnDepressed}} and {{ClassFunction|DLabel|OnReleased}}.
     * 
     * See also {{ClassFunction|DLabel|DoClick}}, {{ClassFunction|DLabel|DoMiddleClick}} and {{ClassFunction|DLabel|DoDoubleClick}}.
     * 
     * [[Category:DButton]] 
     * @example
     * 
     * local lbl = vgui.Create( "DLabel" )
     * lbl:SetFont( "DermaLarge" )
     * lbl:SetText( "Click me!" )
     * lbl:SizeToContents()
     * lbl:Center()
     * lbl:SetMouseInputEnabled( true )
     * function lbl:DoRightClick()
     * 	print("I was right clicked!")
     * 	self:Remove()
     * end
     * 
     * // Creates a label in the center of the screen, that prints ''I was right clicked!'' to the console and disappears when right clicked. 
     */
    public DoRightClick(): void;
    
    /**
     * **Deprecated!**
     * 
     * Returns value set by {{ClassFunction|DButton|SetDrawBorder}}. See that page for more info. 
     * @returns value set by {{ClassFunction|DButton|SetDrawBorder}}. 
     */
    public GetDrawBorder(): boolean;
    
    /**
     * Returns the name of the font that the panel renders its text with.
     * 
     * This is the same font name set with {{ClassFunction|Panel|SetFontInternal}}. 
     * @returns fontName 
     */
    public GetFont(): string;
    
    /**
     * [[Category:DButton]] Returns the current font of the DLabel. This is set with {{ClassFunction|DLabel|SetFont}}. 
     * @returns The name of the font in use. 
     */
    public GetFont(): string;
    
    /**
     * [[Category:DButton]] Returns the current font of the DLabel. This is set with {{ClassFunction|DLabel|SetFont}}. 
     * @returns The name of the font in use. 
     */
    public GetFont(): string;
    
    /**
     * Returns true if the DButton is currently depressed (a user is clicking on it). 
     * @returns Whether or not the button is depressed. 
     */
    public IsDown(): boolean;
    
    /**
     * Sets a console command to be called when the button is clicked.
     * 
     * This overrides the button's ''DoClick'' method. 
     * @param command  The console command to be called. 
     * @param args  The arguments for the command. 
     * @example
     * 
     * local button = vgui.Create( "DButton" )
     * button:SetSize( 100, 35 )
     * button:SetText( "Say your nickname" )
     * button:Center()
     * button:MakePopup()
     * button:SetConsoleCommand( "say", LocalPlayer():Nick() )
     * 
     * // Creates a button that makes the player say their name. 
     */
    public SetConsoleCommand(command: string, args: string): void;
    
    /**
     * **Deprecated:**
     * >Use {{ClassFunction|Panel|SetEnabled}} instead.
     * 
     * Sets the disabled state of the {{Type|DLabel}}.
     * 
     * When disabled, the label does not respond to click, toggle or drag & drop actions. 
     * @param disable  ''true'' to disable the DLabel, ''false'' to enable it. 
     */
    public SetDisabled(disable: boolean): void;
    
    /**
     * **Deprecated:**
     * >Use {{ClassFunction|DButton|SetEnabled}} instead
     * 
     * Sets whether or not the DButton is disabled.
     * 
     * When disabled, the button is ''greyed out'' and cannot be clicked. 
     * @param disable  {{TrueFalse|Enable the button|Disable the button}} 
     */
    public SetDisabled(disable: boolean): void;
    
    /**
     * **Deprecated!**
     * 
     * Does absolutely nothing at all. Default value is automatically set to true. 
     * @param draw  Does nothing. 
     */
    public SetDrawBorder(draw: boolean): void;
    
    /**
     * Sets whether or not the DButton is enabled.
     * 
     * This performs the same function as {{ClassFunction|DButton|SetDisabled}}. It overrides {{ClassFunction|Panel|SetEnabled}}. 
     * @param enable  ''true'' to enable the button, ''false'' to disable it. 
     */
    public SetEnabled(enable: boolean): void;
    
    /**
     * Sets the enabled state of a disable-able panel object, such as a {{Type|DButton}} or {{Type|DTextEntry}}.
     * 
     * See {{ClassFunction|Panel|IsEnabled}} for a function that retrieves the "enabled" state of a panel. 
     * @param enable  Whether to enable or disable the panel object. 
     */
    public SetEnabled(enable: boolean): void;
    
    /**
     * [[Category:DButton]] Sets the font of the label. 
     * @param fontName  The name of the font.
     * 
     * See [[Default_Fonts|here]] for a list of existing fonts.
     * Alternatively, use {{LibraryFunction|surface|CreateFont}} to create your own custom font. 
     */
    public SetFont(fontName: string): void;
    
    /**
     * [[Category:DButton]] Sets the font of the label. 
     * @param fontName  The name of the font.
     * 
     * See [[Default_Fonts|here]] for a list of existing fonts.
     * Alternatively, use {{LibraryFunction|surface|CreateFont}} to create your own custom font. 
     */
    public SetFont(fontName: string): void;
    
    /**
     * Sets an image to be displayed as the button's background. Alias of {{ClassFunction|DButton|SetImage}} 
     * @param img [=nil] The image file to use, relative to ''/materials''. If this is nil, the image background is removed. 
     */
    public SetIcon(img?: string): void;
    
    /**
     * Sets an image to be displayed as the button's background. 
     * @param img [=nil] The image file to use, relative to ''/materials''. If this is nil, the image background is removed. 
     */
    public SetImage(img?: string): void;
    
    /**
     * A hook called from within {{Type|DLabel}}'s {{HookFunction|PANEL|ApplySchemeSettings}} to determine the color of the text on display. 
     * @param skin  A table supposed to contain the color values listed above. 
     */
    public UpdateColours(skin: table): void;
    
    /**
     * A hook called from within {{ClassFunction|DLabel|ApplySchemeSettings}} to determine the color of the text on display. 
     * @param skin  A table supposed to contain the color values listed above. 
     */
    public UpdateColours(skin: table): void;
}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * Used by {{Type|DCollapsibleCategory}} 
 */
declare class DCategoryHeader extends DButton {

}

/**
 * A host for multiple {{Type|DCollapsibleCategory}} panels. As the name suggests, each one of them can be collapsed or expanded on demand by the user. 
 * @example
 * 
 * local frame = vgui.Create( "DFrame" )
 * frame:SetSize( 500, 500 )
 * frame:Center()
 * frame:MakePopup()
 * 
 * local CatList = vgui.Create( "DCategoryList", frame )
 * CatList:Dock( FILL )
 * 
 * local Cat = CatList:Add( "Test category with text contents" )
 * Cat:Add( "Item 1" )
 * local button = Cat:Add( "Item 2" )
 * button.DoClick = function()
 * 	print( "Item 2 was clicked." )
 * end
 * 
 * // The contents can be any panel, even a DPanelList
 * local Cat2 = CatList:Add( "Test category with panel contents" )
 * Cat2:SetTall( 100 )
 * 
 * local Contents = vgui.Create( "DButton" )
 * Contents:SetText( "This is the content of the category" )
 * Cat2:SetContents( Contents )
 * 
 * CatList:InvalidateLayout( true )
 * 
 * // Creates a DCategoryList with a category and a DFrame, as seen above. 
 */
declare class DCategoryList extends DScrollPanel {
    /**
     * Adds a {{Type|DCollapsibleCategory}} to the list. 
     * @param categoryName  The name of the category to add. 
     * @returns The created {{Type|DCollapsibleCategory}} 
     */
    public Add(categoryName: string): DCollapsibleCategory;
    
    /**
     * Adds the specified object to the panel.
     * 
     * **Bug [#1482](https://github.com/Facepunch/garrysmod-issues/issues/1482):**
     * >Creating a DFrame or a panel that inherits from DFrame will not drag/resize correctly when created through this function. 
     * @param object  The panel to be added (parented). Can also be:
     * * {{FuncArg|string|Class Name|creates panel with the specified name and adds it to the panel.}}
     * * {{FuncArg|table|PANEL table|creates a panel from table and adds it to the panel.}} 
     * @returns New panel 
     */
    public Add(object: Panel): Panel;
    
    /**
     * Adds an element to the list. 
     * @param element  VGUI element to add to the list. 
     */
    public AddItem(element: Panel): void;
    
    /**
     * Parents the passed panel to the DScrollPanel's canvas. 
     * @param pnl  The panel to add. 
     */
    public AddItem(pnl: Panel): void;
    
    /**
     * Calls {{ClassFunction|Panel|UnselectAll}} on all child elements, if they have it. 
     */
    public UnselectAll(): void;
    
    /**
     * Recursively deselects this panel object and all of its children. This will cascade to all child objects at every level below the parent. 
     */
    public UnselectAll(): void;
}

/**
 * The DCheckBox is a checkbox. It allows you to get a boolean value from the user (true/false - yes/no) 
 * @example
 * 
 * local DermaCheckbox = vgui.Create("DCheckBox")// Create the checkbox
 * DermaCheckbox:SetPos(25, 50)// Set the position
 * DermaCheckbox:SetValue(0)// Initial value (will determine whether the box is ticked too)
 * 
 * // Creates a DCheckBox and sets its initial value. 
 */
declare class DCheckBox extends DButton {
    /**
     * Gets the checked state of the checkbox. 
     * @returns Whether the box is checked or not. 
     */
    public GetChecked(): boolean;
    
    /**
     * Returns whether the state of the checkbox is being edited. This means whether the user is currently clicking (mouse-down) on the checkbox, and applies to both the left and right mouse buttons. 
     * @returns Whether the checkbox is being clicked. 
     */
    public IsEditing(): boolean;
    
    /**
     * Called when the "checked" state is changed. 
     * @param bVal  Whether the CheckBox is checked or not. 
     * @example
     * 
     * function DCheckBox:OnChange(bVal)
     * 	if (bVal) then
     * 		print("Checked!")
     * 	else
     * 		print("Unchecked!")
     * 	end
     * end
     * 
     * // Creates a metamethod on the DCheckBox class to print any changes to the console. 
     */
    public OnChange(bVal: boolean): void;
    
    /**
     * Sets the checked state of the checkbox. Does not call the checkbox's {{ClassFunction|DCheckBox|OnChange}} and {{ClassFunction|Panel|ConVarChanged}} methods, unlike {{ClassFunction|DCheckBox|SetValue}}. 
     * @param checked  Whether the box should be checked or not. 
     */
    public SetChecked(checked: boolean): void;
    
    /**
     * Sets the checked state of the checkbox, and calls the checkbox's {{ClassFunction|DCheckBox|OnChange}} and {{ClassFunction|Panel|ConVarChanged}} methods. 
     * @param checked  Whether the box should be checked or not. 
     */
    public SetValue(checked: boolean): void;
    
    /**
     * Toggles the checked state of the checkbox, and calls the checkbox's {{ClassFunction|DCheckBox|OnChange}} and {{ClassFunction|Panel|ConVarChanged}} methods. This is called by {{ClassFunction|DCheckBox|DoClick}}. 
     */
    public Toggle(): void;
    
    /**
     * Toggles the label's state. This can be set and retrieved with {{ClassFunction|DLabel|SetToggle}} and {{ClassFunction|DLabel|GetToggle}}.
     * 
     * In order to use toggle functionality, you must first call {{ClassFunction|DLabel|SetIsToggle}} with ''true'', as it is disabled by default. 
     */
    public Toggle(): void;
}

/**
 * The '''DCheckBoxLabel''' is a {{Type|DCheckBox}} with a {{Type|DLabel}} next to it. It allows you to get a boolean value from the user (true/false - yes/no) 
 * @example
 * 
 * local DermaCheckbox = vgui.Create("DCheckBoxLabel") // Create the checkbox
 * DermaCheckbox:SetParent(DermaPanel)
 * DermaCheckbox:SetPos(25, 50)                        // Set the position
 * DermaCheckbox:SetText("God Mode")                   // Set the text next to the box
 * DermaCheckbox:SetConVar("sbox_godmode")             // Change a ConVar when the box it ticked/unticked
 * DermaCheckbox:SetValue(0)             // Initial value (will determine whether the box is ticked too)
 * DermaCheckbox:SizeToContents()                      // Make its size the same as the contents
 * 
 * // Creates a DCheckBoxLabel, ties it to a convar, and sets its initial value. 
 */
declare class DCheckBoxLabel extends DPanel {
    /**
     * Gets the checked state of the checkbox. This calls the checkbox's {{ClassFunction|DCheckBox|GetChecked}} function. 
     * @returns Whether the box is checked or not. 
     */
    public GetChecked(): boolean;
    
    /**
     * Gets the indentation of the element on the X axis. 
     * @returns How much the content is moved to the right in pixels 
     */
    public GetIndent(): number;
    
    /**
     * Called when the "checked" state is changed. 
     * @param bVal  Whether the checkbox is checked or unchecked. 
     * @example
     * 
     * local Frame = vgui.Create( "DFrame" )
     * Frame:SetSize( 300, 100 )
     * Frame:SetPos( 200, 200 )
     * 
     * local LabelBox = vgui.Create( "DCheckBoxLabel", Frame )
     * LabelBox:SetPos( 10, 40 )
     * LabelBox:SetText( "This is a DLabel" )
     * function LabelBox:OnChange( val )
     * 	if val then
     * 		print( "The box has been ticked!" )
     * 	else
     * 		print( "The box has been unticked!" )
     * 	end
     * end
     * 
     * // Creates a a DCheckBoxLabel that prints to the console when ticked/unticked 
     */
    public OnChange(bVal: boolean): void;
    
    /**
     * **Deprecated:**
     * >You really should be using {{ClassFunction|DCheckBoxLabel|SetTextColor}} instread
     * 
     * Sets the color of the {{Type|DCheckBoxLabel}}'s text to the bright text color defined in the skin. 
     * @param bright  true makes the text bright. 
     */
    public SetBright(bright: boolean): void;
    
    /**
     * Sets the checked state of the checkbox. Does not call {{ClassFunction|DCheckBoxLabel|OnChange}} or {{ClassFunction|Panel|ConVarChanged}}, unlike {{ClassFunction|DCheckBoxLabel|SetValue}}. 
     * @param checked  Whether the box should be checked or not. 
     */
    public SetChecked(checked: boolean): void;
    
    /**
     * Sets the console variable to be set when the checked state of the {{Type|DCheckBoxLabel}} changes. 
     * @param convar  The name of the convar to set 
     */
    public SetConVar(convar: string): void;
    
    /**
     * {{Warning|This function does not exist on all panels}}
     * 
     * Sets this panel's convar. When the convar changes this panel will update automatically.
     * 
     * For developer implementation, see {{GlobalFunction|Derma_Install_Convar_Functions}}. 
     * @param convar  The console variable to check. 
     * @example
     * 
     * local checkbox = vgui.Create( "DCheckBoxLabel", myFrame )
     * checkbox:SetConVar( "sv_cheats" )
     * checkbox:SetText( "Enable cheats?" )
     * checkbox:SetPos( 5, 25 )
     * checkbox:SizeToContents()
     * 
     * // Makes a checkbox linked to the '''sv_cheats''' convar. 
     */
    public SetConVar(convar: string): void;
    
    /**
     * **Deprecated:**
     * >You really should be using {{ClassFunction|DCheckBoxLabel|SetTextColor}} instread
     * 
     * Sets the text of the {{Type|DCheckBoxLabel}} to be dark colored. 
     * @param darkify  True to be dark, false to be default 
     */
    public SetDark(darkify: boolean): void;
    
    /**
     * Sets the font of the text part of the {{Type|DCheckBoxLabel}}. 
     * @param font  Font name 
     */
    public SetFont(font: string): void;
    
    /**
     * Sets the indentation of the element on the X axis. 
     * @param ident  How much in pixels to move the content to the right 
     */
    public SetIndent(ident: number): void;
    
    /**
     * Sets the text color for the {{Type|DCheckBoxLabel}}. 
     * @param color  The text color. Uses the {{Struct|Color}}. 
     * @example
     * 
     * local LabelBox = vgui.Create( "DCheckBoxLabel" )
     * LabelBox:SetTextColor( Color(255,0,0) )
     * 
     * // Creates a DCheckBoxLabel and changes the text color to red. 
     */
    public SetTextColor(color: Color): void;
    
    /**
     * Sets the checked state of the checkbox, and calls {{ClassFunction|DCheckBoxLabel|OnChange}} and the checkbox's {{ClassFunction|Panel|ConVarChanged}} methods. 
     * @param checked  Whether the box should be checked or not. 
     */
    public SetValue(checked: boolean): void;
    
    /**
     * Toggles the checked state of the {{Type|DCheckBoxLabel}}. 
     */
    public Toggle(): void;
}

/**
 * The collapsible category allows you to create numerous sections of controls, and have the ability to contract/expand them.
 * 
 * Consider using {{Type|DCategoryList}} if you plan on using more than 1 of these. 
 * @example
 * 
 * local frame = vgui.Create( "DFrame" )
 * frame:SetSize( 300, 300 )
 * frame:Center()
 * frame:MakePopup()
 * 
 * local DCollapsible = vgui.Create( "DCollapsibleCategory", frame )    // Create a collapsible category
 * DCollapsible:SetPos( 25, 50 )                                             // Set position
 * DCollapsible:SetSize( 250, 100 )                                          // Set size
 * DCollapsible:SetExpanded( 0 )                                             // Is it expanded when you open the panel?
 * DCollapsible:SetLabel( "Collapsible Category" )                           // Set the name ( label )
 *    
 * local DermaList = vgui.Create( "DPanelList", DermaPanel )   // Make a list of items to add to our category ( collection of controls )
 * DermaList:SetSpacing( 5 )                             // Set the spacing between items
 * DermaList:EnableHorizontal( false )                   // Only vertical items
 * DermaList:EnableVerticalScrollbar( true )             // Enable the scrollbar if ( the contents are too wide
 * DCollapsible:SetContents(DermaList)                   // Add DPanelList to our Collapsible Category
 *    
 * local CategoryContentOne = vgui.Create( "DCheckBoxLabel" )    // This section creates a checkbox and
 * CategoryContentOne:SetText( "God mode" )                      // sets up its settings
 * CategoryContentOne:SetConVar( "sbox_godmode" )
 * CategoryContentOne:SetValue( 0 )
 * CategoryContentOne:SizeToContents()
 * DermaList:AddItem( CategoryContentOne )                       // Add the checkbox to the category
 *    
 * local CategoryContentTwo = vgui.Create( "DLabel" )            // Make some more content
 * CategoryContentTwo:SetText( "Hello" )
 * DermaList:AddItem( CategoryContentTwo )                       // Add it to the categoryDCollapsible:SetContents( DermaList )   // Set the contents of the category to the list
 * 
 * // Creates a DCollapsibleCategory panel. 
 */
declare class DCollapsibleCategory extends Panel {
    /**
     * Adds a new text button to the collapsible category, like the tool menu in Spawnmenu. 
     * @param name  The name of the button 
     * @returns The {{Type|DButton}} 
     */
    public Add(name: string): DButton;
    
    /**
     * Adds the specified object to the panel.
     * 
     * **Bug [#1482](https://github.com/Facepunch/garrysmod-issues/issues/1482):**
     * >Creating a DFrame or a panel that inherits from DFrame will not drag/resize correctly when created through this function. 
     * @param object  The panel to be added (parented). Can also be:
     * * {{FuncArg|string|Class Name|creates panel with the specified name and adds it to the panel.}}
     * * {{FuncArg|table|PANEL table|creates a panel from table and adds it to the panel.}} 
     * @returns New panel 
     */
    public Add(object: Panel): Panel;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Internal function that handles the open/close animations. 
     * @param anim 
     * @param delta 
     * @param data 
     */
    public AnimSlide(anim: table, delta: number, data: table): void;
    
    /**
     * Forces the category to open or collapse 
     * @param expand  True to open, false to collapse 
     */
    public DoExpansion(expand: boolean): void;
    
    /**
     * Returns the expand/collapse animation time set by {{ClassFunction|DCollapsibleCategory|SetAnimTime}}. 
     * @returns The animation time in seconds 
     */
    public GetAnimTime(): number;
    
    /**
     * Returns whether the DCollapsibleCategory is expanded or not. 
     * @returns If expanded it will return true. 
     */
    public GetExpanded(): boolean;
    
    /**
     * @returns 
     */
    public GetList(): Panel;
    
    /**
     * Doesn't actually do anything.
     * 
     * Returns the number set by {{ClassFunction|DCollapsibleCategory|SetPadding}}. 
     * @returns 
     */
    public GetPadding(): number;
    
    /**
     * Returns whether or not the background should be painted. 
     * @returns If the background is painted or not 
     */
    public GetPaintBackground(): boolean;
    
    /**
     * @returns 
     */
    public GetStartHeight(): number;
    
    /**
     * Called by {{ClassFunction|DCollapsibleCategory|Toggle}}. 
     */
    public OnToggle(): void;
    
    /**
     * Sets the time in seconds it takes to expand the DCollapsibleCategory 
     * @param time  The time in seconds it takes to expand 
     */
    public SetAnimTime(time: number): void;
    
    /**
     * Sets the contents of the DCollapsibleCategory. 
     * @param pnl  The panel, containing the contents for the DCollapsibleCategory, mostly an DScrollPanel 
     */
    public SetContents(pnl: Panel): void;
    
    /**
     * Sets whether the {{Type|DCollapsibleCategory}} is expanded or not upon opening the container.
     * 
     * You should use {{ClassFunction|DCollapsibleCategory|Toggle}} or {{ClassFunction|DCollapsibleCategory|DoExpansion}} instead. 
     * @param expanded [=true] Whether it shall be expanded or not by default 
     */
    public SetExpanded(expanded?: boolean): void;
    
    /**
     * Sets the name of the DCollapsibleCategory. 
     * @param label  The label/name of the DCollapsibleCategory. 
     */
    public SetLabel(label: string): void;
    
    /**
     * @param pnl 
     */
    public SetList(pnl: Panel): void;
    
    /**
     * Doesn't actually do anything. 
     * @param padding 
     */
    public SetPadding(padding: number): void;
    
    /**
     * Sets whether or not the background should be painted. 
     * @param paint 
     */
    public SetPaintBackground(paint: boolean): void;
    
    /**
     * @param height 
     */
    public SetStartHeight(height: number): void;
    
    /**
     * Toggles the expanded state of the {{Type|DCollapsibleCategory}}. 
     */
    public Toggle(): void;
    
    /**
     */
    public UnselectAll(): void;
    
    /**
     * Recursively deselects this panel object and all of its children. This will cascade to all child objects at every level below the parent. 
     */
    public UnselectAll(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Used internally to update the "AltLine" property on all "child" panels. 
     */
    public UpdateAltLines(): void;
}

/**
 * Colorful buttons. Used internally by {{Type|DColorPalette}}. 
 * @example
 * 
 * local frame = vgui.Create( "DFrame" )
 * frame:SetSize( 500, 500 )
 * frame:Center()
 * frame:MakePopup()
 * 
 * local DColorButton = vgui.Create( "DColorButton", frame )
 * DColorButton:SetPos( 1, 28 )
 * DColorButton:SetSize( 100, 30 )
 * DColorButton:Paint( 100, 30 )
 * DColorButton:SetText( "DColorButton" )
 * DColorButton:SetColor( Color( 0, 110, 160 ) )
 * function DColorButton:DoClick() // Callback inherited from DLabel, which is DColorButton's base
 * 	print( "I am clicked! My color is ", self:GetColor() )
 * end
 * 
 * // Creates a DColorButton buton. 
 */
declare class DColorButton extends DLabel {
    /**
     * Returns the color of the button 
     * @returns The {{Struct|Color}} of the button 
     */
    public GetColor(): Color;
    
    /**
     * Returns the "internal" desired color of the text, alias of {{ClassFunction|DLabel|GetTextStyleColor}}.
     * 
     * **Bug:**
     * >FIXED IN NEXT UPDATE: This doesn't return ACTUAL color of the text. Use the following instead for now:
     * ```local clr = DLabel:GetTextColor() or DLabel:GetTextStyleColor()``` 
     * @returns The "internal" desired color of the text 
     */
    public GetColor(): table;
    
    /**
     * Returns the unique ID set by {{ClassFunction|DColorButton|SetID}}.
     * 
     * Used internally by {{Type|DColorPalette}} 
     * @returns The unique ID of the button 
     */
    public GetID(): number;
    
    /**
     * Returns whether the {{Type|DColorButton}} is currently being pressed (the user is holding it down). 
     * @returns 
     */
    public IsDown(): boolean;
    
    /**
     * Sets the color of the {{Type|DColorButton}}. 
     * @param color  A {{Struct|Color}} to set the color as 
     */
    public SetColor(color: Color): void;
    
    /**
     * Changes color of label. Alias of {{ClassFunction|DLabel|SetTextColor}}. 
     * @param color  The color to set. Uses the Color structure. 
     * @example
     * 
     * local DLabel = vgui.Create( "DLabel" )
     * DLabel:SetPos( 90, 50 )
     * DLabel:SetColor(Color(255, 0, 0))
     * DLabel:SetText( "Hello world." )
     * DLabel:SizeToContents()
     * 
     * // Creates a label and changes it color to red. 
     */
    public SetColor(color: table): void;
    
    /**
     * Used internally by {{Type|DColorPalette}} to detect which button is which. 
     * @param id  A unique ID to give this button 
     */
    public SetID(id: number): void;
}

/**
 * The '''DColorCombo''' allows the user to choose color, without alpha, using {{Type|DColorMixer}} or {{Type|DColorPalette}} in a tabbed view. 
 * @example
 * 
 * local frame = vgui.Create( "DFrame" )
 * frame:SetSize( 500, 300 )
 * frame:Center()
 * frame:MakePopup()
 * 
 * local DermaColorCombo = vgui.Create( "DColorCombo", frame )
 * DermaColorCombo:SetPos( 5, 30 )
 * DermaColorCombo:SetColor( Color( 255, 255, 255 ) )
 * 
 * local DColorButton = frame:Add( "DColorButton" )
 * DColorButton:SetPos( 300, 50 )
 * DColorButton:SetSize( 64, 64 )
 * function DermaColorCombo:OnValueChanged( col )
 * 	DColorButton:SetColor( col )
 * end
 * 
 * // Creates a DColorCombo and sets its initial value. 
 */
declare class DColorCombo extends DPropertySheet {
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called internally to create panels necessary for this panel to work. 
     */
    public BuildControls(): void;
    
    /**
     * Returns the color of the {{Type|DColorCombo}}. 
     * @returns A {{Struct|Color}} 
     */
    public GetColor(): Color;
    
    /**
     * Returns true if the panel is currently being edited
     * 
     * More of a internal method, it technically should only ever work (i.e. return true) inside {{ClassFunction|DColorCombo|OnValueChanged}}. 
     * @returns 
     */
    public IsEditing(): boolean;
    
    /**
     * Called when the value (color) of this panel was changed. 
     * @param newcol 
     */
    public OnValueChanged(newcol: table): void;
    
    /**
     * Sets the color of this panel. 
     * @param clr  A {{Struct|Color}}. 
     */
    public SetColor(clr: Color): void;
}

/**
 * The DColorCube allows a user to select saturation and value but not hue. Uses HSV colors 
 * @example
 * 
 * local Frame = vgui.Create( "DFrame" )
 * Frame:SetSize( 300, 300 )
 * Frame:Center()
 * Frame:MakePopup()
 * 
 * DColorCube = vgui.Create( "DColorCube", Frame)
 * DColorCube:SetPos( 50, 50 )
 * DColorCube:SetSize( 200, 200 )
 * DColorCube:SetBaseRGB( Color( 0, 255, 0 ) )
 * 
 * // Creates a DColorCube in a DFrame.@example
 * 
 * // Background panel
 * BGPanel = vgui.Create("DPanel")
 * BGPanel:SetSize(200, 200)
 * BGPanel:Center()
 * 
 * // Color label
 * local color_label = Label("Color( 255, 255, 255 )", BGPanel)
 * color_label:SetPos(40, 160)
 * color_label:SetSize(150, 20)
 * color_label:SetHighlight(true)
 * color_label:SetColor(Color(0, 0, 0))
 * 
 * // Color picker
 * local color_picker = vgui.Create("DRGBPicker", BGPanel)
 * color_picker:SetPos(5, 5)
 * color_picker:SetSize(30, 190)
 * 
 * // Color cube
 * local color_cube = vgui.Create("DColorCube", BGPanel)
 * color_cube:SetPos(40, 5)
 * color_cube:SetSize(155, 155)
 * 
 * // When the picked color is changed...
 * function color_picker:OnChange(col)
 * 	
 * 	// Get the hue of the RGB picker and the saturation and vibrance of the color cube
 * 	local h = ColorToHSV(col)
 * 	local _, s, v = ColorToHSV(color_cube:GetRGB())
 * 	
 * 	// Mix them together and update the color cube
 * 	col = HSVToColor(h, s, v)
 * 	color_cube:SetColor(col)
 * 	
 * 	// Lastly, update the background color and label
 * 	UpdateColors(col)
 * 		
 * end
 * 
 * function color_cube:OnUserChanged(col)
 * 
 * 	// Update background color and label
 * 	UpdateColors(col)
 * 
 * end
 * 
 * // Updates display colors, label, and clipboard text
 * function UpdateColors(col)
 * 
 * 	BGPanel:SetBackgroundColor(col)
 * 	color_label:SetText("Color( "..col.r..", "..col.g..", "..col.b.." )")
 * 	color_label:SetColor(Color((255-col.r), (255-col.g), (255-col.b)))
 * 	SetClipboardText(color_label:GetText())
 * 
 * end
 * 
 * // Creates a color cube that's hue is controlled by a {{Type|DRGBPicker}}, which outputs the color to the background panel, label, and your copy/paste buffer. 
 */
declare class DColorCube extends DSlider {
    /**
     * Returns the base Color set by {{ClassFunction|DColorCube|SetBaseRGB}}. 
     * @returns A {{Struct|Color}} 
     */
    public GetBaseRGB(): Color;
    
    /**
     * **Deprecated!**
     * 
     * Returns the value set by {{ClassFunction|DColorCube|SetHue}}. 
     * @returns 
     */
    public GetHue(): number;
    
    /**
     * Returns the color cube's current set color. 
     * @returns The set color, uses {{Struct|Color}}. 
     * @example
     * 
     * local color_cube = vgui.Create("DColorCube")
     * color_cube:SetSize(200, 200)
     * color_cube:Center()
     * 
     * // Set color to cyan
     * color_cube:SetColor(Color(0, 255, 255))
     * 
     * // 50% saturated, 50% valued
     * color_cube:TranslateValues(0.5, 0.5)
     * 
     * // Print set color
     * PrintTable(color_cube:GetRGB())
     * 
     * // Creates a color cube, sets the color to cyan, adjusts the saturation and value to 50% each, and prints out the final color. 
     */
    public GetRGB(): Color;
    
    /**
     * Function which is called when the color cube slider is moved (through user input). Meant to be overridden. 
     * @param color  The new color, uses {{Struct|Color}}. 
     * @example
     * 
     * // Frame
     * MainFrame = vgui.Create("DFrame")
     * MainFrame:SetSize(320, 200)
     * MainFrame:Center()
     * MainFrame:SetTitle("Choose the saturation and value")
     * 
     * // Image of a ball
     * local ball_img = vgui.Create("DImage", MainFrame)
     * ball_img:SetPos(20, 45)
     * ball_img:SetSize(128, 128)
     * 
     * ball_img:SetImage("sprites/sent_ball")
     * 
     * // Color cube
     * local color_cube = vgui.Create("DColorCube", MainFrame)
     * color_cube:SetPos(160, 40)
     * color_cube:SetSize(150, 150)
     * 
     * // Set color to blue
     * color_cube:SetColor(Color(0, 0, 255))
     * 
     * // Called when slider is moved by user
     * function color_cube:OnUserChanged(col)
     * 	
     * 	// Update ball color
     * 	ball_img:SetImageColor(col)
     * 
     * end
     * 
     * // Creates a color cube which controls the blue saturation and value of a ball image. 
     */
    public OnUserChanged(color: Color): void;
    
    /**
     * Sets the base color and the color used to draw the color cube panel itself.
     * 
     * **Note:**
     * >Calling this when using a color that isn't 100% saturated and valued ({{GlobalFunction|HSVToColor}} with saturation and value set to 1) causes the color cube to look inaccurate compared to the color that's returned by methods like {{ClassFunction|DColorCube|GetRGB}} and {{ClassFunction|DColorCube|OnUserChanged}}. You should use {{ClassFunction|DColorCube|SetColor}} instead 
     * @param color  The base color to set, uses {{Struct|Color}}. 
     * @example
     * 
     * // Background panel
     * BGPanel = vgui.Create("DPanel")
     * BGPanel:SetSize(200, 200)
     * BGPanel:Center()
     * 
     * // Color cube
     * local color_cube = vgui.Create("DColorCube", BGPanel)
     * color_cube:SetSize(180, 180)
     * color_cube:Center()
     * 
     * // Base color set to white
     * color_cube:SetBaseRGB(Color(255, 255, 255))
     * 
     * // Called when the color is changed by user input
     * function color_cube:OnUserChanged(col)
     * 
     * 	// Update background panel color
     * 	BGPanel:SetBackgroundColor(col)
     * 	
     * end
     * 
     * // Creates a background panel and color cube that controls the background color. Demonstrates how setting the base RGB explicitly can cause a disconnect between the color represented by the cube and the color output. 
     */
    public SetBaseRGB(color: Color): void;
    
    /**
     * Sets the base color of the color cube and updates the slider position. 
     * @param color  The color to set, uses {{Struct|Color}}. 
     * @example
     * 
     * // Get the color of the pixel at the center of the screen
     * render.CapturePixels()
     * local p_r, p_g, p_b = render.ReadPixel(ScrW()/2, ScrH()/2)
     * 
     * // Background panel
     * BGPanel = vgui.Create("DPanel")
     * BGPanel:SetPos((ScrW()/2)-50, ScrH()/2-100)
     * BGPanel:SetSize(100, 100)
     * 
     * // Color cube
     * local color_cube = vgui.Create("DColorCube", BGPanel)
     * color_cube:SetSize(75, 75)
     * color_cube:Center()
     * 
     * // Set the color to the center pixel color
     * color_cube:SetColor(Color(p_r, p_g, p_b))
     * 
     * // Change background color too
     * BGPanel:SetBackgroundColor(Color(p_r, p_g, p_b))
     * 
     * // Picks the color at the center screen pixel and applies it to the base color of a color cube and its background panel. 
     */
    public SetColor(color: Color): void;
    
    /**
     * **Deprecated!**
     * 
     * Appears to do nothing and unused. 
     * @param hue 
     */
    public SetHue(hue: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Used internally to set the real "output" color of the panel. 
     * @param clr  A {{Struct|Color}} 
     */
    public SetRGB(clr: Color): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Updates the color cube RGB based on the given x and y position and returns its arguments. Similar to {{ClassFunction|DColorCube|UpdateColor}}. 
     * @param x  The x position to sample color from/the percentage of saturation to remove from the color (ranges from 0.0 to 1.0). 
     * @param y  The y position to sample color from/the percentage of brightness or value to remove from the color (ranges from 0.0 to 1.0). 
     * @returns [The given x position., The given y position.] 
     * @example
     * 
     * local color_cube = vgui.Create("DColorCube")
     * color_cube:SetSize(200, 200)
     * color_cube:Center()
     * 
     * // Set base color to green
     * color_cube:SetColor(Color(0, 255, 0))
     * 
     * // 20% desaturated, 40% darker
     * color_cube:TranslateValues(0.2, 0.4)
     * 
     * // Get new color
     * local new_color = color_cube:GetRGB()
     * 
     * // Update slider position
     * color_cube:SetColor(new_color)
     * 
     * // Print out new color
     * print("Color( "..new_color.r..", "..new_color.g..", "..new_color.b..", "..new_color.a.." )")
     * 
     * // Creates a green color cube and prints out the color at the (0.2, 0.4) position. 
     * !TupleReturn
     */
    public TranslateValues(x: number, y: number): [number, number];
    
    /**
     * For override by child panels, such as {{Type|DNumSlider}}. 
     * @param x 
     * @param y 
     * @returns [x, y] 
     * !TupleReturn
     */
    public TranslateValues(x: number, y: number): [number, number];
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Updates the color cube RGB based on the given x and y position. Similar to {{ClassFunction|DColorCube|TranslateValues}}. 
     * @param x [=nil] The x position to set color to/the percentage of saturation to remove from the color (ranges from 0.0 to 1.0). 
     * @param y [=nil] The y position to set color to/the percentage of brightness or value to remove from the color (ranges from 0.0 to 1.0). 
     * @example
     * 
     * local color_cube = vgui.Create("DColorCube")
     * color_cube:SetSize(200, 200)
     * color_cube:Center()
     * 
     * // Set base color to yellow
     * color_cube:SetColor(Color(255, 255, 0))
     * 
     * // 10% less saturation, 60% darker
     * color_cube:UpdateColor(0.1, 0.6)
     * 
     * // Get new color
     * local new_color = color_cube:GetRGB()
     * 
     * // Print new color
     * print("Color( "..new_color.r..", "..new_color.g..", "..new_color.b..", "..new_color.a.." )")
     * 
     * // Creates a yellow color cube and updates/prints out the color at the (0.1, 0.6) position. 
     */
    public UpdateColor(x?: number, y?: number): void;
}

/**
 * A standard Derma color mixer 
 * @example
 * 
 * local Frame = vgui.Create("DFrame")
 * Frame:SetSize(267,186) //good size for example
 * Frame:Center()
 * Frame:MakePopup()
 * 
 * local Mixer = vgui.Create("DColorMixer", Frame)
 * Mixer:Dock(FILL)			//Make Mixer fill place of Frame
 * Mixer:SetPalette(true)  		//Show/hide the palette			DEF:true
 * Mixer:SetAlphaBar(true) 		//Show/hide the alpha bar		DEF:true
 * Mixer:SetWangs(true)	 		//Show/hide the R G B A indicators 	DEF:true
 * Mixer:SetColor(Color(30,100,160))	//Set the default color
 * 
 * // Creates a DColorMixer in a DFrame, as seen above 
 */
declare class DColorMixer extends DPanel {
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't. 
     */
    public ConVarThink(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't. 
     * @param cvar 
     */
    public DoConVarThink(cvar: string): void;
    
    /**
     * Return true if alpha bar is shown, false if not. 
     * @returns Return true if shown, false if not. 
     */
    public GetAlphaBar(): boolean;
    
    /**
     * Returns the current selected color. 
     * @returns The current selected color as a {{Struct|Color}}. 
     */
    public GetColor(): Color;
    
    /**
     * Returns the {{Type|ConVar}} name for the alpha channel of the color.
     * 
     * See also:
     * * {{ClassFunction|DColorMixer|GetConVarR}} - For the red channel
     * * {{ClassFunction|DColorMixer|GetConVarG}} - For the green channel
     * * {{ClassFunction|DColorMixer|GetConVarB}} - For the blue channel 
     * @returns The {{Type|ConVar}} name for the alpha channel of the color 
     */
    public GetConVarA(): string;
    
    /**
     * Returns the {{Type|ConVar}} name for the blue channel of the color.
     * 
     * See also:
     * * {{ClassFunction|DColorMixer|GetConVarR}} - For the red channel
     * * {{ClassFunction|DColorMixer|GetConVarG}} - For the green channel
     * * {{ClassFunction|DColorMixer|GetConVarA}} - For the alpha channel 
     * @returns The {{Type|ConVar}} name for the blue channel of the color 
     */
    public GetConVarB(): string;
    
    /**
     * Returns the {{Type|ConVar}} name for the green channel of the color.
     * 
     * See also:
     * * {{ClassFunction|DColorMixer|GetConVarR}} - For the red channel
     * * {{ClassFunction|DColorMixer|GetConVarB}} - For the blue channel
     * * {{ClassFunction|DColorMixer|GetConVarA}} - For the alpha channel 
     * @returns The {{Type|ConVar}} name for the green channel of the color 
     */
    public GetConVarG(): string;
    
    /**
     * Returns the {{Type|ConVar}} name for the red channel of the color.
     * 
     * See also:
     * * {{ClassFunction|DColorMixer|GetConVarG}} - For the green channel
     * * {{ClassFunction|DColorMixer|GetConVarB}} - For the blue channel
     * * {{ClassFunction|DColorMixer|GetConVarA}} - For the alpha channel 
     * @returns The {{Type|ConVar}} name for the red channel of the color 
     */
    public GetConVarR(): string;
    
    /**
     * Return true if palette is shown, false if not. 
     * @returns Return true if shown, false if not. 
     */
    public GetPalette(): boolean;
    
    /**
     * Returns the color as a normalized {{Type|Vector}}. 
     * @returns A vector representing the color of the {{Type|DColorMixer}}, each value being in range of 0 to 1. Alpha is not included. 
     */
    public GetVector(): DColorMixer;
    
    /**
     * Return true if the wangs are shown, false if not. 
     * @returns Return true if shown, false if not. 
     */
    public GetWangs(): boolean;
    
    /**
     * Show/Hide the alpha bar in DColorMixer 
     * @param show  Show / Hide the alpha bar 
     */
    public SetAlphaBar(show: boolean): void;
    
    /**
     * Sets the base color of the {{Type|DColorCube}} part of the {{Type|DColorMixer}}.
     * 
     * See also {{ClassFunction|DColorCube|SetBaseRGB}} 
     * @param clr  {{Struct|Color}} 
     */
    public SetBaseColor(clr: Color): void;
    
    /**
     * Sets the color of the {{Type|DColorMixer}} 
     * @param color  The color to set. See {{GlobalFunction|Color}} 
     */
    public SetColor(color: table): void;
    
    /**
     * Sets the {{Type|ConVar}} name for the alpha channel of the color.
     * 
     * See also:
     * * {{ClassFunction|DColorMixer|SetConVarR}} - For the red channel
     * * {{ClassFunction|DColorMixer|SetConVarG}} - For the green channel
     * * {{ClassFunction|DColorMixer|SetConVarB}} - For the blue channel 
     * @param convar  The {{Type|ConVar}} name for the alpha channel of the color 
     */
    public SetConVarA(convar: string): void;
    
    /**
     * Sets the {{Type|ConVar}} name for the blue channel of the color.
     * 
     * See also:
     * * {{ClassFunction|DColorMixer|SetConVarR}} - For the red channel
     * * {{ClassFunction|DColorMixer|SetConVarG}} - For the green channel
     * * {{ClassFunction|DColorMixer|SetConVarA}} - For the alpha channel 
     * @param convar  The {{Type|ConVar}} name for the blue channel of the color 
     */
    public SetConVarB(convar: string): void;
    
    /**
     * Sets the {{Type|ConVar}} name for the green channel of the color.
     * 
     * See also:
     * * {{ClassFunction|DColorMixer|SetConVarR}} - For the red channel
     * * {{ClassFunction|DColorMixer|SetConVarB}} - For the blue channel
     * * {{ClassFunction|DColorMixer|SetConVarA}} - For the alpha channel 
     * @param convar  The {{Type|ConVar}} name for the green channel of the color 
     */
    public SetConVarG(convar: string): void;
    
    /**
     * Sets the {{Type|ConVar}} name for the red channel of the color.
     * 
     * See also:
     * * {{ClassFunction|DColorMixer|SetConVarG}} - For the green channel
     * * {{ClassFunction|DColorMixer|SetConVarB}} - For the blue channel
     * * {{ClassFunction|DColorMixer|SetConVarA}} - For the alpha channel 
     * @param convar  The {{Type|ConVar}} name for the red channel of the color 
     */
    public SetConVarR(convar: string): void;
    
    /**
     * Sets the label's text to show. 
     * @param text [=nil] Set to non empty string to show the label and its text.
     * 
     * Give it an empty string or nothing and the label will be hidden. 
     */
    public SetLabel(text?: string): void;
    
    /**
     * Show or hide the palette panel 
     * @param enabled  Show or hide the palette panel? 
     */
    public SetPalette(enabled: boolean): void;
    
    /**
     * Sets the color of {{Type|DColorMixer}} from a {{Type|Vector}}. Alpha is not included. 
     * @param vec  The color to set. It is expected that the vector will have values be from 0 to 1. (i.e. be normalized) 
     */
    public SetVector(vec: Vector): void;
    
    /**
     * Show / Hide the colors indicators in DColorMixer 
     * @param show  Show / Hide the colors indicators 
     */
    public SetWangs(show: boolean): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * **Deprecated!**
     * 
     * Does nothing. 
     */
    public TranslateValues(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Use {{ClassFunction|DColorMixer|SetColor}} instead! 
     * @param clr 
     */
    public UpdateColor(clr: table): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * {{Stub}} 
     * @param cvar  The {{Type|ConVar}} name 
     * @param part  The color part to set the cvar to. "r", "g", "b" or "a". 
     * @param clr  The {{Struct|Color}} 
     */
    public UpdateConVar(cvar: string, part: string, clr: Color): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * {{Stub}} 
     * @param clr  The {{Struct|Color}} 
     */
    public UpdateConVars(clr: Color): void;
    
    /**
     * Called when the player changes the color of the {{Type|DColorMixer}}. 
     * @param col  The new color. See {{Struct|Color}} 
     */
    public ValueChanged(col: Color): void;
}

/**
 * The '''DColorPalette''' allows the player to select a color from a list of given colors.
 * 
 * This panel supports saving across sessions via the panel cookie system.
 * 
 * Use {{ClassFunction|Panel|SetCookieName}} to change "save files". 
 * @example
 * 
 * local Frame = vgui.Create( "DFrame" )
 * Frame:SetSize( 170, 200 )
 * Frame:Center()
 * Frame:MakePopup()
 * 
 * local DColorPalette = vgui.Create( "DColorPalette", Frame )
 * DColorPalette:SetPos( 5, 50 )
 * DColorPalette:SetSize( 160, 50 )
 * 
 * local DColorButton = vgui.Create( "DColorButton", Frame )
 * DColorButton:SetSize( 50, 50 )
 * DColorButton:SetPos( 60, 100 )
 * 
 * // This function is assigned AFTER DColorButton is created so we can use the DColorButton
 * DColorPalette.OnValueChanged = function( s, value )
 * 	DColorButton:SetColor( value )
 * end
 * 
 * // Creates a DColorPalette in a DFrame, clicking on a color will change the DColorButton's color to the selected color 
 */
declare class DColorPalette extends DIconLayout {
    /**
     * **Deprecated!**
     * 
     * Basically the same functionality as {{ClassFunction|DColorPalette|OnValueChanged}}, you should use that instead! 
     * @param clr  The new color via the {{Struct|Color}} 
     * @param btn  The {{Type|DColorButton}} that was pressed. 
     */
    public DoClick(clr: Color, btn: DColorButton): void;
    
    /**
     * Returns the size of each palette button. Set by {{ClassFunction|DColorPalette|SetButtonSize}}. 
     * @returns The size of each palette button 
     */
    public GetButtonSize(): number;
    
    /**
     * Returns the {{Type|ConVar}} name for the alpha channel of the color.
     * 
     * See also:
     * * {{ClassFunction|DColorPalette|GetConVarR}} - For the red channel
     * * {{ClassFunction|DColorPalette|GetConVarG}} - For the green channel
     * * {{ClassFunction|DColorPalette|GetConVarB}} - For the blue channel 
     * @returns The {{Type|ConVar}} name for the alpha channel of the color 
     */
    public GetConVarA(): string;
    
    /**
     * Returns the {{Type|ConVar}} name for the blue channel of the color.
     * 
     * See also:
     * * {{ClassFunction|DColorPalette|GetConVarR}} - For the red channel
     * * {{ClassFunction|DColorPalette|GetConVarG}} - For the green channel
     * * {{ClassFunction|DColorPalette|GetConVarA}} - For the alpha channel 
     * @returns The {{Type|ConVar}} name for the blue channel of the color 
     */
    public GetConVarB(): string;
    
    /**
     * Returns the {{Type|ConVar}} name for the green channel of the color.
     * 
     * See also:
     * * {{ClassFunction|DColorPalette|GetConVarR}} - For the red channel
     * * {{ClassFunction|DColorPalette|GetConVarB}} - For the blue channel
     * * {{ClassFunction|DColorPalette|GetConVarA}} - For the alpha channel 
     * @returns The {{Type|ConVar}} name for the green channel of the color 
     */
    public GetConVarG(): string;
    
    /**
     * Returns the {{Type|ConVar}} name for the red channel of the color.
     * 
     * See also:
     * * {{ClassFunction|DColorPalette|GetConVarG}} - For the green channel
     * * {{ClassFunction|DColorPalette|GetConVarB}} - For the blue channel
     * * {{ClassFunction|DColorPalette|GetConVarA}} - For the alpha channel 
     * @returns The {{Type|ConVar}} name for the red channel of the color 
     */
    public GetConVarR(): string;
    
    /**
     * @returns 
     */
    public GetNumRows(): number;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Used internally to make sure changes on one palette affect other palettes with same name. 
     */
    public NetworkColorChange(): void;
    
    /**
     * Called when a palette button has been pressed 
     * @param pnl  The {{Type|DColorButton}} that was pressed. 
     */
    public OnRightClickButton(pnl: DColorButton): void;
    
    /**
     * Called when the color is changed after clicking a new value. 
     * @param newcol  The new color of the {{Type|DColorPalette}} 
     * @example
     * 
     * local frame = vgui.Create( "DFrame" )
     * frame:SetSize( ScrW() - 100, ScrH() - 100 )
     * frame:Center()
     * frame:MakePopup()
     * 
     * local palette = vgui.Create( "DColorPalette", frame )
     * palette:Dock( FILL )
     * 
     * function palette:OnValueChanged( newcol )
     * 	PrintTable( newcol )
     * end
     * 
     * // Creates a DFrame with a color palette that prints values after being changed. 
     */
    public OnValueChanged(newcol: table): void;
    
    /**
     * Resets this entire color palette to a default preset one, without saving.
     * 
     * See {{ClassFunction|DColorPalette|ResetSavedColors}} for version that also saves the changes. 
     */
    public Reset(): void;
    
    /**
     * Resets this entire color palette to a default preset one and saves the changes.
     * 
     * See {{ClassFunction|DColorPalette|Reset}} for version that does not save the changes. 
     */
    public ResetSavedColors(): void;
    
    /**
     * Saves the color of given button across sessions.
     * 
     * The color is saved as a panel cookie, see {{ClassFunction|Panel|SetCookie}} and {{ClassFunction|Panel|SetCookieName}}.
     *  
     * It is expected that the amount of colors per palette ({{ClassFunction|Panel|SetCookieName}}) is the same every time. 
     * @param btn  The button to save the color of. Used to get the ID of the button. 
     * @param clr  The color to save to this button's index 
     */
    public SaveColor(btn: Panel, clr: table): void;
    
    /**
     * Sets the size of each palette button.
     * 
     * This is best kept to such a number, where this equation would return a whole number:
     * 
     * WidthOfColorPalette/ButtonSize=WholeNumber
     * 
     * If not, there will be ugly whitespace on the right side of the panel. 
     * @param size  Sets the new size 
     */
    public SetButtonSize(size: number): void;
    
    /**
     * **Deprecated!**
     * 
     * Currently does nothing. Intended to "select" the color. 
     * @param clr 
     */
    public SetColor(clr: table): void;
    
    /**
     * Clears the palette and adds new buttons with given colors. 
     * @param tab  A number indexed table where each value is a {{Struct|Color}} 
     */
    public SetColorButtons(tab: Color): void;
    
    /**
     * Sets the {{Type|ConVar}} name for the alpha channel of the color.
     * 
     * See also:
     * * {{ClassFunction|DColorPalette|SetConVarR}} - For the red channel
     * * {{ClassFunction|DColorPalette|SetConVarG}} - For the green channel
     * * {{ClassFunction|DColorPalette|SetConVarB}} - For the blue channel 
     * @param convar  The {{Type|ConVar}} name for the alpha channel of the color 
     */
    public SetConVarA(convar: string): void;
    
    /**
     * Sets the {{Type|ConVar}} name for the blue channel of the color.
     * 
     * See also:
     * * {{ClassFunction|DColorPalette|SetConVarR}} - For the red channel
     * * {{ClassFunction|DColorPalette|SetConVarG}} - For the green channel
     * * {{ClassFunction|DColorPalette|SetConVarA}} - For the alpha channel 
     * @param convar  The {{Type|ConVar}} name for the blue channel of the color 
     */
    public SetConVarB(convar: string): void;
    
    /**
     * Sets the {{Type|ConVar}} name for the green channel of the color.
     * 
     * See also:
     * * {{ClassFunction|DColorPalette|SetConVarR}} - For the red channel
     * * {{ClassFunction|DColorPalette|SetConVarB}} - For the blue channel
     * * {{ClassFunction|DColorPalette|SetConVarA}} - For the alpha channel 
     * @param convar  The {{Type|ConVar}} name for the green channel of the color 
     */
    public SetConVarG(convar: string): void;
    
    /**
     * Sets the {{Type|ConVar}} name for the red channel of the color.
     * 
     * See also:
     * * {{ClassFunction|DColorPalette|SetConVarG}} - For the green channel
     * * {{ClassFunction|DColorPalette|SetConVarB}} - For the blue channel
     * * {{ClassFunction|DColorPalette|SetConVarA}} - For the alpha channel 
     * @param convar  The {{Type|ConVar}} name for the red channel of the color 
     */
    public SetConVarR(convar: string): void;
    
    /**
     * @param rows 
     */
    public SetNumRows(rows: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Internal helper function for {{ClassFunction|DColorPalette|UpdateConVars}}. 
     * @param name  The name of the console variable to set 
     * @param key  The key of the 3rd argument to set the convar to
     * Possible values: "r", "g", "b", "a" 
     * @param clr  The {{Struct|Color}} to retrieve the info from. 
     */
    public UpdateConVar(name: string, key: string, clr: Color): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Updates all the console variables set by {{ClassFunction|DColorPalette|SetConVarR}} and so on with given color.
     * 
     * Called internally when a palette color is clicked. 
     * @param clr  A {{Struct|Color}} 
     */
    public UpdateConVars(clr: Color): void;
}

/**
 * Similar to {{Type|DPropertySheet}}, but with tabs on the left. 
 * @example
 * 
 * local frame = vgui.Create( "DFrame" )
 * frame:SetSize( 500, 300 )
 * frame:Center()
 * frame:MakePopup()
 * 
 * local sheet = vgui.Create( "DColumnSheet", frame )
 * sheet:Dock( FILL )
 * 
 * local panel1 = vgui.Create( "DPanel", sheet )
 * panel1:Dock( FILL )
 * panel1.Paint = function( self, w, h ) draw.RoundedBox( 4, 0, 0, w, h, Color( 0, 128, 255 ) ) end 
 * sheet:AddSheet( "test", panel1, "icon16/cross.png" )
 * 
 * local panel2 = vgui.Create( "DPanel", sheet )
 * panel2:Dock( FILL )
 * panel2.Paint = function( self, w, h ) draw.RoundedBox( 4, 0, 0, w, h, Color( 255, 128, 0 ) ) end 
 * sheet:AddSheet( "test 2", panel2, "icon16/tick.png" )
 * 
 * // Example of how you'd use this panel 
 */
declare class DColumnSheet extends Panel {
    /**
     * Adds a new column/tab. 
     * @param name  Name of the column/tab 
     * @param pnl  Panel to be used as contents of the tab. This normally would be a {{Type|DPanel}} 
     * @param icon [=nil] Icon for the tab. This will ideally be a [[Silkicons|silkicon]], but any material name can be used. 
     */
    public AddSheet(name: string, pnl: DPanel, icon?: string): void;
    
    /**
     * Returns the active button of this {{Type|DColumnSheet}}. 
     * @returns The active button 
     */
    public GetActiveButton(): Panel;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Makes a button an active button for this {{Type|DColumnSheet}}. 
     * @param active  The button to make active button 
     */
    public SetActiveButton(active: Panel): void;
    
    /**
     * Makes the tabs/buttons show only the image and no text. 
     */
    public UseButtonOnlyStyle(): void;
}

/**
 * A field with multiple selectable values. 
 * @example
 * 
 * local DComboBox = vgui.Create( "DComboBox" )
 * DComboBox:SetPos( 5, 5 )
 * DComboBox:SetSize( 100, 20 )
 * DComboBox:SetValue( "options" )
 * DComboBox:AddChoice( "option A" )
 * DComboBox:AddChoice( "option B" )
 * DComboBox:AddChoice( "option C" )
 * DComboBox.OnSelect = function( panel, index, value )
 * 	print( value .." was selected!" )
 * end
 * 
 * // Creates a Combo Box. 
 */
declare class DComboBox extends DButton {
    /**
     * Adds a choice to the combo box 
     * @param value  The text show to the user. 
     * @param data [=nil] The data accompanying this string. Accessed again with the second argument of {{ClassFunction|DComboBox|GetSelected}}. If left empty, the value argument is used instead. 
     * @param select [=false] Should this be the default selected text show to the user or not. 
     */
    public AddChoice(value: string, data?: any, select?: boolean): void;
    
    /**
     * Selects a combo box option by its index and changes the text displayed at the top of the combo box. 
     * @param value  The text to display at the top of the combo box. 
     * @param index  The option index. 
     */
    public ChooseOption(value: string, index: number): void;
    
    /**
     * Selects an option within a combo box based on its table index. 
     * @param index  Selects the option with given index. 
     * @example
     * 
     * BGPanel = vgui.Create("DPanel")
     * BGPanel:SetPos(20, 20)
     * BGPanel:SetSize(200, 100)
     * 
     * // Text output
     * local lbl = vgui.Create("DLabel", BGPanel)
     * lbl:SetPos(10, 80)
     * lbl:SetSize(180, 20)
     * lbl:SetDark(true)
     * lbl:SetText("You choose...")
     * 
     * // Combo box
     * local cbox = vgui.Create("DComboBox", BGPanel)
     * cbox:SetPos(5, 5)
     * cbox:SetSize(190, 20)
     * 
     * cbox:SetValue("What's your favorite lunch meal?")
     * 
     * // Choices
     * cbox:AddChoice("BBQ Chicken")
     * cbox:AddChoice("Fish and Chips")
     * cbox:AddChoice("Pizza")
     * cbox:AddChoice("Potato Salad")
     * cbox:AddChoice("Roast Beef Sandwich")
     * cbox:AddChoice("Spaghetti")
     * 
     * // No preference: data is set to -1
     * cbox:AddChoice("I don't have a favorite.", -1)
     * 
     * function cbox:OnSelect(index, value, data)
     * 
     * 	// No preference? Choose a random choice
     * 	if(data == -1) then				
     * 		self:ChooseOptionID(math.random(1, 6))
     * 		
     * 	// Otherwise update the text label with our choice
     * 	else
     * 		lbl:SetText("You choose "..value..".")
     * 	end
     * 	
     * end
     * 
     * // A simple combo box menu which gives choices for a favorite lunch meal, including a non-preference choice which randomly chooses an option. 
     */
    public ChooseOptionID(index: number): void;
    
    /**
     * Marks all of the panel's children for deletion. 
     */
    public Clear(): void;
    
    /**
     * Clears the combo box's text value, choices, and data values. 
     */
    public Clear(): void;
    
    /**
     * Closes the combo box menu. Called when the combo box is clicked while open. 
     */
    public CloseMenu(): void;
    
    /**
     * Returns an option's data based on the given index. 
     * @param index  The option index. 
     * @returns The option's data value. 
     */
    public GetOptionData(index: number): any;
    
    /**
     * Returns an option's text based on the given index. 
     * @param index  The option index. 
     * @returns The option's text value. 
     * @example
     * 
     * local cbox = vgui.Create("DComboBox")
     * cbox:SetPos(5, 5)
     * cbox:SetSize(200, 20)
     * 
     * cbox:SetValue("Colors")
     * cbox:AddChoice("Red")
     * cbox:AddChoice("Green")
     * cbox:AddChoice("Blue")
     * cbox:AddChoice("Yellow")
     * 
     * print(cbox:GetOptionText(3))
     * 
     * // Create a combo box listing some colors and print the 3rd option's text. 
     */
    public GetOptionText(index: number): string;
    
    /**
     * Returns an option's text based on the given data. 
     * @param data  The data to look up the name of.
     * 
     * If given a {{Type|number}} and no matching data was found, the function will test given data against each {{GlobalFunction|tonumber}}'d data entry. 
     * @returns The option's text value.
     * 
     * If no matching data was found, the data itself will be returned. If multiple identical data entries exist, the first instance will be returned. 
     */
    public GetOptionTextByData(data: string): string;
    
    /**
     * Returns the currently selected option's text and data 
     * @returns [The option's text value., The option's stored data.] 
     * !TupleReturn
     */
    public GetSelected(): [string, any];
    
    /**
     * Returns the index (ID) of the currently selected option. 
     * @returns The ID of the currently selected option. 
     */
    public GetSelectedID(): number;
    
    /**
     * Returns an whether the items in the dropdown will be alphabetically sorted or not.
     * 
     * See {{ClassFunction|DComboBox|SetSortItems}}. 
     * @returns True if enabled, false otherwise. 
     */
    public GetSortItems(): boolean;
    
    /**
     * Returns whether or not the combo box's menu is opened. 
     * @returns True if the menu is open, false otherwise. 
     */
    public IsMenuOpen(): boolean;
    
    /**
     * Internal function which is called when an option in the combo box is selected. This function does nothing by default and is meant to be overridden in order to make the combo box functional. 
     * @param index  The table index of the option. 
     * @param value  The name of the option. 
     * @param data  The data assigned to the option. 
     * @example
     * 
     * // Background panel
     * BGPanel = vgui.Create("DPanel")
     * BGPanel:SetPos(20, 20)
     * BGPanel:SetSize(200, 200)
     * 
     * local cbox = vgui.Create("DComboBox", BGPanel)
     * cbox:SetPos(5, 5)
     * cbox:SetSize(190, 20)
     * 
     * cbox:SetValue("Pick a color")
     * 
     * // Color choices
     * cbox:AddChoice("Red", Color(255, 0, 0))
     * cbox:AddChoice("Orange", Color(255, 128, 0))
     * cbox:AddChoice("Yellow", Color(255, 255, 0))
     * cbox:AddChoice("Green", Color(0, 255, 0))
     * cbox:AddChoice("Blue", Color(0, 0, 255))
     * cbox:AddChoice("Indigo", Color(64, 0, 255))
     * cbox:AddChoice("Violet", Color(128, 0, 255))
     * cbox:AddChoice("Pink", Color(255, 0, 255))
     * 	
     * function cbox:OnSelect(index, value, data)
     * 
     * 	// Set background panel color
     * 	BGPanel:SetBackgroundColor(data)
     * 
     * end
     * 
     * // Creates a combo box that controls the color of the background panel. 
     */
    public OnSelect(index: number, value: string, data: any): void;
    
    /**
     * Opens the combo box drop down menu. Called when the combo box is clicked. 
     */
    public OpenMenu(): void;
    
    /**
     * Sets whether or not the items should be sorted alphabetically in the dropdown menu of the {{Type|DComboBox}}. If set to false, items will appear in the order they were added by {{ClassFunction|DComboBox|AddChoice}} calls.
     * 
     * This is enabled by default. 
     * @param sort  true to enable, false to disable 
     */
    public SetSortItems(sort: boolean): void;
    
    /**
     * Sets the text shown in the combo box when the menu is not collapsed. 
     * @param value  The text in the DComboBox. 
     * @example
     * 
     * BGPanel = vgui.Create("DPanel")
     * BGPanel:SetPos(20, 20)
     * BGPanel:SetSize(200, 30)
     * 
     * local cbox = vgui.Create("DComboBox", BGPanel)
     * cbox:SetPos(5, 5)
     * cbox:SetSize(190, 20)
     * 
     * cbox:SetValue("What do you think of this server?")
     * 
     * // Responses
     * cbox:AddChoice("It's the best server of all time!")
     * cbox:AddChoice("It's pretty good.")
     * cbox:AddChoice("It's okay.")
     * cbox:AddChoice("It's not that good.")
     * cbox:AddChoice("Don't bother me with this.")
     * 
     * function cbox:OnSelect(index, value, data)
     * 
     * 	// Clear combo box and set a thank you message
     * 	self:Clear()
     * 	self:SetText("Thank you for your feedback!")
     * 	
     * 	// Here you would send the feedback to the server using a net message
     * 	// The choice is stored in the 'data' variable
     * 
     * end
     * 
     * // A simple feedback combo box which has the value set to a thank you message once a choice is clicked. 
     */
    public SetValue(value: string): void;
}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * A VGUI base panel providing drag/drop functionality. Used by {{Type|DIconLayout}}, {{Type|DListLayout}} and {{Type|DTileLayout}}. 
 * @example
 * 
 * local frame = vgui.Create( "DFrame" )
 * frame:SetSize( 300, 500 )
 * frame:Center()
 * frame:MakePopup()
 * 
 * local dragbase = vgui.Create( "DDragBase", frame )
 * dragbase:Dock( FILL )
 * dragbase:MakeDroppable( "test" )
 * dragbase:SetDropPos( "82" )
 * 
 * for i = 0, 10 do
 * 	local butt = dragbase:Add( "DButton" )
 * 	//butt:Dock( TOP )
 * 	butt:SetPos( 25, i * 25 )
 * 	butt:SetWidth( 100 )
 * 	butt:Droppable( "test" )
 * 	butt.id = i
 * 	butt.Think = function( s ) s:SetText( "ID: " .. i .. " ZPOS: " .. s:GetZPos() ) end
 * end
 * 
 * // 
 */
declare class DDragBase extends DPanel {
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Internal function used in {{ClassFunction|DDragBase|MakeDroppable}} 
     * @param drops 
     * @param bDoDrop 
     * @param command 
     * @param y 
     * @param x 
     */
    public DropAction_Copy(drops: table, bDoDrop: boolean, command: string, y: number, x: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Internal function used in {{ClassFunction|DDragBase|DropAction_Copy}} 
     * @param drops 
     * @param bDoDrop 
     * @param command 
     * @param y 
     * @param x 
     */
    public DropAction_Normal(drops: table, bDoDrop: boolean, command: string, y: number, x: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Internal function used in {{ClassFunction|DDragBase|DropAction_Normal}} 
     * @param drops 
     * @param bDoDrop 
     * @param command 
     * @param y 
     * @param x 
     */
    public DropAction_Simple(drops: table, bDoDrop: boolean, command: string, y: number, x: number): void;
    
    /**
     * @returns Name of the DnD family. 
     */
    public GetDnD(): string;
    
    /**
     * @returns 
     */
    public GetUseLiveDrag(): boolean;
    
    /**
     * Makes the panel a receiver for any droppable panel with the same DnD name. Internally calls {{ClassFunction|Panel|Receiver}}. 
     * @param name  The unique name for the receiver slot. Only droppable panels with the same DnD name as this can be dropped on the panel. 
     * @param allowCopy  Whether or not to allow droppable panels to be copied when the {{Key|Ctrl}} key is held down. 
     */
    public MakeDroppable(name: string, allowCopy: boolean): void;
    
    /**
     * Called when anything is dropped on or rearranged within the {{Type|DDragBase}}. 
     */
    public OnModified(): void;
    
    /**
     * @param name  Name of the DnD family. 
     */
    public SetDnD(name: string): void;
    
    /**
     * Determines where you can drop stuff.
     * "4" for left
     * "5" for center
     * "6" for right
     * "8" for top
     * "2" for bottom 
     * @param pos [=5] Where you're allowed to drop things. 
     */
    public SetDropPos(pos?: string): void;
    
    /**
     * @param newState 
     */
    public SetUseLiveDrag(newState: boolean): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Internal function used in {{ClassFunction|DDragBase|DropAction_Normal}} 
     * @param drop 
     * @param pnl 
     */
    public UpdateDropTarget(drop: number, pnl: Panel): void;
}

/**
 * A simple Derma Drawer 
 * @example
 * 
 * local Frame = vgui.Create( "DFrame" )
 * Frame:SetSize( 400, 200 )
 * Frame:Center()
 * Frame:MakePopup()
 * 
 * local Drawer = vgui.Create( "DDrawer", Frame )
 * Drawer:SetOpenSize( 75 )		// Default OpenSize is 100
 * Drawer:SetOpenTime( 0.2 )		// Default OpenTime is 0.3
 * Drawer:Open()				// You can also use Drawer:Close()  and  Drawer:Toggle()
 * 
 * //Let's add a panel, because Drawer is empty
 * local PanelInDrawer = vgui.Create( "DPanel", Drawer )
 * PanelInDrawer:Dock( FILL )		// Make PanelInDrawer fill place of Drawer
 * PanelInDrawer:DockMargin( 3, 0, 3, 3 ) 	// Margins for the dock. Search on wiki for more info
 * 
 * // Creates a DDrawer in a DFrame; set the open size and time; add a panel in the drawer; open the DDrawer. 
 */
declare class DDrawer extends Panel {
    /**
     * Closes the {{Type|DDrawer}}. 
     */
    public Close(): void;
    
    /**
     * Return the Open Size of DDrawer. 
     * @returns Open size. 
     */
    public GetOpenSize(): number;
    
    /**
     * Return the Open Time of DDrawer. 
     * @returns Time in seconds. 
     */
    public GetOpenTime(): number;
    
    /**
     * Opens the {{Type|DDrawer}}. 
     */
    public Open(): void;
    
    /**
     * Set the height of DDrawer 
     * @param Value  Height of DDrawer. Default is 100. 
     */
    public SetOpenSize(Value: number): void;
    
    /**
     * Set the time (in seconds) for DDrawer to open. 
     * @param value  Length in seconds. Default is 0.3 
     */
    public SetOpenTime(value: number): void;
    
    /**
     * Toggles the {{Type|DDrawer}}. 
     */
    public Toggle(): void;
}

/**
 * The debug library is intended to help you debug your scripts, however it also has several other powerful uses. 
 */
declare namespace debug {
    /**
     * Enters an interactive mode with the user, running each string that the user enters. Using simple commands and other debug facilities, the user can inspect global and local variables, change their values, evaluate expressions, and so on. A line containing only the word cont finishes this function, so that the caller continues its execution.
     * 
     * * Commands for debug.debug are not lexically nested within any function, and so have no direct access to local variables.
     * * This only works on the source dedicated server.
     * * To exit this interactive mode, you can press Ctrl + Z then Enter OR type the word 'cont' on a single line and press enter. 
     */
    function debug(): void;
    
    /**
     * Returns the environment of the passed object. This can be set with {{LibraryFunction|debug|setfenv}} 
     * @param object  Object to get environment of 
     * @returns Environment 
     */
    function getfenv(object: table): table;
    
    /**
     * Returns the current hook settings of the passed thread. The thread argument can be omitted. This is unrelated to [[:Category:GM Hooks|gamemode hooks]]. More information on hooks can be found at http://www.lua.org/pil/23.2.html 
     * @param thread [=nil] Which thread to retrieve its hook from 
     * @returns [Hook function, Hook mask, Hook count] 
     * !TupleReturn
     */
    function gethook(thread?: thread): [Function, string, number];
    
    /**
     * Returns debug information about a function. 
     * @param funcOrStackLevel  Takes either a function or a number representing the stack level as an argument. Stack level 0 always corresponds to the debug.getinfo call, 1 would be the function calling debug.getinfo, and so on.
     * 
     * Returns useful information about that function in a table. 
     * @param fields [="flnSu"] A string whose characters specify the information to be retrieved.
     * 
     * * f - Populates the func field.
     * * l - Populates the currentline field.
     * * L - Populates the activelines field.
     * * n - Populates the name and namewhat fields - only works if stack level is passed rather than function pointer.
     * * S - Populates the location fields (lastlinedefined, linedefined, short_src, source and what).
     * * u - Populates the argument and upvalue fields (isvararg, nparams, nups) 
     * @returns A table as a {{Struct|DebugInfo}} containing information about the function you passed. Can return nil if the stack level didn't point to a valid stack frame. 
     * @example
     * 
     * PrintTable( debug.getinfo( net.Receive ) )
     * 
     * // Let's find out information about net.Receive, such as which file it's defined in, the line it starts and the line it ends, and if it's defined in Lua, or C plus additional information. 
     */
    function getinfo(funcOrStackLevel: Function, fields?: string): DebugInfo;
    
    /**
     * Gets the name and value of a local variable indexed from the level 
     * @param thread [=Current thread] The thread 
     * @param level [=] The level above the thread. 
     * 0 = the function that was called (most always this function)'s arguments
     * 
     * 1 = the thread that had called this function.
     * 
     * 2 = the thread that had called the function that started the thread that called this function.
     * 
     * A function defined in Lua can also be passed as the level. The index will specify the parameter's name to be returned (a parameter will have a value of nil). 
     * @param index [=] The variable's index you want to get.
     * 
     * 1 = the first local defined in the thread
     * 
     * 2 = the second local defined in the thread
     * 
     * etc... 
     * @returns [The name of the variable
     * 
     * Sometimes this will be "(*temporary)" if the local variable had no name. 
     * 
     * **Note:**
     * >Variables with names starting with '''(''' are '''internal variables'''.
     * 
     * , The value of the local variable.] 
     * @example
     * 
     * local name, value;
     * local NIL = {} // to represent nil variables
     * local locals = {}
     * local i = 1
     * while( true ) do
     *     name, value = debug.getlocal( 1, i )
     *     if ( name == nil ) then break end
     *     locals[ name ] = value == nil and NIL or value
     * 	i = i + 1
     * end
     * 
     * for k,v in pairs( locals ) do 
     * 	print( k, v )
     * end
     * 
     * // Gets all the local variables of the current thread and stores them in a table.@example
     * 
     * local print = print
     * local getlocal = debug.getlocal
     * 
     * local function PrintFunctionParameters(func)
     * 	local k = 2
     * 	local param = getlocal(func, 1)
     * 	while param ~= nil do
     * 		print(param)
     * 		param = getlocal(func, k)
     * 		k = k + 1
     * 	end
     * end
     * 
     * PrintFunctionParameters(hook.Add)
     * 
     * // Prints the parameter names for {{LibraryFunction|hook|Add}} 
     * !TupleReturn
     */
    function getlocal(thread?: thread, level?: number, index?: number): [string, any];
    
    /**
     * Returns the metatable of an object. This function ignores the metatable's __metatable field. 
     * @param object  The object to retrieve the metatable from. 
     * @returns The metatable of the given object. 
     */
    function getmetatable(object: any): table;
    
    /**
     * Returns the internal Lua registry table.
     * 
     * The Lua registry is used by the engine and binary modules to create references to Lua values. Avoid creating entries into the registry with a number as the key, as they are reserved for the reference system.
     * 
     * {{Warning|Improper editing of the registry can result in unintended side effects, including crashing of the game.}} 
     * @returns The Lua registry 
     */
    function getregistry(): table;
    
    /**
     * Used for getting variable values in an index from the passed function. This does nothing for C functions. 
     * @param func  Function to get the upvalue indexed from. 
     * @param index  The index in the upvalue array. The max number of entries can be found in {{LibraryFunction|debug|getinfo}}'s "[[Structures/DebugInfo|nups]]" key. 
     * @returns [Name of the upvalue. Will be nil if the index was out of range (< 1 or > {{LibraryFunction|debug|getinfo}}.nups), or the function was defined in C., Value of the upvalue.] 
     * @example
     * 
     * local foo = 5
     * local bar = "hello"
     * local test = { "table", true, "variable" }
     * 
     * local function DoSomethingWithFoo()
     * 	// This code won't be run but the function
     * 	// has to reference the variable for
     * 	// it to be counted as an upvalue
     * 	foo = foo + 1
     * end
     * 
     * local function DoSomethingWithFooAndBar()
     * 	foo = foo / 2
     * 	bar = bar .. " world"
     * end
     * 
     * local function DoSomethingWithBarAndTest()
     * 	test[1] = bar .. "reader!"
     * end
     * 
     * // level = stack level to get local variables of
     * // returns a table with {{Type|string}} keys representing the variable name
     * local function GetUpvalues( func )
     * 	local info = debug.getinfo( func, "uS" )
     * 	local variables = {}
     * 
     * 	// Upvalues can't be retrieved from C functions
     * 	if ( info != nil && info.what == "Lua" ) then
     * 		local upvalues = info.nups
     * 
     * 		for i = 1, upvalues do
     * 			local key, value = debug.getupvalue( func, i )
     * 			variables[ key ] = value
     * 		end
     * 	end
     * 
     * 	return variables
     * end
     * 
     * print( "DoSomethingWithFoo:" )
     * PrintTable( GetUpvalues( DoSomethingWithFoo ) )
     * 
     * print( "\nDoSomethingWithFooAndBar:" )
     * PrintTable( GetUpvalues( DoSomethingWithFooAndBar ) )
     * 
     * print( "\nDoSomethingWithBarAndTest:" )
     * PrintTable( GetUpvalues( DoSomethingWithBarAndTest ) )
     * 
     * // Prints the upvalues of some local functions. 
     * !TupleReturn
     */
    function getupvalue(func: Function, index: number): [string, any];
    
    /**
     * Sets the environment of the passed object. 
     * @param object  Object to set environment of 
     * @param env  Environment to set 
     * @returns The object 
     */
    function setfenv(object: table, env: table): table;
    
    /**
     * Sets the given function as a Lua hook. This is completely different to gamemode hooks. The thread argument can be completely omitted and calling this function with no arguments will remove the current hook. This is used by default for infinite loop detection. More information on hooks can be found at http://www.lua.org/pil/23.2.html
     * 
     * Hooks are not always ran when code that has been compiled by LuaJIT's JIT compiler is being executed. This means that relying on them for infinite loop protection is unwise. 
     * @param thread  Thread to set the hook on. This argument can be omited 
     * @param hook  Function for the hook to call 
     * @param mask  The hook's mask 
     * @param count  How often to call the hook (in instructions). 0 for every instruction 
     */
    function sethook(thread: thread, hook: Function, mask: string, count: number): void;
    
    /**
     * {{Delete|This function was removed due to security concerns.}}
     * 
     * Sets a local variable's value. 
     * @param thread [=Current Thread] The thread 
     * @param level [=] The level above the thread. 
     * 0 is the function that was called (most always this function)'s arguments
     * 
     * 1 is the thread that had called this function.
     * 
     * 2 is the thread that had called the function that started the thread that called this function. 
     * @param index [=] The variable's index you want to get.
     * 
     * 1 = the first local defined in the thread
     * 
     * 2 = the second local defined in the thread 
     * @param value [=nil] The value to set the local to 
     * @returns The name of the local variable if the local at the index exists, otherwise nil is returned. 
     * @example
     * 
     * local var1 = "Luke, I am not your father."
     * local var2 = "PMFPMF"
     * 
     * (function()
     * 	print("Getting the locals now!")
     * 	PrintTable({debug.getlocal(2, 1)})
     * 	PrintTable({debug.getlocal(2, 2)})
     * 
     * 	print("\nSetting the locals now!")
     * 	print(debug.setlocal(2, 1, "I'm actually your mother."))
     * 	print(debug.setlocal(2, 2, "Chemo-chi"))
     * 	print(debug.setlocal(2, 3, "nil should be returned here!"))
     * 
     * 	print("\nHere are the locals after being set!")
     * 	PrintTable({debug.getlocal(2, 1)})
     * 	PrintTable({debug.getlocal(2, 2)})
     * end)()
     * 
     * // Prints the local variables, sets them, then prints the variables again. 
     */
    function setlocal(thread?: thread, level?: number, index?: number, value?: any): string;
    
    /**
     * {{Delete|This function was removed due to security concerns.}}
     * 
     * Sets a local variable's value. 
     * @param level  The level above the thread. 
     * 0 is the function that was called (most always this function)'s arguments
     * 
     * 1 is the thread that had called this function.
     * 
     * 2 is the thread that had called the function that started the thread that called this function. 
     * @param index  The variable's index you want to get.
     * 
     * 1 = the first local defined in the thread
     * 
     * 2 = the second local defined in the thread 
     * @returns The name of the local variable if the local at the index exists, otherwise nil is returned. 
     * @example
     * 
     * local var1 = "Luke, I am not your father."
     * local var2 = "PMFPMF"
     * 
     * (function()
     * 	print("Getting the locals now!")
     * 	PrintTable({debug.getlocal(2, 1)})
     * 	PrintTable({debug.getlocal(2, 2)})
     * 
     * 	print("\nSetting the locals now!")
     * 	print(debug.setlocal(2, 1, "I'm actually your mother."))
     * 	print(debug.setlocal(2, 2, "Chemo-chi"))
     * 	print(debug.setlocal(2, 3, "nil should be returned here!"))
     * 
     * 	print("\nHere are the locals after being set!")
     * 	PrintTable({debug.getlocal(2, 1)})
     * 	PrintTable({debug.getlocal(2, 2)})
     * end)()
     * 
     * // Prints the local variables, sets them, then prints the variables again. 
     */
    function setlocal(level: number, index: number): string;
    
    /**
     * Sets the object's metatable. Unlike {{GlobalFunction|setmetatable}}, this function works regardless of whether the first object passed is a valid table or not; this function even works on primitive datatypes such as numbers, functions, and even nil. 
     * @param object  Object to set the metatable for. 
     * @param metatable  The metatable to set for the object.
     * If this argument is nil, then the object's metatable is removed. 
     * @returns true if the object's metatable was set successfully. 
     */
    function setmetatable(object: any, metatable: table): boolean;
    
    /**
     * {{Delete|This function was removed due to security concerns.}}
     * 
     * Sets the variable indexed from func 
     * @param func  The function to index the upvalue from 
     * @param index  The index from func 
     * @param val [=nil] The value to set the upvalue to. 
     * @returns Returns nil if there is no upvalue with the given index, otherwise it returns the upvalue's name. 
     * @example
     * 
     * local function my_isfunction(f)
     * 	return type(f) == "function" or f == "coolguy"	
     * end
     * 
     * print(debug.setupvalue(hook.Add, 1, my_isfunction))
     * 
     * // An example demonstrating a function overwrite. 
     */
    function setupvalue(func: Function, index: number, val?: any): string;
    
    /**
     * Prints out the lua function call stack to the console. 
     * @example
     * 
     * debug.Trace()
     * 
     * // Prints the current call stack. 
     */
    function Trace(): void;
    
    /**
     * Returns a full execution stack trace. 
     * @param thread [=current thread] Thread (ie. error object from xpcall error handler) to build traceback for. 
     * @param message [=nil] Appended at the beginning of the traceback. 
     * @param level [=1] Which level to start the traceback. 
     * @returns A dump of the execution stack. 
     * @example
     * 
     * print(debug.traceback())
     * 
     * // Prints the traceback into console.@example
     * 
     * function TracebackTest()
     *      AnotherTracebackFunction()
     * end
     * 
     * function AnotherTracebackFunction()
     *      print(debug.traceback())
     * end
     * 
     * // Defines two functions that are later visible in the traceback. Enter "lua_run TracebackTest()" into the development console to achieve exact results. 
     */
    function traceback(thread?: thread, message?: string, level?: number): string;
    
    /**
     * {{Delete|This function was removed due to security concerns.}}
     * 
     * Returns an unique identifier for the upvalue indexed from func 
     * @param func  The function to index the upvalue from 
     * @param index  The index from func 
     * @returns A unique identifier 
     * @example
     * 
     * print(type(debug.upvalueid(hook.Add, 1)))
     * 
     * // Small example showing the type of the returned data. 
     */
    function upvalueid(func: Function, index: number): number;
    
    /**
     * {{Delete|This function was removed due to security concerns.}}
     * 
     * Make the n1-th upvalue of the Lua closure f1 refer to the n2-th upvalue of the Lua closure f2. 
     * @param f1 
     * @param n1 
     * @param f2 
     * @param n2 
     */
    function upvaluejoin(f1: Function, n1: number, f2: Function, n2: number): void;
}

/**
 * The debugoverlay library is mainly useful for 3D debugging, it can be used to draw shapes on the screen for debug purposes.
 * 
 * **Note:**
 * >These functions will not do anything unless the '''developer''' console variable is set to non 0.
 * 
 * **Note:**
 * >These function appear to not work in singleplayer 
 */
declare namespace debugoverlay {
    /**
     * Displays an axis indicator at the specified position.
     * 
     * **Note:**
     * >This function will silently fail if the '''developer''' {{Type|ConVar}} is set to 0 
     * @param origin  Position origin 
     * @param ang  Angle of the axis 
     * @param size  Size of the axis 
     * @param lifetime [=1] Number of seconds to appear 
     * @param ignoreZ [=false] If true, will draw on top of everything; ignoring the Z buffer 
     */
    function Axis(origin: Vector, ang: Angle, size: number, lifetime?: number, ignoreZ?: boolean): void;
    
    /**
     * Displays a solid coloured box at the specified position.
     * 
     * **Note:**
     * >This function will silently fail if the '''developer''' {{Type|ConVar}} is set to 0. 
     * @param origin  Position origin 
     * @param mins  Minimum bounds of the box 
     * @param maxs  Maximum bounds of the box 
     * @param lifetime [=1] Number of seconds to appear 
     * @param color [=Color( 255, 255, 255 )] The color of the box. Uses the {{Struct|Color}} 
     */
    function Box(origin: Vector, mins: Vector, maxs: Vector, lifetime?: number, color?: Color): void;
    
    /**
     * Displays a solid colored rotated box at the specified position.
     * 
     * **Note:**
     * >This function will silently fail if the '''developer''' {{Type|ConVar}} is set to 0. 
     * @param pos  World position 
     * @param mins  The mins of the box (lowest corner) 
     * @param maxs  The maxs of the box (highest corner) 
     * @param ang  The angle to draw the box at 
     * @param lifetime [=1] Amount of seconds to show the box 
     * @param color [=Color( 255, 255, 255 )] The color of the box. Uses the {{Struct|Color}} 
     */
    function BoxAngles(pos: Vector, mins: Vector, maxs: Vector, ang: Angle, lifetime?: number, color?: Color): void;
    
    /**
     * Creates a coloured cross at the specified position for the specified time.
     * 
     * **Note:**
     * >This function will silently fail if the '''developer''' {{Type|ConVar}} is set to 0. 
     * @param position  Position origin 
     * @param size  Size of the cross 
     * @param lifetime [=1] Number of seconds the cross to appear 
     * @param color [=Color( 255, 255, 255 )] The color of the cross. Uses the {{Struct|Color}} 
     * @param ignoreZ [=false] If true, will draw on top of everything; ignoring the Z buffer 
     */
    function Cross(position: Vector, size: number, lifetime?: number, color?: Color, ignoreZ?: boolean): void;
    
    /**
     * Displays 2D text at the specified coordinates.
     * 
     * **Note:**
     * >This function will silently fail if the '''developer''' {{Type|ConVar}} is set to 0. 
     * @param pos  The position in 3D to display the text. 
     * @param line  Line of text, will offset text on the to display the new line unobstructed 
     * @param text  The text to display 
     * @param lifetime [=1] Number of seconds to appear 
     * @param color [=Color( 255, 255, 255 )] The color of the box. Uses the {{Struct|Color}} 
     */
    function EntityTextAtPosition(pos: Vector, line: number, text: string, lifetime?: number, color?: Color): void;
    
    /**
     * Draws a 3D grid of limited size in given position.
     * 
     * **Note:**
     * >This function will silently fail if the '''developer''' {{Type|ConVar}} is set to 0. 
     * @param position 
     */
    function Grid(position: Vector): void;
    
    /**
     * Displays a coloured line at the specified position.
     * 
     * **Note:**
     * >This function will silently fail if the '''developer''' {{Type|ConVar}} is set to 0. 
     * @param pos1  First position of the line 
     * @param pos2  Second position of the line 
     * @param lifetime [=1] Number of seconds to appear 
     * @param color [=Color( 255, 255, 255 )] The color of the line. Uses the {{Struct|Color}} 
     * @param ignoreZ [=false] If true, will draw on top of everything; ignoring the Z buffer 
     */
    function Line(pos1: Vector, pos2: Vector, lifetime?: number, color?: Color, ignoreZ?: boolean): void;
    
    /**
     * Displays text triangle at the specified coordinates.
     * 
     * **Note:**
     * >This function will silently fail if the '''developer''' {{Type|ConVar}} is set to 0. 
     * @param x  The position of the text, from 0 ( left ) to 1 ( right ). 
     * @param y  The position of the text, from 0 ( top ) to 1 ( bottom ). 
     * @param text  The text to display 
     * @param lifetime [=1] Number of seconds to appear 
     * @param color [=Color( 255, 255, 255 )] The color of the box. Uses the {{Struct|Color}} 
     */
    function ScreenText(x: number, y: number, text: string, lifetime?: number, color?: Color): void;
    
    /**
     * Displays a coloured sphere at the specified position.
     * 
     * **Note:**
     * >This function will silently fail if the '''developer''' {{Type|ConVar}} is set to 0. 
     * @param origin  Position origin 
     * @param size  Size of the sphere 
     * @param lifetime [=1] Number of seconds to appear 
     * @param color [=Color( 255, 255, 255 )] The color of the sphere. Uses the {{Struct|Color}} 
     * @param ignoreZ [=false] If true, will draw on top of everything; ignoring the Z buffer 
     */
    function Sphere(origin: Vector, size: number, lifetime?: number, color?: Color, ignoreZ?: boolean): void;
    
    /**
     * Displays "swept" box, two boxes connected with lines by their verices.
     * 
     * **Note:**
     * >This function will silently fail if the '''developer''' {{Type|ConVar}} is set to 0. 
     * @param vStart  The start position of the box. 
     * @param vEnd  The end position of the box. 
     * @param vMins  The "minimum" edge of the box. 
     * @param vMaxs  The "maximum" edge of the box. 
     * @param ang 
     * @param lifetime [=1] Number of seconds to appear 
     * @param color [=Color( 255, 255, 255 )] The color of the box. Uses the {{Struct|Color}} 
     */
    function SweptBox(vStart: Vector, vEnd: Vector, vMins: Vector, vMaxs: Vector, ang: Angle, lifetime?: number, color?: Color): void;
    
    /**
     * Displays text at the specified position.
     * 
     * **Note:**
     * >This function will silently fail if the '''developer''' {{Type|ConVar}} is set to 0. 
     * @param origin  Position origin 
     * @param text  String message to display 
     * @param lifetime [=1] Number of seconds to appear 
     * @param viewCheck [=false] Clip text that is obscured 
     */
    function Text(origin: Vector, text: string, lifetime?: number, viewCheck?: boolean): void;
    
    /**
     * Displays a colored triangle at the specified coordinates.
     * 
     * **Note:**
     * >This function will silently fail if the '''developer''' {{Type|ConVar}} is set to 0. 
     * @param pos1  First point of the triangle 
     * @param pos2  Second point of the triangle 
     * @param pos3  Third point of the triangle 
     * @param lifetime [=1] Number of seconds to appear 
     * @param color [=Color( 255, 255, 255 )] The color of the box. Uses the {{Struct|Color}} 
     * @param ignoreZ [=false] If true, will draw on top of everything; ignoring the Z buffer 
     */
    function Triangle(pos1: Vector, pos2: Vector, pos3: Vector, lifetime?: number, color?: Color, ignoreZ?: boolean): void;
}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * A panel used by the [[Editable Entities]] system. 
 */
declare class DEntityProperties extends DProperties {
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called internally by {{ClassFunction|DEntityProperties|RebuildControls}}. 
     * @param varname 
     * @param editdata 
     */
    public EditVariable(varname: string, editdata: table): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called internally when an entity being edited became invalid.
     * 
     * You should use {{ClassFunction|DEntityProperties|OnEntityLost}} instead. 
     */
    public EntityLost(): void;
    
    /**
     * Called when we were editing an entity and then it became invalid (probably removed) 
     */
    public OnEntityLost(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called internally by {{ClassFunction|DEntityProperties|SetEntity}} to rebuild the controls. 
     */
    public RebuildControls(): void;
    
    /**
     * Sets the entity to be edited by this panel. The entity must support the [[Editable Entities]] system or nothing will happen. 
     * @param ent  The entity to edit 
     */
    public SetEntity(ent: Entity): void;
}

/**
 * The derma library allows you to add custom derma controls and create & modify derma skins. 
 */
declare namespace derma {
    /**
     * Gets the color from a Derma skin of a panel and returns default color if not found 
     * @param name 
     * @param pnl 
     * @param defaultVal  The default color in case of failure. 
     */
    function Color(name: string, pnl: Panel, defaultVal: table): void;
    
    /**
     * Defines a new Derma control with an optional base.
     * 
     * This calls {{LibraryFunction|vgui|Register}} internally, but also does the following:
     * * Adds the control to {{LibraryFunction|derma|GetControlList}}
     * * Adds a key "Derma" - This is returned by {{LibraryFunction|derma|GetControlList}}
     * * Makes a global table with the name of the control (This is technically deprecated and should not be relied upon)
     * * If reloading (i.e. called this function with name of an existing panel), updates all existing instances of panels with this name. (Updates functions, calls {{HookFunction|PANEL|PreAutoRefresh}} and {{HookFunction|PANEL|PostAutoRefresh}}, etc.) 
     * @param name  Name of the newly created control 
     * @param description  Description of the control 
     * @param tab  Table containing control methods and properties 
     * @param base  Derma control to base the new control off of 
     * @returns A table containing the new control's methods and properties 
     * @example
     * 
     * local PANEL = {}
     * 
     * function PANEL:OnChange()
     *     print(self:GetValue())
     * end
     * 
     * derma.DefineControl("MyTextEntry", "Printing text entry control", PANEL, "DTextEntry")
     * 
     * // Defines a new control based off of DTextEntry that prints to the console whenever it is changed 
     */
    function DefineControl(name: string, description: string, tab: table, base: string): table;
    
    /**
     * Defines a new skin so that it is usable by Derma. The default skin can be found in "garrysmod/lua/skins/default.lua" 
     * @param name  Name of the skin 
     * @param descriptions  Description of the skin 
     * @param skin  Table containing skin data 
     */
    function DefineSkin(name: string, descriptions: string, skin: table): void;
    
    /**
     * Returns the {{LibraryFunction|derma|Controls}} table, a list of all derma controls registered with {{LibraryFunction|derma|DefineControl}}. 
     * @returns A listing of all available derma-based controls. See {{LibraryFunction|derma|Controls}} for structure and contents. 
     */
    function GetControlList(): table;
    
    /**
     * Returns the default skin table, which can be changed with the hook [[GM/ForceDermaSkin]] 
     * @returns Skin table 
     */
    function GetDefaultSkin(): table;
    
    /**
     * Returns the skin table of the skin with the supplied name 
     * @param name  Name of skin 
     * @returns Skin table 
     */
    function GetNamedSkin(name: string): table;
    
    /**
     * Returns a copy of the table containing every Derma skin 
     * @returns Table of every Derma skin 
     */
    function GetSkinTable(): table;
    
    /**
     * Clears all cached panels so that they reassess which skin they should be using. 
     */
    function RefreshSkins(): void;
    
    /**
     * Returns how many times {{LibraryFunction|derma|RefreshSkins}} has been called. 
     * @returns Amount of times {{LibraryFunction|derma|RefreshSkins}} has been called. 
     */
    function SkinChangeIndex(): number;
    
    /**
     * Calls the specified hook for the given panel 
     * @param type  The type of hook to run 
     * @param name  The name of the hook to run 
     * @param panel  The panel to call the hook for 
     * @param w  The width of the panel 
     * @param h  The height of the panel 
     * @returns The returned variable from the skin hook 
     */
    function SkinHook(type: string, name: string, panel: Panel, w: number, h: number): any;
    
    /**
     * Returns a function to draw a specified texture of panels skin. 
     * @param name  The identifier of the texture 
     * @param pnl  Panel to get the skin of. 
     * @param fallback [=nil] What to return if we failed to retrieve the texture 
     * @returns A function that is created with the {{Lib|GWEN}} to draw a texture. 
     */
    function SkinTexture(name: string, pnl: Panel, fallback?: any): Function;
}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * The little "+" button used by {{Type|DProperties}} and {{Type|DTree_Node}}. 
 */
declare class DExpandButton extends DButton {
    /**
     * Returns whether this DExpandButton is expanded or not. 
     * @returns True if expanded, false otherwise 
     */
    public GetExpanded(): boolean;
    
    /**
     * Sets whether this DExpandButton should be expanded or not. Only changes appearance. 
     * @param expanded  True to expand ( visually will show a "-" ) 
     */
    public SetExpanded(expanded: boolean): void;
}

/**
 * A tree and list-based file browser.
 * 
 * It allows filtering by folder (directory) name and file extension, and can display models as {{Type|SpawnIcon}}s. 
 * @example
 * 
 * local frame = vgui.Create( "DFrame" )
 * frame:SetSize( 500, 250 )
 * frame:SetSizable( true )
 * frame:Center()
 * frame:MakePopup()
 * frame:SetTitle( "DFileBrowser Example" )
 * 
 * local browser = vgui.Create( "DFileBrowser", frame )
 * browser:Dock( FILL )
 * 
 * browser:SetPath( "GAME" ) // The access path i.e. GAME, LUA, DATA etc.
 * browser:SetBaseFolder( "data" ) // The root folder
 * browser:SetOpen( true ) // Open the tree to show sub-folders
 * browser:SetCurrentFolder( "persist" ) // Show files from persist
 * 
 * function browser:OnSelect( path, pnl ) // Called when a file is clicked
 * 	print( path )
 * end
 * 
 * // Creates a DFileBrowser and displays the data/persist folder. Any file clicked is printed to the console.@example
 * 
 * local browser = vgui.Create( "DFileBrowser", frame )
 * browser:Dock( FILL )
 * 
 * browser:SetPath( "GAME" ) // The access path i.e. GAME, LUA, DATA etc.
 * browser:SetBaseFolder( "models" ) // The root folder
 * browser:SetName( "Props_ Models" ) // Name to display in tree
 * browser:SetSearch( "props_" ) // Search folders starting with "props_"
 * browser:SetFileTypes( "*.mdl" ) // File type filter
 * browser:SetOpen( true ) // Opens the tree (same as double clicking)
 * browser:SetCurrentFolder( "props_badlands" ) // Set the folder to use
 * 
 * function browser:OnSelect( path, pnl ) // Called when a file is clicked
 * 	RunConsoleCommand( "gm_spawn", path ) // Spawn the model we clicked
 * 	frame:Close()
 * end
 * 
 * // Creates a DFileBrowser that can spawn models from ''props_'' folders.
 * 
 * **Note:**
 * >Uses the same {{Type|DFrame}} as above
 * 
 * @example
 * 
 * browser:SetModels( true ) // Use SpawnIcons instead of a list
 * 
 * // Same as above, but enables model viewing. The following line is added to the above code. 
 */
declare class DFileBrowser extends DPanel {
    /**
     * Clears the file tree and list, and resets all values. 
     */
    public Clear(): void;
    
    /**
     * Marks all of the panel's children for deletion. 
     */
    public Clear(): void;
    
    /**
     * Returns the root directory/folder of the file tree. 
     * @returns The path to the root folder. 
     */
    public GetBaseFolder(): string;
    
    /**
     * Returns the current directory/folder being displayed. 
     * @returns The directory the file list is currently displaying. 
     */
    public GetCurrentFolder(): string;
    
    /**
     * Returns the current file type filter on the file list. 
     * @returns The current filter applied to the file list. 
     */
    public GetFileTypes(): string;
    
    /**
     * Returns the {{Type|DTree Node}} that the file tree stems from.
     * 
     * This is a child of the root node of the {{Type|DTree}}. 
     * @returns The {{Type|DTree_Node}} used for the tree. 
     */
    public GetFolderNode(): DTree_Node;
    
    /**
     * Returns whether or not the model viewer mode is enabled. In this mode, files are displayed as {{Type|SpawnIcon}}s instead of a list. 
     * @returns Whether or not files will be displayed using {{Type|SpawnIcon}}s. 
     */
    public GetModels(): SpawnIcon;
    
    /**
     * Returns the name being used for the file tree. 
     * @returns The name used for the root of the file tree. 
     */
    public GetName(): string;
    
    /**
     * Returns the internal name of the panel. 
     * @returns name 
     */
    public GetName(): string;
    
    /**
     * Returns whether or not the file tree is open. 
     * @returns Whether or not the file tree is open. 
     */
    public GetOpen(): boolean;
    
    /**
     * Returns the access path of the file tree. This is ''GAME'' unless changed with {{ClassFunction|DFileBrowser|SetPath}}.
     * 
     * See {{LibraryFunction|file|Read}} for how paths work. 
     * @returns The current access path i.e. "GAME", "LUA", "DATA" etc. 
     */
    public GetPath(): string;
    
    /**
     * Returns the current search filter on the file tree. 
     * @returns The filter in use on the file tree. 
     */
    public GetSearch(): string;
    
    /**
     * Called when a file is double-clicked.
     * 
     * **Note:**
     * >Double-clicking a file or icon will trigger '''both''' this and {{ClassFunction|DFileBrowser|OnSelect}}. 
     * @param filePath  The path to the file that was double-clicked. 
     * @param selectedPanel  The panel that was double-clicked to select this file.
     * 
     * This will either be a {{Type|DListView_Line}} or {{Type|SpawnIcon}} depending on whether the model viewer mode is enabled. See {{ClassFunction|DFileBrowser|SetModels}}. 
     */
    public OnDoubleClick(filePath: string, selectedPanel: DListView_Line | SpawnIcon): void;
    
    /**
     * Called when a file is right-clicked.
     * 
     * **Note:**
     * >When not in model viewer mode, {{ClassFunction|DFileBrowser|OnSelect}} will also be called if the file is not already selected. 
     * @param filePath  The path to the file that was right-clicked. 
     * @param selectedPanel  The panel that was right-clicked to select this file.
     * 
     * This will either be a {{Type|DListView_Line}} or {{Type|SpawnIcon}} depending on whether the model viewer mode is enabled. See {{ClassFunction|DFileBrowser|SetModels}}. 
     */
    public OnRightClick(filePath: string, selectedPanel: DListView_Line | SpawnIcon): void;
    
    /**
     * Called when a file is selected. 
     * @param filePath  The path to the file that was selected. 
     * @param selectedPanel  The panel that was clicked to select this file.
     * 
     * This will either be a {{Type|DListView_Line}} or {{Type|SpawnIcon}} depending on whether the model viewer mode is enabled. See {{ClassFunction|DFileBrowser|SetModels}}. 
     */
    public OnSelect(filePath: string, selectedPanel: DListView_Line | SpawnIcon): void;
    
    /**
     * Sets the root directory/folder of the file tree.
     * 
     * This needs to be set for the file tree to be displayed. 
     * @param baseDir  The path to the folder to use as the root. 
     */
    public SetBaseFolder(baseDir: string): void;
    
    /**
     * Sets the directory/folder from which to display the file list. 
     * @param currentDir  The directory to display files from. 
     */
    public SetCurrentFolder(currentDir: string): void;
    
    /**
     * Sets the file type filter for the file list.
     * 
     * This accepts the same file extension wildcards as {{LibraryFunction|file|Find}}. 
     * @param fileTypes [="*.*"] A list of file types to display, separated by spaces e.g.
     * 
     * <code>"*.lua *.txt *.mdl"</code> 
     */
    public SetFileTypes(fileTypes?: string): void;
    
    /**
     * Enables or disables the model viewer mode. In this mode, files are displayed as {{Type|SpawnIcon}}s instead of a list.
     * 
     * **Note:**
     * >This should only be used for ''.mdl'' files; the spawn icons will display error models for others. See {{ClassFunction|DFileBrowser|SetFileTypes}} 
     * @param showModels [=false] Whether or not to display files using {{Type|SpawnIcon}}s. 
     */
    public SetModels(showModels?: SpawnIcon): void;
    
    /**
     * Sets the name to use for the file tree. 
     * @param treeName [=''baseFolder''] The name for the root of the file tree. Passing no value causes this to be the base folder name. See {{ClassFunction|DFileBrowser|SetBaseFolder}}. 
     */
    public SetName(treeName?: string): void;
    
    /**
     * Sets the internal name of the panel. 
     * @param name  The new name of the panel. 
     */
    public SetName(name: string): void;
    
    /**
     * Opens or closes the file tree. 
     * @param open [=false] ''true'' to open the tree, ''false'' to close it. 
     * @param useAnim [=false] If ''true'', the {{Type|DTree}}'s open/close animation is used. 
     */
    public SetOpen(open?: boolean, useAnim?: DTree): void;
    
    /**
     * Sets the access path for the file tree. This is set to ''GAME'' by default.
     * 
     * See {{LibraryFunction|file|Read}} for how paths work. 
     * @param path  The access path i.e. "GAME", "LUA", "DATA" etc. 
     */
    public SetPath(path: string): void;
    
    /**
     * Sets the search filter for the file tree.
     * 
     * This accepts the same wildcards as {{LibraryFunction|file|Find}}. 
     * @param filter [="*"] The filter to use on the file tree. 
     */
    public SetSearch(filter?: string): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Called to set up the {{Type|DTree}} and file viewer when a base path has been set.
     * 
     * Calls {{ClassFunction|DFileBrowser|SetupTree}} and {{ClassFunction|DFileBrowser|SetupFiles}}. 
     * @returns Whether or not the variables needed to set up have been defined. 
     */
    public Setup(): boolean;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Called to set up the {{Type|DListView}} or {{Type|DIconBrowser}} by {{ClassFunction|DFileBrowser|Setup}}.
     * 
     * The icon browser is used when in models mode. See {{ClassFunction|DFileBrowser|SetModels}}. 
     * @returns Whether or not the files pane was set up successfully. 
     */
    public SetupFiles(): boolean;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Called to set up the {{Type|DTree}} by {{ClassFunction|DFileBrowser|Setup}}. 
     * @returns Whether or not the tree was set up successfully. 
     */
    public SetupTree(): boolean;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Builds the file or icon list for the current directory.
     * 
     * You should use {{ClassFunction|DFileBrowser|SetCurrentFolder}} to change the directory. 
     * @param currentDir  The directory to populate the list from. 
     */
    public ShowFolder(currentDir: string): void;
    
    /**
     * Sorts the file list.
     * 
     * **Note:**
     * >This is only functional when not using the model viewer. See {{ClassFunction|DFileBrowser|SetModels}} 
     * @param descending [=false] The sort order. ''true'' for descending (z-a), ''false'' for ascending (a-z). 
     */
    public SortFiles(descending?: boolean): void;
}

/**
 * An easy form with functions to quickly add form elements 
 */
declare class DForm extends DCollapsibleCategory {
    /**
     * Adds one or two items to the DForm.
     * If this method is called with only one argument, it is added to the bottom of the form. If two arguments are passed, they are placed side-by-side at the bottom of the form.
     * 
     * Internally, this function is used by the various DForm functions to, for example, add labels to the left of buttons. 
     * @param left  Left-hand element to add to the DForm. 
     * @param right  Right-hand element to add to the DForm. 
     */
    public AddItem(left: Panel, right: Panel): void;
    
    /**
     * Adds a {{Type|DButton}} onto the {{Type|DForm}} 
     * @param text  The text on the button 
     * @param concmd  The concommand to run when the button is clicked 
     * @param concmd_args  The arguments to pass on to the concommand when the button is clicked 
     * @returns The created {{Type|DButton}} 
     */
    public Button(text: string, concmd: string, ...concmd_args: (any)[]): DButton;
    
    /**
     * Adds a {{Type|DCheckBoxLabel}} onto the {{Type|DForm}} 
     * @param label  The label to be set next to the check box 
     * @param convar  The console variable to change when this is changed 
     * @returns The created {{Type|DCheckBoxLabel}} 
     */
    public CheckBox(label: string, convar: string): DCheckBoxLabel;
    
    /**
     * Adds a {{Type|DComboBox}} onto the {{Type|DForm}} 
     * @param title  Text to the left of the combo box 
     * @param convar  Console variable to change when the user selects something from the dropdown. 
     * @returns [The created {{Type|DComboBox}}, The created {{Type|DLabel}}] 
     * @example
     * 
     * local frame = vgui.Create( "DFrame" )
     * frame:SetSize( ScrW() / 2, ScrH() / 2 )
     * frame:MakePopup()
     * 
     * local form = frame:Add("DForm")
     * form:Dock( FILL )
     * form:DockMargin( 5, 5, 5, 5 )
     * 
     * local combobox, label = form:ComboBox( "test", "sv_accelerate" )
     * combobox:AddChoice( "10" ) // 10 will be used as convar value
     * combobox:AddChoice( "1000", 100 ) // 100 will be used as convar value
     * 
     * // 
     * !TupleReturn
     */
    public ComboBox(title: string, convar: string): [DComboBox, DLabel];
    
    /**
     * Adds a {{Type|DLabel}} onto the {{Type|DForm}}. Unlike {{ClassFunction|DForm|Help}}, this is indented and is colored blue, depending on the derma skin. 
     * @param help  The help message to be displayed. 
     * @returns The created {{Type|DLabel}} 
     */
    public ControlHelp(help: string): DLabel;
    
    /**
     * Adds a {{Type|DLabel}} onto the {{Type|DForm}} as a helper 
     * @param help  The help message to be displayed 
     * @returns The created {{Type|DLabel}} 
     */
    public Help(help: string): DLabel;
    
    /**
     * Adds a {{Type|DListBox}} onto the {{Type|DForm}} 
     * @param label  The label to set on the DListBox 
     * @returns [The created {{Type|DListBox}}, The created {{Type|DLabel}}] 
     * !TupleReturn
     */
    public ListBox(label: string): [DListBox, DLabel];
    
    /**
     * Adds a {{Type|DNumberWang}} onto the {{Type|DForm}} 
     * @param label  The label to be placed next to the DNumberWang 
     * @param convar  The console variable to change when the slider is changed 
     * @param min  The minimum value of the slider 
     * @param max  The maximum value of the slider 
     * @param decimals [=nil] The number of decimals to allow in the slider (Optional) 
     * @returns [The created {{Type|DNumberWang}}, The created {{Type|DLabel}}] 
     * !TupleReturn
     */
    public NumberWang(label: string, convar: string, min: number, max: number, decimals?: number): [DNumberWang, DLabel];
    
    /**
     * Adds a {{Type|DNumSlider}} onto the {{Type|DForm}} 
     * @param label  The label of the DNumSlider 
     * @param convar  The console variable to change when the slider is changed 
     * @param min  The minimum value of the slider 
     * @param max  The maximum value of the slider 
     * @param decimals [=nil] The number of decimals to allow on the slider. (Optional) 
     * @returns The created {{Type|DNumSlider}} 
     */
    public NumSlider(label: string, convar: string, min: number, max: number, decimals?: number): DNumSlider;
    
    /**
     * Creates a {{Type|DPanelSelect}} and docks it to the top of the DForm. 
     * @returns The created DPanelSelect. 
     */
    public PanelSelect(): Panel;
    
    /**
     * **Deprecated!**
     * 
     * Does nothing. 
     */
    public Rebuild(): void;
    
    /**
     * Sets the title (header) name of the DForm. This is ''Label'' until set. 
     * @param name  The new header name. 
     */
    public SetName(name: string): void;
    
    /**
     * Sets the internal name of the panel. 
     * @param name  The new name of the panel. 
     */
    public SetName(name: string): void;
    
    /**
     * Adds a {{Type|DTextEntry}} to a {{Type|DForm}} 
     * @param label  The label to be next to the text entry 
     * @param convar  The console variable to be changed when the text entry is changed 
     * @returns [The created {{Type|DTextEntry}}, The created {{Type|DLabel}}] 
     * !TupleReturn
     */
    public TextEntry(label: string, convar: string): [DTextEntry, DLabel];
}

/**
 * The DFrame control is the foundation for any Derma menu. It holds all of your controls. 
 * @example
 * 
 * local DermaPanel = vgui.Create( "DFrame" )
 * DermaPanel:SetPos( 100, 100 )
 * DermaPanel:SetSize( 300, 200 )
 * DermaPanel:SetTitle( "My new Derma frame" )
 * DermaPanel:SetDraggable( true )
 * DermaPanel:MakePopup()
 * 
 * // Creates a DFrame. 
 */
declare class DFrame extends EditablePanel {
    /**
     * Centers the frame relative to the whole screen and invalidates its layout. This overrides {{ClassFunction|Panel|Center}}. 
     */
    public Center(): void;
    
    /**
     * Hides or removes the DFrame, and calls {{ClassFunction|DFrame|OnClose}}.
     * 
     * To set whether the frame is hidden or removed, use {{ClassFunction|DFrame|SetDeleteOnClose}}. 
     */
    public Close(): void;
    
    /**
     * Gets whether the background behind the frame is being blurred. 
     * @returns Whether or not background blur is enabled. 
     */
    public GetBackgroundBlur(): boolean;
    
    /**
     * Determines whether or not the DFrame will be removed when it is closed. This is set with {{ClassFunction|DFrame|SetDeleteOnClose}}. 
     * @returns Whether or not the frame will be removed on close. 
     */
    public GetDeleteOnClose(): boolean;
    
    /**
     * Gets whether or not the frame is draggable by the user. 
     * @returns Whether the frame is draggable or not. 
     */
    public GetDraggable(): boolean;
    
    /**
     * Gets whether or not the frame is part of a derma menu. This is set with {{ClassFunction|DFrame|SetIsMenu}}. 
     * @returns Whether or not this frame is a menu component. 
     */
    public GetIsMenu(): boolean;
    
    /**
     * Gets the minimum height the DFrame can be resized to by the user.
     * 
     * You must call {{ClassFunction|DFrame|SetSizable}} before the user can resize the frame. 
     * @returns The minimum height the user can resize the frame to. 
     */
    public GetMinHeight(): number;
    
    /**
     * Gets the minimum width the DFrame can be resized to by the user.
     * 
     * You must call {{ClassFunction|DFrame|SetSizable}} before the user can resize the frame. 
     * @returns The minimum width the user can resize the frame to. 
     */
    public GetMinWidth(): number;
    
    /**
     * Gets whether or not the shadow effect bordering the DFrame is being drawn. 
     * @returns Whether or not the shadow is being drawn. 
     */
    public GetPaintShadow(): boolean;
    
    /**
     * Gets whether or not the DFrame is restricted to the boundaries of the screen resolution. 
     * @returns Whether or not the frame is restricted. 
     */
    public GetScreenLock(): boolean;
    
    /**
     * Gets whether or not the DFrame can be resized by the user.
     * 
     * This is achieved by clicking and dragging in the bottom right corner of the frame. 
     * @returns Whether the frame can be resized or not. 
     */
    public GetSizable(): boolean;
    
    /**
     * Returns the title of the frame. 
     * @returns Title of the frame. 
     */
    public GetTitle(): string;
    
    /**
     * Determines if the frame or one of its children has the screen focus. 
     * @returns Whether or not the frame has focus. 
     */
    public IsActive(): boolean;
    
    /**
     * Called when the DFrame is closed with {{ClassFunction|DFrame|Close}}. This applies when the ''close'' button in the DFrame's control box is clicked.
     * 
     * This is '''not''' called when the DFrame is removed with {{ClassFunction|Panel|Remove}}. 
     */
    public OnClose(): void;
    
    /**
     * Blurs background behind the frame. 
     * @param blur  Whether or not to create background blur or not. 
     */
    public SetBackgroundBlur(blur: boolean): void;
    
    /**
     * Determines whether or not the DFrame is removed when it is closed with {{ClassFunction|DFrame|Close}}. 
     * @param shouldDelete  Whether or not to delete the frame on close. This is ''true'' by default. 
     */
    public SetDeleteOnClose(shouldDelete: boolean): void;
    
    /**
     * Sets whether the frame should be draggable by the user. The DFrame can only be dragged from its title bar. 
     * @param draggable  Whether to be draggable or not. 
     */
    public SetDraggable(draggable: boolean): void;
    
    /**
     * Adds or removes an icon on the left of the {{Type|DFrame}}'s title. 
     * @param path  Set to nil to remove the icon.
     * 
     * Otherwise, set to file path to create the icon. 
     */
    public SetIcon(path: string): void;
    
    /**
     * Sets whether the frame is part of a derma menu or not.
     * 
     * If this is set to ''true'', {{GlobalFunction|CloseDermaMenus}} will not be called when the frame is clicked, and thus any open menus will remain open. 
     * @param isMenu  Whether or not this frame is a menu component. 
     */
    public SetIsMenu(isMenu: boolean): void;
    
    /**
     * Sets the minimum height the DFrame can be resized to by the user.
     * 
     * This only applies to users attempting to resize the frame; {{ClassFunction|Panel|SetTall}} and similar methods will not be affected. You must call {{ClassFunction|DFrame|SetSizable}} before the user can resize the frame. 
     * @param minH  The minimum height the user can resize the frame to. 
     */
    public SetMinHeight(minH: number): void;
    
    /**
     * Sets the minimum width the DFrame can be resized to by the user.
     * 
     * This only applies to users attempting to resize the frame; {{ClassFunction|Panel|SetWide}} and similar methods will not be affected. You must call {{ClassFunction|DFrame|SetSizable}} before the user can resize the frame. 
     * @param minW  The minimum width the user can resize the frame to. 
     */
    public SetMinWidth(minW: number): void;
    
    /**
     * Sets whether or not the shadow effect bordering the DFrame should be drawn. 
     * @param shouldPaint  Whether or not to draw the shadow. This is ''true'' by default. 
     */
    public SetPaintShadow(shouldPaint: boolean): void;
    
    /**
     * Sets whether the DFrame is restricted to the boundaries of the screen resolution. 
     * @param lock  If ''true'', the frame cannot be dragged outside of the screen bounds 
     */
    public SetScreenLock(lock: boolean): void;
    
    /**
     * Sets whether or not the DFrame can be resized by the user.
     * 
     * This is achieved by clicking and dragging in the bottom right corner of the frame. 
     * @param sizeable  Whether the frame should be resizeable or not. 
     */
    public SetSizable(sizeable: boolean): void;
    
    /**
     * Sets the title of the frame. 
     * @param title  New title of the frame. 
     */
    public SetTitle(title: string): void;
    
    /**
     * Determines whether the DFrame's control box (close, minimise and maximise buttons) is displayed. 
     * @param show  ''false'' hides the control box; this is ''true'' by default. 
     */
    public ShowCloseButton(show: boolean): void;
}

/**
 * A really simple grid layout panel.
 * 
 * **Note:**
 * >This panel will set its size automatically based on set column count. This makes it play badly with {{ClassFunction|Panel|Dock}} and cause a {{HookFunction|PANEL|PerformLayout}} call every frame. 
 * @example
 * 
 * local frame = vgui.Create( "DFrame" )
 * frame:SetPos( 500, 500 )
 * frame:SetSize( 200, 300 )
 * frame:SetTitle( "Frame" )
 * frame:MakePopup()
 *  
 * local grid = vgui.Create( "DGrid", frame )
 * grid:SetPos( 10, 30 )
 * grid:SetCols( 5 )
 * grid:SetColWide( 36 )
 *  
 * for i = 1, 30 do
 * 	local but = vgui.Create( "DButton" )
 * 	but:SetText( i )
 * 	but:SetSize( 30, 20 )
 * 	grid:AddItem( but )
 * end
 * 
 * // Creates a simple grid with numbered buttons. 
 */
declare class DGrid extends Panel {
    /**
     * Adds a new item to the grid. 
     * @param item  The item to add. It will be forced visible and parented to the {{Type|DGrid}}. 
     */
    public AddItem(item: DGrid): void;
    
    /**
     * Returns the number of columns of this {{Type|DGrid}}. Set by {{ClassFunction|DGrid|SetCols}}. 
     * @returns The number of columns of this {{Type|DGrid}} 
     */
    public GetCols(): number;
    
    /**
     * Returns the width of each column of the {{Type|DGrid}}, which is set by {{ClassFunction|DGrid|SetColWide}}. 
     * @returns The width of each column 
     */
    public GetColWide(): number;
    
    /**
     * Returns a list of panels in the grid. 
     * @returns A list of {{Type|Panel}}s. 
     */
    public GetItems(): Panel[];
    
    /**
     * Returns the height of each row of the {{Type|DGrid}}, which is set by {{ClassFunction|DGrid|SetRowHeight}}. 
     * @returns The height of each row 
     */
    public GetRowHeight(): number;
    
    /**
     * Removes given panel from the {{ClassFunction|DGrid|GetItems}}. 
     * @param item  Item to remove from the grid 
     * @param bDontDelete [=false] If set to true, the actual panel will not be removed via {{ClassFunction|Panel|Remove}}. 
     */
    public RemoveItem(item: Panel, bDontDelete?: boolean): void;
    
    /**
     * Sets the number of columns this panel should have.
     * 
     * The {{Type|DGrid}} will resize its width to match this value. 
     * @param cols  The desired number of columns 
     */
    public SetCols(cols: number): void;
    
    /**
     * Sets the width of each column.
     * 
     * The cell panels (grid items) will not be resized or centered. 
     * @param colWidth  The width of each column. 
     */
    public SetColWide(colWidth: number): void;
    
    /**
     * Sets the height of each row. 
     * 
     * The cell panels (grid items) will not be resized or centered. 
     * @param rowHeight  The height of each row 
     */
    public SetRowHeight(rowHeight: number): void;
    
    /**
     * Sorts the items in the grid. Does not visually update the grid, use {{ClassFunction|Panel|InvalidateLayout}} for that. 
     * @param key  A key in the panel from {{ClassFunction|DGrid|GetItems}}. The key's value must be numeric. 
     * @param desc [=true] True for descending order, false for ascending. 
     */
    public SortByMember(key: string, desc?: boolean): void;
}

/**
 * Creates an invisible vertical divider between two GUI elements. 
 * @example
 * 
 * local f = vgui.Create( "DFrame" )
 * f:SetSize( 400, 200 )
 * f:Center()
 * f:MakePopup()
 * 
 * local LeftPanel = vgui.Create( "DPanel", f ) // Can be any panel, it will be stretched
 * local RightPanel = vgui.Create( "DPanel", f )
 * 
 * local div = vgui.Create( "DHorizontalDivider", f )
 * div:Dock( FILL ) // Make the divider fill the space of the DFrame
 * div:SetLeft( LeftPanel ) // Set what panel is in left side of the divider
 * div:SetRight( RightPanel )
 * div:SetDividerWidth( 4 ) // Set the divider width. Default is 8
 * div:SetLeftMin( 20 ) // Set the Minimum width of left side
 * div:SetRightMin( 20 )
 * div:SetLeftWidth( 50 ) // Set the default left side width
 * 
 * // Insert a horizontal divider between two {{Type|DPanel}}s in a {{Type|DFrame}}. 
 */
declare class DHorizontalDivider extends DPanel {
    /**
     * Returns the width of the horizontal divider bar, set by {{ClassFunction|DHorizontalDivider|SetDividerWidth}}. 
     * @returns The width of the horizontal divider bar 
     */
    public GetDividerWidth(): number;
    
    /**
     * Returns whether or not the player is currently dragging the middle divider bar. 
     * @returns Whether or not the player is currently dragging the middle divider bar. 
     */
    public GetDragging(): boolean;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Returns the local X coordinate of where the player started dragging the thing 
     * @returns 
     */
    public GetHoldPos(): number;
    
    /**
     * Returns the left side content of the {{Type|DHorizontalDivider}} 
     * @returns The content on the left side 
     */
    public GetLeft(): Panel;
    
    /**
     * Returns the minimum width of the left side, set by {{ClassFunction|DHorizontalDivider|SetLeftMin}}. 
     * @returns The minimum width of the left side 
     */
    public GetLeftMin(): number;
    
    /**
     * Returns the current width of the left side, set by {{ClassFunction|DHorizontalDivider|SetLeftWidth}} or by the user. 
     * @returns The current width of the left side 
     */
    public GetLeftWidth(): number;
    
    /**
     * Returns the middle content, set by {{ClassFunction|DHorizontalDivider|SetMiddle}}. 
     * @returns The middle content 
     */
    public GetMiddle(): Panel;
    
    /**
     * Returns the right side content 
     * @returns The right side content 
     */
    public GetRight(): Panel;
    
    /**
     * Returns the minimum width of the right side, set by {{ClassFunction|DHorizontalDivider|SetRightMin}}. 
     * @returns The minimum width of the right side 
     */
    public GetRightMin(): number;
    
    /**
     * Sets the width of the horizontal divider bar. 
     * @param width  The width of the horizontal divider bar. 
     */
    public SetDividerWidth(width: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Sets whether the player is dragging the divider or not 
     * @param dragonot 
     */
    public SetDragging(dragonot: boolean): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Sets the local X coordinate of where the player started dragging the thing 
     * @param x 
     */
    public SetHoldPos(x: number): void;
    
    /**
     * Sets the left side content of the {{Type|DHorizontalDivider}}. 
     * @param pnl  The panel to set as the left side 
     */
    public SetLeft(pnl: Panel): void;
    
    /**
     * Sets the minimum width of the left side 
     * @param minWidth  The minimum width of the left side 
     */
    public SetLeftMin(minWidth: number): void;
    
    /**
     * Sets the current/starting width of the left side.
     * 
     * The width of the right side is automatically calculated by subtracting this from the total width of the {{Type|DHorizontalDivider}}. 
     * @param width  The current/starting width of the left side 
     */
    public SetLeftWidth(width: number): void;
    
    /**
     * Sets the middle content, over the draggable divider bar panel. 
     * @param middle  The middle content 
     */
    public SetMiddle(middle: Panel): void;
    
    /**
     * Sets the right side content 
     * @param pnl  The right side content 
     */
    public SetRight(pnl: Panel): void;
    
    /**
     * Sets the minimum width of the right side 
     * @param minWidth  The minimum width of the right side 
     */
    public SetRightMin(minWidth: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't. 
     */
    public StartGrab(): void;
}

/**
 * A very basic horizontal scrollable panel, similar to {{Type|DScrollPanel}}.
 * 
 * Used internally in {{Type|DPropertySheet}}. 
 * @example
 * 
 * local DFrame = vgui.Create( "DFrame" )
 * DFrame:SetTitle( "DHorizontalScroller Example" )
 * DFrame:SetSize( 500, 100 )
 * DFrame:Center()
 * DFrame:MakePopup()
 * 
 * local DHorizontalScroller = vgui.Create( "DHorizontalScroller", DFrame )
 * DHorizontalScroller:Dock( FILL )
 * DHorizontalScroller:SetOverlap( -4 )
 * 
 * for i = 0, 16 do
 * 	local DImage = vgui.Create( "DImage", DHorizontalScroller )
 * 	DImage:SetImage( "scripted/breen_fakemonitor_1" )
 * 	DHorizontalScroller:AddPanel( DImage )
 * end
 * 
 * // Creates a DHorizontalScroller with a bunch of {{Type|DImage}}s attached to it.@example
 * 
 * local DFrame = vgui.Create( "DFrame" )
 * DFrame:SetSize( 500, 100 )
 * DFrame:Center()
 * DFrame:MakePopup()
 * DFrame:SetTitle( "DHorizontalScroller Example" )
 * function DFrame:Paint( w, h )
 * 	draw.RoundedBox( 0, 0, 0, w, h, Color( 0, 100, 100 ) )
 * end
 * 
 * local DHorizontalScroller = vgui.Create( "DHorizontalScroller", DFrame )
 * DHorizontalScroller:Dock( FILL )
 * DHorizontalScroller:SetOverlap( -4 )
 * 
 * function DHorizontalScroller.btnLeft:Paint( w, h )
 * 	draw.RoundedBox( 0, 0, 0, w, h, Color( 200, 100, 0 ) )
 * end
 * function DHorizontalScroller.btnRight:Paint( w, h )
 * 	draw.RoundedBox( 0, 0, 0, w, h, Color( 0, 100, 200 ) )
 * end
 * 
 * for i = 0, 16 do
 * 	local DImage = vgui.Create( "DImage", DHorizontalScroller )
 * 	DImage:SetImage( "scripted/breen_fakemonitor_1" )
 * 	DHorizontalScroller:AddPanel( DImage )
 * end
 * 
 * // Creates a DHorizontalScroller with a bunch of {{Type|DImage}}s attached to it and demonstrates how to color the left/right scroll buttons. 
 */
declare class DHorizontalScroller extends Panel {
    /**
     * Adds a panel to the {{Type|DHorizontalScroller}}. 
     * @param pnl  The panel to add. It will be automatically parented. 
     */
    public AddPanel(pnl: Panel): void;
    
    /**
     * @returns 
     */
    public GetOverlap(): number;
    
    /**
     * @returns 
     */
    public GetShowDropTargets(): boolean;
    
    /**
     * {{Stub}}
     * 
     * Same as {{ClassFunction|DDragBase|MakeDroppable}}.
     * TODO: Transclude or whatever to here? 
     * @param name 
     */
    public MakeDroppable(name: string): void;
    
    /**
     * Called when the panel is scrolled. 
     */
    public OnDragModified(): void;
    
    /**
     * Controls the spacing between elements of the horizontal scroller. 
     * @param overlap  Overlap in pixels. Positive numbers will make elements ''overlap'' each other, negative will add spacing. 
     */
    public SetOverlap(overlap: number): void;
    
    /**
     * @param newState 
     */
    public SetShowDropTargets(newState: boolean): void;
    
    /**
     * {{Stub}}
     * 
     * Same as {{ClassFunction|DDragBase|SetUseLiveDrag}} 
     * @param newState 
     */
    public SetUseLiveDrag(newState: boolean): void;
}

/**
 * The DHTML control wraps the internal Awesomium framework, supports calling Javascript functions from Lua, as well as running Lua from within the HTML. Running Lua code is disabled by default. 
 * @example
 * 
 * local frame = vgui.Create( "DFrame" )
 * frame:SetSize( 300, 200 )
 * frame:SetTitle( "My new Derma frame" )
 * frame:SetVisible( true )
 * frame:SetDraggable( true )
 * frame:Center()
 * //Fill the form with a html page
 * local html = vgui.Create( "DHTML" , frame )
 * html:Dock( FILL )
 * html:SetHTML( [[
 *     <input type='submit' onclick='console.log("RUNLUA:print(\"This is called in Lua context\")")' />
 * ]] )
 * 
 * //Enable the webpage to call lua code
 * html:SetAllowLua( true )
 * 
 * frame:MakePopup()
 * 
 * // Creates a DHTML.@example
 * 
 * local frame = vgui.Create("DFrame")
 * frame:SetSize(ScrW() * 0.5, ScrH() * 0.5)
 * frame:SetTitle("HTML Example!")
 * frame:Center()
 * frame:MakePopup()
 * 
 * local html = vgui.Create("DHTML", frame)
 * html:Dock(FILL)
 * html:OpenURL("https://www.google.com/")
 * 
 * // Creates a DHTML and opens Google inside. 
 */
declare class DHTML extends Awesomium {
    /**
     * Defines a Javascript function that when called will call a Lua callback.
     * **Note:**
     * >Must be called after the HTML document has fully loaded. 
     * @param library  Library name of the JS function you are defining. 
     * @param name  Name of the JS function you are defining. 
     * @param callback  Function called when the JS function is called. Arguments passed to the JS function will be passed here. 
     * @example
     * 
     * // Create the frame
     * local f = vgui.Create("DFrame")
     * f:SetSize(800, 600)
     * f:Center()
     * 
     * // Create a green color variable
     * local color_green = Color(0, 255, 0)
     * 
     * // Define the Javascript function in the DHTML element
     * local DHTML = vgui.Create("DHTML", f)
     * DHTML:Dock(FILL)
     * DHTML:OpenURL("http://wiki.garrysmod.com/page/VGUI/Elements/DHTML")
     * DHTML:AddFunction("console", "luaprint", function(str)
     * 	MsgC(color_green, str) // Print the given string
     * end)
     * 
     * //This runs our function. Our function could also be called from Javascript on the DHTML's page.
     * DHTML:RunJavascript("console.luaprint('Hello from Javascript!');")
     * 
     * // Prints text from Javascript to the console in color. 
     */
    public AddFunction(library: string, name: string, callback: Function): void;
    
    /**
     * Runs/Executes a string as JavaScript code.
     * **Note:**
     * >This function does '''NOT''' evaluate expression (i.e. allow you to pass variables from JavaScript (JS) to Lua context).
     * Because a return value is nil/no value (a.k.a. void).
     * If you wish to pass/return values from JS to Lua, you may want to use {{ClassFunction|DHTML|AddFunction}} function to accomplish that job.
     * 
     * **Note:**
     * >This function is an alias of {{ClassFunction|DHTML|QueueJavascript}} ([https://github.com/Facepunch/garrysmod/blob/master/garrysmod/lua/vgui/dhtml.lua#L62 source]). 
     * @param js  Specify JavaScript code to be executed. 
     * @example
     * 
     * // First we create a container, in this case it is a full-screen Derma Frame window.
     * local dframe = vgui.Create( 'DFrame' )
     * dframe:SetSize( ScrW(), ScrH() )
     * dframe:SetTitle( "Garry's Mod Wiki" )
     * dframe:Center()
     * dframe:MakePopup() // Enable keyboard and mouse interaction for DFrame panel.
     * 
     * // Create a new DHTML panel as a child of dframe, and dock-fill it.
     * local dhtml = vgui.Create( 'DHTML', dframe )
     * dhtml:Dock( FILL )
     * // Navigate to Garry's Mod wikipedia website.
     * dhtml:OpenURL( 'https://wiki.garrysmod.com/index.php' )
     * // Run JavaScript code.
     * dhtml:Call( [[document.body.innerHTML = 'HTML changed from Lua using JavaScript!';]] )
     * 
     * // This does not throw an error/exception, but instead returns nil/no value.
     * // That means you can't pass/return values from JavaScript back to Lua context using this function.
     * local number = dhtml:Call( '22;' )
     * print( number )
     * 
     * // Shows how to change [http://www.w3schools.com/jsref/prop_html_innerhtml.asp document.body.innerHTML] property by calling this function on [[:Category:DHTML|DHTML]] panel. 
     */
    public Call(js: string): void;
    
    /**
     * Called when the page inside the {{Type|DHTML}} window runs ''console.log''. This can also be called within the Lua environment to emulate ''console.log''. If the contained message begins with ''RUNLUA:'' the following text will be executed as code within the Lua environment (this is how Lua is called from DHTML windows). 
     * @param msg  The message to be logged (or Lua code to be executed; see above). 
     */
    public ConsoleMessage(msg: string): void;
    
    /**
     * Returns if the loaded page can run Lua code, set by {{ClassFunction|DHTML|SetAllowLua}} 
     * @returns Whether or not Lua code can be called from the loaded page. 
     */
    public GetAllowLua(): boolean;
    
    /**
     * Runs/Executes a string as JavaScript code.
     * **Note:**
     * >This function does '''NOT''' evaluate expression (i.e. allow you to pass variables from JavaScript (JS) to Lua context).
     * Because a return value is nil/no value (a.k.a. void).
     * If you wish to pass/return values from JS to Lua, you may want to use {{ClassFunction|DHTML|AddFunction}} function to accomplish that job. 
     * @param js  Specify JavaScript code to be executed. 
     * @example
     * 
     * // First we create a container, in this case it is a full-screen Derma Frame window.
     * local dframe = vgui.Create( 'DFrame' )
     * dframe:SetSize( ScrW(), ScrH() )
     * dframe:SetTitle( "Garry's Mod Wiki" )
     * dframe:Center()
     * dframe:MakePopup() // Enable keyboard and mouse interaction for DFrame panel.
     * 
     * // Create a new DHTML panel as a child of dframe, and dock-fill it.
     * local dhtml = vgui.Create( 'DHTML', dframe )
     * dhtml:Dock( FILL )
     * // Navigate to Garry's Mod wikipedia website.
     * dhtml:OpenURL( 'https://wiki.garrysmod.com/index.php' )
     * // Run JavaScript code.
     * dhtml:QueueJavascript( [[document.body.innerHTML = 'HTML changed from Lua using JavaScript!';]] )
     * 
     * // This does not throw an error/exception, but instead returns nil/no value.
     * // That means you can't pass/return values from JavaScript back to Lua context using this function.
     * local number = dhtml:QueueJavascript( '22;' )
     * print( number )
     * 
     * // Shows how to change [http://www.w3schools.com/jsref/prop_html_innerhtml.asp document.body.innerHTML] property by calling this function on [[:Category:DHTML|DHTML]] panel. 
     */
    public QueueJavascript(js: string): void;
    
    /**
     * Determines whether the loaded page can run Lua code or not. See {{Type|DHTML}} for how to run Lua from a DHTML window. 
     * @param allow [=false] Whether or not to allow Lua. 
     */
    public SetAllowLua(allow?: boolean): void;
    
    /**
     * **Deprecated:**
     * >Broken. Use the CSS ''overflow'' rule instead.
     * 
     *  Sets if the loaded window should display scrollbars when the webpage is larger than the viewing window. This is similar to the CSS ''overflow'' rule. 
     * @param show  True if scrollbars should be visible. 
     */
    public SetScrollbars(show: boolean): void;
    
    /**
     * Stops the loading of the HTML panel's current page.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     */
    public StopLoading(): void;
    
    /**
     * Stops the loading of the HTML panel's current page.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     */
    public StopLoading(): void;
}

/**
 * An element providing navigation controls for a {{Type|DHTML}} window. 
 * @example
 * 
 * <nowiki>local frame = vgui.Create( "DFrame" ) // Create a container for everything
 * frame:SetSize( 800, 600 )
 * frame:SetTitle( "DHTMLControls Example" )
 * frame:Center()
 * frame:MakePopup()
 * 
 * local window = vgui.Create( "DHTML", frame ) // Our DHTML window
 * window:SetSize( 750, 500 )
 * window:Center()
 * 
 * local ctrls = vgui.Create( "DHTMLControls", frame) // Navigation controls
 * ctrls:SetWide( 750 )
 * ctrls:SetPos( 25, 40 )
 * ctrls:SetHTML( window ) // Links the controls to the DHTML window
 * ctrls.AddressBar:SetText( "http://wiki.garrysmod.com" ) // Address bar isn't updated automatically
 * 
 * window:MoveBelow( ctrls ) // Align the window to sit below the controls
 * window:OpenURL( "http://wiki.garrysmod.com" )</nowiki>
 * 
 * // Creates a {{Type|DHTML}} window, controls for it, and links the two. 
 */
declare class DHTMLControls extends Panel {
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't. 
     */
    public FinishedLoading(): void;
    
    /**
     * Sets the color of the navigation buttons. 
     * @param clr  A {{Struct|Color}} 
     */
    public SetButtonColor(clr: Color): void;
    
    /**
     * Sets the {{Type|DHTML}} element to control with these {{Type|DHTMLControls}}. 
     * @param dhtml  The HTML panel 
     */
    public SetHTML(dhtml: Panel): void;
    
    /**
     * [[Category:HTML]][[Category:Awesomium]]Allows you to set HTML code within a panel. 
     * @param HTML_code  The code to set. 
     * @example
     * 
     * local HTML = vgui.Create( "HTML", DPanel )
     * HTML:SetHTML( "<p>Put HTML code here</p>" )
     * HTML:SetSize( 390, 400 )
     * 
     * // 
     */
    public SetHTML(HTML_code: string): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't. 
     */
    public StartedLoading(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Basically adds an URL to the history. 
     * @param url 
     */
    public UpdateHistory(url: string): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't. 
     */
    public UpdateNavButtonStatus(): void;
}

/**
 * Simply a [http://wiki.garrysmod.com/page/VGUI/Elements/DIconLayout DIconLayout] which automatically displays all of the [http://wiki.garrysmod.com/page/silkicons Silkicons]. Used as a way to get the user to select an icon. 
 * @example
 * 
 * local DermaPanel = vgui.Create( "DFrame" )
 * DermaPanel:SetPos( 100, 100 )
 * DermaPanel:SetSize( 300, 200 )
 * DermaPanel:SetTitle( "DIconBrowserExample" )
 * DermaPanel:SetVisible( true )
 * DermaPanel:SetDraggable( true )
 * DermaPanel:ShowCloseButton( true )
 * DermaPanel:MakePopup()
 * 
 * local IconBrowser = vgui.Create( "DIconBrowser", DermaPanel )
 * IconBrowser:SetPos( 5, 30 )
 * IconBrowser:SetSize( 290, 265 )
 * IconBrowser.OnChange = function(self)
 *     chat.AddText( "You selected: " .. self:GetSelectedIcon())
 * end
 * 
 * // Creates a DIconBrowser which, when an icon is clicked, prints said icon's directory. 
 */
declare class DIconBrowser extends DScrollPanel {
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Automatically called to fill the browser with icons. Will not work if {{ClassFunction|DIconBrowser|SetManual}} is set to true. 
     */
    public Fill(): void;
    
    /**
     * A simple unused search feature, hides all icons that do not contain given text in their file path. 
     * @param text  The text to search for 
     */
    public FilterByText(text: string): void;
    
    /**
     * Returns whether or not the browser should fill itself with icons. 
     * @returns 
     */
    public GetManual(): boolean;
    
    /**
     * Returns the currently selected icon's file path. 
     * @returns The currently selected icon's file path. 
     */
    public GetSelectedIcon(): string;
    
    /**
     * Called when the selected icon was changed. Use {{ClassFunction|DIconBrowser|GetSelectedIcon}} to get the selected icon's filepath. 
     */
    public OnChange(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Use {{ClassFunction|DIconBrowser|OnChange}} instead 
     */
    public OnChangeInternal(): void;
    
    /**
     * Scrolls the browser to the selected icon 
     */
    public ScrollToSelected(): void;
    
    /**
     * Selects an icon from file path 
     * @param icon  The file path of the icon to select. Do not include the "materials/" part. 
     */
    public SelectIcon(icon: string): void;
    
    /**
     * Sets whether or not the browser should automatically fill itself with icons. 
     * @param manual 
     */
    public SetManual(manual: boolean): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Set the currently selected file path. Do not use. Use {{ClassFunction|DIconBrowser|SelectIcon}} instead. 
     * @param str 
     */
    public SetSelectedIcon(str: string): void;
}

/**
 * DIconLayout is what replaced {{Type|DPanelList}} in Garry's Mod 13. DPanelList still exists in GMod but is deprecated and does not support the new GWEN skin.
 * 
 * {{Type|DIconLayout}} is used to make a list of panels. Unlike DPanelList, DIconLayout does not automatically add a scroll bar - the example below shows you how you can do this. 
 * @example
 * 
 * local Frame = vgui.Create( "DFrame" ) // Create a Frame to contain everything.
 * Frame:SetTitle( "DIconLayout Example" )
 * Frame:SetSize( 365, 240 )
 * Frame:Center()
 * Frame:MakePopup()
 * 
 * local Scroll = vgui.Create( "DScrollPanel", Frame ) // Create the Scroll panel
 * Scroll:Dock( FILL )
 * 
 * local List = vgui.Create( "DIconLayout", Scroll )
 * List:Dock( FILL )
 * List:SetSpaceY( 5 ) // Sets the space in between the panels on the Y Axis by 5
 * List:SetSpaceX( 5 ) // Sets the space in between the panels on the X Axis by 5
 * 
 * for i = 1, 20 do // Make a loop to create a bunch of panels inside of the DIconLayout
 * 	local ListItem = List:Add( "DPanel" ) // Add DPanel to the DIconLayout
 * 	ListItem:SetSize( 80, 40 ) // Set the size of it
 * 	// You don't need to set the position, that is done automatically.
 * end
 * 
 * local ListLabel = List:Add( "DLabel" ) // Add a label that will be the only panel on its row
 * ListLabel.OwnLine = true // The magic variable that specifies this item has its own line all for itself
 * ListLabel:SetText( "Hello World!" )
 * 
 * for i = 1, 5 do
 * 	local ListItem = List:Add( "DPanel" )
 * 	ListItem:SetSize( 80, 40 )
 * end
 * 
 * // 
 */
declare class DIconLayout extends DDragBase {
    /**
     * Creates a replica of the DIconLayout it is called on. 
     * @returns The replica. 
     */
    public Copy(): Panel;
    
    /**
     * Copies the contents (Child elements) of another {{Type|DIconLayout}} to itself. 
     * @param from  {{Type|DIconLayout}} to copy from. 
     */
    public CopyContents(from: DIconLayout): void;
    
    /**
     * Returns the size of the border. 
     * @returns 
     */
    public GetBorder(): number;
    
    /**
     * Returns the direction that it will be layed out, using the DOCK enumerations. 
     * @returns Layout direction. 
     */
    public GetLayoutDir(): number;
    
    /**
     * Returns the distance between two 'icons' on the X axis. 
     * @returns Distance between two 'icons' on the X axis. 
     */
    public GetSpaceX(): number;
    
    /**
     * Returns distance between two "Icons" on the Y axis. 
     * @returns distance between two "Icons" on the Y axis. 
     */
    public GetSpaceY(): number;
    
    /**
     * Returns whether the icon layout will stretch its height to fit all the children.
     * 
     * See also {{ClassFunction|DIconLayout|GetStretchWidth}} 
     * @returns 
     */
    public GetStretchHeight(): boolean;
    
    /**
     * Returns whether the icon layout will stretch its width to fit all the children.
     * 
     * See also {{ClassFunction|DIconLayout|GetStretchHeight}} 
     * @returns 
     */
    public GetStretchWidth(): boolean;
    
    /**
     * Resets layout vars before calling {{ClassFunction|Panel|InvalidateLayout}}. This is called when children are added or removed, and must be called when the spacing, border or layout direction is changed. 
     */
    public Layout(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Used internally to layout the child elements if the {{ClassFunction|DIconLayout|SetLayoutDir}} is set to LEFT (See {{Enum|DOCK}}). 
     */
    public LayoutIcons_LEFT(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Used internally to layout the child elements if the {{ClassFunction|DIconLayout|SetLayoutDir}} is set to TOP (See {{Enum|DOCK}}). 
     */
    public LayoutIcons_TOP(): void;
    
    /**
     * Called when the panel is modified. 
     */
    public OnModified(): void;
    
    /**
     * Called when anything is dropped on or rearranged within the {{Type|DDragBase}}. 
     */
    public OnModified(): void;
    
    /**
     * Sets the internal border (padding) within the DIconLayout. This will not change its size, only the positioning of children. You must call {{ClassFunction|DIconLayout|Layout}} in order for the changes to take effect. 
     * @param width  The border (padding) inside the DIconLayout. 
     */
    public SetBorder(width: number): void;
    
    /**
     * Sets the direction that it will be layed out, using the {{Enum|DOCK}}.
     * 
     * Currently only TOP and LEFT are supported. 
     * @param direction  {{Enum|DOCK}} 
     */
    public SetLayoutDir(direction: DOCK): void;
    
    /**
     * Sets the horizontal (x) spacing between children within the DIconLayout. You must call {{ClassFunction|DIconLayout|Layout}} in order for the changes to take effect. 
     * @param xSpacing  The width of the gap between child objects. 
     */
    public SetSpaceX(xSpacing: number): void;
    
    /**
     * Sets the vertical (y) spacing between children within the DIconLayout. You must call {{ClassFunction|DIconLayout|Layout}} in order for the changes to take effect. 
     * @param ySpacing  The vertical gap between rows in the DIconLayout. 
     */
    public SetSpaceY(ySpacing: number): void;
    
    /**
     * If set to true, the icon layout will stretch its height to fit all the children.
     * 
     * See also {{ClassFunction|DIconLayout|SetStretchWidth}} 
     * @param do_stretch 
     */
    public SetStretchHeight(do_stretch: boolean): void;
    
    /**
     * If set to true, the icon layout will stretch its width to fit all the children.
     * 
     * See also {{ClassFunction|DIconLayout|SetStretchHeight}} 
     * @param stretchW 
     */
    public SetStretchWidth(stretchW: boolean): void;
}

/**
 * {{Type|DImage}} is an advanced, more robust version of the {{Type|Material}} panel.
 * 
 * See {{Type|DImageButton}} for a click-able version of this panel. 
 * @example
 * 
 * // Frame
 * Frame = vgui.Create("DFrame")
 * Frame:SetSize(200, 200)
 * Frame:Center()
 * Frame:SetTitle("Image of Dr. Breen")	// Title of window
 * 
 * // Image panel of Dr. Breen
 * local breen_img = vgui.Create("DImage", Frame)	// Add image to Frame
 * breen_img:SetPos(10, 35)	// Move it into frame
 * breen_img:SetSize(150, 150)	// Size it to 150x150
 * 
 * // Set material relative to "garrysmod/materials/"
 * breen_img:SetImage("scripted/breen_fakemonitor_1")
 * 
 * // Creates a DImage of Dr. Breen inside a {{Type|DFrame}} panel.@example
 * 
 * // Container panel
 * BGPanel = vgui.Create("DPanel")
 * BGPanel:SetSize(400, 400)
 * BGPanel:Center()
 * BGPanel:SetDrawBackground(false)
 * 
 * // Wood background
 * local img_bg = vgui.Create("DImage", BGPanel)
 * img_bg:SetSize(BGPanel:GetSize())		
 * img_bg:SetImage("models/props_foliage/oak_tree01")
 * 
 * // Blurred out screenshot of Construct
 * local img_construct = vgui.Create("DImage", BGPanel)
 * img_construct:SetPos(10, 10)
 * img_construct:SetSize(380, 380)		
 * img_construct:SetImage("hlmv/background")
 * 
 * // Flatgrass sign
 * local img_text = vgui.Create("DImage", BGPanel)
 * img_text:SetPos(10, 20)
 * img_text:SetSize(380, 130)		
 * img_text:SetImage("gm_construct/flatsign")
 * 
 * // Creates three DImage panels and arranges them into a new image. 
 */
declare class DImage extends DPanel {
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Actually loads the {{Type|IMaterial}} to render it. Called from {{ClassFunction|DImage|LoadMaterial}}. 
     */
    public DoLoadMaterial(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * "Fixes" the current material of the {{Type|DImage}} if it has VertexLit shader by creating a new one with the same name and a prefix of "_DImage" and automatically calling {{ClassFunction|DImage|SetMaterial}} with the new material.
     * 
     * This fixes the problem where using materials using shaders that expect lighting information causing "weird" flickering when displayed in 2D/Unlit environment. 
     */
    public FixVertexLitMaterial(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Returns the texture path set by {{ClassFunction|DImage|SetFailsafeMatName}}. 
     * @returns 
     */
    public GetFailsafeMatName(): string;
    
    /**
     * Returns the image loaded in the image panel. 
     * @returns The path to the image that is loaded. 
     * @example
     * 
     * // Frame
     * MainFrame = vgui.Create("DFrame")
     * MainFrame:SetSize(200, 200)
     * MainFrame:Center()
     * MainFrame:SetTitle("Post process effect")
     * 
     * // Load post process effect thumbnail
     * local postprocess = vgui.Create("DImage", MainFrame)
     * postprocess:SetSize(128, 128)
     * postprocess:Center()
     * 
     * local materials = file.Find("materials/gui/postprocess/*.png", "GAME")
     * 
     * postprocess:SetImage("materials/gui/postprocess/"..materials[math.random(1, #materials)])
     * 
     * print(postprocess:GetImage())
     * 
     * // Creates a frame with a randomly chosen post process effect thumbnail and prints the image path to console. 
     */
    public GetImage(): string;
    
    /**
     * Returns the color override of the image panel. 
     * @returns The color override of the image. Uses the {{Struct|Color}}. 
     * @example
     * 
     * // Generic image panel
     * local img = vgui.Create("DImage")
     * img:SetSize(128, 128)
     * img:Center()
     * img:SetImage("cantop")
     * 
     * print(img:GetImageColor())
     * 
     * // Creates an image panel and prints the default color override to console. 
     */
    public GetImageColor(): Color;
    
    /**
     * Returns whether the {{Type|DImage}} should keep the aspect ratio of its image when being resized.
     * 
     * See {{ClassFunction|DImage|SetKeepAspect}} for more info on how it works. 
     * @returns Whether the {{Type|DImage}} should keep the aspect ratio of its image when being resized. 
     */
    public GetKeepAspect(): DImage;
    
    /**
     * Returns the current {{GlobalFunction|Material}} of the {{Type|DImage}}. 
     * @returns 
     */
    public GetMaterial(): IMaterial;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Returns the texture path set by {{ClassFunction|DImage|SetMatName}}. 
     * @returns 
     */
    public GetMatName(): string;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Initializes the loading process of the material to render if it is not loaded yet.
     * 
     * You do not need to call this function. It is done for you automatically. 
     */
    public LoadMaterial(): void;
    
    /**
     * Paints a ghost copy of the DImage panel at the given position and dimensions. This function overrides {{ClassFunction|Panel|PaintAt}}. 
     * @param posX  The x coordinate to draw the panel from. 
     * @param posY  The y coordinate to draw the panel from. 
     * @param width  The width of the panel image to be drawn. 
     * @param height  The height of the panel image to be drawn. 
     */
    public PaintAt(posX: number, posY: number, width: number, height: number): void;
    
    /**
     * Paints a ghost copy of the panel at the given position. 
     * @param posX  The x coordinate to draw the panel from. 
     * @param posY  The y coordinate to draw the panel from. 
     */
    public PaintAt(posX: number, posY: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Sets the backup material to be loaded when the image is first rendered. Used by {{ClassFunction|DImage|SetOnViewMaterial}}. 
     * @param backupMat 
     */
    public SetFailsafeMatName(backupMat: string): void;
    
    /**
     * Sets the image to load into the frame. If the first image can't be loaded and ''strBackup'' is set, that image will be loaded instead.
     * 
     * This eventually calls {{ClassFunction|DImage|SetMaterial}}. 
     * @param strImage  The path of the image to load. When no file extension is supplied the VMT file extension is used. 
     * @param strBackup  The path of the backup image. 
     * @example
     * 
     * // Frame
     * MainFrame = vgui.Create( "DFrame" )
     * MainFrame:SetSize( 300, 300 )
     * MainFrame:Center()
     * MainFrame:SetTitle( "Map of de_inferno" )
     * 
     * // Map of de_inferno (requires CS:S)
     * local css_map = vgui.Create( "DImage", MainFrame )
     * css_map:SetPos( 25, 40 )
     * css_map:SetSize( 250, 250 )
     * 
     * // Set image to de_inferno map
     * // If it can't be loaded, load the [?] avatar image instead
     * css_map:SetImage("overviews/de_inferno", "vgui/avatar_default")
     * 
     * // Creates a frame with a map of de_inferno inside, with the default avatar image loaded as a backup. 
     */
    public SetImage(strImage: string, strBackup: string): void;
    
    /**
     * Sets the image's color override. 
     * @param col  The color override of the image. Uses the {{Struct|Color}}. 
     * @example
     * 
     * // Frame
     * MainFrame = vgui.Create("DFrame")
     * MainFrame:SetSize(200, 180)
     * MainFrame:Center()
     * MainFrame:SetTitle("Color example")
     * 
     * // Image of a Portal box
     * local metalbox_img = vgui.Create("DImage", MainFrame)
     * metalbox_img:SetPos(35, 35)
     * metalbox_img:SetSize(128, 128)
     * metalbox_img:SetImage("spawnicons/models/props/metal_box_128.png")
     * 
     * metalbox_img:SetImageColor(Color(128, 255, 0, 255))
     * 
     * // Creates a frame with a Portal box inside and sets the color to green. 
     */
    public SetImageColor(col: Color): void;
    
    /**
     * Sets whether the {{Type|DImage}} should keep the aspect ratio of its image when being resized.
     * 
     * Note that this will not try to fit the image inside the button, but instead it will fill the button with the image. 
     * @param keep  true to keep the aspect ratio, false not to 
     */
    public SetKeepAspect(keep: boolean): void;
    
    /**
     * Sets a {{GlobalFunction|Material}} directly as an image. 
     * @param mat  The material to set 
     */
    public SetMaterial(mat: IMaterial): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Sets the material to be loaded when the image is first rendered. Used by {{ClassFunction|DImage|SetOnViewMaterial}}. 
     * @param mat 
     */
    public SetMatName(mat: string): void;
    
    /**
     * Similar to {{ClassFunction|DImage|SetImage}}, but will only do the expensive part of actually loading the textures/material if the material is about to be rendered/viewed.
     * 
     * Useful for cases like {{Type|DIconBrowser}}, where there are hundreds of small icons in 1 panel in a list that do not need all to be loaded at the same time. 
     * @param mat 
     * @param backupMat 
     */
    public SetOnViewMaterial(mat: string, backupMat: string): void;
    
    /**
     * Resizes the panel so that its width and height fit all of the content inside.
     * 
     * **Note:**
     * >Only works on {{Type|Label}} derived panels such as {{Type|DLabel}} by default, and on any panel that manually implemented the {{ClassFunction|Panel|SizeToContents}} method, such as {{Type|DNumberWang}} and {{Type|DImage}}.
     * 
     * {{Warning|You must call this function '''AFTER''' setting text/font, adjusting child panels or otherwise altering the panel.}}
     * 
     * [[Category:DImage]]
     * [[Category:DImageButton]]
     * [[Category:DNumberWang]]
     * [[Category:DListView]] 
     */
    public SizeToContents(): void;
    
    /**
     * Resizes the panel so that its width and height fit all of the content inside.
     * 
     * **Note:**
     * >Only works on {{Type|Label}} derived panels such as {{Type|DLabel}} by default, and on any panel that manually implemented the {{ClassFunction|Panel|SizeToContents}} method, such as {{Type|DNumberWang}} and {{Type|DImage}}.
     * 
     * {{Warning|You must call this function '''AFTER''' setting text/font, adjusting child panels or otherwise altering the panel.}}
     * 
     * [[Category:DImage]]
     * [[Category:DImageButton]]
     * [[Category:DNumberWang]]
     * [[Category:DListView]] 
     */
    public SizeToContents(): void;
    
    /**
     * Returns true if the image is '''not''' yet loaded. 
     * @returns 
     */
    public Unloaded(): boolean;
}

/**
 * An image button.
 * 
 * This panel inherits all methods of {{Type|DButton}}, such as {{ClassFunction|DLabel|DoClick}}. 
 * @example
 * 
 * local frame = vgui.Create( "DFrame" )
 * frame:SetSize( 300, 250 )
 * frame:Center()
 * frame:MakePopup()
 * 
 * DermaImageButton = vgui.Create( "DImageButton", frame )
 * DermaImageButton:SetPos( 25, 50 )				// Set position
 * //DermaImageButton:SetSize( 16, 16 )			// OPTIONAL: Use instead of SizeToContents() if you know/want to fix the size
 * DermaImageButton:SetImage( "icon16/bomb.png" )	// Set the material - relative to /materials/ directory
 * DermaImageButton:SizeToContents()				// OPTIONAL: Use instead of SetSize if you want to resize automatically ( without stretching )
 * DermaImageButton.DoClick = function()
 * 	Msg( "You clicked the image!" )
 * end
 * 
 * // The DImageButton is the same as the DImage, but you can click it. When you hover over it, you will get the default link cursor on Windows. 
 */
declare class DImageButton extends DButton {
    /**
     * Returns the "image" of the {{Type|DImageButton}}. Equivalent of {{ClassFunction|DImage|GetImage}}. 
     * @returns The path to the image that is loaded. 
     */
    public GetImage(): string;
    
    /**
     * Returns whether the image inside the button should be stretched to fit it or not
     * 
     * See {{ClassFunction|DImageButton|SetStretchToFit}} 
     * @returns 
     */
    public GetStretchToFit(): boolean;
    
    /**
     * Sets the color of the image. Equivalent of {{ClassFunction|DImage|SetImageColor}} 
     * @param color  The {{GlobalFunction|Color}} to set 
     */
    public SetColor(color: table): void;
    
    /**
     * Changes color of label. Alias of {{ClassFunction|DLabel|SetTextColor}}. 
     * @param color  The color to set. Uses the Color structure. 
     * @example
     * 
     * local DLabel = vgui.Create( "DLabel" )
     * DLabel:SetPos( 90, 50 )
     * DLabel:SetColor(Color(255, 0, 0))
     * DLabel:SetText( "Hello world." )
     * DLabel:SizeToContents()
     * 
     * // Creates a label and changes it color to red. 
     */
    public SetColor(color: table): void;
    
    /**
     * **Deprecated!**
     * 
     * Alias of {{ClassFunction|DImageButton|SetImage}}. 
     */
    public SetIcon(): void;
    
    /**
     * Sets an image to be displayed as the button's background. Alias of {{ClassFunction|DButton|SetImage}} 
     * @param img [=nil] The image file to use, relative to ''/materials''. If this is nil, the image background is removed. 
     */
    public SetIcon(img?: string): void;
    
    /**
     * Sets the "image" of the {{Type|DImageButton}}. Equivalent of {{ClassFunction|DImage|SetImage}}. 
     * @param strImage  The path of the image to load. When no file extension is supplied the VMT file extension is used. 
     * @param strBackup  The path of the backup image. 
     */
    public SetImage(strImage: string, strBackup: string): void;
    
    /**
     * Sets an image to be displayed as the button's background. 
     * @param img [=nil] The image file to use, relative to ''/materials''. If this is nil, the image background is removed. 
     */
    public SetImage(img?: string): void;
    
    /**
     * Hides or shows the image of the image button. Internally this calls {{ClassFunction|Panel|SetVisible}} on the internal {{Type|DImage}}. 
     * @param visible  Set true to make it visible ( default ), or false to hide the image 
     */
    public SetImageVisible(visible: boolean): void;
    
    /**
     * Sets whether the {{Type|DImageButton}} should keep the aspect ratio of its image. Equivalent of {{ClassFunction|DImage|SetKeepAspect}}.
     * 
     * Note that this will not try to fit the image inside the button, but instead it will fill the button with the image. 
     * @param keep  true to keep the aspect ratio, false not to 
     */
    public SetKeepAspect(keep: boolean): void;
    
    /**
     * Sets a {{GlobalFunction|Material}} directly as an image. Equivalent of {{ClassFunction|DImage|SetMaterial}}. 
     * @param mat  The material to set 
     */
    public SetMaterial(mat: IMaterial): void;
    
    /**
     * See {{ClassFunction|DImage|SetOnViewMaterial}} 
     * @param mat 
     * @param backup 
     */
    public SetOnViewMaterial(mat: string, backup: string): void;
    
    /**
     * Sets whether the image inside the {{Type|DImageButton}} should be stretched to fill the entire size of the button, without preserving aspect ratio.
     * 
     * If set to false, the image will not be resized at all. 
     * @param stretch  True to stretch, false to not to stretch 
     */
    public SetStretchToFit(stretch: boolean): void;
    
    /**
     * Resizes the panel so that its width and height fit all of the content inside.
     * 
     * **Note:**
     * >Only works on {{Type|Label}} derived panels such as {{Type|DLabel}} by default, and on any panel that manually implemented the {{ClassFunction|Panel|SizeToContents}} method, such as {{Type|DNumberWang}} and {{Type|DImage}}.
     * 
     * {{Warning|You must call this function '''AFTER''' setting text/font, adjusting child panels or otherwise altering the panel.}}
     * 
     * [[Category:DImage]]
     * [[Category:DImageButton]]
     * [[Category:DNumberWang]]
     * [[Category:DListView]] 
     */
    public SizeToContents(): void;
    
    /**
     * Resizes the panel so that its width and height fit all of the content inside.
     * 
     * **Note:**
     * >Only works on {{Type|Label}} derived panels such as {{Type|DLabel}} by default, and on any panel that manually implemented the {{ClassFunction|Panel|SizeToContents}} method, such as {{Type|DNumberWang}} and {{Type|DImage}}.
     * 
     * {{Warning|You must call this function '''AFTER''' setting text/font, adjusting child panels or otherwise altering the panel.}}
     * 
     * [[Category:DImage]]
     * [[Category:DImageButton]]
     * [[Category:DNumberWang]]
     * [[Category:DListView]] 
     */
    public SizeToContents(): void;
}

/**
 * Uses the {{Lib|killicon}} to persistently draw a killicon. 
 * @example
 * 
 * local frame = vgui.Create("DFrame")
 * frame:SetSize(200,200)
 * frame:Center()
 * frame:SetTitle("DKillIcon Example")
 * 
 * local icon = vgui.Create("DKillIcon", frame)
 * icon:SetName("weapon_crowbar")
 * icon:SizeToContents()
 * icon:Center()
 * 
 * // Creates a DKillIcon and sets it to the crowbar killicon. 
 */
declare class DKillIcon extends Panel {
    /**
     * Gets the killicon being shown. 
     * @returns The name of the killicon currently being displayed. 
     */
    public GetName(): string;
    
    /**
     * Returns the internal name of the panel. 
     * @returns name 
     */
    public GetName(): string;
    
    /**
     * Sets the killicon to be displayed. You should call {{ClassFunction|DKillIcon|SizeToContents}} following this.
     * 
     * Killicons can be added with {{LibraryFunction|killicon|Add}} and {{LibraryFunction|killicon|AddFont}}. 
     * @param iconName  The name of the killicon to be displayed. 
     */
    public SetName(iconName: string): void;
    
    /**
     * Sets the internal name of the panel. 
     * @param name  The new name of the panel. 
     */
    public SetName(name: string): void;
}

/**
 * A standard Derma text label. A lot of this panels functionality is a base for button elements, such as {{Type|DButton}} 
 * !CustomConstructor Label * @example
 * 
 * local Panel = vgui.Create( "DFrame" )
 * Panel:SetSize( 200, 200 )
 * Panel:Center()
 * Panel:MakePopup()
 * 
 * local DLabel = vgui.Create( "DLabel", Panel )
 * DLabel:SetPos( 40, 40 )
 * DLabel:SetText( "Hello, world!" )
 * 
 * // Creates a DLabel. 
 */
declare class DLabel extends Label {
    /**
     * Convenience function that creates a DLabel, sets the text, and returns it 
     * @param text  The string to set the label's text to 
     * @param parent [=nil] Optional. The panel to parent the DLabel to 
     * @example
     * 
     * local lbl = Label( "The quick brown fox" )
     * 
     * // Create a label@example
     * 
     * local pnl = vgui.Create("DPanel")
     * local lbl = Label( "The quick brown fox", pnl )
     * 
     * // Create a label and parents it to a DPanel 
     */
    public constructor(text: string, parent?: Panel);
    
    /**
     * Called when the label is left clicked (on key release) by the player.
     * 
     * This will be called after {{ClassFunction|DLabel|OnDepressed}} and {{ClassFunction|DLabel|OnReleased}}.
     * 
     * This can be overridden; by default, it calls {{ClassFunction|DLabel|Toggle}}.
     * 
     * See also {{ClassFunction|DLabel|DoRightClick}}, {{ClassFunction|DLabel|DoMiddleClick}} and {{ClassFunction|DLabel|DoDoubleClick}}.
     * 
     * [[Category:DButton]] 
     * @example
     * 
     * local lbl = vgui.Create( "DLabel" ) // Creates our label
     * lbl:SetFont( "DermaLarge" )
     * lbl:SetText( "Click me!" )
     * lbl:SizeToContents()
     * lbl:Center()
     * lbl:SetMouseInputEnabled( true ) // We must accept mouse input
     * function lbl:DoClick() // Defines what should happen when the label is clicked
     * 	print("I was clicked!")
     * 	self:Remove()
     * end
     * 
     * // Creates a label in the center of the screen, that prints ''I was clicked!'' to the console and disappears when clicked. 
     */
    public DoClick(): void;
    
    /**
     * Called when the label is double clicked by the player with left clicks.
     * 
     * {{ClassFunction|DLabel|SetDoubleClickingEnabled}} must be set to true for this hook to work, which it is by default.
     * 
     * This will be called after {{ClassFunction|DLabel|OnDepressed}} and {{ClassFunction|DLabel|OnReleased}} and {{ClassFunction|DLabel|DoClick}}.
     * 
     * See also {{ClassFunction|DLabel|DoRightClick}} and {{ClassFunction|DLabel|DoMiddleClick}}. 
     * @example
     * 
     * local frame = vgui.Create( "DFrame" )
     * frame:SetTitle( "Double Click Example" )
     * frame:SetSize( 250, 100 )
     * frame:Center()
     * frame:MakePopup()
     * 
     * local frame_label = vgui.Create( "DLabel", frame )
     * frame_label:SetPos( 10, 30 )
     * frame_label:SetTextColor( Color( 255, 255, 255 ) )
     * frame_label:SetText( "Double click me!" )
     * frame_label:SizeToContents()
     * frame_label:SetMouseInputEnabled( true )
     * frame_label.DoDoubleClick = function()
     * 	gui.OpenURL("https://wiki.garrysmod.com/")
     * end
     * 
     * // Uncommentiing this will disable double clicking
     * // frame_label:SetDoubleClickingEnabled( false )
     * 
     * // Opens a URL in Steam Overlay by double clicking the text "Click ME"! 
     */
    public DoDoubleClick(): void;
    
    /**
     * Called when the label is middle mouse (Mouse wheel, also known as mouse 3) clicked (on key release) by the player.
     * 
     * This will be called after {{ClassFunction|DLabel|OnDepressed}} and {{ClassFunction|DLabel|OnReleased}}.
     * 
     * See also {{ClassFunction|DLabel|DoClick}}, {{ClassFunction|DLabel|DoRightClick}} and {{ClassFunction|DLabel|DoDoubleClick}}.
     * 
     * [[Category:DButton]] 
     */
    public DoMiddleClick(): void;
    
    /**
     * Called when the label is right clicked (on key release) by the player.
     * 
     * This will be called after {{ClassFunction|DLabel|OnDepressed}} and {{ClassFunction|DLabel|OnReleased}}.
     * 
     * See also {{ClassFunction|DLabel|DoClick}}, {{ClassFunction|DLabel|DoMiddleClick}} and {{ClassFunction|DLabel|DoDoubleClick}}.
     * 
     * [[Category:DButton]] 
     * @example
     * 
     * local lbl = vgui.Create( "DLabel" )
     * lbl:SetFont( "DermaLarge" )
     * lbl:SetText( "Click me!" )
     * lbl:SizeToContents()
     * lbl:Center()
     * lbl:SetMouseInputEnabled( true )
     * function lbl:DoRightClick()
     * 	print("I was right clicked!")
     * 	self:Remove()
     * end
     * 
     * // Creates a label in the center of the screen, that prints ''I was right clicked!'' to the console and disappears when right clicked. 
     */
    public DoRightClick(): void;
    
    /**
     * Returns whether the label stretches vertically or not.
     * 
     * Set by {{ClassFunction|DLabel|SetAutoStretchVertical}}. 
     * @returns Whether the label stretches vertically or not. 
     */
    public GetAutoStretchVertical(): boolean;
    
    /**
     * Returns whether the {{Type|DLabel}} should set its text color to the current skin's bright text color.
     * 
     * See {{ClassFunction|DLabel|SetBright}}. 
     * @returns 
     */
    public GetBright(): boolean;
    
    /**
     * Returns the "internal" desired color of the text, alias of {{ClassFunction|DLabel|GetTextStyleColor}}.
     * 
     * **Bug:**
     * >FIXED IN NEXT UPDATE: This doesn't return ACTUAL color of the text. Use the following instead for now:
     * ```local clr = DLabel:GetTextColor() or DLabel:GetTextStyleColor()``` 
     * @returns The "internal" desired color of the text 
     */
    public GetColor(): table;
    
    /**
     * Returns whether the {{Type|DLabel}} should set its text color to the current skin's dark text color.
     * 
     * See {{ClassFunction|DLabel|SetDark}}. 
     * @returns 
     */
    public GetDark(): boolean;
    
    /**
     * **Deprecated:**
     * >Use {{ClassFunction|Panel|IsEnabled}} instead.
     * 
     * Gets the disabled state of the {{Type|DLabel}}. This is set with {{ClassFunction|DLabel|SetDisabled}}. 
     * @returns The disabled state of the label. 
     */
    public GetDisabled(): boolean;
    
    /**
     * Returns whether or not double clicking will call {{ClassFunction|DLabel|DoDoubleClick}}.
     * 
     * See {{ClassFunction|DLabel|SetDoubleClickingEnabled}}. 
     * @returns true = enabled, false means disabled 
     */
    public GetDoubleClickingEnabled(): boolean;
    
    /**
     * [[Category:DButton]] Returns the current font of the DLabel. This is set with {{ClassFunction|DLabel|SetFont}}. 
     * @returns The name of the font in use. 
     */
    public GetFont(): string;
    
    /**
     * Returns the name of the font that the panel renders its text with.
     * 
     * This is the same font name set with {{ClassFunction|Panel|SetFontInternal}}. 
     * @returns fontName 
     */
    public GetFont(): string;
    
    /**
     * Returns whether the {{Type|DLabel}} should set its text color to the current skin's highlighted text color.
     * 
     * See {{ClassFunction|DLabel|SetHighlight}}. 
     * @returns 
     */
    public GetHighlight(): boolean;
    
    /**
     * Returns whether the toggle functionality is enabled for a label. Set with {{ClassFunction|DLabel|SetIsToggle}}. 
     * @returns Whether or not toggle functionality is enabled. 
     */
    public GetIsToggle(): boolean;
    
    /**
     * Returns the "override" text color, set by {{ClassFunction|DLabel|SetTextColor}}. 
     * @returns The color of the text, or nil. 
     */
    public GetTextColor(): table;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Returns the "internal" color of the text.
     * 
     * See also {{ClassFunction|DLabel|GetTextColor}} and {{ClassFunction|DLabel|SetTextStyleColor}}. 
     * @returns The "internal" color of the text 
     */
    public GetTextStyleColor(): table;
    
    /**
     * Returns the current toggle state of the label. This can be set with {{ClassFunction|DLabel|SetToggle}} and toggled with {{ClassFunction|DLabel|Toggle}}.
     * 
     * In order to use toggle functionality, you must first call {{ClassFunction|DLabel|SetIsToggle}} with ''true'', as it is disabled by default. 
     * @returns The current toggle state. 
     */
    public GetToggle(): boolean;
    
    /**
     * Called when the player presses the label with any mouse button.
     * 
     * This works as an alternative to {{HookFunction|PANEL|OnMousePressed}} as that hook is used heavily by {{Type|DLabel}} and overriding it will break functionality.
     * 
     * See also {{ClassFunction|DLabel|DoClick}}, {{ClassFunction|DLabel|DoMiddleClick}}, {{ClassFunction|DLabel|DoRightClick}}, {{ClassFunction|DLabel|OnReleased}} and {{ClassFunction|DLabel|DoDoubleClick}}. 
     * @example
     * 
     * local frame = vgui.Create( "DFrame" )
     * frame:SetTitle( "OnDepressed/Released Example" )
     * frame:SetSize( 300, 100 )
     * frame:Center()
     * frame:MakePopup()
     * 
     * local frame_label = vgui.Create( "DLabel", frame )
     * frame_label:SetPos( 10, 30 )
     * frame_label:SetTextColor( Color( 255, 255, 255 ) )
     * frame_label:SetText( "Click me!" )
     * frame_label:SizeToContents()
     * frame_label:SetMouseInputEnabled( true )
     * frame_label.OnDepressed = function( s )
     * 	s:SetText( "OnDepressed" )
     * 	frame_label:SizeToContents()
     * end
     * frame_label.OnReleased = function( s )
     * 	s:SetText( "OnReleased" )
     * 	frame_label:SizeToContents()
     * end
     * 
     * // Changes the text of the label when the hook is called. 
     */
    public OnDepressed(): void;
    
    /**
     * Called when the player releases any mouse button on the label. This is always called after {{ClassFunction|DLabel|OnDepressed}}.
     * 
     * This works as an alternative to {{HookFunction|PANEL|OnMouseReleased}} as that hook is used heavily by {{Type|DLabel}} and overriding it will break functionality.
     * 
     * See also {{ClassFunction|DLabel|DoClick}}, {{ClassFunction|DLabel|DoMiddleClick}}, {{ClassFunction|DLabel|DoRightClick}} and {{ClassFunction|DLabel|DoDoubleClick}}. 
     * @example
     * 
     * local frame = vgui.Create( "DFrame" )
     * frame:SetTitle( "OnDepressed/Released Example" )
     * frame:SetSize( 300, 100 )
     * frame:Center()
     * frame:MakePopup()
     * 
     * local frame_label = vgui.Create( "DLabel", frame )
     * frame_label:SetPos( 10, 30 )
     * frame_label:SetTextColor( Color( 255, 255, 255 ) )
     * frame_label:SetText( "Click me!" )
     * frame_label:SizeToContents()
     * frame_label:SetMouseInputEnabled( true )
     * frame_label.OnDepressed = function( s )
     * 	s:SetText( "OnDepressed" )
     * 	frame_label:SizeToContents()
     * end
     * frame_label.OnReleased = function( s )
     * 	s:SetText( "OnReleased" )
     * 	frame_label:SizeToContents()
     * end
     * 
     * // Changes the text of the label when the hook is called. 
     */
    public OnReleased(): void;
    
    /**
     * Called when the toggle state of the label is changed by {{ClassFunction|DLabel|Toggle}}.
     * 
     * In order to use toggle functionality, you must first call {{ClassFunction|DLabel|SetIsToggle}} with ''true'', as it is disabled by default. 
     * @param toggleState  The new toggle state. 
     */
    public OnToggled(toggleState: boolean): void;
    
    /**
     * Automatically adjusts the height of the label dependent of the height of the text inside of it. 
     * @param stretch  Whenever to stretch the label vertically or not. 
     */
    public SetAutoStretchVertical(stretch: boolean): void;
    
    /**
     * **Deprecated:**
     * >You really should use {{ClassFunction|DLabel|SetTextColor}}.
     * 
     * Sets the color of the text to the bright text color defined in the skin.
     * 
     * See also {{ClassFunction|DLabel|SetDark}} and {{ClassFunction|DLabel|SetHighlight}}.
     * 
     * You should only consider using this if you are using background elements that are not manually painted and are using the skin colors. 
     * @param bright  Whenever to set the text to bright or not. 
     */
    public SetBright(bright: boolean): void;
    
    /**
     * Changes color of label. Alias of {{ClassFunction|DLabel|SetTextColor}}. 
     * @param color  The color to set. Uses the Color structure. 
     * @example
     * 
     * local DLabel = vgui.Create( "DLabel" )
     * DLabel:SetPos( 90, 50 )
     * DLabel:SetColor(Color(255, 0, 0))
     * DLabel:SetText( "Hello world." )
     * DLabel:SizeToContents()
     * 
     * // Creates a label and changes it color to red. 
     */
    public SetColor(color: table): void;
    
    /**
     * Sets the alignment of the contents.
     * 
     * [[Category:Label]]
     * [[Category:DLabel]] 
     * @param alignment  The direction of the content, based on the number pad.
     * <table>
     * <tr><td>{{Key|7}}: '''top-left'''</td><td>{{Key|8}}: '''top-center'''</td><td>{{Key|9}}: '''top-right'''</td></tr>
     * <tr><td>{{Key|4}}: '''middle-left'''</td><td>{{Key|5}}: '''center'''</td><td>{{Key|6}}: '''middle-right'''</td></tr>
     * <tr><td>{{Key|1}}: '''bottom-left'''</td><td>{{Key|2}}: '''bottom-center'''</td><td>{{Key|3}}: '''bottom-right'''</td></tr>
     * </table>
     * [[File:DLabel_SetContentAlignment.gif]] 
     */
    public SetContentAlignment(alignment: number): void;
    
    /**
     * Sets the alignment of the contents.
     * 
     * [[Category:Label]]
     * [[Category:DLabel]] 
     * @param alignment  The direction of the content, based on the number pad.
     * <table>
     * <tr><td>{{Key|7}}: '''top-left'''</td><td>{{Key|8}}: '''top-center'''</td><td>{{Key|9}}: '''top-right'''</td></tr>
     * <tr><td>{{Key|4}}: '''middle-left'''</td><td>{{Key|5}}: '''center'''</td><td>{{Key|6}}: '''middle-right'''</td></tr>
     * <tr><td>{{Key|1}}: '''bottom-left'''</td><td>{{Key|2}}: '''bottom-center'''</td><td>{{Key|3}}: '''bottom-right'''</td></tr>
     * </table>
     * [[File:DLabel_SetContentAlignment.gif]] 
     */
    public SetContentAlignment(alignment: number): void;
    
    /**
     * Sets the alignment of the contents.
     * 
     * [[Category:Label]]
     * [[Category:DLabel]] 
     * @param alignment  The direction of the content, based on the number pad.
     * <table>
     * <tr><td>{{Key|7}}: '''top-left'''</td><td>{{Key|8}}: '''top-center'''</td><td>{{Key|9}}: '''top-right'''</td></tr>
     * <tr><td>{{Key|4}}: '''middle-left'''</td><td>{{Key|5}}: '''center'''</td><td>{{Key|6}}: '''middle-right'''</td></tr>
     * <tr><td>{{Key|1}}: '''bottom-left'''</td><td>{{Key|2}}: '''bottom-center'''</td><td>{{Key|3}}: '''bottom-right'''</td></tr>
     * </table>
     * [[File:DLabel_SetContentAlignment.gif]] 
     */
    public SetContentAlignment(alignment: number): void;
    
    /**
     * **Deprecated:**
     * >You really should use {{ClassFunction|DLabel|SetTextColor}}.
     * 
     * Sets the color of the text to the dark text color defined in the skin.
     * 
     * See also {{ClassFunction|DLabel|SetBright}} and {{ClassFunction|DLabel|SetHighlight}}.
     * 
     * You should only consider using this if you are using background elements that are not manually painted and are using the skin colors. 
     * @param dark  Whenever to set the text to dark or not. 
     */
    public SetDark(dark: boolean): void;
    
    /**
     * **Deprecated:**
     * >Use {{ClassFunction|Panel|SetEnabled}} instead.
     * 
     * Sets the disabled state of the {{Type|DLabel}}.
     * 
     * When disabled, the label does not respond to click, toggle or drag & drop actions. 
     * @param disable  ''true'' to disable the DLabel, ''false'' to enable it. 
     */
    public SetDisabled(disable: boolean): void;
    
    /**
     * Sets whether or not double clicking should call {{ClassFunction|DLabel|DoDoubleClick}}.
     * 
     * This is enabled by default. 
     * @param enable  true to enable, false to disable 
     */
    public SetDoubleClickingEnabled(enable: boolean): void;
    
    /**
     * [[Category:DButton]] Sets the font of the label. 
     * @param fontName  The name of the font.
     * 
     * See [[Default_Fonts|here]] for a list of existing fonts.
     * Alternatively, use {{LibraryFunction|surface|CreateFont}} to create your own custom font. 
     */
    public SetFont(fontName: string): void;
    
    /**
     * **Deprecated:**
     * >You really should use {{ClassFunction|DLabel|SetTextColor}}.
     * 
     * Sets the color of the text to the highlight text color defined in the skin.
     * 
     * For the default Derma skin this makes the label red.
     * 
     * See also {{ClassFunction|DLabel|SetBright}} and {{ClassFunction|DLabel|SetDark}}.
     * 
     * You should only consider using this if you are using background elements that are not manually painted and are using the skin colors. 
     * @param highlight  true to set the label's color to skins's text highlight color, false otherwise. 
     */
    public SetHighlight(highlight: boolean): void;
    
    /**
     * Enables or disables toggle functionality for a label. Retrieved with {{ClassFunction|DLabel|GetIsToggle}}.
     * 
     * You must call this before using {{ClassFunction|DLabel|SetToggle}}, {{ClassFunction|DLabel|GetToggle}} or {{ClassFunction|DLabel|Toggle}}. 
     * @param allowToggle  Whether or not to enable toggle functionality. 
     */
    public SetIsToggle(allowToggle: boolean): void;
    
    /**
     * Sets the text value of a panel object containing text, such as a {{Type|Label}}, {{Type|TextEntry}} or  {{Type|RichText}} and their derivatives, such as {{Type|DLabel}}, {{Type|DTextEntry}} or {{Type|DButton}}.
     * 
     * {{Warning|When used on a {{Type|Label}} or its derivatives ( {{Type|DLabel}} and {{Type|DButton}} ), it will automatically call {{ClassFunction|Panel|InvalidateLayout}}, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.}}
     * [[Category:Label]]
     * [[Category:DLabel]]
     * [[Category:TextEntry]]
     * [[Category:RichText]]
     * [[Category:DTree_Node]] 
     * @param text  The text value to set. 
     * @example
     * 
     * // Window frame for the RichText
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(250, 150)
     * TextFrame:Center()
     * TextFrame:SetTitle("#VAC_ConnectionRefusedTitle") // Results in "Connection Refused - VAC"
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Set the text to the message you get when VAC banned
     * richtext:SetText("#VAC_ConnectionRefusedDetail")
     * 
     * // Creates a {{Type|RichText}} element and sets the text to a localized string; the default VAC rejection message. 
     */
    public SetText(text: string): void;
    
    /**
     * Sets the text value of a panel object containing text, such as a {{Type|Label}}, {{Type|TextEntry}} or  {{Type|RichText}} and their derivatives, such as {{Type|DLabel}}, {{Type|DTextEntry}} or {{Type|DButton}}.
     * 
     * {{Warning|When used on a {{Type|Label}} or its derivatives ( {{Type|DLabel}} and {{Type|DButton}} ), it will automatically call {{ClassFunction|Panel|InvalidateLayout}}, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.}}
     * [[Category:Label]]
     * [[Category:DLabel]]
     * [[Category:TextEntry]]
     * [[Category:RichText]]
     * [[Category:DTree_Node]] 
     * @param text  The text value to set. 
     * @example
     * 
     * // Window frame for the RichText
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(250, 150)
     * TextFrame:Center()
     * TextFrame:SetTitle("#VAC_ConnectionRefusedTitle") // Results in "Connection Refused - VAC"
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Set the text to the message you get when VAC banned
     * richtext:SetText("#VAC_ConnectionRefusedDetail")
     * 
     * // Creates a {{Type|RichText}} element and sets the text to a localized string; the default VAC rejection message. 
     */
    public SetText(text: string): void;
    
    /**
     * Sets the text value of a panel object containing text, such as a {{Type|Label}}, {{Type|TextEntry}} or  {{Type|RichText}} and their derivatives, such as {{Type|DLabel}}, {{Type|DTextEntry}} or {{Type|DButton}}.
     * 
     * {{Warning|When used on a {{Type|Label}} or its derivatives ( {{Type|DLabel}} and {{Type|DButton}} ), it will automatically call {{ClassFunction|Panel|InvalidateLayout}}, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.}}
     * [[Category:Label]]
     * [[Category:DLabel]]
     * [[Category:TextEntry]]
     * [[Category:RichText]]
     * [[Category:DTree_Node]] 
     * @param text  The text value to set. 
     * @example
     * 
     * // Window frame for the RichText
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(250, 150)
     * TextFrame:Center()
     * TextFrame:SetTitle("#VAC_ConnectionRefusedTitle") // Results in "Connection Refused - VAC"
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Set the text to the message you get when VAC banned
     * richtext:SetText("#VAC_ConnectionRefusedDetail")
     * 
     * // Creates a {{Type|RichText}} element and sets the text to a localized string; the default VAC rejection message. 
     */
    public SetText(text: string): void;
    
    /**
     * Sets the text color of the {{Type|DLabel}}. This will take precedence over {{ClassFunction|DLabel|SetTextStyleColor}}. 
     * @param color  The text color. Uses the {{Struct|Color}}. 
     * @example
     * 
     * local frame = vgui.Create( "DFrame" )
     * frame:SetTitle( "Text Color Example" )
     * frame:SetSize( 300, 100 )
     * frame:Center()
     * frame:MakePopup()
     * 
     * local frame_label = vgui.Create( "DLabel", frame )
     * frame_label:SetPos( 10, 30 )
     * frame_label:SetTextColor( Color( 255, 0, 0) )
     * 
     * // Changes the text color to red. 
     */
    public SetTextColor(color: Color): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Used by {{ClassFunction|DLabel|SetDark}}, {{ClassFunction|DLabel|SetBright}} and {{ClassFunction|DLabel|SetHighlight}} to set the text color without affecting {{ClassFunction|DLabel|SetTextColor}} calls. 
     * @param color  The text color. Uses the {{Struct|Color}}. 
     */
    public SetTextStyleColor(color: Color): void;
    
    /**
     * Sets the toggle state of the label. This can be retrieved with {{ClassFunction|DLabel|GetToggle}} and toggled with {{ClassFunction|DLabel|Toggle}}.
     * 
     * In order to use toggle functionality, you must first call {{ClassFunction|DLabel|SetIsToggle}} with ''true'', as it is disabled by default. 
     * @param toggleState  The toggle state to be set. 
     */
    public SetToggle(toggleState: boolean): void;
    
    /**
     * Toggles the label's state. This can be set and retrieved with {{ClassFunction|DLabel|SetToggle}} and {{ClassFunction|DLabel|GetToggle}}.
     * 
     * In order to use toggle functionality, you must first call {{ClassFunction|DLabel|SetIsToggle}} with ''true'', as it is disabled by default. 
     */
    public Toggle(): void;
    
    /**
     * A hook called from within {{ClassFunction|DLabel|ApplySchemeSettings}} to determine the color of the text on display. 
     * @param skin  A table supposed to contain the color values listed above. 
     */
    public UpdateColours(skin: table): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called internally to update the color of the text. 
     */
    public UpdateFGColor(): void;
}

/**
 * An editable {{Type|DLabel}}, double click on it to edit.
 * 
 * This is used in the spawnmenu spawnlist headers. 
 * @example
 * 
 * local EditLabel = vgui.Create( "DLabelEditable" )
 * EditLabel:SetPos( 40, 40 )
 * EditLabel:SetSize( 70, 30)
 * EditLabel:SetText( "Hello, world!" )
 * 
 * // Creates a DLabelEditable. 
 */
declare class DLabelEditable extends DLabel {
    /**
     * A hook called when the player presses Enter (i.e. the finished editing the label) and the text has changed.
     * 
     * Allows you to override/modify the text that will be set to display. 
     * @param txt  The original user input text 
     * @returns If provided, will override the text that will be applied to the label itself. 
     */
    public OnLabelTextChanged(txt: string): string;
}

/**
 * Underlined link label without a DoClick function. When a valid URL is set and the label is clicked, it will open a browser window and navigate to the address.
 * 
 * This panel uses {{LibraryFunction|gui|OpenURL}} internally and its restrictions apply. 
 * @example
 * 
 * local frame = vgui.Create( "DFrame" )
 * frame:SetSize(400,400)
 * frame:SetTitle("Test panel")
 * frame:Center()
 * frame:MakePopup()
 * 
 * local lbl = vgui.Create( "DLabelURL", frame )
 * lbl:SetPos(50, 50)
 * lbl:SetSize(100, 50)
 * lbl:SetColor(Color(255,255,255,255)) 
 * lbl:SetText("I Love Gmod") 
 * lbl:SetURL("http://steamcommunity.com/groups/glua")
 * 
 * // Creates a DLabelURL that opens the wiki when clicked. 
 */
declare class DLabelURL extends DLabel {
    /**
     * Gets the current text color of the DLabelURL. Same as {{ClassFunction|DLabelURL|GetTextColor}}. 
     * @returns The current text {{GlobalFunction|Color}}. 
     */
    public GetColor(): table;
    
    /**
     * Returns the "internal" desired color of the text, alias of {{ClassFunction|DLabel|GetTextStyleColor}}.
     * 
     * **Bug:**
     * >FIXED IN NEXT UPDATE: This doesn't return ACTUAL color of the text. Use the following instead for now:
     * ```local clr = DLabel:GetTextColor() or DLabel:GetTextStyleColor()``` 
     * @returns The "internal" desired color of the text 
     */
    public GetColor(): table;
    
    /**
     * Gets the current text color of the DLabelURL. Same as {{ClassFunction|DLabelURL|GetColor}}. 
     * @returns The current text {{GlobalFunction|Color}}. 
     */
    public GetTextColor(): table;
    
    /**
     * Returns the "override" text color, set by {{ClassFunction|DLabel|SetTextColor}}. 
     * @returns The color of the text, or nil. 
     */
    public GetTextColor(): table;
    
    /**
     * Alias of {{ClassFunction|DLabelURL|SetTextColor}}. 
     * @param col  The {{GlobalFunction|Color}} to use. 
     */
    public SetColor(col: table): void;
    
    /**
     * Changes color of label. Alias of {{ClassFunction|DLabel|SetTextColor}}. 
     * @param color  The color to set. Uses the Color structure. 
     * @example
     * 
     * local DLabel = vgui.Create( "DLabel" )
     * DLabel:SetPos( 90, 50 )
     * DLabel:SetColor(Color(255, 0, 0))
     * DLabel:SetText( "Hello world." )
     * DLabel:SizeToContents()
     * 
     * // Creates a label and changes it color to red. 
     */
    public SetColor(color: table): void;
    
    /**
     * Sets the text color of the DLabelURL. This should only be used immediately after it is created, and otherwise {{ClassFunction|Panel|SetFGColor}}. 
     * @param col  The {{GlobalFunction|Color}} to use. 
     */
    public SetTextColor(col: table): void;
    
    /**
     * Sets the text color of the {{Type|DLabel}}. This will take precedence over {{ClassFunction|DLabel|SetTextStyleColor}}. 
     * @param color  The text color. Uses the {{Struct|Color}}. 
     * @example
     * 
     * local frame = vgui.Create( "DFrame" )
     * frame:SetTitle( "Text Color Example" )
     * frame:SetSize( 300, 100 )
     * frame:Center()
     * frame:MakePopup()
     * 
     * local frame_label = vgui.Create( "DLabel", frame )
     * frame_label:SetPos( 10, 30 )
     * frame_label:SetTextColor( Color( 255, 0, 0) )
     * 
     * // Changes the text color to red. 
     */
    public SetTextColor(color: Color): void;
    
    /**
     * [[Category:DLabelURL]][[Category:URLLabel]]Sets the URL of a link-based panel such as {{Type|DLabelURL}}. 
     * @param url  The URL to set. This '''must''' begin with ''<nowiki>http://</nowiki>''. 
     */
    public SetURL(url: string): void;
    
    /**
     * [[Category:DLabelURL]][[Category:URLLabel]]Sets the URL of a link-based panel such as {{Type|DLabelURL}}. 
     * @param url  The URL to set. This '''must''' begin with ''<nowiki>http://</nowiki>''. 
     */
    public SetURL(url: string): void;
}

/**
 * **Deprecated:**
 * >Derived from the deprecated {{Type|DPanelList}}.
 * 
 *  A simple list box with optional multi-select. As this is deprecated, it is recommended that you use {{Type|DListView}}, which contains the same functionality with multi-column options. 
 */
declare class DListBox extends DPanelList {

}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't. 
 */
declare class DListBoxItem extends DLabel {

}

/**
 * A vertical list of panels that optionally allows child elements to be rearranged with the mouse cursor.
 * 
 * Child panels' widths are set to the width of the DListLayout, and it resizes vertically to accommodate the heights of all children. You can place this inside a {{Type|DScrollPanel}} when adding many panels.
 * 
 * To enable the drag & drop rearrangement functionality, call {{ClassFunction|DDragBase|MakeDroppable}} on the DListLayout with a unique identifier. All panels added following this will be moveable. 
 * @example
 * 
 * local frame = vgui.Create("DFrame")
 * frame:SetSize(250, 250)
 * frame:SetTitle("DListLayout Example")
 * frame:MakePopup()
 * frame:Center()
 * 
 * local layout = vgui.Create("DListLayout", frame)
 * layout:SetSize(100, 100)
 * layout:SetPos(20, 50)
 * 
 * //Draw a background so we can see what it's doing
 * layout:SetPaintBackground(true)
 * layout:SetBackgroundColor(Color(0, 100, 100))
 * 
 * layout:MakeDroppable("unique_name") // Allows us to rearrange children
 * 
 * for i = 1, 8 do
 * 	layout:Add(Label(" Label " .. i))
 * end
 * 
 * // Creates a DListLayout within a {{Type|DFrame}} and adds 8 {{Type|DLabel}}s. 
 */
declare class DListLayout extends DDragBase {

}

/**
 * A data view with rows and columns. 
 * @example
 * 
 * local f = vgui.Create( "DFrame" )
 * f:SetSize( 500, 500 )
 * f:Center()
 * f:MakePopup()
 * 
 * local AppList = vgui.Create( "DListView", f )
 * AppList:Dock( FILL )
 * AppList:SetMultiSelect( false )
 * AppList:AddColumn( "Application" )
 * AppList:AddColumn( "Size" )
 * 
 * AppList:AddLine( "PesterChum", "2mb" )
 * AppList:AddLine( "Lumitorch", "512kb" )
 * AppList:AddLine( "Troj-on", "661kb" )
 * 
 * AppList.OnRowSelected = function( lst, index, pnl )
 * 	print( "Selected " .. pnl:GetColumnText( 1 ) .. " ( " .. pnl:GetColumnText( 2 ) .. " ) at index " .. index )
 * end
 * 
 * // Creates a DListView and populates it with two columns and three items, only one of which can be selected at a time.
 * 
 * Selecting a row will print a console message containing the text of the row and its index. 
 */
declare class DListView extends DPanel {
    /**
     * Adds a column to the listview. 
     * @param column  The name of the column to add. 
     * @param material  The material to apply to the column. 
     * 
     * Appears to only get applied if the listview is set to not be sortable. 
     * @param position  Sets the ordering of this column compared to other columns. 
     * 
     * Does not appear to be implemented. 
     * @returns The newly created {{Type|DListView_Column}}. 
     */
    public AddColumn(column: string, material: string, position: number): DListView_Column;
    
    /**
     * Adds a line to the list view. 
     * @param text  Values for a new row in the DListView, If several arguments are supplied, each argument will correspond to a respective column in the DListView. 
     * @returns The newly created {{Type|DListView_Line}}. 
     */
    public AddLine(...text: (any)[]): DListView_Line;
    
    /**
     * Marks all of the panel's children for deletion. 
     */
    public Clear(): void;
    
    /**
     * Removes all lines that have been added to the DListView. 
     */
    public Clear(): void;
    
    /**
     * Clears the current selection in the DListView. 
     */
    public ClearSelection(): void;
    
    /**
     * Gets the width of a column. 
     * @param column  The column to get the width of. 
     * @returns Width of the column. 
     */
    public ColumnWidth(column: number): number;
    
    /**
     * Creates the lines and gets the height of the contents, in a DListView. 
     * @returns The height of the contents 
     */
    public DataLayout(): number;
    
    /**
     * Removes the scrollbar. 
     */
    public DisableScrollbar(): void;
    
    /**
     * Called when a line in the DListView is double clicked. 
     * @param lineID  The line number of the double clicked line. 
     * @param line  The double clicked {{Type|DListView_Line}}. 
     * @example
     * 
     * local DList = vgui.Create("DListView")
     * DList:SetPos(5,50)
     * DList:SetSize(150, 245)
     * DList:AddColumn("Player Names")
     * 
     * for k, v in pairs( player.GetAll() ) do
     * 	DList:AddLine(v:Name())
     * end
     * 
     * function DList:DoDoubleClick( lineID, line )
     * 	MsgN( "Line " .. lineID .. " was double clicked!" )
     * end
     * 
     * // Demonstrates the use of this function. 
     */
    public DoDoubleClick(lineID: number, line: DListView_Line): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Internal helper function called from the {{HookFunction|PANEL|PerformLayout}} of {{Type|DListView}}. 
     */
    public FixColumnsLayout(): void;
    
    /**
     * Gets the canvas. 
     * @returns The canvas. 
     */
    public GetCanvas(): Panel;
    
    /**
     * Returns the height of the data of the {{Type|DListView}}.
     * 
     * See also {{ClassFunction|DListView|SetDataHeight}}. 
     * @returns The height of the data of the {{Type|DListView}}. 
     */
    public GetDataHeight(): number;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * See {{ClassFunction|DListView|SetDirty}}. 
     * @returns 
     */
    public GetDirty(): boolean;
    
    /**
     * Returns the height of the header of the {{Type|DListView}}.
     * 
     * See also {{ClassFunction|DListView|SetHeaderHeight}}. 
     * @returns The height of the header of the {{Type|DListView}}. 
     */
    public GetHeaderHeight(): number;
    
    /**
     * Returns whether the header line should be visible on not. 
     * @returns Whether the header line should be visible on not. 
     */
    public GetHideHeaders(): boolean;
    
    /**
     * Returns the height of {{ClassFunction|DListView|GetCanvas}}.
     * 
     * Intended to represent the height of all data lines. 
     * @returns The height of {{ClassFunction|DListView|GetCanvas}}. 
     */
    public GetInnerTall(): number;
    
    /**
     * Gets the {{Type|DListView_Line}} at the given index. 
     * @param id  The index of the line to get. 
     * @returns The {{Type|DListView_Line}} at the given index. 
     * @example
     * 
     * local list = vgui.Create( "DListView" )
     * list:AddColumn( "Name" )
     * list:AddLine( "Garry :D" )
     * 
     * print( list:GetLine( 1 ) )
     * 
     * // An example of how to retrieve a DListView_Line from a DListView. 
     */
    public GetLine(id: number): DListView_Line;
    
    /**
     * Gets all of the lines added to the DListView. 
     * @returns The lines added to the DListView. 
     * @example
     * 
     * local list = vgui.Create( "DListView" )
     * list:AddColumn( "Fruit" )
     * 
     * local lines = { "Apple", "Orange", "Banana" }
     * 
     * for _, line in pairs( lines ) do
     *     list:AddLine( line )
     * end
     * 
     * for k, line in pairs( list:GetLines() ) do
     *     print( k, line:GetValue( 1 ) )
     * end
     * 
     * // Loops through all of the lines of a DListView and prints their first value. 
     */
    public GetLines(): table;
    
    /**
     * Returns whether multiple lines can be selected or not.
     * 
     * See {{ClassFunction|DListView|SetMultiSelect}}. 
     * @returns Whether multiple lines can be selected or not. 
     */
    public GetMultiSelect(): boolean;
    
    /**
     * Gets all of the lines that are currently selected. 
     * @returns A table of {{Type|DListView_Line}}s. 
     */
    public GetSelected(): DListView_Line[];
    
    /**
     * Gets the currently selected DListViewLine.
     * 
     * If {{ClassFunction|DListView|SetMultiSelect}} is set to true, only the first line of all selected lines will be returned. Use {{ClassFunction|DListView|GetSelected}} instead to get all of the selected lines. 
     * @returns The index of the currently selected line. 
     */
    public GetSelectedLine(): number;
    
    /**
     * Returns whether sorting of columns by clicking their headers is allowed or not.
     * 
     * See also {{ClassFunction|DListView|SetSortable}}. 
     * @returns Whether sorting of columns by clicking their headers is allowed or not 
     */
    public GetSortable(): boolean;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Converts LineID to SortedID 
     * @param lineId  The {{ClassFunction|DListView_Line|GetID}} of a line to look up 
     * @returns 
     */
    public GetSortedID(lineId: number): number;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called whenever a line is clicked. 
     * @param line  The selected line. 
     * @param isSelected  Boolean indicating whether the line is selected. 
     */
    public OnClickLine(line: Panel, isSelected: boolean): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called from {{Type|DListView_Column}}. 
     * @param column  The column which initialized the resize 
     * @param size 
     */
    public OnRequestResize(column: Panel, size: number): void;
    
    /**
     * Called when a row is right-clicked 
     * @param lineID  The line ID of the right clicked line 
     * @param line  The line panel itself, a {{Type|DListView_Line}}. 
     */
    public OnRowRightClick(lineID: number, line: DListView_Line): void;
    
    /**
     * Called internally by {{ClassFunction|DListView|OnClickLine}} when a line is selected. This is the function you should override to define the behavior when a line is selected. 
     * @param rowIndex  The index of the row that the user clicked on. 
     * @param row  The {{Type|DListView_Line}} that the user clicked on. 
     * @example
     * 
     * local frame = vgui.Create( "DFrame" )
     * frame:SetSize( 300, 300 )
     * frame:MakePopup()
     * 
     * local listView = frame:Add( "DListView" )
     * listView:Dock( FILL )
     * 
     * listView:AddColumn( "Nick" )
     * listView:AddColumn( "Frags" )
     * 
     * for _, v in pairs( player.GetAll() ) do
     * 	listView:AddLine( v:Nick(), v:Frags() )
     * end
     * listView.OnRowSelected = function( panel, rowIndex, row )
     * 	print( row:GetValue( 1 ) )
     * 	print( row:GetValue( 2 ) )
     * end
     * 
     * // Prints the first two column values of the row that was clicked. In this example it's the nickname and kills of the player selected in the list 
     */
    public OnRowSelected(rowIndex: number, row: DListView_Line): void;
    
    /**
     * Removes a line from the list view. 
     * @param line  Removes the given row, by row id (same number as {{ClassFunction|DListView|GetLine}}). 
     */
    public RemoveLine(line: number): void;
    
    /**
     * Selects the line at the first index of the DListView if one has been added. 
     */
    public SelectFirstItem(): void;
    
    /**
     * Selects a line in the listview. 
     * @param Line  The line to select. 
     */
    public SelectItem(Line: Panel): void;
    
    /**
     * Sets the height of all lines of the {{Type|DListView}} except for the header line.
     * 
     * See also {{ClassFunction|DListView|SetHeaderHeight}}. 
     * @param height  The new height to set. Default value is 17. 
     */
    public SetDataHeight(height: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Used internally to signify if the {{Type|DListView}} needs a rebuild. 
     * @param isDirty 
     */
    public SetDirty(isDirty: boolean): void;
    
    /**
     * Sets the height of the header line of the {{Type|DListView}}.
     * 
     * See also {{ClassFunction|DListView|SetDataHeight}}. 
     * @param height  The new height to set. Default value is 16. 
     */
    public SetHeaderHeight(height: number): void;
    
    /**
     * Sets whether the header line should be visible on not. 
     * @param hide  Whether the header line should be visible on not. 
     */
    public SetHideHeaders(hide: boolean): void;
    
    /**
     * Sets whether multiple lines can be selected by the user by using the {{Key|Ctrl}} or {{Key|Shift}} keys. When set to false, only one line can be selected. 
     * @param allowMultiSelect  Whether multiple lines can be selected or not 
     */
    public SetMultiSelect(allowMultiSelect: boolean): void;
    
    /**
     * Enables/disables the sorting of columns by clicking. 
     * @param isSortable  Whether sorting columns with clicking is allowed or not. 
     */
    public SetSortable(isSortable: boolean): void;
    
    /**
     * Resizes the panel so that its width and height fit all of the content inside.
     * 
     * **Note:**
     * >Only works on {{Type|Label}} derived panels such as {{Type|DLabel}} by default, and on any panel that manually implemented the {{ClassFunction|Panel|SizeToContents}} method, such as {{Type|DNumberWang}} and {{Type|DImage}}.
     * 
     * {{Warning|You must call this function '''AFTER''' setting text/font, adjusting child panels or otherwise altering the panel.}}
     * 
     * [[Category:DImage]]
     * [[Category:DImageButton]]
     * [[Category:DNumberWang]]
     * [[Category:DListView]] 
     */
    public SizeToContents(): void;
    
    /**
     * Resizes the panel so that its width and height fit all of the content inside.
     * 
     * **Note:**
     * >Only works on {{Type|Label}} derived panels such as {{Type|DLabel}} by default, and on any panel that manually implemented the {{ClassFunction|Panel|SizeToContents}} method, such as {{Type|DNumberWang}} and {{Type|DImage}}.
     * 
     * {{Warning|You must call this function '''AFTER''' setting text/font, adjusting child panels or otherwise altering the panel.}}
     * 
     * [[Category:DImage]]
     * [[Category:DImageButton]]
     * [[Category:DNumberWang]]
     * [[Category:DListView]] 
     */
    public SizeToContents(): void;
    
    /**
     * Sorts the items in the specified column. 
     * @param columnIndex  The index of the column that should be sorted. 
     * @param descending [=false] Whether the items should be sorted in descending order or not. 
     */
    public SortByColumn(columnIndex: number, descending?: boolean): void;
    
    /**
     * Sorts the list based on given columns.
     * 
     * All arguments are optional 
     * @param column1 [=nil] 
     * @param descrending1 [=false] 
     * @param column2 [=nil] 
     * @param descrending2 [=false] 
     * @param column3 [=nil] 
     * @param descrending3 [=false] 
     * @param column4 [=nil] 
     * @param descrending4 [=false] 
     */
    public SortByColumns(column1?: number, descrending1?: boolean, column2?: number, descrending2?: boolean, column3?: number, descrending3?: boolean, column4?: number, descrending4?: boolean): void;
}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * A single column, used by {{Type|DListView}}. 
 */
declare class DListView_Column extends DPanel {
    /**
     * Sets the text alignment for the column 
     * @param alignment  The direction of the content, based on the number pad.
     * <table>
     * <tr><td>{{Key|7}}: '''top-left'''</td><td>{{Key|8}}: '''top-center'''</td><td>{{Key|9}}: '''top-right'''</td></tr>
     * <tr><td>{{Key|4}}: '''middle-left'''</td><td>{{Key|5}}: '''center'''</td><td>{{Key|6}}: '''middle-right'''</td></tr>
     * <tr><td>{{Key|1}}: '''bottom-left'''</td><td>{{Key|2}}: '''bottom-center'''</td><td>{{Key|3}}: '''bottom-right'''</td></tr>
     * </table> 
     */
    public SetTextAlign(alignment: number): void;
}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't. 
 */
declare class DListView_ColumnPlain extends Panel {

}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't. 
 */
declare class DListView_DraggerBar extends DButton {

}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * A panel used by {{Type|DListView}} 
 */
declare class DListView_Line extends Panel {
    /**
     * Gets the string held in the specified column of a {{Type|DListView_Line}} panel.
     * 
     * This is the same thing as doing {{ClassFunction|DListView_Line|GetValue}}( column_number ). 
     * @param column  The number of the column to retrieve the text from, starts with 1. 
     * @returns The contents of the specified column. 
     * @example
     * 
     * local dframe = vgui.Create("DFrame")
     * dframe:SetSize(450, 350)
     * dframe:Center()
     * 
     * local dlist = vgui.Create("DListView", dframe)
     * dlist:Dock(FILL)
     * dlist:SetMultiSelect(false)
     * dlist:AddColumn("Name")
     * dlist:AddColumn("SteamID")
     * dlist:AddLine("Stalker", "STEAM_0:1:18093014")
     * function dlist:DoDoubleClick(linenumber, lineinfo)
     * 	print(lineinfo:GetColumnText(2))
     * end
     * 
     * // 
     */
    public GetColumnText(column: number): string;
}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't. 
 */
declare class DListViewHeaderLabel extends DLabel {

}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't. 
 */
declare class DListViewLabel extends DLabel {

}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't. 
 */
declare class DListViewLine extends Panel {

}

/**
 * A simple DMenu 
 * @example
 * 
 * local Menu = DermaMenu() 		// Is the same as  vgui.Create("DMenu")
 * Menu:AddOption( "Simple option" ) 	// Add a simple option.
 * 
 * local btnWithIcon = Menu:AddOption( "Option with icon" ) // Simple option, but we're going to add an icon
 * btnWithIcon:SetIcon( "icon16/bug.png" )	// Icons are in materials/icon16 folder
 * 
 * Menu:AddSpacer()			// Adds a simple line spacer
 * 
 * local SubMenu = Menu:AddSubMenu( "A Sub Menu" )				// Add a submenu
 * SubMenu:AddOption( "Sub Option #1" ):SetIcon( "icon16/group.png" )	// SetIcon possible like this
 * 
 * Menu:Open()
 * 
 * // Creates a DMenu with a submenu. 
 */
declare class DMenu extends DScrollPanel {
    /**
     * Creates a {{Type|DMenuOptionCVar}} and adds it as an option into the menu. Checking and unchecking the option will alter the given console variable's value. 
     * @param strText  The text of the button 
     * @param convar  The console variable to change 
     * @param on  The value of the console variable to set when the option is checked 
     * @param off  The value of the console variable to set when the option is unchecked 
     * @param funcFunction [=nil] If set, the function will be called every time the option is pressed/clicked/selected.
     * 
     * It will have only one argument:
     * {{FuncArg|Panel|pnl|The created {{Type|DMenuOptionCVar}}.}} 
     * @returns The created {{Type|DMenuOptionCVar}} 
     */
    public AddCVar(strText: string, convar: string, on: string, off: string, funcFunction?: DMenuOptionCVar): DMenuOptionCVar;
    
    /**
     * Add an option to the DMenu 
     * @param name  Name of the option. 
     * @param func [=nil] Function to execute when this option is clicked. 
     * @returns Returns the created {{Type|DMenuOption}} panel. 
     * @example
     * 
     * local m = DermaMenu()
     * 
     * m:AddOption( "Suicide", function() RunConsoleCommand("kill") end )
     * m:AddOption( "It does nothing" )
     * 
     * m:Open()
     * 
     * // Creates a DMenu with 2 options: One that kills yourself; One that does nothing. 
     */
    public AddOption(name: string, func?: Function): DMenuOption;
    
    /**
     * Adds a panel to the {{Type|DMenu}} as if it were an option.
     * 
     * This invokes {{ClassFunction|DScrollPanel|AddItem}} and will not create a new panel if a class name is passed, unlike {{ClassFunction|Panel|Add}}. 
     * @param pnl  The panel that you want to add. 
     * @example
     * 
     * local m = DermaMenu()
     * 
     * m:AddOption( "Kill yourself", function() RunConsoleCommand( "kill" ) end ) // Add first option
     * m:AddSpacer()
     * 
     * // Create a red DPanel
     * local panel = vgui.Create( "DPanel", m )
     * panel:SetSize( 50, 100 )
     * panel:SetBackgroundColor( Color( 255, 0, 0 ) )
     * 
     * m:AddPanel( panel ) // Add the panel
     * 
     * m:AddSpacer()
     * m:AddOption( "Say hi", function() RunConsoleCommand( "say", "Hi!" ) end ) // Add second option
     * 
     * m:Open() // Show our menu
     * 
     * // Creates a DMenu with some options and places a red DPanel between them. 
     */
    public AddPanel(pnl: Panel): void;
    
    /**
     * Adds a horizontal line spacer. 
     * @example
     * 
     * local m = DermaMenu()
     * 
     * m:AddOption( "Kill yourself", function() RunConsoleCommand( "kill" ) end ) // Add first option
     * m:AddOption( "Disconnect", function() RunConsoleCommand( "disconnect" ) end ) // Add second option
     * 
     * m:AddSpacer() // Add a spacer
     * 
     * m:AddOption( "Say hi", function() RunConsoleCommand( "say", "Hi!" ) end ) // Add third option
     * 
     * m:Open() // Show our menu
     * 
     * // Creates a DMenu with 3 options and adds a spacer before the third. 
     */
    public AddSpacer(): void;
    
    /**
     * Add a sub menu to the DMenu 
     * @param Name  Name of the sub menu. 
     * @param func [=nil] Function to execute when this sub menu is clicked. 
     * @returns [The sub menu, The option added to the parent DMenu] 
     * @example
     * 
     * local parentMenu = DermaMenu()
     * 
     * local subMenu, parentMenuOption = parentMenu:AddSubMenu("Do you want to die?")
     * parentMenuOption:SetIcon("icon16/user_red.png")
     * 
     * local yesOption = subMenu:AddOption("Yes", function() LocalPlayer():ConCommand("kill") end)
     * yesOption:SetIcon("icon16/accept.png")
     * 
     * local noOption = subMenu:AddOption("No", function() print("You chose to live another day") end)
     * noOption:SetIcon("icon16/cross.png")
     * 
     * parentMenu:Open()
     * 
     * // Creates a menu with one option "Do you want to die?", which has two sub-options "Yes" and "No". 
     * !TupleReturn
     */
    public AddSubMenu(Name: string, func?: Function): [Panel, Label];
    
    /**
     * Returns the number of child elements of {{Type|DMenu}}'s {{ClassFunction|DScrollPanel|GetCanvas}}. 
     * @returns The number of child elements 
     */
    public ChildCount(): number;
    
    /**
     * Returns the amount of children of the of panel. 
     * @returns childCount 
     */
    public ChildCount(): number;
    
    /**
     * **Deprecated!**
     * 
     * Clears all highlights made by {{ClassFunction|DMenu|HighlightItem}}.
     * 
     * Doesn't appear to be used or do anything. 
     */
    public ClearHighlights(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Used internally by {{ClassFunction|DMenu|OpenSubMenu}}. 
     * @param menu  The menu to close 
     */
    public CloseSubMenu(menu: Panel): void;
    
    /**
     * Gets a child by its index. 
     * @param childIndex  The index of the child to get.
     * 
     * **Note:**
     * >Unlike {{ClassFunction|Panel|GetChild}}, this index starts at 1. 
     */
    public GetChild(childIndex: number): void;
    
    /**
     * Gets a child by its index. 
     * @param childIndex  The index of the child to get.
     * 
     * **Note:**
     * >This index starts at 0, except when you use this on a {{Type|DMenu}}. 
     */
    public GetChild(childIndex: number): void;
    
    /**
     * **Deprecated!**
     * 
     * Unused. Set by {{ClassFunction|DMenu|SetDeleteSelf}} 
     * @returns 
     */
    public GetDeleteSelf(): boolean;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Returns the currently opened submenu.
     * 
     * Used internally to store the open submenu by {{ClassFunction|DMenu|Hide}}, {{ClassFunction|DMenu|OpenSubMenu}}. 
     * @returns The currently opened submenu, if any. 
     */
    public GetOpenSubMenu(): Panel;
    
    /**
     * Used to safely hide (not remove) the menu. This will also hide any opened submenues recursively. 
     */
    public Hide(): void;
    
    /**
     * Makes a panel invisible. 
     */
    public Hide(): void;
    
    /**
     * **Deprecated!**
     * 
     * Highlights selected item in the {{Type|DMenu}} by setting the item's key "Highlight" to true.
     * 
     * Doesn't appear to be working or used. 
     * @param item  The item to highlight. 
     */
    public HighlightItem(item: Panel): void;
    
    /**
     * Opens the DMenu at the current mouse position 
     * @param skipanimation  This argument does nothing. 
     * @param ownerpanel 
     */
    public Open(skipanimation: any, ownerpanel: Panel): void;
    
    /**
     * Opens the DMenu at the current mouse position 
     * @param x [=gui.MouseX()] Position (X coordinate) to open the menu at. 
     * @param y [=gui.MouseY()] Position (Y coordinate) to open the menu at. 
     * @param skipanimation [=] This argument does nothing. 
     * @param ownerpanel [=] 
     */
    public Open(x?: number, y?: number, skipanimation?: any, ownerpanel?: Panel): void;
    
    /**
     * Closes any active sub menus, and opens a new one. 
     * @param item  The {{Type|DMenuOption}} to open the submenu at 
     * @param menu [=nil] The submenu to open. If set to nil, the function just closes existing submenus. 
     */
    public OpenSubMenu(item: DMenuOption, menu?: Panel): void;
    
    /**
     * Called when a option has been selected 
     * @param option  The {{Type|DMenuOption}} that was selected 
     * @param optionText  The options text 
     */
    public OptionSelected(option: DMenuOption, optionText: string): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called by {{Type|DMenuOption}}. Calls {{ClassFunction|DMenu|OptionSelected}}. 
     * @param option  The {{Type|DMenuOption}} that called this function 
     */
    public OptionSelectedInternal(option: DMenuOption): void;
    
    /**
     * **Deprecated!**
     * 
     * Unused. Set to true by default. 
     * @param newState 
     */
    public SetDeleteSelf(newState: boolean): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Used internally to store the open submenu by {{ClassFunction|DMenu|Hide}}, {{ClassFunction|DMenu|OpenSubMenu}}, {{ClassFunction|DMenu|CloseSubMenu}} 
     * @param item  The menu to store 
     */
    public SetOpenSubMenu(item: Panel): void;
}

/**
 * A simple Derma MenuBar 
 * @example
 * 
 * local Frame = vgui.Create( "DFrame" )
 * Frame:SetSize( 300, 200 )
 * Frame:Center()
 * Frame:MakePopup()
 * 
 * local MenuBar = vgui.Create( "DMenuBar", Frame )
 * MenuBar:DockMargin( -3, -6, -3, 0 ) //corrects MenuBar pos
 * 
 * local M1 = MenuBar:AddMenu( "File" )
 * M1:AddOption("New", function() Msg("Chose File:New\n") end):SetIcon("icon16/page_white_go.png")
 * M1:AddOption("Open", function() Msg("Chose File:Open\n") end):SetIcon("icon16/folder_go.png")
 * 
 * local M2 = MenuBar:AddMenu("Edit")
 * M2:AddOption("Copy", function() Msg("Chose Edit:Copy\n") end)
 * 
 * local M3 = MenuBar:AddMenu("Help")
 * M3:AddOption("About", function() Msg("Chose Help:About\n") end)
 * 
 * // Creates a DMenuBar in a DFrame. 
 */
declare class DMenuBar extends DPanel {
    /**
     * Creates a new {{Type|DMenu}} object tied to a {{Type|DButton}} with the given label on the menu bar.
     * 
     * This will create a new menu regardless of whether or not one with the same label exists. To add '''or''' get a menu, use {{ClassFunction|DMenuBar|AddOrGetMenu}}. 
     * @param label  The name (label) of the derma menu to create. 
     * @returns The new {{Type|DMenu}} which will be opened when the button is clicked. 
     */
    public AddMenu(label: string): DMenu;
    
    /**
     * Retrieves a {{Type|DMenu}} object from the menu bar. If one with the given label doesn't exist, a new one is created.
     * 
     * To add a DMenu without checking, use {{ClassFunction|DMenuBar|AddMenu}}. 
     * @param label  The name (label) of the derma menu to get or create. 
     * @returns The {{Type|DMenu}} with the given label. 
     */
    public AddOrGetMenu(label: string): DMenu;
    
    /**
     * Returns the DMenuBar's background color 
     * @returns The background's color. See {{Struct|Color}} 
     */
    public GetBackgroundColor(): Color;
    
    /**
     * Returns the panel's background color.
     * 
     * **Note:**
     * >By default this returns '''nil''' even though the default background color is white 
     * @returns Color of the panel's background. 
     * @example
     * 
     * BGPanel = vgui.Create("DPanel")
     * BGPanel:SetPos(20, 20)
     * BGPanel:SetSize(200, 200)
     * 
     * print(BGPanel:GetBackgroundColor())
     * 
     * // Prints out the default panel background color. 
     */
    public GetBackgroundColor(): table;
    
    /**
     * Returns whether or not the DMenuBar is disabled 
     * @returns Is disabled 
     */
    public GetDisabled(): boolean;
    
    /**
     * Returns whether or not the panel is disabled. 
     * @returns True if the panel is disabled (mouse input disabled and background alpha set to 75), false if its enabled (mouse input enabled and background alpha set to 255). 
     */
    public GetDisabled(): boolean;
    
    /**
     * **Deprecated:**
     * >Use {{ClassFunction|DMenuBar|GetPaintBackground}} instead.
     * 
     * Returns whether or not the background should be painted. Is the same as {{ClassFunction|DMenuBar|GetPaintBackground}} 
     * @returns Should the background be painted 
     */
    public GetDrawBackground(): boolean;
    
    /**
     * **Deprecated:**
     * >You should use {{ClassFunction|DPanel|GetPaintBackground}} instead.
     * 
     * Returns whether or not the panel background is being drawn. Alias of {{ClassFunction|DPanel|GetPaintBackground}}. 
     * @returns True if the panel background is drawn, false otherwise. 
     */
    public GetDrawBackground(): boolean;
    
    /**
     * Returns whether or not the panel is a menu. Used for closing menus when another panel is selected. 
     * @returns Is a menu 
     */
    public GetIsMenu(): boolean;
    
    /**
     * If a menu is visible/opened, then the menu is returned. 
     * @returns Returns the visible/open menu or nil. 
     */
    public GetOpenMenu(): Panel;
    
    /**
     * Returns whether or not the background should be painted. Is the same as {{ClassFunction|DMenuBar|GetDrawBackground}} 
     * @returns Should the background be painted 
     */
    public GetPaintBackground(): boolean;
    
    /**
     * Returns whether or not the panel background is being drawn. 
     * @returns True if the panel background is drawn, false otherwise. 
     */
    public GetPaintBackground(): boolean;
    
    /**
     * Sets the background color 
     * @param color  See {{Struct|Color}} 
     */
    public SetBackgroundColor(color: Color): void;
    
    /**
     * Sets the background color of the panel. 
     * @param color  The background color. 
     * @example
     * 
     * COLOR_TEAM_RED = Color(255, 64, 64, 255)
     * COLOR_TEAM_BLUE = Color(153, 204, 255, 255)
     * 
     * BGPanel1 = vgui.Create("DPanel")
     * BGPanel1:SetPos(20, 20)
     * BGPanel1:SetSize(200, 200)
     * BGPanel1:SetBackgroundColor(COLOR_TEAM_RED)
     * 		
     * BGPanel2 = vgui.Create("DPanel")
     * BGPanel2:SetPos(220, 20)
     * BGPanel2:SetSize(200, 200)
     * BGPanel2:SetBackgroundColor(COLOR_TEAM_BLUE)
     * 
     * // Creates two empty panels with their background colors set to red and blue team colors. 
     */
    public SetBackgroundColor(color: table): void;
    
    /**
     * Sets whether or not the panel is disabled 
     * @param disable  Should be disabled or not 
     */
    public SetDisabled(disable: boolean): void;
    
    /**
     * Sets whether or not to disable the panel. 
     * @param disabled  True to disable the panel (mouse input disabled and background alpha set to 75), false to enable it (mouse input enabled and background alpha set to 255). 
     */
    public SetDisabled(disabled: boolean): void;
    
    /**
     * **Deprecated:**
     * >Use {{ClassFunction|DMenuBar|SetPaintBackground}}
     * 
     * Sets whether or not the background should be painted. Is the same as {{ClassFunction|DMenuBar|SetPaintBackground}} 
     * @param shouldPaint  Should the background be painted 
     */
    public SetDrawBackground(shouldPaint: boolean): void;
    
    /**
     * **Deprecated:**
     * >You should use {{ClassFunction|DPanel|SetPaintBackground}} instead.
     * 
     * Sets whether or not to draw the panel background. Alias of {{ClassFunction|DPanel|SetPaintBackground}}. 
     * @param draw  True to show the panel's background, false to hide it. 
     */
    public SetDrawBackground(draw: boolean): void;
    
    /**
     * Sets whether or not the panel is a menu. Used for closing menus when another panel is selected. 
     * @param isMenu  Is this a menu 
     */
    public SetIsMenu(isMenu: boolean): void;
    
    /**
     * Sets whether or not the background should be painted. Is the same as {{ClassFunction|DMenuBar|SetDrawBackground}} 
     * @param shouldPaint  Should the background be painted 
     */
    public SetPaintBackground(shouldPaint: boolean): void;
    
    /**
     * Sets whether or not to paint/draw the panel background. 
     * @param paint  True to show the panel's background, false to hide it. 
     */
    public SetPaintBackground(paint: boolean): void;
}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * Internal subpanel of a {{Type|DMenu}}. 
 */
declare class DMenuOption extends DButton {

}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't. 
 */
declare class DMenuOptionCVar extends DMenuOption {

}

/**
 * DModelPanel is a VGUI element that projects a 3D model onto a 2D plane. 
 * @example
 * 
 * local Panel = vgui.Create( "DPanel" )
 * Panel:SetPos( 10, 10 )
 * Panel:SetSize( 200, 200 )
 * 
 * local icon = vgui.Create( "DModelPanel", Panel )
 * icon:SetSize( 200, 200 )
 * icon:SetModel( LocalPlayer():GetModel() )
 * 
 * // Creates a DModelPanel and sets its model to your playermodel.@example
 * 
 * local Panel = vgui.Create( "DPanel" )
 * Panel:SetPos( 10, 10 )
 * Panel:SetSize( 200, 200 )
 * 
 * local icon = vgui.Create( "DModelPanel", Panel )
 * icon:SetSize(200,200)
 * icon:SetModel( "models/player/alyx.mdl" ) // you can only change colors on playermodels
 * function icon:LayoutEntity( Entity ) return end // disables default rotation
 * function icon.Entity:GetPlayerColor() return Vector (1, 0, 0) end //we need to set it to a Vector not a Color, so the values are normal RGB values divided by 255.
 * 
 * // Creates a DModelPanel and sets its model to the Alyx playermodel, then changes its player color to red. Also disables default rotation animation. 
 */
declare class DModelPanel extends DButton {
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Used by the DModelPanel's paint hook to draw the model and background. 
     */
    public DrawModel(): void;
    
    /**
     * Returns the ambient lighting used on the rendered entity. 
     * @returns The color of the ambient lighting. 
     * @example
     * 
     * local mdl = vgui.Create("DModelPanel")
     * mdl:SetPos(20, 20)
     * mdl:SetSize(200, 200)
     * mdl:SetModel("models/props_junk/watermelon01.mdl")
     * 
     * print(mdl:GetAmbientLight())
     * 
     * // Prints out the default ambient lighting used on models. 
     */
    public GetAmbientLight(): table;
    
    /**
     * Returns whether or not the panel entity should be animated when the default {{ClassFunction|DModelPanel|LayoutEntity}} function is called. 
     * @returns True if the panel entity can be animated with {{ClassFunction|Entity|SetSequence}} directly, false otherwise. 
     * @example
     * 
     * local mdl = vgui.Create("DModelPanel")
     * mdl:SetPos(20, 20)
     * mdl:SetSize(200, 200)
     * mdl:SetModel("models/props_junk/watermelon01.mdl")
     * 
     * print(mdl:GetAnimated())
     * 
     * // Prints out the default boolean value for this function. 
     */
    public GetAnimated(): boolean;
    
    /**
     * Returns the animation speed of the panel entity, see {{ClassFunction|DModelPanel|SetAnimSpeed}}. 
     * @returns The animation speed. 
     * @example
     * 
     * local mdl = vgui.Create("DModelPanel")
     * mdl:SetPos(20, 20)
     * mdl:SetSize(200, 200)
     * mdl:SetModel("models/props_junk/watermelon01.mdl")
     * 
     * print(mdl:GetAnimSpeed())
     * 
     * // Prints out the default animation speed. 
     */
    public GetAnimSpeed(): number;
    
    /**
     * Returns the position of the model viewing camera. 
     * @returns The position of the camera. 
     * @example
     * 
     * local mdl = vgui.Create("DModelPanel")
     * mdl:SetPos(20, 20)
     * mdl:SetSize(200, 200)
     * mdl:SetModel("models/props_junk/watermelon01.mdl")
     * 
     * print(mdl:GetCamPos())
     * 
     * // Prints out the default camera position. 
     */
    public GetCamPos(): Vector;
    
    /**
     * Returns the color of the rendered entity. 
     * @returns The color of the entity, see {{Struct|Color}}. 
     * @example
     * 
     * local mdl = vgui.Create("DModelPanel")
     * mdl:SetPos(20, 20)
     * mdl:SetSize(200, 200)
     * mdl:SetModel("models/props_junk/watermelon01.mdl")
     * 
     * print(mdl:GetColor())
     * 
     * // Prints out the default entity color. 
     */
    public GetColor(): Color;
    
    /**
     * Returns the "internal" desired color of the text, alias of {{ClassFunction|DLabel|GetTextStyleColor}}.
     * 
     * **Bug:**
     * >FIXED IN NEXT UPDATE: This doesn't return ACTUAL color of the text. Use the following instead for now:
     * ```local clr = DLabel:GetTextColor() or DLabel:GetTextStyleColor()``` 
     * @returns The "internal" desired color of the text 
     */
    public GetColor(): table;
    
    /**
     * Returns the entity being rendered by the model panel. 
     * @returns The rendered entity (client-side) 
     * @example
     * 
     * BGPanel = vgui.Create("DPanel")
     * BGPanel:SetPos(20, 20)
     * BGPanel:SetSize(200, 200)
     * 	
     * local mdl = vgui.Create("DModelPanel", BGPanel)
     * mdl:SetSize(200, 200)
     * mdl:SetModel("models/antlion.mdl")
     * mdl:SetLookAt(Vector(0, 0, 20))
     * 
     * mdl:GetEntity():SetSkin(1)
     * 
     * // Creates an antlion model panel and sets the antlion's skin to 1. 
     */
    public GetEntity(): CSEnt;
    
    /**
     * Returns the FOV (field of view) the camera is using. 
     * @returns The FOV of the camera. 
     * @example
     * 
     * local mdl = vgui.Create("DModelPanel")
     * mdl:SetPos(20, 20)
     * mdl:SetSize(200, 200)
     * mdl:SetModel("models/props_junk/watermelon01.mdl")
     * 
     * print(mdl:GetFOV())
     * 
     * // Prints out the default camera FOV. 
     */
    public GetFOV(): number;
    
    /**
     * Returns the angles of the model viewing camera. Is '''nil''' until changed with {{ClassFunction|DModelPanel|SetLookAng}}. 
     * @returns The angles of the camera. 
     * @example
     * 
     * local mdl = vgui.Create("DModelPanel")
     * mdl:SetPos(20, 20)
     * mdl:SetSize(200, 200)
     * mdl:SetModel("models/props_junk/watermelon01.mdl")
     * 
     * print(mdl:GetLookAng())
     * 
     * // Prints out the default camera angles. 
     */
    public GetLookAng(): Angle;
    
    /**
     * Returns the position the viewing camera is pointing toward. 
     * @returns The position the camera is pointing toward. 
     * @example
     * 
     * local mdl = vgui.Create("DModelPanel")
     * mdl:SetPos(20, 20)
     * mdl:SetSize(200, 200)
     * mdl:SetModel("models/props_junk/watermelon01.mdl")
     * 
     * print(mdl:GetLookAt())
     * 
     * // Prints out the default camera look-at position. 
     */
    public GetLookAt(): Vector;
    
    /**
     * Gets the model of the rendered entity. 
     * @returns The model of the rendered entity. 
     */
    public GetModel(): string;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  By default, this function slowly rotates and animates the entity being rendered.
     * 
     * If you want to change this behavior, you should override it. 
     * @param entity  The entity that is being rendered. 
     * @example
     * 
     * local modelPanel = vgui.Create( "DModelPanel" )
     * modelPanel:SetPos( 0, 0 )
     * modelPanel:SetSize( 200, 200 )
     * modelPanel:SetModel( "models/player/kleiner.mdl" )
     * 
     * function modelPanel:LayoutEntity( ent )
     * 	// do nothing
     * end
     * 
     * // Stops the rendered entity from rotating. 
     */
    public LayoutEntity(entity: Entity): void;
    
    /**
     * Called when the entity of the {{Type|DModelPanel}} was drawn.
     * 
     * This is a rendering hook with 3d drawing context. 
     * @param ent  The clientside entity of the {{Type|DModelPanel}} that has been drawn. 
     */
    public PostDrawModel(ent: DModelPanel): void;
    
    /**
     * Called '''before''' the entity of the {{Type|DModelPanel}} is drawn. 
     * @param ent  The clientside entity of the {{Type|DModelPanel}} that has been drawn. 
     * @returns Return false to stop the entity from being drawn. This will also cause {{ClassFunction|DModelPanel|PostDrawModel}} to stop being called. 
     */
    public PreDrawModel(ent: DModelPanel): boolean;
    
    /**
     * This function is used in the '''DModelPanel:LayoutEntity'''. It will set the active model to the last set animation using {{ClassFunction|Entity|SetSequence}}. By default, it is the walking animation. 
     * @example
     * 
     * local ModelPanel = vgui.Create( "DModelPanel", Panel )
     * ModelPanel:SetModel( "models/player/alyx.mdl" )
     * function ModelPanel:LayoutEntity( ent )
     *      ModelPanel:RunAnimation()
     * end
     * 
     * // Sets the model to alyx and puts her in a walking animation 
     */
    public RunAnimation(): void;
    
    /**
     * Sets the ambient lighting used on the rendered entity. 
     * @param color  The color of the ambient lighting. 
     * @example
     * 
     * BGPanel = vgui.Create("DPanel")
     * BGPanel:SetPos(20, 20)
     * BGPanel:SetSize(200, 200)
     * 	
     * local mdl = vgui.Create("DModelPanel", BGPanel)
     * mdl:SetSize(BGPanel:GetSize())
     * mdl:SetModel("models/props_junk/watermelon01.mdl")
     * 
     * mdl:SetCamPos(Vector(15, 15, 0))
     * mdl:SetLookAt(Vector(0, 0, 0))
     * 
     * mdl:SetAmbientLight(Color(255, 0, 0, 255))
     * 
     * // Displays a model panel with a watermelon that has red ambient lighting. 
     */
    public SetAmbientLight(color: table): void;
    
    /**
     * Sets whether or not to animate the entity when the default {{ClassFunction|DModelPanel|LayoutEntity}} is called. 
     * @param animated  True to animate, false otherwise. 
     * @example
     * 
     * BGPanel = vgui.Create("DPanel")
     * BGPanel:SetPos(20, 20)
     * BGPanel:SetSize(400, 200)
     * 	
     * // Left panel
     * local mdl1 = vgui.Create("DModelPanel", BGPanel)
     * mdl1:SetPos(0, 0)
     * mdl1:SetSize(200, 200)
     * mdl1:SetModel("models/player/mossman.mdl")
     * mdl1:SetCamPos(Vector(40, 40, 40))
     * 
     * mdl1:SetAnimated(false)
     * 
     * // Right panel
     * local mdl2 = vgui.Create("DModelPanel", BGPanel)
     * mdl2:SetPos(200, 0)
     * mdl2:SetSize(200, 200)
     * mdl2:SetModel("models/player/mossman.mdl")
     * mdl2:SetCamPos(Vector(40, 40, 40))
     * 
     * mdl2:SetAnimated(true)
     * 
     * // Dance sequence	
     * local dance = mdl1:GetEntity():LookupSequence("taunt_dance")
     * 
     * // Make both dance
     * mdl1:GetEntity():SetSequence(dance)
     * mdl2:GetEntity():SetSequence(dance)
     * 
     * // A comparison between 2 model panels: the first one has ''animated'' set to false and the second one has it set to true. Both are using the default {{ClassFunction|DModelPanel|LayoutEntity}} method. 
     */
    public SetAnimated(animated: boolean): void;
    
    /**
     * Sets the speed used by {{ClassFunction|DModelPanel|RunAnimation}} to advance frame on an entity sequence.
     * 
     * **Note:**
     * >{{ClassFunction|Entity|FrameAdvance}} doesn't seem to have any functioning arguments and therefore changing this will not have any affect on the panel entity's sequence speed without reimplementation. It only affects the value returned by {{ClassFunction|DModelPanel|GetAnimSpeed}} 
     * @param animSpeed  The animation speed. 
     * @example
     * 
     * local mdl = vgui.Create("DModelPanel")
     * mdl:SetPos(20, 20)
     * mdl:SetSize(200, 200)
     * mdl:SetModel("models/alyx.mdl")
     * 
     * // Play sequence twice as fast
     * mdl:SetAnimSpeed(2)
     * 	
     * // Make Alyx run
     * mdl:GetEntity():SetSequence(mdl:GetEntity():LookupSequence("run_all"))
     * 
     * // Play animation
     * function mdl:LayoutEntity(ent)
     * 
     * 	// Playback rate based on anim speed
     * 	ent:SetPlaybackRate(self:GetAnimSpeed())
     * 	
     * 	// Advance frame
     * 	ent:FrameAdvance()
     * 
     * end
     * 
     * // A reimplementation of {{ClassFunction|DModelPanel|LayoutEntity}} which will modify the entity's sequence playback rate based on the set animation speed. This example has Alyx run twice as fast as normal. 
     */
    public SetAnimSpeed(animSpeed: number): void;
    
    /**
     * Sets the position of the camera. 
     * @param pos  The position to set the camera at. 
     * @example
     * 
     * BGPanel = vgui.Create("DPanel")
     * BGPanel:SetPos(20, 20)
     * BGPanel:SetSize(200, 200)
     * BGPanel:SetBackgroundColor(Color(0, 0, 0, 255))
     * 	
     * local mdl = vgui.Create("DModelPanel", BGPanel)
     * mdl:SetSize(BGPanel:GetSize())
     * mdl:SetModel("models/player/gman_high.mdl")
     * 
     * function mdl:LayoutEntity(ent)
     * 	ent:SetSequence(ent:LookupSequence("menu_gman"))
     * 	mdl:RunAnimation()		
     * 	return
     * end
     * 
     * local eyepos = mdl.Entity:GetBonePosition(mdl.Entity:LookupBone("ValveBiped.Bip01_Head1"))
     * 
     * eyepos:Add(Vector(0, 0, 2))	// Move up slightly
     * 
     * mdl:SetLookAt(eyepos)
     * 
     * mdl:SetCamPos(eyepos-Vector(-12, 0, 0))	// Move cam in front of eyes
     * 
     * mdl.Entity:SetEyeTarget(eyepos-Vector(-12, 0, 0))
     * 
     * // Creates a model panel focused on Gman's face while he adjusts his tie.@example
     * 
     * local mdlpnl = vgui.Create( "DModelPanel" )
     * 
     * local mn, mx = mdlpnl.Entity:GetRenderBounds()
     * local size = 0
     * size = math.max( size, math.abs(mn.x) + math.abs(mx.x) )
     * size = math.max( size, math.abs(mn.y) + math.abs(mx.y) )
     * size = math.max( size, math.abs(mn.z) + math.abs(mx.z) )
     * 
     * mdlpnl:SetFOV( 45 )
     * mdlpnl:SetCamPos( Vector( size, size, size ) )
     * mdlpnl:SetLookAt( (mn + mx) * 0.5 )
     * 
     * // Sets a model panel's camera position so the model won't go outside it 
     */
    public SetCamPos(pos: Vector): void;
    
    /**
     * Sets the color of the rendered entity.
     * 
     * **Note:**
     * >This does not work on Garry's Mod player models since they use a different color system. To modify a player model color, see Example 2 on the {{Type|DModelPanel}} page 
     * @param color  The render color of the entity. 
     * @example
     * 
     * local panel = vgui.Create("DPanel")
     * panel:SetPos(20, 20)
     * panel:SetSize(200, 200)
     * 	
     * local mdl = vgui.Create("DModelPanel", panel)
     * mdl:SetSize(panel:GetSize())
     * mdl:SetModel("models/props_junk/watermelon01.mdl")
     * mdl:SetLookAt(Vector(0, 0, 0))
     * mdl:SetCamPos(Vector(10, 10, 10))
     * mdl:SetColor(Color(255, 0, 0))
     * 
     * // Creates a model panel with a red watermelon inside. 
     */
    public SetColor(color: table): void;
    
    /**
     * Changes color of label. Alias of {{ClassFunction|DLabel|SetTextColor}}. 
     * @param color  The color to set. Uses the Color structure. 
     * @example
     * 
     * local DLabel = vgui.Create( "DLabel" )
     * DLabel:SetPos( 90, 50 )
     * DLabel:SetColor(Color(255, 0, 0))
     * DLabel:SetText( "Hello world." )
     * DLabel:SizeToContents()
     * 
     * // Creates a label and changes it color to red. 
     */
    public SetColor(color: table): void;
    
    /**
     * Sets the directional lighting used on the rendered entity. 
     * @param direction  The light direction, see {{Enum|BOX}}. 
     * @param color  The color of the directional lighting. 
     * @example
     * 
     * // Black background panel
     * BGPanel = vgui.Create("DPanel")
     * BGPanel:SetPos(20, 20)
     * BGPanel:SetSize(400, 400)
     * BGPanel:SetBackgroundColor(Color(0, 0, 0, 255))
     * 
     * local mdl = vgui.Create("DModelPanel", BGPanel)
     * mdl:SetSize(BGPanel:GetSize())
     * 	
     * // Setup model and camera
     * mdl:SetModel("models/kleiner.mdl")
     * mdl:SetCamPos(Vector(20, 20, 60))
     * mdl:SetLookAt(Vector(0, 0, 60))
     * 
     * // Make Kleiner pace
     * mdl:GetEntity():SetSequence(mdl:GetEntity():LookupSequence("pace_all"))
     * 
     * // Disable directional lighting
     * mdl:SetDirectionalLight(BOX_TOP, Color(0, 0, 0))
     * mdl:SetDirectionalLight(BOX_FRONT, Color(0, 0, 0))
     * 
     * // Spin around faster and play animation
     * function mdl:LayoutEntity(ent)
     * 	ent:SetAngles(Angle( 0, self.LastPaint*60,  0))
     * 	self:RunAnimation()
     * end
     * 
     * // Displays a model panel with no directional lighting. Dr. Kleiner is only lit by the ambient light set by {{ClassFunction|DModelPanel|SetAmbientLight}}. 
     */
    public SetDirectionalLight(direction: BOX, color: table): void;
    
    /**
     * Sets the entity to be rendered by the model panel.
     * 
     * **Note:**
     * >If you set ''ent'' to a shared entity you must set ''ent'' to nil before removing this panel or else a "Trying to remove server entity on client!" error is thrown 
     * @param ent  The new panel entity. 
     * @example
     * 
     * g_Breen = nil	// Breen NPC
     * 
     * if(SERVER) then
     * 	// Broadcast propaganda to clients
     * 	util.AddNetworkString("BreencastSentence")
     * end
     * 
     * // Broadcast Breen to clients each time he starts a new sentence.
     * function GM:EntityEmitSound(data)
     * 
     * 	if(data.Entity == g_Breen) then
     * 	
     * 		local st, en = string.find(data.SoundName, "vo/")
     * 		local sentence = "sound/"..string.sub(data.SoundName, st)	// Properly format sound name
     * 	
     * 		net.Start("BreencastSentence")
     * 			net.WriteEntity(data.Entity)
     * 			net.WriteString(sentence)
     * 		net.Broadcast()
     * 		
     * 	end
     * 	
     * 	return nil
     * 	
     * end
     * 
     * if(CLIENT) then
     * 
     * 	// Receive latest breencast sound byte and update screen
     * 	function BreencastSentence()
     * 	
     * 		// Client-side reference to Breen NPC
     * 		g_Breen = net.ReadEntity()
     * 		
     * 		local soundname = net.ReadString()
     * 		
     * 		// Play sound byte
     * 		sound.PlayFile(soundname, "", function(sentence, errnum, err)
     * 		
     * 			if(err) then
     * 				Error(err)
     * 			else
     * 				sentence:Play()
     * 				StartBreencast()	// Update breencast monitor
     * 			end
     * 		
     * 		end)
     * 	
     * 	end
     * 	
     * 	net.Receive("BreencastSentence", BreencastSentence)
     * 	
     * end
     * 
     * // Call this server-side to begin Breencast
     * function StartBreencast()
     * 
     * 	if(SERVER) then
     * 
     * 		// Remove existing Breen NPC
     * 		if(g_Breen && IsValid(g_Breen)) then
     * 			g_Breen:Remove()
     * 		end
     * 
     * 		// Create new Breen NPC
     * 		g_Breen = ents.Create("npc_breen")
     * 		g_Breen:Spawn()
     * 		
     * 		// Hide NPC everywhere except inside model panel
     * 		g_Breen:SetSaveValue("m_takedamage", 0)
     * 		g_Breen:SetMoveType(MOVETYPE_NONE)
     * 		g_Breen:SetSolid(SOLID_NONE)
     * 		g_Breen:SetRenderMode(RENDERMODE_TRANSALPHA)
     * 		g_Breen:SetColor(Color(255, 255, 255, 0))
     * 		
     * 		// Play propaganda		
     * 		g_Breen:PlayScene("scenes/breencast/instinct_tv.vcd")
     * 		g_Breen:SetEyeTarget(Vector(100, 0, 60))
     * 
     * 	elseif(CLIENT) then
     * 
     * 		// Remove existing panel and clear model entity to prevent error
     * 		if(BGPanel) then
     * 			if(BGPanel:GetChild(0)) then BGPanel:GetChild(0):SetEntity(nil) end
     * 			BGPanel:Remove()
     * 			BGPanel = nil			
     * 		end
     * 		
     * 		// Don't continue if Breen is undefined
     * 		if(!g_Breen or !IsValid(g_Breen)) then return end
     * 		
     * 		// Black background panel
     * 		BGPanel = vgui.Create("DPanel")
     * 		BGPanel:SetPos(20, 20)
     * 		BGPanel:SetSize(200, 200)
     * 		BGPanel:SetBackgroundColor(Color(0, 0, 0, 255))
     * 		
     * 		// Model panel
     * 		local mdl = vgui.Create("DModelPanel", BGPanel)
     * 		mdl:SetSize(BGPanel:GetSize())
     * 		mdl:SetFOV(40)	// Default FOV is too jarring
     * 		
     * 		mdl:SetEntity(g_Breen)	// Add Breen NPC to model panel
     * 		
     * 		// Focus camera on Breen's head
     * 		function mdl:LayoutEntity(ent)
     * 		
     * 			// If Breen has been removed somehow then remove screen
     * 			if(!IsValid(ent)) then
     * 				if(mdl:GetParent()) then mdl:GetParent():Remove() end
     * 				return
     * 			end
     * 		
     * 			local eyepos = ent:GetBonePosition(ent:LookupBone("ValveBiped.Bip01_Head1"))
     * 		
     * 			mdl:SetLookAt(eyepos)
     * 			mdl:SetCamPos(eyepos+Vector(35, 0, -4))
     * 			
     * 			return
     * 			
     * 		end
     * 		
     * 	end
     * 	
     * end
     * 
     * // Implementation of a function called '''StartBreencast''' which makes Dr. Breen recite his instinct speech within a model panel that's displayed to all clients. This mainly demonstrates how even shared entities such as NPCs can be used with {{Type|DModelPanel}} as long as they're networked properly. 
     */
    public SetEntity(ent: Entity): void;
    
    /**
     * Sets the panel camera's FOV (field of view). 
     * @param fov  The field of view value. 
     * @example
     * 
     * BGPanel = vgui.Create("DPanel")
     * BGPanel:SetPos(20, 20)
     * BGPanel:SetSize(200, 200)
     * 	
     * local mdl = vgui.Create("DModelPanel", BGPanel)
     * mdl:Dock(FILL)
     * mdl:SetModel("models/player/barney.mdl")
     * 
     * local fov = 10	// starting value
     * local offset = 0.1	// amount to increment by
     * 
     * function mdl:LayoutEntity(ent)
     * 	
     * 	mdl:SetFOV(fov)	// update FOV
     * 	
     * 	fov = fov + offset	// increment
     * 	
     * 	if(fov >= 120 or fov <= 10) then
     * 		offset = offset*-1	// inverse increment amount
     * 	end
     * 	
     * 	ent:SetSequence(ent:LookupSequence("taunt_muscle"))	// FLEX
     * 	if(ent:GetCycle() >= 0.95) then ent:SetCycle(0.05) end	// YOUR
     * 	mdl:RunAnimation()	// MUSCLES
     * 	
     * end
     * 
     * // The best FOV demo you've ever seen. 
     */
    public SetFOV(fov: number): void;
    
    /**
     * Sets the angles of the camera. 
     * @param ang  The angles to set the camera to. 
     * @example
     * 
     * BGPanel = vgui.Create("DPanel")
     * BGPanel:SetPos(20, 20)
     * BGPanel:SetSize(400, 400)
     * BGPanel:SetBackgroundColor(Color(0, 0, 0, 255))
     * 
     * local mdl = vgui.Create("DModelPanel", BGPanel)
     * mdl:SetSize(BGPanel:GetSize())
     * mdl:SetModel("models/eli.mdl")
     * 
     * // Position camera
     * mdl:SetCamPos(Vector(0, 60, 36))
     * 
     * local yaw = 0
     * 
     * function mdl:LayoutEntity(ent)
     * 
     * 	// Point camera toward the look pos
     * 	local lookAng = (self.vLookatPos-self.vCamPos):Angle()
     * 	
     * 	// Rotate the look angles based on incrementing yaw value
     * 	lookAng:RotateAroundAxis(Vector(0, 1, 0), yaw)
     * 	
     * 	// Set camera look angles
     * 	self:SetLookAng(lookAng)
     * 	
     * 	// Make entity rotate like normal
     * 	ent:SetAngles(Angle(0, RealTime()*30,  0))
     * 	
     * 	yaw = yaw + 1
     * 
     * end
     * 
     * // Creates a model panel with Eli rotating normally and the camera angles rotating sideways. 
     */
    public SetLookAng(ang: Angle): void;
    
    /**
     * Makes the panel's camera face the given position. 
     * @param pos  The position to orient the camera toward. 
     * @example
     * 
     * BGPanel = vgui.Create("DPanel")
     * BGPanel:SetPos(20, 20)
     * BGPanel:SetSize(200, 200)		
     * 	
     * local mdl = vgui.Create("DModelPanel", BGPanel)
     * mdl:SetSize(BGPanel:GetSize())
     * mdl:SetModel("models/player/odessa.mdl")
     * 
     * function mdl:LayoutEntity( Entity ) return end	// Disable cam rotation
     * 
     * local headpos = mdl.Entity:GetBonePosition(mdl.Entity:LookupBone("ValveBiped.Bip01_Head1"))
     * mdl:SetLookAt(headpos)
     * 
     * mdl:SetCamPos(headpos-Vector(-15, 0, 0))	// Move cam in front of face
     * 
     * //mdl.Entity:SetEyeTarget(headpos-Vector(-15, 0, 0))
     * 
     * // ^^ Makes Odessa look at the camera
     * // Commented out because the result is funnier without this
     * 
     * // Creates a model panel focused on Colonel Odessa Cubbage's face. 
     */
    public SetLookAt(pos: Vector): void;
    
    /**
     * Creates a new DModelPanel with the Kleiner playermodel. 
     * @param model  The model to apply to the entity 
     * @example
     * 
     * local modelPanel = vgui.Create( "DModelPanel" )
     * modelPanel:SetPos( 0, 0 )
     * modelPanel:SetSize( 200, 200 )
     * modelPanel:SetModel( "models/player/kleiner.mdl" )
     * 
     * // Creates a new DModelPanel with the Kleiner playermodel. 
     */
    public SetModel(model: string): void;
    
    /**
     * [[Category:ModelImage]][[Category:SpawnIcon]]Sets the model to be displayed by {{Type|SpawnIcon}}.[[Category:SpawnIcon]] 
     * @param ModelPath  The path of the model to set 
     * @param skin [=0] The skin to set 
     * @param bodygroups [=""] The body groups to set. Each single-digit number in the string represents a separate bodygroup. '''This make it impossible to set any body group to a value higher than 9!''' 
     */
    public SetModel(ModelPath: string, skin?: number, bodygroups?: string): void;
    
    /**
     * @param path  The path to the scene file. (.vcd) 
     */
    public StartScene(path: string): void;
}

/**
 * **Deprecated:**
 * >This is derived from the deprecated {{Type|DPanelList}}.
 * 
 *  A vertical list of models. 
 * @example
 * 
 * // Create a table of models
 * local models = {
 * 	["models/props_c17/oildrum001_explosive.mdl"] = {}, 
 * 	["models/props_c17/oildrum001.mdl"] = {}, 
 * 	["models/props_junk/TrafficCone001a.mdl"] = {},
 * 	["models/props_c17/gravestone004a.mdl"] = {}
 * }
 * 	
 * local frame = vgui.Create("DFrame")
 * frame:SetSize(220, 220)
 * frame:SetTitle("DModelSelect Example")
 * frame:MakePopup()
 * frame:Center()
 * 
 * local mselect = vgui.Create( "DModelSelect", frame ) 
 * mselect:SetModelList( models, "", false, true )
 * mselect:SetSize(150, 150)
 * mselect:Center()
 * 
 * // Creates a DModelSelect within a {{Type|DFrame}} and adds four models. 
 */
declare class DModelSelect extends DPanelSelect {
    /**
     * Sets the height of the panel '''in the amount of 64px spawnicons'''.
     * 
     * Overrides {{ClassFunction|Panel|SetHeight}}. 
     * @param num [=2] Basically how many rows of 64x64 px spawnicons should fit in this DModelSelect 
     */
    public SetHeight(num?: number): void;
    
    /**
     * Sets the height of the panel. 
     * @param height  The height to be set. 
     */
    public SetHeight(height: number): void;
    
    /**
     * Called to set the list of models within the panel element. 
     * @param models  Each key is a model path, the value is a kay-value table where they key is a convar name and value is the value to set to that convar. 
     * @param convar 
     * @param dontSort 
     * @param DontCallListConVars 
     */
    public SetModelList(models: table, convar: string, dontSort: boolean, DontCallListConVars: boolean): void;
}

/**
 * A combination of {{Type|DModelSelect}} and {{Type|DPropertySheet}}. 
 */
declare class DModelSelectMulti extends DPropertySheet {

}

/**
 * A panel that fades its contents in and out once, like a notification. 
 * @example
 * 
 * //Notification panel
 * NotifyPanel = vgui.Create("DNotify")
 * NotifyPanel:SetPos(10, 5)
 * NotifyPanel:SetSize(200, 40)
 * 
 * // Text label
 * local lbl = vgui.Create("DLabel", NotifyPanel)
 * lbl:Dock(FILL)
 * lbl:SetText("This is a notification.")
 * lbl:SetFont("GModNotify")
 * lbl:SetDark(true)
 * 
 * // Add the label to the notification and begin fading
 * NotifyPanel:AddItem(lbl)
 * 
 * // Creates a notification panel with a text label inside.@example
 * 
 * // Notification panel
 * NotifyPanel = vgui.Create("DNotify")
 * NotifyPanel:SetPos(15, 15)
 * NotifyPanel:SetSize(150, 210)
 * 
 * // Gray background panel
 * local bg = vgui.Create("DPanel", NotifyPanel)
 * bg:Dock(FILL)
 * bg:SetBackgroundColor(Color(64, 64, 64))
 * 
 * // Image of Dr. Kleiner (parented to background panel)
 * local img = vgui.Create("DImage", bg)
 * img:SetPos(11, 11)
 * img:SetSize(128, 128)
 * img:SetImage("entities/npc_kleiner.png")
 * 
 * // A yellow label message (parented to background panel)
 * local lbl = vgui.Create("DLabel", bg)
 * lbl:SetPos(11, 136)
 * lbl:SetSize(128, 72)
 * lbl:SetText("Remember to wear your HEV suit!")
 * lbl:SetTextColor(Color(255, 200, 0))
 * lbl:SetFont("GModNotify")
 * lbl:SetWrap(true)
 * 
 * // Add the background panel to the notification
 * NotifyPanel:AddItem(bg)
 * 
 * // Creates a notification panel of Dr. Kleiner reminding the player to wear their HEV suit. 
 */
declare class DNotify extends Panel {
    /**
     * Adds a panel to the notification 
     * @param pnl  The panel to add 
     * @param lifeLength [=nil] If set, overrides {{ClassFunction|DNotify|SetLife}}. 
     */
    public AddItem(pnl: Panel, lifeLength?: number): void;
    
    /**
     * Returns the current alignment of this notification panel. Set by {{ClassFunction|DNotify|SetAlignment}}. 
     * @returns The numpad alignment 
     */
    public GetAlignment(): number;
    
    /**
     * Returns all the items added with {{ClassFunction|DNotify|AddItem}}. 
     * @returns A table of {{Type|Panel}}s. 
     */
    public GetItems(): Panel[];
    
    /**
     * Returns the display time in seconds of the DNotify. This is set with 
     * {{ClassFunction|DNotify|SetLife}}. 
     * @returns The display time in seconds. 
     */
    public GetLife(): number;
    
    /**
     * Returns the spacing between items set by {{ClassFunction|DNotify|SetSpacing}}. 
     * @returns 
     */
    public GetSpacing(): number;
    
    /**
     * Sets the alignment of the child panels in the notification 
     * @param alignment  It's the Numpad alignment, 6 is right, 9 is top left, etc. 
     */
    public SetAlignment(alignment: number): void;
    
    /**
     * Sets the display time in seconds for the DNotify. 
     * @param time  The time in seconds. 
     */
    public SetLife(time: number): void;
    
    /**
     * Sets the spacing between child elements of the notification panel. 
     * @param spacing 
     */
    public SetSpacing(spacing: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * {{Stub}} 
     */
    public Shuffle(): void;
}

/**
 * Choose a number from a number line, with zooming for precision. Zoom in by moving your mouse forward and moving back does the opposite. Looks like a blue circle until you click and hold on it 
 * @example
 * 
 * local frame = vgui.Create( "DFrame" )
 * frame:SetSize( 300, 250 )
 * frame:Center()
 * frame:MakePopup()
 * 
 * local Scratch = vgui.Create( "DNumberScratch", frame )
 * Scratch:SetPos( 50, 50 )
 * Scratch:SetValue( 5 )
 * Scratch:SetMin( 0 )
 * Scratch:SetMax( 20 )
 * 
 * // Create the Number Scratch with the minimum number being 0 and the max being 20 
 */
declare class DNumberScratch extends DImageButton {
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Used by {{ClassFunction|DNumberScratch|DrawScreen}}. 
     * @param level 
     * @param x 
     * @param y 
     * @param w 
     * @param h 
     * @param range 
     * @param value 
     * @param min 
     * @param max 
     */
    public DrawNotches(level: number, x: number, y: number, w: number, h: number, range: number, value: number, min: number, max: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Used by {{ClassFunction|DNumberScratch|PaintScratchWindow}}. 
     * @param x 
     * @param y 
     * @param w 
     * @param h 
     */
    public DrawScreen(x: number, y: number, w: number, h: number): void;
    
    /**
     * Returns whether this panel is active or not, i.e. if the player is currently changing its value. 
     * @returns 
     */
    public GetActive(): boolean;
    
    /**
     * Returns the desired amount of numbers after the decimal point. 
     * @returns 0 for whole numbers only, 1 for one number after the decimal point, etc. 
     */
    public GetDecimals(): number;
    
    /**
     * Returns the real value of the {{Type|DNumberScratch}} as a number.
     * 
     * See also {{ClassFunction|DNumberScratch|GetTextValue}} and {{ClassFunction|DNumberScratch|GetFraction}}. 
     * @returns The real value of the {{Type|DNumberScratch}} 
     */
    public GetFloatValue(): number;
    
    /**
     * Returns the value of the {{Type|DNumberScratch}} as a fraction, a value between 0 and 1 where 0 is the minimum and 1 is the maximum value of the {{Type|DNumberScratch}}.
     * 
     * See also:
     * * {{ClassFunction|DNumberScratch|GetTextValue}}
     * * {{ClassFunction|DNumberScratch|GetFloatValue}}
     * * {{ClassFunction|DNumberScratch|SetFraction}} 
     * @returns A value between 0 and 1 
     */
    public GetFraction(): number;
    
    /**
     * Returns the maximum value that can be selected on the number scratch 
     * @returns The maximum value that can be selected on the number scratch 
     */
    public GetMax(): number;
    
    /**
     * Returns the minimum value that can be selected on the number scratch 
     * @returns The minimum value that can be selected on the number scratch 
     */
    public GetMin(): number;
    
    /**
     * Returns the range of the {{Type|DNumberScratch}}. Basically max value - min value. 
     * @returns The range of the {{Type|DNumberScratch}} 
     */
    public GetRange(): number;
    
    /**
     * Returns whether the scratch window should be visible or not. 
     * @returns 
     */
    public GetShouldDrawScreen(): boolean;
    
    /**
     * Returns the real value of the {{Type|DNumberScratch}} as a string.
     * 
     * See also {{ClassFunction|DNumberScratch|GetFloatValue}} and {{ClassFunction|DNumberScratch|GetFraction}}. 
     * @returns The real value of the {{Type|DNumberScratch}} 
     */
    public GetTextValue(): string;
    
    /**
     * Returns the zoom level of the scratch window 
     * @returns 
     */
    public GetZoom(): number;
    
    /**
     * Returns the ideal zoom level for the panel based on the {{ClassFunction|DNumberScratch|GetRange}}. 
     * @returns The ideal zoom level for the panel based on the panels range. 
     */
    public IdealZoom(): number;
    
    /**
     * Returns whether the player is currently editing the value of the {{Type|DNumberScratch}}. 
     * @returns 
     */
    public IsEditing(): boolean;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Used to lock the cursor in place. 
     */
    public LockCursor(): void;
    
    /**
     * Called when the value of the {{Type|DNumberScratch}} is changed. 
     * @param newValue  The new value 
     */
    public OnValueChanged(newValue: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Used to paint the 'scratch' window. 
     */
    public PaintScratchWindow(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Sets whether or not the panel is 'active'.
     * 
     * Forcing this panel to be active may not work. 
     * @param active  true to activate, false to deactivate. 
     */
    public SetActive(active: boolean): void;
    
    /**
     * Sets the desired amount of numbers after the decimal point. 
     * @param decimals  0 for whole numbers only, 1 for one number after the decimal point, etc. 
     */
    public SetDecimals(decimals: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Does not trigger {{ClassFunction|DNumberScratch|OnValueChanged}}
     * 
     * Use {{ClassFunction|DNumberScratch|SetValue}} instead. 
     * @param val  The value to set 
     */
    public SetFloatValue(val: number): void;
    
    /**
     * Sets the value of the {{Type|DNumberScratch}} as a fraction, a value between 0 and 1 where 0 is the minimum and 1 is the maximum value of the {{Type|DNumberScratch}} 
     * @param frac  A value between 0 and 1 
     */
    public SetFraction(frac: number): void;
    
    /**
     * Sets the max value that can be selected on the number scratch 
     * @param max  The maximum number 
     */
    public SetMax(max: number): void;
    
    /**
     * Sets the minimum value that can be selected on the number scratch. 
     * @param min  The minimum number 
     */
    public SetMin(min: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Sets if the scratch window should be drawn or not. Cannot be used to force it to draw, only to hide it, which will not stop the panel from working with invisible window. 
     * @param shouldDraw 
     */
    public SetShouldDrawScreen(shouldDraw: boolean): void;
    
    /**
     * Sets the value of the {{Type|DNumberScratch}} and triggers {{ClassFunction|DNumberScratch|OnValueChanged}} 
     * @param val  The value to set. 
     */
    public SetValue(val: number): void;
    
    /**
     * Sets the zoom level of the scratch panel. 
     * @param zoom 
     */
    public SetZoom(zoom: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Forces the assigned ConVar to be updated to the value of this {{Type|DNumberScratch}} 
     */
    public UpdateConVar(): void;
}

/**
 * DNumberWang is a VGUI element that allows you to input a numeric value using up and down arrows or direct entry. 
 */
declare class DNumberWang extends DTextEntry {
    /**
     * Returns the amount of decimal places allowed in the number selector, set by {{ClassFunction|DNumberWang|SetDecimals}} 
     * @returns The amount of decimal places allowed in the number selector. 
     */
    public GetDecimals(): number;
    
    /**
     * **Deprecated!**
     * 
     * Returns whatever is set by {{ClassFunction|DNumberWang|SetFloatValue}} or 0. 
     * @returns 
     */
    public GetFloatValue(): number;
    
    /**
     * Returns a fraction representing the current number selector value to number selector min/max range ratio. If argument ''val'' is supplied, that number will be computed instead. 
     * @param val  The fraction numerator. 
     * @example
     * 
     * local numinput = vgui.Create("DNumberWang")
     * numinput:SetPos(5, 5)
     * numinput:SetSize(90, 20)
     * 
     * numinput:SetMinMax(0, 255)
     * 
     * numinput:SetValue(64)
     * 
     * print(numinput:GetFraction())	// Should return ~0.25
     * print(numinput:GetFraction(128))	// Should return ~0.5
     * print(numinput:GetFraction(192))	// Should return ~0.75
     * print(numinput:GetFraction(255))	// Should return 1
     * 
     * // Prints out some fractions based on a number selector with a min/max range of 0 to 255. 
     */
    public GetFraction(val: number): void;
    
    /**
     * Returns the maximum numeric value allowed by the number selector. 
     * @returns The maximum value. 
     */
    public GetMax(): number;
    
    /**
     * Returns the minimum numeric value allowed by the number selector. 
     * @returns The minimum number. 
     */
    public GetMin(): number;
    
    /**
     * **Deprecated!**
     * 
     * This function returns the panel it is used on. 
     * @returns self 
     */
    public GetTextArea(): Panel;
    
    /**
     * Returns the numeric value inside the number selector. 
     * @returns The numeric value. 
     */
    public GetValue(): number;
    
    /**
     * Returns the value the panel holds.
     * 
     * In engine is only implemented for {{Type|CheckButton}}, {{Type|Label}} and {{Type|TextEntry}} as a string and for those elements has a hard coded limit of 8092 characters. 
     * @returns The value the panel holds. 
     * @example
     * 
     * local TextEntry = vgui.Create( "TextEntry" )
     * TextEntry:SetText( "Hello world!" )
     * print( TextEntry:GetValue() )
     * 
     * // Returns the string typed in a TextEntry. 
     */
    public GetValue(): any;
    
    /**
     * Hides the number selector arrows. 
     */
    public HideWang(): void;
    
    /**
     * Internal function which is called when the number selector value is changed. This function is empty by default so it needs to be overridden in order to provide functionality. 
     * @param val  The new value of the number selector. 
     * @example
     * 
     * // Background panel
     * BGPanel = vgui.Create("DPanel")
     * BGPanel:SetPos(20, 20)
     * BGPanel:SetSize(100, 55)
     * 
     * // Statement label
     * local lbl1 = vgui.Create("DLabel", BGPanel)
     * lbl1:SetPos(5, 5)
     * lbl1:SetSize(100, 20)
     * lbl1:SetText("Statement: ")
     * lbl1:SetColor(Color(64, 64, 255))
     * 
     * // Response label
     * local lbl2 = vgui.Create("DLabel", BGPanel)
     * lbl2:SetPos(5, 30)
     * lbl2:SetSize(100, 20)
     * lbl2:SetText("Response: ")
     * lbl2:SetColor(Color(255, 0, 255))
     * 
     * // Number selector for "questions"
     * local question = vgui.Create("DNumberWang", BGPanel)
     * question:SetPos(65, 5)
     * question:SetSize(30, 20)
     * question:SetMinMax(1, 30)
     * 
     * // Number selector for answers
     * local answer = vgui.Create("DNumberWang", BGPanel)
     * answer:SetPos(65, 30)
     * answer:SetSize(30, 20)
     * answer:SetMinMax(1, 40)
     * 
     * // This is used to prevent overlapping talking
     * local null = Sound("common/null.wav")
     * 
     * // Abstraction = cleaner code
     * function TalkSound(snd)
     * 	EmitSound(snd, LocalPlayer():GetPos(), LocalPlayer():EntIndex(), CHAN_VOICE, 1, 80, 0, 100)
     * end
     * 
     * // Play a statement based on new number
     * function question:OnValueChanged(val)
     * 	TalkSound(null)
     * 	TalkSound(Sound("vo/npc/male01/question"..string.format("%02d", val)..".wav"))
     * end
     * 
     * // Play an answer based on new number
     * function answer:OnValueChanged(val)
     * 	TalkSound(null)
     * 	TalkSound(Sound("vo/npc/female01/answer"..string.format("%02d", val)..".wav"))
     * end
     * 
     * // Creates a panel with two number selectors that play a male question sound byte and a female answer sound byte based on the new value of each number selector. 
     */
    public OnValueChanged(val: number): void;
    
    /**
     * Sets the amount of decimal places allowed in the number selector. 
     * @param num  The amount of decimal places. 
     * @example
     * 
     * local numinput = vgui.Create("DNumberWang")
     * numinput:SetPos(5, 5)
     * numinput:SetSize(90, 20)
     * numinput:SetDecimals(3)
     * 
     * numinput:SetValue(math.random())
     * 
     * // Sets the number selector to 3 decimal places and sets the value to a random number between 0 and 1. 
     */
    public SetDecimals(num: number): void;
    
    /**
     * **Deprecated!**
     * 
     * Appears to do nothing. 
     * @param val 
     */
    public SetFloatValue(val: number): void;
    
    /**
     * Sets the value of the number selector based on the given fraction number. 
     * @param val  The fraction of the number selector's range. 
     * @example
     * 
     * local numinput = vgui.Create("DNumberWang")
     * numinput:SetPos(5, 5)
     * numinput:SetSize(90, 20)
     * 
     * numinput:SetMinMax(0, 500)
     * 
     * numinput:SetFraction(0.25)
     * print(numinput:GetValue())
     * 
     * numinput:SetFraction(0.5)
     * print(numinput:GetValue())
     * 
     * numinput:SetFraction(0.75)
     * print(numinput:GetValue())
     * 
     * // Sets and prints out the value of a quarter, half, and three-fourths of the number selector range. 
     */
    public SetFraction(val: number): void;
    
    /**
     * Sets the maximum numeric value allowed by the number selector. 
     * @param max  The maximum value. 
     */
    public SetMax(max: number): void;
    
    /**
     * Sets the minimum numeric value allowed by the number selector. 
     * @param min  The minimum value. 
     */
    public SetMin(min: number): void;
    
    /**
     * Sets the minimum and maximum value allowed by the number selector. 
     * @param min  The minimum value. 
     * @param max  The maximum value. 
     */
    public SetMinMax(min: number, max: number): void;
    
    /**
     * Sets the value of the {{Type|DNumberWang}} and triggers {{ClassFunction|DNumberWang|OnValueChanged}} 
     * @param val  The value to set. 
     */
    public SetValue(val: number): void;
    
    /**
     * Sets the text of the {{Type|DTextEntry}} and calls {{ClassFunction|DTextEntry|OnValueChange}}. 
     * @param text  The value to set. 
     */
    public SetValue(text: string): void;
    
    /**
     * Resizes the panel so that its width and height fit all of the content inside.
     * 
     * **Note:**
     * >Only works on {{Type|Label}} derived panels such as {{Type|DLabel}} by default, and on any panel that manually implemented the {{ClassFunction|Panel|SizeToContents}} method, such as {{Type|DNumberWang}} and {{Type|DImage}}.
     * 
     * {{Warning|You must call this function '''AFTER''' setting text/font, adjusting child panels or otherwise altering the panel.}}
     * 
     * [[Category:DImage]]
     * [[Category:DImageButton]]
     * [[Category:DNumberWang]]
     * [[Category:DListView]] 
     */
    public SizeToContents(): void;
    
    /**
     * Resizes the panel so that its width and height fit all of the content inside.
     * 
     * **Note:**
     * >Only works on {{Type|Label}} derived panels such as {{Type|DLabel}} by default, and on any panel that manually implemented the {{ClassFunction|Panel|SizeToContents}} method, such as {{Type|DNumberWang}} and {{Type|DImage}}.
     * 
     * {{Warning|You must call this function '''AFTER''' setting text/font, adjusting child panels or otherwise altering the panel.}}
     * 
     * [[Category:DImage]]
     * [[Category:DImageButton]]
     * [[Category:DNumberWang]]
     * [[Category:DListView]] 
     */
    public SizeToContents(): void;
}

/**
 * **Deprecated:**
 * >You should use {{Type|DBinder}} instead.
 * 
 * GMod 12 style "number pad" panel used by tools for binding keys to tool actions. Deprecated in favor of {{Type|DBinder}}. 
 */
declare class DNumPad extends DPanel {

}

/**
 * The DNumSlider allows you to create a slider, allowing the user to slide it to set a value, or changing the value in the box. 
 * @example
 * 
 * local DermaPanel = vgui.Create( 'DFrame' ) // Create a panel to parent it to
 * DermaPanel:SetSize( 500, 200 ) // Set the size
 * DermaPanel:Center() // Center it
 * DermaPanel:MakePopup() // Make it a popup
 * 
 * local DermaNumSlider = vgui.Create( "DNumSlider", DermaPanel )
 * DermaNumSlider:SetPos( 50, 50 )			 // Set the position
 * DermaNumSlider:SetSize( 300, 100 )		 // Set the size
 * DermaNumSlider:SetText( "Maximum props" )	// Set the text above the slider
 * DermaNumSlider:SetMin( 0 )				 // Set the minimum number you can slide to
 * DermaNumSlider:SetMax( 256 )				// Set the maximum number you can slide to
 * DermaNumSlider:SetDecimals( 0 )			 // Decimal places - zero for whole number
 * DermaNumSlider:SetConVar( "sbox_maxprops" ) // Changes the ConVar when you slide
 * 
 * // Attempts to create a DNumSlider. 
 */
declare class DNumSlider extends Panel {
    /**
     * Returns the amount of numbers after the decimal point. 
     * @returns 0 for whole numbers only, 1 for one number after the decimal point, etc. 
     */
    public GetDecimals(): number;
    
    /**
     * Returns the default value of the slider, if one was set by {{ClassFunction|DNumSlider|SetDefaultValue}} 
     * @returns The default value of the slider 
     */
    public GetDefaultValue(): number;
    
    /**
     * Returns the maximum value of the slider 
     * @returns The maximum value of the slider 
     */
    public GetMax(): number;
    
    /**
     * Returns the minimum value of the slider 
     * @returns The minimum value of the slider 
     */
    public GetMin(): number;
    
    /**
     * Returns the range of the slider, basically maximum value - minimum value. 
     * @returns The range of the slider 
     */
    public GetRange(): number;
    
    /**
     * Returns the {{Type|DTextEntry}} component of the slider. 
     * @returns The {{Type|DTextEntry}}. 
     */
    public GetTextArea(): DTextEntry;
    
    /**
     * Returns the value of the {{Type|DNumSlider}} 
     * @returns The value of the slider. 
     */
    public GetValue(): number;
    
    /**
     * Returns the value the panel holds.
     * 
     * In engine is only implemented for {{Type|CheckButton}}, {{Type|Label}} and {{Type|TextEntry}} as a string and for those elements has a hard coded limit of 8092 characters. 
     * @returns The value the panel holds. 
     * @example
     * 
     * local TextEntry = vgui.Create( "TextEntry" )
     * TextEntry:SetText( "Hello world!" )
     * print( TextEntry:GetValue() )
     * 
     * // Returns the string typed in a TextEntry. 
     */
    public GetValue(): any;
    
    /**
     * Returns true if either the {{Type|DTextEntry}}, the {{Type|DSlider}} or the {{Type|DNumberScratch}} are being edited. 
     * @returns Whether or not the {{Type|DNumSlider}} is being edited by the player. 
     */
    public IsEditing(): DNumSlider;
    
    /**
     * Called when the value of the slider is changed, through code or changing the slider. 
     * @param value  The new value of the DNumSlider 
     */
    public OnValueChanged(value: number): void;
    
    /**
     * Resets the slider to the default value, if one was set by {{ClassFunction|DNumSlider|SetDefaultValue}}.
     * 
     * This function is called by the {{Type|DNumSlider}} when user middle mouse clicks on the draggable knob of the slider. 
     */
    public ResetToDefaultValue(): void;
    
    /**
     * {{Warning|This function does not exist on all panels}}
     * 
     * Sets this panel's convar. When the convar changes this panel will update automatically.
     * 
     * For developer implementation, see {{GlobalFunction|Derma_Install_Convar_Functions}}. 
     * @param convar  The console variable to check. 
     * @example
     * 
     * local checkbox = vgui.Create( "DCheckBoxLabel", myFrame )
     * checkbox:SetConVar( "sv_cheats" )
     * checkbox:SetText( "Enable cheats?" )
     * checkbox:SetPos( 5, 25 )
     * checkbox:SizeToContents()
     * 
     * // Makes a checkbox linked to the '''sv_cheats''' convar. 
     */
    public SetConVar(convar: string): void;
    
    /**
     * Sets the console variable to be updated when the value of the slider is changed. 
     * @param cvar  The name of the {{Type|ConVar}} to be updated. 
     */
    public SetConVar(cvar: string): void;
    
    /**
     * Calls {{ClassFunction|DLabel|SetDark}} on the {{Type|DLabel}} part of the {{Type|DNumSlider}}. 
     * @param dark 
     */
    public SetDark(dark: boolean): void;
    
    /**
     * Sets the desired amount of numbers after the decimal point. 
     * @param decimals  0 for whole numbers only, 1 for one number after the decimal point, etc. 
     */
    public SetDecimals(decimals: number): void;
    
    /**
     * Sets the default value of the slider, to be used by {{ClassFunction|DNumSlider|ResetToDefaultValue}} or by middle mouse clicking the draggable knob of the slider. 
     * @param defaultVal  The new default value of the slider to set 
     */
    public SetDefaultValue(defaultVal: number): void;
    
    /**
     * Sets the maximum value for the slider. 
     * @param max  The value to set as maximum for the slider. 
     */
    public SetMax(max: number): void;
    
    /**
     * Sets the minimum value for the slider 
     * @param min  The value to set as minimum for the slider. 
     * @example
     * 
     * //This creates the frame.
     * local Frame = vgui.Create( "DFrame" )
     * Frame :Center() // or Frame:SetPos( x, y )
     * Frame:SetSize( 300, 150 )
     * Frame:SetTitle( "Test" )
     * Frame:SetVisible( true )
     * Frame:SetDraggable( true )
     * Frame:ShowCloseButton( true )
     * Frame:MakePopup()
     * //Here we create the slider.
     * local DermaSlider = vgui.Create( "DNumSlider", Frame )
     * DermaSlider:SetPos( 25, 85 )
     * DermaSlider:SetWide( 275 )
     * DermaSlider:SetMin( 0 ) // Or 3 for second image
     * DermaSlider:SetMax( 5 )
     * DermaSlider:SetValue( 0.5 )
     * DermaSlider:SetDecimals( 2 )
     * 
     * // An example usage of the function 
     */
    public SetMin(min: number): void;
    
    /**
     * Sets the minimum and the maximum value of the slider. 
     * @param min  The minimum value of the slider. 
     * @param max  The maximum value of the slider. 
     */
    public SetMinMax(min: number, max: number): void;
    
    /**
     * Sets the value of the {{Type|DNumSlider}}. 
     * @param val  The value to set. 
     */
    public SetValue(val: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * {{Stub}} 
     * @param x 
     * @param y 
     * @returns [, The second passed argument.] 
     * !TupleReturn
     */
    public TranslateSliderValues(x: number, y: number): [number, number];
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * {{Stub}} 
     */
    public UpdateNotches(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Called when the value has been changed. This will also be called when the user manually changes the value through the text panel.
     * 
     * This is an internal function. Override {{ClassFunction|DNumSlider|OnValueChanged}} instead. 
     * @param value  The value the slider has been changed to. 
     */
    public ValueChanged(value: number): void;
}

/**
 * A simple rectangular box, commonly used for parenting other elements to. Pretty much all elements are based on this. 
 * @example
 * 
 * local DPanel = vgui.Create( "DPanel" )
 * DPanel:SetPos( 10, 30 ) // Set the position of the panel
 * DPanel:SetSize( 200, 200 ) // Set the size of the panel
 * 
 * local DLabel = vgui.Create( "DLabel", DPanel )
 * DLabel:SetPos( 10, 10 ) // Set the position of the label
 * DLabel:SetText( "I'm a DLabel inside a DPanel! :)" ) //  Set the text of the label
 * DLabel:SizeToContents() // Size the label to fit the text in it
 * DLabel:SetDark( 1 ) // Set the colour of the text inside the label to a darker one
 * 
 * // Creates a DPanel and adds a {{Type|DLabel}} to it 
 */
declare class DPanel extends Panel {
    /**
     * Returns the panel's background color.
     * 
     * **Note:**
     * >By default this returns '''nil''' even though the default background color is white 
     * @returns Color of the panel's background. 
     * @example
     * 
     * BGPanel = vgui.Create("DPanel")
     * BGPanel:SetPos(20, 20)
     * BGPanel:SetSize(200, 200)
     * 
     * print(BGPanel:GetBackgroundColor())
     * 
     * // Prints out the default panel background color. 
     */
    public GetBackgroundColor(): table;
    
    /**
     * Returns whether or not the panel is disabled. 
     * @returns True if the panel is disabled (mouse input disabled and background alpha set to 75), false if its enabled (mouse input enabled and background alpha set to 255). 
     */
    public GetDisabled(): boolean;
    
    /**
     * **Deprecated:**
     * >You should use {{ClassFunction|DPanel|GetPaintBackground}} instead.
     * 
     * Returns whether or not the panel background is being drawn. Alias of {{ClassFunction|DPanel|GetPaintBackground}}. 
     * @returns True if the panel background is drawn, false otherwise. 
     */
    public GetDrawBackground(): boolean;
    
    /**
     * Returns whether or not the panel background is being drawn. 
     * @returns True if the panel background is drawn, false otherwise. 
     */
    public GetPaintBackground(): boolean;
    
    /**
     * Sets the background color of the panel. 
     * @param color  The background color. 
     * @example
     * 
     * COLOR_TEAM_RED = Color(255, 64, 64, 255)
     * COLOR_TEAM_BLUE = Color(153, 204, 255, 255)
     * 
     * BGPanel1 = vgui.Create("DPanel")
     * BGPanel1:SetPos(20, 20)
     * BGPanel1:SetSize(200, 200)
     * BGPanel1:SetBackgroundColor(COLOR_TEAM_RED)
     * 		
     * BGPanel2 = vgui.Create("DPanel")
     * BGPanel2:SetPos(220, 20)
     * BGPanel2:SetSize(200, 200)
     * BGPanel2:SetBackgroundColor(COLOR_TEAM_BLUE)
     * 
     * // Creates two empty panels with their background colors set to red and blue team colors. 
     */
    public SetBackgroundColor(color: table): void;
    
    /**
     * Sets whether or not to disable the panel. 
     * @param disabled  True to disable the panel (mouse input disabled and background alpha set to 75), false to enable it (mouse input enabled and background alpha set to 255). 
     */
    public SetDisabled(disabled: boolean): void;
    
    /**
     * **Deprecated:**
     * >You should use {{ClassFunction|DPanel|SetPaintBackground}} instead.
     * 
     * Sets whether or not to draw the panel background. Alias of {{ClassFunction|DPanel|SetPaintBackground}}. 
     * @param draw  True to show the panel's background, false to hide it. 
     */
    public SetDrawBackground(draw: boolean): void;
    
    /**
     * Sets whether or not to paint/draw the panel background. 
     * @param paint  True to show the panel's background, false to hide it. 
     */
    public SetPaintBackground(paint: boolean): void;
}

/**
 * **Deprecated:**
 * >DPanelList was succeeded in version 13 by more specialised layout elements, such as a combination of {{Type|DIconLayout}}, {{Type|DListLayout}} and {{Type|DScrollPanel}}.
 * 
 * Displays elements in a horizontal or vertical list. A scrollbar is automatically shown if necessary.
 * Use is not recommended due to deprecation. 
 */
declare class DPanelList extends DPanel {
    /**
     * @param insert  The panel to insert 
     * @param strLineState  If set to "ownline", no other panels will be placed to the left or right of the panel we are inserting 
     */
    public InsertAtTop(insert: Panel, strLineState: string): void;
}

/**
 * Adds curved corners. 
 * @example
 * 
 * local DFrame = vgui.Create( "DFrame" )
 * DFrame:SetSize( 350, 200 ) // Set the size of the panel
 * DFrame:Center()
 * DFrame:MakePopup()
 * 
 * local DPanel = vgui.Create( "Panel", DFrame )
 * DPanel:Dock( FILL )
 * 
 * local DLabel = vgui.Create( "DLabel", DPanel )
 * DLabel:SetPos( 10, 10 ) // Set the position of the label
 * DLabel:SetText( "I'm a DLabel inside a DPanel that has a DPanelOverlay border!" ) // Set the text of the label
 * DLabel:SizeToContents() // Size the label to fit the text in it
 * 
 * local DPanelOverlay = vgui.Create( "DPanelOverlay", DPanel )
 * DPanelOverlay:SetType( 1 ) // Sets the type of overlay to add to the DPanel
 * DPanelOverlay:SetColor( Color( 255, 0, 0 ) ) // Sets the colour of the borders
 * 
 * // Creates a {{Type|DPanel}} with a DPanelOverlay and adds a {{Type|DLabel}} to it 
 */
declare class DPanelOverlay extends DPanel {
    /**
     * Returns the border color of the {{Type|DPanelOverlay}} set by {{ClassFunction|DPanelOverlay|SetColor}}. 
     * @returns The set color. Uses the {{Struct|Color}}. 
     */
    public GetColor(): Color;
    
    /**
     * Returns the type of the {{Type|DPanelOverlay}} set by {{ClassFunction|DPanelOverlay|SetType}}. 
     * @returns The set type. 
     */
    public GetType(): number;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Used internally by the panel for type 3. 
     * @param cola 
     * @param colb 
     * @param colc 
     * @param cold 
     * @param size 
     */
    public PaintDifferentColours(cola: table, colb: table, colc: table, cold: table, size: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Used internally by the panel for types 1 and 2. 
     * @param size 
     */
    public PaintInnerCorners(size: number): void;
    
    /**
     * Sets the border color of the {{Type|DPanelOverlay}}. 
     * @param color  The color to set. Uses the {{Struct|Color}}. 
     */
    public SetColor(color: Color): void;
    
    /**
     * Sets the type of the {{Type|DPanelOverlay}}. 
     * @param type  The type to set.
     * 
     * Possible value are:
     * * 1 - 8px corners of given color
     * * 2 - 4px corners of given type
     * * 3 - 2 top? corners of hardcoded color, 2 other corners of given color 
     */
    public SetType(type: number): void;
}

/**
 * **Deprecated:**
 * >This is derived from the deprecated {{Type|DPanelList}}.
 * 
 *  A base panel for things like {{Type|DModelSelect}}. Basically, a list of panels that can be selected. Selected panel can be retrieved and has visual indication of being selected. 
 */
declare class DPanelSelect extends DPanelList {

}

/**
 * A progressbar, works with a fraction between 0 and 1 where 0 is 0% and 1 is 100%. 
 * @example
 * 
 * local DProgress = vgui.Create( "DProgress" )
 * DProgress:SetPos( 10, 30 )
 * DProgress:SetSize( 200, 20 )
 * DProgress:SetFraction( 0.75 )
 * 
 * // Creates a DProgress set to 75% (0.75 out of 1) 
 */
declare class DProgress extends Panel {
    /**
     * Returns the progress bar's fraction. 0 is 0% and 1 is 100%. 
     * @returns Current fraction of the progress bar. 
     */
    public GetFraction(): number;
    
    /**
     * Sets the fraction of the progress bar. 0 is 0% and 1 is 100%. 
     * @param fraction  Fraction of the progress bar. Range is 0 to 1 (0% to 100%). 
     */
    public SetFraction(fraction: number): void;
}

/**
 * A grid for editing the properties of something using names and values. Properties can be categorized and strongly typed.
 * 
 * == Associated controls ==
 * *{{Type|DProperty_VectorColor}}
 * *{{Type|DProperty_Boolean}}
 * *{{Type|DProperty_Generic}}
 * *{{Type|DProperty_Combo}}
 * *{{Type|DProperty_Float}}
 * *{{Type|DProperty_Int}} 
 * @example
 * 
 * local f = vgui.Create( "DFrame" )
 * f:SetSize( 500, 300 )
 * f:Center()
 * f:MakePopup()
 * 
 * local DProperties = vgui.Create( "DProperties", f )
 * DProperties:Dock( FILL )
 * 
 * local Row1 = DProperties:CreateRow( "Category1", "Vector Color" )
 * Row1:Setup( "VectorColor" )
 * Row1:SetValue( Vector( 1, 0, 0 ) )
 * Row1.DataChanged = function( _, val ) print( val ) end
 * 
 * local Row2 = DProperties:CreateRow( "Category1", "Combo" )
 * Row2:Setup( "Combo", { text = "Select type..." } )
 * Row2:AddChoice( "Table", {} )
 * Row2:AddChoice( "String", "Hello world" )
 * Row2.DataChanged = function( self, data )
 * 	print( "You selected: ", data )
 * end
 * 
 * local Row3 = DProperties:CreateRow( "Category1", "Boolean" )
 * Row3:Setup( "Boolean" )
 * Row3:SetValue( true )
 * 
 * local Row4 = DProperties:CreateRow( "Category2", "Float" )
 * Row4:Setup( "Float", { min = 0, max = 5 } )
 * Row4:SetValue( 2.5 )
 * 
 * local Row5 = DProperties:CreateRow( "Category2", "Integer" )
 * Row5:Setup( "Int", { min = 0, max = 5 } )
 * Row5:SetValue( 2.5 )
 * 
 * local Row6 = DProperties:CreateRow( "Category2", "Generic" )
 * Row6:Setup( "Generic" )
 * Row6:SetValue( "Hello World!" )
 * Row6.DataChanged = function( _, val ) print( val ) end
 * 
 * // Creates a DProperties control with a few properties set up 
 */
declare class DProperties extends Panel {
    /**
     * Creates a row in the properties panel. 
     * @param category  The category to list this row under 
     * @param name  The label of this row 
     * @returns An internal Row panel. 
     */
    public CreateRow(category: string, name: string): Panel;
    
    /**
     * Returns the {{Type|DScrollPanel}} all the properties panels are attached to. 
     * @returns A {{Type|DScrollPanel}} canvas 
     */
    public GetCanvas(): DScrollPanel;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Returns (or creates) a category of properties.
     * 
     * See {{ClassFunction|DProperties|CreateRow}} for adding actual properties. 
     * @param name  Name of the category 
     * @param create  Create a new category if it doesn't exist. 
     * @returns An internal panel. 
     */
    public GetCategory(name: string, create: boolean): Panel;
}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * Checkbox control for the {{Type|DProperties}} panel. 
 * @example
 * 
 * local Panel = vgui.Create( "DFrame" )
 * Panel:SetSize( 500, 500 )
 * Panel:MakePopup()
 * 
 * local props = vgui.Create( "DProperties", Panel )
 * props:Dock( FILL )
 * 
 * local boolRow = props:CreateRow( "MyCategory", "CheckboxExample" )
 * boolRow:Setup( "Boolean" )
 * boolRow:SetValue( true )
 * boolRow.DataChanged = function( self, data )
 * 	MsgN( "Data changed: ", data )
 * end
 * 
 * // Example of this panel 
 */
declare class DProperty_Boolean extends DProperty_Generic {

}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * Combo control for a {{Type|DProperties}} panel. 
 * @example
 * 
 * local Panel = vgui.Create( "DFrame" )
 * Panel:SetSize( 500, 500 )
 * Panel:MakePopup()
 * 
 * local DP = vgui.Create( "DProperties", Panel )
 * DP:Dock( FILL )
 * 
 * local choice = DP:CreateRow( "Choices", "Combo #1: Default" )
 * choice:Setup( "Combo", {} )
 * choice:AddChoice( "Allow", true )
 * choice:AddChoice( "Disallow", false )
 * 
 * local choice = DP:CreateRow( "Choices", "Combo #2: Custom default text" )
 * choice:Setup( "Combo", { text = "Select type..." } )
 * choice:AddChoice( "Table", {} )
 * choice:AddChoice( "Function", function() end )
 * choice:AddChoice( "String", "Hello world" )
 * choice.DataChanged = function( self, data )
 *     print( "You selected: ", data )
 * end
 * 
 * // 
 */
declare class DProperty_Combo extends DProperty_Generic {
    /**
     * Add a choice to your combo control. 
     * @param Text  Shown text. 
     * @param data  Stored Data. 
     * @param select [=false] Select this element? 
     * @example
     * 
     * local choice = DP:CreateRow( "Choices", "Hello world" )
     * choice:Setup( "Combo" )
     * choice:AddChoice( "I am a choice", {} )
     * choice:AddChoice( "I am selected", 8, true )
     * choice:AddChoice( "I am not selected", "Hello world" )
     * 
     * // Set the "I am selected" option selected. 
     */
    public AddChoice(Text: string, data: any, select?: boolean): void;
    
    /**
     * Called after the user selects a new value. 
     * @param data  The new data that was selected. 
     * @example
     * 
     * local choice = DP:CreateRow( "Choices", "Combo #2: Custom default text" )
     * choice:Setup( "Combo", "Select type..." )
     * choice:AddChoice( "Table", {} )
     * choice:AddChoice( "Function", function() end )
     * choice:AddChoice( "String", "Hello world" )
     * choice.DataChanged = function( self, data )
     * 
     *    print( "You selected: ", data )
     * 
     * end
     * 
     * // Click on the "Table" choice. 
     */
    public DataChanged(data: any): void;
    
    /**
     * Set the selected option. 
     * @param Id  Id of the choice to be selected. 
     * @example
     * 
     * local choice = DP:CreateRow( "Choices", "Hello world" )
     * choice:Setup( "Combo" )
     * choice:AddChoice( "Choice #1", {} )
     * choice:AddChoice( "Choice #2", 8 )
     * choice:AddChoice( "Choice #3", "Hello world", true )
     * choice:SetSelected( 2 ) // Even if "Choice #3" is selected by default, "Choice #2" will be selected.
     * 
     * // Set the second option selected. 
     */
    public SetSelected(Id: number): void;
    
    /**
     * Sets the selected state of a selectable panel object. This functionality is set with {{ClassFunction|Panel|SetSelectable}} and checked with {{ClassFunction|Panel|IsSelectable}}. 
     * @param selected [=false] Whether the object should be selected or deselected. {{ClassFunction|Panel|IsSelected}} can be used to determine the selected state of the object. 
     */
    public SetSelected(selected?: boolean): void;
    
    /**
     * Sets up a combo control. 
     * @param prop [="Combo"] The name of DProperty sub control to add. 
     * @param data [={ text = "Select..." }] Data to use to set up the combo box control.
     * 
     * Structure:
     * * {{FuncArg|string|text|The default label for this combo box}}
     * * {{FuncArg|table|values|The values to add to the combo box}} 
     * @example
     * 
     * local Combo = DP:CreateRow( "Catergory", "Hello World" )
     * Combo:Setup( "Combo", {
     * 	text = "Select me!",
     * 	values = {
     * 		[ "Label 1" ] = "data 1",
     * 		[ "Label 2" ] = 2,
     * 	}
     * } )
     * 
     * // Setup a Combo control with a custom default text and two options. 
     */
    public Setup(prop?: string, data?: table): void;
}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * Float control for the {{Type|DProperties}} panel. 
 */
declare class DProperty_Float extends DProperty_Generic {

}

/**
 * A base for other controls for {{Type|DProperties}}. Acts as a generic text input on its own. 
 * @example
 * 
 * local Panel = vgui.Create( "DFrame" )
 * Panel:SetSize( 500, 500 )
 * Panel:MakePopup()
 * 
 * local props = vgui.Create( "DProperties", Panel )
 * props:Dock( FILL )
 * 
 * local textRow = props:CreateRow( "MyCategory", "GenericTextArea" )
 * textRow:Setup( "Generic" )
 * textRow:SetValue( "test" )
 * textRow.DataChanged = function( self, data )
 * 	MsgN( "Text changed: ", data )
 * end
 * 
 * // Example usage of this control 
 */
declare class DProperty_Generic extends Panel {

}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * Integer control for the {{Type|DProperties}} panel. 
 */
declare class DProperty_Int extends DProperty_Float {

}

/**
 * Color picker control for a DProperties panel. Opens a {{Type|DColorCombo}} if the color preview is clicked.
 * 
 * See [[Editable Entities]] for how this is used ingame. 
 * @example
 * 
 * local Panel = vgui.Create( "DFrame" )
 * Panel:SetSize( 500, 500 )
 * Panel:MakePopup()
 * 
 * local props = vgui.Create( "DProperties", Panel )
 * props:Dock( FILL )
 * 
 * local colorPicker = props:CreateRow( "Color", "Select Color" )
 * colorPicker:Setup( "VectorColor", {} )
 * colorPicker:SetValue( Vector( 0.61, 0.1, 0.1 ) )
 * colorPicker.DataChanged = function( self, data )
 * 	MsgN( "Selected color: ", data )
 * end
 * 
 * // Creates a demo VectorColor property. 
 */
declare class DProperty_VectorColor extends DProperty_Generic {
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Called by a property row to setup a color selection control. 
     * @param prop [="VectorColor"] 
     * @param settings [=] A table of settings. None of the values are used for this property. See [[Editable Entities]]. 
     */
    public Setup(prop?: string, settings?: table): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Called by a property row to setup a color selection control. 
     * @param settings  A table of settings. None of the values are used for this property. See [[Editable Entities]]. 
     */
    public Setup(settings: table): void;
    
    /**
     * Sets the color value of the property. 
     * @param color  Sets the color to use in a {{Type|DProperty_VectorColor}}. 
     * @example
     * 
     * local color = DP:CreateRow( "Category", "Select Color" )
     * color:Setup( "VectorColor", {} )
     * color:SetValue( Vector( 0.39, 1, 1 ) )
     * 
     * // Setup a color selection control with a custom default color. 
     */
    public SetValue(color: DProperty_VectorColor): void;
}

/**
 * A tab oriented control where you can create multiple tabs with items within. Used mainly for organization. 
 * @example
 * 
 * local frame = vgui.Create( "DFrame" )
 * frame:SetSize( 500, 300 )
 * frame:Center()
 * frame:MakePopup()
 * 
 * local sheet = vgui.Create( "DPropertySheet", frame )
 * sheet:Dock( FILL )
 * 
 * local panel1 = vgui.Create( "DPanel", sheet )
 * panel1.Paint = function( self, w, h ) draw.RoundedBox( 4, 0, 0, w, h, Color( 0, 128, 255, self:GetAlpha() ) ) end 
 * sheet:AddSheet( "test", panel1, "icon16/cross.png" )
 * 
 * local panel2 = vgui.Create( "DPanel", sheet )
 * panel2.Paint = function( self, w, h ) draw.RoundedBox( 4, 0, 0, w, h, Color( 255, 128, 0, self:GetAlpha() ) ) end 
 * sheet:AddSheet( "test 2", panel2, "icon16/tick.png" )
 * 
 * // Example of how you'd create and use this panel. 
 */
declare class DPropertySheet extends DPanel {
    /**
     * Adds a new tab. 
     * @param name  Name of the tab 
     * @param pnl  Panel to be used as contents of the tab. This normally should be a {{Type|DPanel}} 
     * @param icon [=nil] Icon for the tab. This will ideally be a [[Silkicons|silkicon]], but any material name can be used. 
     * @param noStretchX [=false] Should {{Type|DPropertySheet}} try to fill itself with given panel horizontally. 
     * @param noStretchY [=false] Should {{Type|DPropertySheet}} try to fill itself with given panel vertically. 
     * @param tooltip [=nil] Tooltip for the tab when user hovers over it with his cursor 
     * @returns A table containing the following keys:
     * * {{FuncArg|Panel|Tab|The created {{Type|DTab}}.}}
     * * {{FuncArg|string|Name|Name of the created tab}}
     * * {{FuncArg|Panel|Panel|The contents panel of the tab}} 
     * @example
     * 
     * local frame = vgui.Create("DFrame")
     * frame:SetSize( ScrW() / 2, ScrH() / 2 )
     * frame:SetTitle( "Test Frame" )
     * frame:MakePopup()
     * frame:Center()
     * 
     * local tabs = vgui.Create( "DPropertySheet", frame )
     * tabs:Dock( FILL )
     * 
     * local tab1panel = vgui.Create( "DPanel" )
     * 
     * local SheetItem = vgui.Create( "DButton", tab1panel )
     * SheetItem:SetText( "Suicide" )
     * SheetItem:SetConsoleCommand( "kill" )
     *  
     * tabs:AddSheet( "Tab 1", tab1panel, "icon16/user.png", false, false, "Description of first tab")
     * 
     * // 
     */
    public AddSheet(name: string, pnl: DPanel, icon?: string, noStretchX?: DPropertySheet, noStretchY?: DPropertySheet, tooltip?: string): table;
    
    /**
     * Removes tab and/or panel from the parent DPropertySheet. 
     * @param tab  The {{Type|DTab}} of the sheet from {{Type|DPropertySheet}}.
     * 
     * See {{ClassFunction|DPropertySheet|GetItems}}. 
     * @param removePanel  Set to true to remove the associated panel object as well. 
     * @returns The panel of the tab. 
     */
    public CloseTab(tab: DTab | DPropertySheet, removePanel: boolean): Panel;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Internal function that handles the cross fade animation when the player switches tabs. 
     * @param anim 
     * @param delta 
     * @param data 
     */
    public CrossFade(anim: table, delta: number, data: table): void;
    
    /**
     * Returns the active {{Type|DTab}} of this {{Type|DPropertySheet}}. 
     * @returns The {{Type|DTab}} 
     */
    public GetActiveTab(): DTab;
    
    /**
     * Returns the amount of time (in seconds) it takes to fade between tabs.
     * 
     * Set by {{ClassFunction|DPropertySheet|SetFadeTime}} 
     * @returns The amount of time (in seconds) it takes to fade between tabs. 
     */
    public GetFadeTime(): number;
    
    /**
     * Returns a list of all tabs of this {{Type|DPropertySheet}}. 
     * @returns A table of tables.
     * 
     * Each table contains 3 key-value pairs:
     * 
     * {{FuncArg|string|Name|The name of the tab.}}
     * 
     * {{FuncArg|Panel|Tab|The {{Type|DTab}} associated with the tab}}
     * 
     * {{FuncArg|Panel|Panel|The {{Type|Panel}} associated with the tab}} 
     */
    public GetItems(): table[];
    
    /**
     * Gets the padding from the parent panel to child panels. 
     * @returns Padding 
     */
    public GetPadding(): number;
    
    /**
     * **Deprecated!**
     * 
     * Returns whatever value was set by {{ClassFunction|DPropertySheet|SetShowIcons}}. 
     * @returns 
     */
    public GetShowIcons(): boolean;
    
    /**
     * Called when a player switches the tabs 
     * @param old  The previously active {{Type|DTab}} 
     * @param newVal  The newly active {{Type|DTab}} 
     */
    public OnActiveTabChanged(old: DTab, newVal: DTab): void;
    
    /**
     * Sets the active tab of the {{Type|DPropertySheet}}. 
     * @param tab  The {{Type|DTab}} to set active.
     * 
     * See {{ClassFunction|DPropertySheet|GetItems}} 
     */
    public SetActiveTab(tab: DTab): void;
    
    /**
     * Sets the amount of time (in seconds) it takes to fade between tabs. 
     * @param time [=0.1] The amount of time it takes (in seconds) to fade between tabs. 
     * @example
     * 
     * DPropertySheet.SetFadeTime(0.5)
     * 
     * // Sets the fade time to 0.5 seconds (500 milliseconds)@example
     * 
     * DPropertySheet.SetFadeTime(2)
     * 
     * // Sets the fade time to 2 seconds (2000 milliseconds) 
     */
    public SetFadeTime(time?: number): void;
    
    /**
     * Sets the padding from parent panel to children panel. 
     * @param padding [=8] Amount of padding 
     */
    public SetPadding(padding?: number): void;
    
    /**
     * **Deprecated!**
     * 
     * Does nothing. 
     * @param show 
     */
    public SetShowIcons(show: boolean): void;
    
    /**
     * Creates a close button on the right side of the {{Type|DPropertySheet}} that will run the given callback function when pressed. 
     * @param func  Callback function to be called when the close button is pressed. 
     */
    public SetupCloseButton(func: Function): void;
    
    /**
     * Sets the width of the {{Type|DPropertySheet}} to fit the contents of all of the tabs. 
     */
    public SizeToContentWidth(): void;
    
    /**
     * Switches the active tab to a tab with given name. 
     * @param name  Case sensitive name of the tab. 
     */
    public SwitchToName(name: string): void;
}

/**
 * The drag'n'drop library, used internally by certain base panels to allow for drag'n'drop functionality, like spawnmenu's customizations. 
 */
declare namespace dragndrop {
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Calls the receiver function of hovered panel. 
     * @param bDoDrop  true if the mouse was released, false if we right clicked. 
     * @param command  The command value. This should be the ID of the clicked dropdown menu ( if right clicked, or nil ) 
     * @param mx  The local to the panel mouse cursor X position when the click happened. 
     * @param my  The local to the panel  mouse cursor Y position when the click happened. 
     */
    function CallReceiverFunction(bDoDrop: boolean, command: number, mx: number, my: number): void;
    
    /**
     * Clears all the internal drag'n'drop variables. 
     */
    function Clear(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Handles the drop action of drag'n'drop library. 
     */
    function Drop(): void;
    
    /**
     * Returns a table of currently dragged panels. 
     * @param name [=nil] If set, the function will return only the panels with this {{ClassFunction|Panel|Droppable}} name. 
     * @returns A table of all panels that are being currently dragged, if any. 
     */
    function GetDroppable(name?: string): table;
    
    /**
     * If returns true, calls {{LibraryFunction|dragndrop|StopDragging}} in {{LibraryFunction|dragndrop|Drop}}. Seems to be broken and does nothing. Is it for override? 
     */
    function HandleDroppedInGame(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Handles the hover think. Called from {{LibraryFunction|dragndrop|Think}}. 
     */
    function HoverThink(): void;
    
    /**
     * Returns whether the user is dragging something with the drag'n'drop system. 
     * @returns True if the user is dragging something with the drag'n'drop system. 
     */
    function IsDragging(): boolean;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Starts the drag'n'drop. 
     */
    function StartDragging(): void;
    
    /**
     * Stops the drag'n'drop and calls {{LibraryFunction|dragndrop|Clear}}. 
     */
    function StopDragging(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Handles all the drag'n'drop processes. Calls {{LibraryFunction|dragndrop|UpdateReceiver}} and {{LibraryFunction|dragndrop|HoverThink}}. 
     */
    function Think(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Updates the receiver to drop the panels onto. Called from {{LibraryFunction|dragndrop|Think}}. 
     */
    function UpdateReceiver(): void;
}

/**
 * The draw library's purpose is to simplify the usage of the [[surface]] library. 
 */
declare namespace draw {
    /**
     * Simple draw text at position, but this will expand newlines and tabs.
     * 
     * {{RenderingContext|Function|2D}}
     * 
     * See also {{Type|MarkupObject}} for limited width and markup support. 
     * @param text  Text to be drawn. 
     * @param font [="DermaDefault"] Name of font to draw the text in. See {{LibraryFunction|surface|CreateFont}} to create your own, or [[Default Fonts]] for a list of default fonts. 
     * @param x [=0] The X Coordinate. 
     * @param y [=0] The Y Coordinate. 
     * @param color [=Color( 255, 255, 255, 255 )] Color to draw the text in. Uses the {{Struct|Color}}. 
     * @param xAlign [=TEXT_ALIGN_LEFT] Where to align the text horizontally. Uses the {{Enum|TEXT_ALIGN}}. 
     * @example
     * 
     * hook.Add("HUDPaint", "HelloThere", function() 
     * 	draw.DrawText("Hello there!", "TargetID", ScrW() * 0.5, ScrH() * 0.25, Color(255,255,255,255), TEXT_ALIGN_CENTER)
     * end)
     * 
     * // Makes a message saying "Hello there!" pop up in the center of your screen. 
     */
    function DrawText(text: string, font?: string, x?: number, y?: number, color?: Color, xAlign?: TEXT_ALIGN): void;
    
    /**
     * Returns the height of the specified font in pixels.
     * 
     * {{RenderingContext|Function|2D}} 
     * @param font  Name of the font to get the height of. 
     * @returns fontHeight 
     */
    function GetFontHeight(font: string): number;
    
    /**
     * Sets drawing texture to a default white texture (vgui/white) via {{LibraryFunction|surface|SetMaterial}}. Useful for resetting the drawing texture.
     * 
     * {{RenderingContext|Function|2D}} 
     */
    function NoTexture(): void;
    
    /**
     * Draws a rounded rectangle.
     * **Note:**
     * >If you intend to draw a non-rounded rectangle, then it's more efficient to use {{LibraryFunction|surface|DrawRect}}.
     * 
     * {{RenderingContext|Function|2D}} 
     * @param cornerRadius  Radius of the rounded corners, works best with a multiple of 2. 
     * @param x  The x coordinate of the top left of the rectangle. 
     * @param y  The y coordinate of the top left of the rectangle. 
     * @param width  The width of the rectangle. 
     * @param height  The height of the rectangle. 
     * @param color  The color to fill the rectangle with. Uses the {{Struct|Color}}. 
     */
    function RoundedBox(cornerRadius: number, x: number, y: number, width: number, height: number, color: Color): void;
    
    /**
     * Draws a rounded rectangle. This function also lets you specify which corners are drawn rounded.
     * 
     * {{RenderingContext|Function|2D}} 
     * @param cornerRadius  Radius of the rounded corners, works best with a power of 2 number. 
     * @param x  The x coordinate of the top left of the rectangle. 
     * @param y  The y coordinate of the top left of the rectangle. 
     * @param width  The width of the rectangle. 
     * @param height  The height of the rectangle. 
     * @param color  The color to fill the rectangle with. Uses the {{Struct|Color}}. 
     * @param roundTopLeft [=false] Whether the top left corner should be rounded. 
     * @param roundTopRight [=false] Whether the top right corner should be rounded. 
     * @param roundBottomLeft [=false] Whether the bottom left corner should be rounded. 
     * @param roundBottomRight [=false] Whether the bottom right corner should be rounded. 
     */
    function RoundedBoxEx(cornerRadius: number, x: number, y: number, width: number, height: number, color: Color, roundTopLeft?: boolean, roundTopRight?: boolean, roundBottomLeft?: boolean, roundBottomRight?: boolean): void;
    
    /**
     * Draws text on the screen.
     * 
     * {{RenderingContext|Function|2D}} 
     * @param text  The text to be drawn. 
     * @param font [="DermaDefault"] The font. See {{LibraryFunction|surface|CreateFont}} to create your own, or see [[Default Fonts]] for a list of default fonts. 
     * @param x [=0] The X Coordinate. 
     * @param y [=0] The Y Coordinate. 
     * @param color [=Color( 255, 255, 255, 255 )] The color of the text. Uses the {{Struct|Color}}. 
     * @param xAlign [=TEXT_ALIGN_LEFT] The alignment of the X coordinate using {{Enum|TEXT_ALIGN}}. 
     * @param yAlign [=TEXT_ALIGN_TOP] The alignment of the Y coordinate using {{Enum|TEXT_ALIGN}}. 
     * @returns [The width of the text. Same value as if you were calling {{LibraryFunction|surface|GetTextSize}}., The height of the text. Same value as if you were calling {{LibraryFunction|surface|GetTextSize}}.] 
     * !TupleReturn
     */
    function SimpleText(text: string, font?: string, x?: number, y?: number, color?: Color, xAlign?: TEXT_ALIGN, yAlign?: TEXT_ALIGN): [number, number];
    
    /**
     * Creates a simple line of text that is outlined.
     * 
     * {{RenderingContext|Function|2D}} 
     * @param Text  The text to draw. 
     * @param font [="DermaDefault"] The font name to draw with. See {{LibraryFunction|surface|CreateFont}} to create your own, or [[Default_Fonts|here]] for a list of default fonts. 
     * @param x [=0] The X Coordinate. 
     * @param y [=0] The Y Coordinate. 
     * @param color [=Color( 255, 255, 255, 255 )] The color of the text. Uses the {{Struct|Color}}. 
     * @param xAlign [=TEXT_ALIGN_LEFT] The alignment of the X Coordinate using {{Enum|TEXT_ALIGN}}. 
     * @param yAlign [=TEXT_ALIGN_TOP] The alignment of the Y Coordinate using {{Enum|TEXT_ALIGN}}. 
     * @param outlinewidth [=] Width of the outline. 
     * @param outlinecolor [=Color( 255, 255, 255, 255 )] Color of the outline. Uses the {{Struct|Color}}. 
     * @returns [The width of the text. Same value as if you were calling {{LibraryFunction|surface|GetTextSize}}., The height of the text. Same value as if you were calling {{LibraryFunction|surface|GetTextSize}}.] 
     * !TupleReturn
     */
    function SimpleTextOutlined(Text: string, font?: string, x?: number, y?: number, color?: Color, xAlign?: TEXT_ALIGN, yAlign?: TEXT_ALIGN, outlinewidth?: number, outlinecolor?: Color): [number, number];
    
    /**
     * Creates a simple line of text that is outlined.
     * 
     * {{RenderingContext|Function|2D}} 
     * @param Text  The text to draw. 
     * @param outlinewidth  Width of the outline. 
     * @returns [The width of the text. Same value as if you were calling {{LibraryFunction|surface|GetTextSize}}., The height of the text. Same value as if you were calling {{LibraryFunction|surface|GetTextSize}}.] 
     * !TupleReturn
     */
    function SimpleTextOutlined(Text: string, outlinewidth: number): [number, number];
    
    /**
     * Works like {{LibraryFunction|draw|SimpleText}} but uses a table structure instead.
     * 
     * {{RenderingContext|Function|2D}} 
     * @param textdata  The text properties. See the {{Struct|TextData}} 
     * @returns [Width of drawn text, Height of drawn text] 
     * @example
     * 
     * hook.Add( "HUDPaint", "drawTextExample", function()
     * 	draw.Text( {
     * 		text = "test",
     * 		pos = { 50, 50 }
     * 	} )
     * end )
     * 
     * // Example usage 
     * !TupleReturn
     */
    function Text(textdata: TextData): [number, number];
    
    /**
     * Works like {{LibraryFunction|draw|Text}}, but draws the text as a shadow.
     * 
     * {{RenderingContext|Function|2D}} 
     * @param textdata  The text properties. See {{Struct|TextData}} 
     * @param distance  How far away the shadow appears. 
     * @param alpha [=200] How visible the shadow is (0-255). 
     */
    function TextShadow(textdata: TextData, distance: number, alpha?: number): void;
    
    /**
     * Draws a texture with a table structure.
     * 
     * {{RenderingContext|Function|2D}} 
     * @param texturedata  The texture properties. See {{Struct|TextureData}} 
     * @example
     * 
     * local TexturedQuadStructure = {
     * 	texture = surface.GetTextureID( 'phoenix_storms/amraam' ),
     * 	color   = Color( 255, 0, 255, 255 ),
     * 	x 	= 0,
     * 	y 	= 0,
     * 	w 	= 512,
     * 	h 	= 512
     * }
     * draw.TexturedQuad( TexturedQuadStructure )
     * 
     * // Example usage 
     */
    function TexturedQuad(texturedata: TextureData): void;
    
    /**
     * Draws a rounded box with text in it.
     * 
     * {{RenderingContext|Function|2D}} 
     * @param bordersize  Size of border, should be multiple of 2. Ideally this will be 8 or 16. 
     * @param x  The X Coordinate. 
     * @param y  The Y Coordinate. 
     * @param text  Text to draw. 
     * @param font  Font to draw in. See {{LibraryFunction|surface|CreateFont}} to create your own, or [[Default_Fonts|here]] for a list of default fonts. 
     * @param boxcolor  The box color. Uses the {{Struct|Color}}. 
     * @param textcolor  The text color. Uses the {{Struct|Color}}. 
     * @returns [The width of the word box., The height of the word box.] 
     * !TupleReturn
     */
    function WordBox(bordersize: number, x: number, y: number, text: string, font: string, boxcolor: Color, textcolor: Color): [number, number];
}

/**
 * DRGBPicker is an interactive panel which can be used to select a color hue.
 * 
 * See {{Type|DColorCube}} for a color picker which controls brightness and saturation.
 * 
 * See {{Type|DColorMixer}} for a color picker that allows control over hue, saturation, and brightness at once. 
 * @example
 * 
 * // Background panel
 * BGPanel = vgui.Create("DPanel")
 * BGPanel:SetSize(100, 200)
 * BGPanel:Center()
 * 
 * // Color picker
 * local color_picker = vgui.Create("DRGBPicker", BGPanel)
 * color_picker:SetPos(35, 10)
 * color_picker:SetSize(30, 180)
 * 
 * // When the picked color is changed...
 * function color_picker:OnChange(col)
 * 
 * 	// Change the panel background color
 * 	BGPanel:SetBackgroundColor(col)
 * 	
 * end
 * 
 * // Creates a color picker which controls the color of the background panel it's parented to.@example
 * 
 * // Background panel
 * BGPanel = vgui.Create("DPanel")
 * BGPanel:SetSize(200, 200)
 * BGPanel:Center()
 * 
 * // Color label
 * local color_label = Label("Color( 255, 255, 255 )", BGPanel)
 * color_label:SetPos(40, 160)
 * color_label:SetSize(150, 20)
 * color_label:SetHighlight(true)
 * color_label:SetColor(Color(0, 0, 0))
 * 
 * // Color picker
 * local color_picker = vgui.Create("DRGBPicker", BGPanel)
 * color_picker:SetPos(5, 5)
 * color_picker:SetSize(30, 190)
 * 
 * // Color cube
 * local color_cube = vgui.Create("DColorCube", BGPanel)
 * color_cube:SetPos(40, 5)
 * olor_cube:SetSize(155, 155)
 * 
 * // When the picked color is changed...
 * function color_picker:OnChange(col)
 * 	
 * 	// Get the hue of the RGB picker and the saturation and vibrance of the color cube
 * 	local h = ColorToHSV(col)
 * 	local _, s, v = ColorToHSV(color_cube:GetRGB())
 * 	
 * 	// Mix them together and update the color cube
 * 	col = HSVToColor(h, s, v)
 * 	color_cube:SetColor(col)
 * 	
 * 	// Lastly, update the background color and label
 * 	UpdateColors(col)
 * 		
 * end
 * 
 * function color_cube:OnUserChanged(col)
 * 
 * 	// Update background color and label
 * 	UpdateColors(col)
 * 
 * end
 * 
 * // Updates display colors, label, and clipboard text
 * function UpdateColors(col)
 * 
 * 	BGPanel:SetBackgroundColor(col)
 * 	color_label:SetText("Color( "..col.r..", "..col.g..", "..col.b.." )")
 * 	color_label:SetColor(Color((255-col.r), (255-col.g), (255-col.b)))
 * 	SetClipboardText(color_label:GetText())
 * 
 * end
 * 
 * // Creates a DRGBPicker that controls the hue of  a {{Type|DColorCube}}, which outputs the color to the background panel, label, and your copy/paste buffer. 
 */
declare class DRGBPicker extends DPanel {
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Returns the color at given position on the internal texture. 
     * @param x  The X coordinate on the texture to get the color from 
     * @param y  The Y coordinate on the texture to get the color from 
     * @returns [{{Struct|Color}}, The X-coordinate clamped to the texture's width., The Y-coordinate clamped to the texture's height.] 
     * !TupleReturn
     */
    public GetPosColor(x: number, y: number): [Color, number, number];
    
    /**
     * Returns the color currently set on the color picker. 
     * @returns The color set on the color picker, see {{Struct|Color}}. 
     * @example
     * 
     * local color_picker = vgui.Create("DRGBPicker")
     * color_picker:SetSize(25, 150)
     * color_picker:Center()
     * 
     * print(color_picker:GetRGB())
     * 
     * // Prints out the default set color. 
     */
    public GetRGB(): Color;
    
    /**
     * Function which is called when the cursor is clicked and/or moved on the color picker. Meant to be overridden. 
     * @param col  The color that is selected on the color picker ({{Struct|Color}} form). 
     * @example
     * 
     * // Frame
     * MainFrame = vgui.Create("DFrame")
     * MainFrame:SetSize(200, 200)
     * MainFrame:Center()
     * MainFrame:SetTitle("Pick a color")
     * 
     * // Image of a ball
     * local ball_img = vgui.Create("DImage", MainFrame)
     * ball_img:SetPos(20, 45)
     * ball_img:SetSize(128, 128)
     * 
     * ball_img:SetImage("sprites/sent_ball")
     * 
     * // Vertical color picker
     * local color_picker = vgui.Create("DRGBPicker", MainFrame)
     * color_picker:SetPos(165, 30)
     * color_picker:SetSize(25, 150)
     * 
     * function color_picker:OnChange(col)
     * 
     * 	ball_img:SetImageColor(col)
     * 	
     * end
     * 
     * // Creates a color picker which controls the color of a ball image. 
     */
    public OnChange(col: Color): void;
    
    /**
     * Sets the color stored in the color picker.
     * 
     * **Note:**
     * >This function is meant to be called internally and will not update the position of the color picker line or call {{ClassFunction|DRGBPicker|OnChange}} 
     * @param color  The color to set, see {{Struct|Color}}. 
     * @example
     * 
     * // Background panel
     * BGPanel = vgui.Create("DPanel")
     * BGPanel:SetSize(100, 200)
     * BGPanel:Center()
     * 
     * // Color picker
     * local color_picker = vgui.Create("DRGBPicker", BGPanel)
     * color_picker:SetSize(30, 150)
     * color_picker:Center()
     * 
     * // Custom function that sets color picker position and updates color
     * function color_picker:SetColor(col)
     * 
     * 	// Get hue
     * 	local h = ColorToHSV(col)
     * 	
     * 	// Maximize saturation and vibrance
     * 	col = HSVToColor(h, 1, 1)
     * 
     * 	// Set color var
     * 	self:SetRGB(col)
     * 	
     * 	// Calculate position of color picker line
     * 	local _, height = self:GetSize()
     * 	self.LastY = height*(1-(h/360))
     * 	
     * 	// Register that a change has occured
     * 	self:OnChange(self:GetRGB())
     * 
     * end
     * 
     * // Update background color
     * function color_picker:OnChange(col)
     * 
     * 	BGPanel:SetBackgroundColor(col)
     * 
     * end
     * 
     * // Set to random color every second for 10 seconds
     * timer.Create("RandomizeColorPicker", 1, 10, function ()
     * 
     * 	color_picker:SetColor(Color(math.random(0, 255), math.random(0, 255), math.random(0, 255), 255))
     * 	
     * end)
     * 
     * // Defines a new function SetColor which will allow proper modification of the color picker directly. 
     */
    public SetRGB(color: Color): void;
}

/**
 * The drive library is for adding custom control modes to the new "remote control" entity piloting system in Garry's Mod 13. 
 */
declare namespace drive {
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Optionally alter the view. 
     * @param ply  The player 
     * @param view  The view, see {{Struct|ViewData}} 
     * @returns true if succeeded 
     */
    function CalcView(ply: Player, view: ViewData): boolean;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Clientside, the client creates the cmd (usercommand) from their input device (mouse, keyboard) and then it's sent to the server. Restrict view angles here. 
     * @param cmd  The user command 
     * @returns true if succeeded 
     */
    function CreateMove(cmd: CUserCmd): boolean;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Destroys players current driving method. 
     * @param ply  The player to affect 
     */
    function DestroyMethod(ply: Player): void;
    
    /**
     * Player has stopped driving the entity. 
     * @param ply  The player 
     * @param ent  The entity 
     */
    function End(ply: Player, ent: Entity): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * The move is finished. Copy mv back into the target. 
     * @param ply  The player 
     * @param mv  The move data 
     * @returns true if succeeded 
     */
    function FinishMove(ply: Player, mv: CMoveData): boolean;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Returns ( or creates if inexistent ) a driving method. 
     * @param ply  The player 
     * @returns A method object. 
     */
    function GetMethod(ply: Player): table;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * The move is executed here. 
     * @param ply  The player 
     * @param mv  The move data 
     * @returns true if succeeded 
     */
    function Move(ply: Player, mv: CMoveData): boolean;
    
    /**
     * Starts driving for the player. 
     * @param ply  The player to affect 
     * @param ent  The entity to drive 
     * @param mode  The driving mode 
     */
    function PlayerStartDriving(ply: Player, ent: Entity, mode: string): void;
    
    /**
     * Stops the player from driving anything. ( For example a prop in sandbox ) 
     * @param ply  The player to affect 
     */
    function PlayerStopDriving(ply: Player): void;
    
    /**
     * Registers a new entity drive. 
     * @param name  The name of the drive. 
     * @param data  The data required to create the drive. This includes the functions used by the drive. 
     * @param base  The base of the drive. 
     * @example
     * 
     * drive.Register( "drive_noclip", 
     * {
     * 	//
     * 	// Called before each move. You should use your entity and cmd to 
     * 	// fill mv with information you need for your move.
     * 	//
     * 	StartMove =  function( self, mv, cmd )
     * 
     * 		//
     * 		// Update move position and velocity from our entity
     * 		//
     * 		mv:SetOrigin( self.Entity:GetNetworkOrigin() )
     * 		mv:SetVelocity( self.Entity:GetAbsVelocity() )
     * 
     * 	end,
     * 
     * 	//
     * 	// Runs the actual move. On the client when there's 
     * 	// prediction errors this can be run multiple times.
     * 	// You should try to only change mv.
     * 	//
     * 	Move = function( self, mv )
     * 
     * 		//
     * 		// Set up a speed, go faster if shift is held down
     * 		//
     * 		local speed = 0.0005 * FrameTime()
     * 		if ( mv:KeyDown( IN_SPEED ) ) then speed = 0.005 * FrameTime() end
     * 
     * 		//
     * 		// Get information from the movedata
     * 		//
     * 		local ang = mv:GetMoveAngles()
     * 		local pos = mv:GetOrigin()
     * 		local vel = mv:GetVelocity()
     * 
     * 		//
     * 		// Add velocities. This can seem complicated. On the first line
     * 		// we're basically saying get the forward vector, then multiply it
     * 		// by our forward speed (which will be > 0 if we're holding W, < 0 if we're
     * 		// holding S and 0 if we're holding neither) - and add that to velocity.
     * 		// We do that for right and up too, which gives us our free movement.
     * 		//
     * 		vel = vel + ang:Forward() * mv:GetForwardSpeed() * speed
     * 		vel = vel + ang:Right() * mv:GetSideSpeed() * speed
     * 		vel = vel + ang:Up() * mv:GetUpSpeed() * speed
     * 
     * 		//
     * 		// We don't want our velocity to get out of hand so we apply
     * 		// a little bit of air resistance. If no keys are down we apply
     * 		// more resistance so we slow down more.
     * 		//
     * 		if ( math.abs(mv:GetForwardSpeed()) + math.abs(mv:GetSideSpeed()) + math.abs(mv:GetUpSpeed()) < 0.1 ) then
     * 			vel = vel * 0.90
     * 		else
     * 			vel = vel * 0.99
     * 		end
     * 
     * 		//
     * 		// Add the velocity to the position (this is the movement)
     * 		//
     * 		pos = pos + vel
     * 
     * 		//
     * 		// We don't set the newly calculated values on the entity itself
     * 		// we instead store them in the movedata. These get applied in FinishMove.
     * 		//
     * 		mv:SetVelocity( vel )
     * 		mv:SetOrigin( pos )
     * 
     * 	end,
     * 
     * 	//
     * 	// The move is finished. Use mv to set the new positions
     * 	// on your entities/players.
     * 	//
     * 	FinishMove =  function( self, mv )
     * 
     * 		//
     * 		// Update our entity!
     * 		//
     * 		self.Entity:SetNetworkOrigin( mv:GetOrigin() )
     * 		self.Entity:SetAbsVelocity( mv:GetVelocity() )
     * 		self.Entity:SetAngles( mv:GetMoveAngles() )
     * 
     * 		//
     * 		// If we have a physics object update that too. But only on the server.
     * 		//
     * 		if ( SERVER && IsValid( self.Entity:GetPhysicsObject() ) ) then
     * 
     * 			self.Entity:GetPhysicsObject():EnableMotion( true )
     * 			self.Entity:GetPhysicsObject():SetPos( mv:GetOrigin() );
     * 			self.Entity:GetPhysicsObject():Wake()
     * 			self.Entity:GetPhysicsObject():EnableMotion( false )
     * 
     * 		end
     * 
     * 	end,
     * 
     * 	//
     * 	// Calculates the view when driving the entity
     * 	//
     * 	CalcView =  function( self, view )
     * 
     * 		//
     * 		// Use the utility method on drive_base.lua to give us a 3rd person view
     * 		//
     * 		local idealdist = math.max( 10, self.Entity:BoundingRadius() ) * 4
     * 
     * 		self:CalcView_ThirdPerson( view, idealdist, 2, { self.Entity } )
     * 
     * 	end,
     * 
     * }, "drive_base" );
     * 
     * // Adds a noclip drive type. 
     */
    function Register(name: string, data: table, base: string): void;
    
    /**
     * Called when the player first starts driving this entity 
     * @param ply  The player 
     * @param ent  The entity 
     */
    function Start(ply: Player, ent: Entity): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * The user command is received by the server and then converted into a move. This is also run clientside when in multiplayer, for prediction to work. 
     * @param ply  The player 
     * @param mv  The move data 
     * @param cmd  The user command 
     * @returns true if succeeded 
     */
    function StartMove(ply: Player, mv: CMoveData, cmd: CUserCmd): boolean;
}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * An internal panel used by {{Type|DVScrollBar}} as the grip (middle) part of the scrollbar. 
 */
declare class DScrollBarGrip extends DPanel {

}

/**
 * DScrollPanel is a VGUI Element similar to DPanel however it has a vertical scrollbar docked to the right which can be used to put more content in a smaller area. DScrollPanels are essentially {{Type|DPanel}}s with the Scroll Bar.
 * 
 * This can be used to replace the {{Type|DPanelList}} with {{ClassFunction|DPanelList|EnableVerticalScrollbar}} and get similar functionality as well as using a non-deprecated element.
 * 
 * If you would like to paint or edit the elements of the scrollbar use {{VGUIElementMethodInternal|GetVBar}}. If you want to see if the scrollbar is visible then use the VBar.Enabled variable on the scrollbar's VBar.
 * 
 * **Note:**
 * >{{ClassFunction|Panel|DockPadding}} will not have an effect on children of this panel. Use the function on {{ClassFunction|DScrollPanel|GetCanvas}} instead. 
 * @example
 * 
 * local frame = vgui.Create( "DFrame" )
 * frame:SetSize( 500, 500 )
 * frame:Center()
 * frame:MakePopup()
 * 
 * local DScrollPanel = vgui.Create( "DScrollPanel", frame )
 * DScrollPanel:Dock( FILL )
 * 
 * for i=0, 100 do
 * 	local DButton = DScrollPanel:Add( "DButton" )
 * 	DButton:SetText( "Button #" .. i )
 * 	DButton:Dock( TOP )
 * 	DButton:DockMargin( 0, 0, 0, 5 )
 * end
 * 
 * // Creates a {{Type|DScrollPanel}} and adds 100 {{Type|DButton}}s to it. 
 */
declare class DScrollPanel extends DPanel {
    /**
     * Parents the passed panel to the DScrollPanel's canvas. 
     * @param pnl  The panel to add. 
     */
    public AddItem(pnl: Panel): void;
    
    /**
     * Returns the canvas ( The panel all child panels are parented to ) of the DScrollPanel. 
     * @returns The canvas 
     */
    public GetCanvas(): Panel;
    
    /**
     * Gets the DScrollPanels padding 
     * @returns DScrollPanels padding 
     */
    public GetPadding(): number;
    
    /**
     * Returns the vertical scroll bar of the panel. 
     * @returns The {{Type|DVScrollBar}}. 
     * @example
     * 
     * local DFrame = vgui.Create("DFrame")
     * DFrame:SetSize(500, 500)
     * DFrame:Center()
     * DFrame:MakePopup()
     * DFrame:SetTitle("Scrollbar Example")
     * function DFrame:Paint(w, h)
     * 	draw.RoundedBox(0, 0, 0, w, h, Color(0, 100, 100))
     * end
     * 
     * local DScrollPanel = vgui.Create("DScrollPanel", DFrame)
     * DScrollPanel:SetSize(400, 250)
     * DScrollPanel:Center()
     * 
     * local sbar = DScrollPanel:GetVBar()
     * function sbar:Paint(w, h)
     * 	draw.RoundedBox(0, 0, 0, w, h, Color(0, 0, 0, 100))
     * end
     * function sbar.btnUp:Paint(w, h)
     * 	draw.RoundedBox(0, 0, 0, w, h, Color(200, 100, 0))
     * end
     * function sbar.btnDown:Paint(w, h)
     * 	draw.RoundedBox(0, 0, 0, w, h, Color(200, 100, 0))
     * end
     * function sbar.btnGrip:Paint(w, h)
     * 	draw.RoundedBox(0, 0, 0, w, h, Color(100, 200, 0))
     * end
     * 
     * local str = ""
     * for i = 1, 50 do str = str .. "more space!\n" end
     * 
     * local DLabel = vgui.Create("DLabel", DScrollPanel)
     * DLabel:SetText(str)
     * DLabel:Center()
     * DLabel:SizeToContents()
     * 
     * // Example of styling a scrollbar 
     */
    public GetVBar(): DVScrollBar;
    
    /**
     * Return the width of the DScrollPanel's canvas. 
     * @returns The width of the DScrollPanel's canvas 
     */
    public InnerWidth(): number;
    
    /**
     */
    public Rebuild(): void;
    
    /**
     * Scrolls to the given child 
     * @param panel  The panel to scroll to, must be a child of the DScrollPanel. 
     */
    public ScrollToChild(panel: Panel): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Sets the canvas of the DScrollPanel. 
     * @param canvas  The new canvas 
     */
    public SetCanvas(canvas: Panel): void;
    
    /**
     * Sets the DScrollPanel's padding. This function appears to be unused. 
     * @param padding  The padding of the DScrollPanel. 
     */
    public SetPadding(padding: number): void;
}

/**
 * Draw a shape on a derma panel. Only one kind of shape, a rectangle, is available for use. 
 * @example
 * 
 * local Frame = vgui.Create( "DFrame" ) // Create a frame 
 * Frame:SetTitle( "Test panel" )
 * Frame:SetSize(400,400)
 * Frame:Center()			
 * Frame:MakePopup()
 * 
 * local Shape = vgui.Create( "DShape", Frame )
 * Shape:SetType( "Rect" ) // This is the only type it can be
 * Shape:SetPos( 100, 100 ) 
 * Shape:SetColor( Color(0, 255, 0, 255) )
 * Shape:SetSize( 200, 200 )
 * 
 * // Creates the DShape rectangle within a small popup frame 
 */
declare class DShape extends DPanel {
    /**
     * Returns the current type of shape this panel is set to display.
     * 
     * See {{ClassFunction|DShape|SetBorderColor}}. 
     * @returns The border color 
     * 
     * See {{Struct|Color}} 
     */
    public GetBorderColor(): Color;
    
    /**
     * Returns the color set to display the shape with. 
     * @returns The {{Struct|Color}} 
     */
    public GetColor(): Color;
    
    /**
     * Returns the current type of shape this panel is set to display.
     * 
     * See {{ClassFunction|DShape|SetType}}. 
     * @returns 
     */
    public GetType(): string;
    
    /**
     * Sets the border color of the shape.
     * 
     * Currently does nothing. 
     * @param clr  The desired border color.
     * 
     * See {{Struct|Color}} 
     */
    public SetBorderColor(clr: Color): void;
    
    /**
     * Sets the color to display the shape with. 
     * @param clr  The {{Struct|Color}} 
     */
    public SetColor(clr: Color): void;
    
    /**
     * Sets the shape to be drawn. 
     * @param type  The render type of the DShape. Only rectangles (''Rect'') work currently. If you don't define a type immediately, the {{HookFunction|PANEL|Paint}} method will generate errors until you do. 
     * @example
     * 
     * local Shape = vgui.Create( "DShape" )
     * Shape:SetType( "Rect" )
     * Shape:SetSize(500,500)
     * Shape:SetPos(10, 10)
     * 
     * // Creates a DShape and sets the render type. 
     */
    public SetType(type: string): void;
}

/**
 * A helper panel that will automatically resize itself to fit all its children using {{ClassFunction|Panel|SizeToChildren}}. 
 */
declare class DSizeToContents extends Panel {

}

/**
 * Creates a slider that can be moved along the X and/or Y axis 
 * @example
 * 
 * local frame = vgui.Create( "DFrame" )
 * frame:SetSize( 500, 300 )
 * frame:Center()
 * frame:MakePopup()
 * 
 * local Slider = vgui.Create( "DSlider", frame )
 * Slider:SetPos( 50, 50 )
 * Slider:SetSize( 100, 20 )
 * 
 * // Make a slider at 50, 50 that can move 100 pixels on the X axis. 
 */
declare class DSlider extends DPanel {
    /**
     * Identical to {{ClassFunction|DSlider|IsEditing}} 
     * @returns 
     */
    public GetDragging(): boolean;
    
    /**
     * Returns the draggable panel's lock on the X axis.
     * 
     * See {{ClassFunction|DSlider|SetLockX}} for more info. 
     * @returns 
     */
    public GetLockX(): number;
    
    /**
     * Returns the draggable panel's lock on the Y axis.
     * 
     * See {{ClassFunction|DSlider|SetLockY}} for more info. 
     * @returns 
     */
    public GetLockY(): number;
    
    /**
     * **Deprecated!**
     * 
     * Appears to be non functioning, however is still used by panels such as {{Type|DNumSlider}}. 
     * @returns 
     */
    public GetNotches(): number;
    
    /**
     * **Deprecated!**
     * 
     * Does nothing. 
     * @returns 
     */
    public GetNumSlider(): any;
    
    /**
     * Returns the target position of the draggable "knob" panel of the slider on the X axis.
     * 
     * Set by {{ClassFunction|DSlider|SetSlideX}}. 
     * @returns The value range seems to be from 0 to 1 
     */
    public GetSlideX(): number;
    
    /**
     * Returns the target position of the draggable "knob" panel of the slider on the Y axis.
     * 
     * Set by {{ClassFunction|DSlider|SetSlideY}}. 
     * @returns The value range seems to be from 0 to 1 
     */
    public GetSlideY(): number;
    
    /**
     * **Deprecated!**
     * 
     * Appears to be non functioning, however is still used by panels such as {{Type|DNumSlider}}. 
     * @returns 
     */
    public GetTrapInside(): boolean;
    
    /**
     * Returns true if this element is being edited by the player. 
     * @returns 
     */
    public IsEditing(): boolean;
    
    /**
     * Sets the background for the slider. 
     * @param path  Path to the image. 
     */
    public SetBackground(path: string): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Sets whether or not the slider is being dragged. 
     * @param dragging 
     */
    public SetDragging(dragging: boolean): void;
    
    /**
     * **Deprecated!**
     * 
     * Does nothing. 
     */
    public SetImage(): void;
    
    /**
     * **Deprecated!**
     * 
     * Does nothing. 
     */
    public SetImageColor(): void;
    
    /**
     * Sets the lock on the X axis. 
     * 
     * For example the value 0.5 will lock the draggable panel to half the width of the slider's panel. 
     * @param lockX [=nil] Set to nil to reset lock.
     * 
     * The value range is from 0 to 1. 
     * @example
     * 
     * local frame = vgui.Create( "DFrame" )
     * frame:SetSize( 500, 300 )
     * frame:Center()
     * frame:MakePopup()
     * 
     * local Slider = vgui.Create( "DSlider", frame )
     * Slider:SetPos( 50, 50 )
     * Slider:SetSize( 100, 100 )
     * Slider:SetLockX()
     * Slider:SetLockY()
     * 
     * // Example of a slider that can be dragged on the X and Y axis. 
     */
    public SetLockX(lockX?: number): void;
    
    /**
     * Sets the lock on the Y axis. 
     * 
     * For example the value 0.5 will lock the draggable panel to half the height of the slider's panel. 
     * @param lockY [=nil] Set to nil to reset lock.
     * 
     * The value range is from 0 to 1. 
     */
    public SetLockY(lockY?: number): void;
    
    /**
     * **Deprecated!**
     * 
     * Appears to be non functioning, however is still used by panels such as {{Type|DNumSlider}}. 
     * @param notches 
     */
    public SetNotches(notches: number): void;
    
    /**
     * **Deprecated!**
     * 
     * Does nothing. 
     * @param slider 
     */
    public SetNumSlider(slider: any): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Used to position the draggable panel of the slider on the X axis. 
     * @param x  The value range seems to be from 0 to 1 
     */
    public SetSlideX(x: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Used to position the draggable panel of the slider on the Y axis. 
     * @param y  The value range seems to be from 0 to 1 
     */
    public SetSlideY(y: number): void;
    
    /**
     * **Deprecated!**
     * 
     * Appears to be non functioning, however is still used by panels such as {{Type|DNumSlider}}. 
     * @param trap 
     */
    public SetTrapInside(trap: boolean): void;
    
    /**
     * For override by child panels, such as {{Type|DNumSlider}}. 
     * @param x 
     * @param y 
     * @returns [x, y] 
     * !TupleReturn
     */
    public TranslateValues(x: number, y: number): [number, number];
}

/**
 * A panel that draws a sprite on the player's HUD with the given {{Type|IMaterial}}, {{GlobalFunction|Color}} and rotation.
 * 
 * A shortcut for this is {{GlobalFunction|CreateSprite}}(). 
 * !CustomConstructor CreateSprite * @example
 * 
 * local sprite = vgui.Create("DSprite")
 * sprite:SetMaterial(Material("sprites/sent_ball"))
 * sprite:SetColor(Color(0, 255, 255))
 * sprite:Center()
 * sprite:SetSize(200, 200)
 * 
 * // Creates a DSprite with the ''sent_ball'' material, and sets the color to cyan. 
 */
declare class DSprite extends DPanel {
    /**
     * Creates and returns a new {{Type|DSprite}} element with the supplied material. 
     * @param material  Material the sprite should draw. 
     */
    public constructor(material: IMaterial);
    
    /**
     * Gets the color the sprite is using as a modifier. 
     * @returns The {{GlobalFunction|Color}} being used. 
     */
    public GetColor(): table;
    
    /**
     * @returns 
     */
    public GetHandle(): Vector;
    
    /**
     * Gets the material the sprite is using. 
     * @returns The material in use. 
     */
    public GetMaterial(): IMaterial;
    
    /**
     * Gets the 2D rotation angle of the sprite, in the plane of the screen. 
     * @returns The anti-clockwise rotation in degrees. 
     */
    public GetRotation(): number;
    
    /**
     * Sets the color modifier for the sprite. 
     * @param color  The {{GlobalFunction|Color}} to use. 
     */
    public SetColor(color: table): void;
    
    /**
     * {{Stub}}
     * 
     * Seems to be an unused feature. Does nothing. 
     * @param vec 
     */
    public SetHandle(vec: Vector): void;
    
    /**
     * Sets the source material for the sprite. 
     * @param material  The material to use. This will ideally be an [https://developer.valvesoftware.com/wiki/UnlitGeneric UnlitGeneric]. 
     */
    public SetMaterial(material: IMaterial): void;
    
    /**
     * Sets the 2D rotation angle of the sprite, in the plane of the screen. 
     * @param ang  The anti-clockwise rotation in degrees. 
     */
    public SetRotation(ang: number): void;
}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * A tab for internal use on the DPropertySheet. 
 */
declare class DTab extends DButton {

}

/**
 * A form which may be used to display text the player is meant to select and copy or alternately allow them to enter some text of their own . Do note that at least one of your DTextEntry's parents must either be an {{Type|EditablePanel}} or derived from it (like a {{Type|DFrame}}, for example), else it won't be able to focus and thus be unselectable. You must also call {{ClassFunction|Panel|MakePopup}} on said panel or the DTextEntry will not work.
 * 
 * **Bug [#1588](https://github.com/Facepunch/garrysmod-issues/issues/1588):**
 * >This does not clear out previously-pasted text properly. 
 * @example
 * 
 * local frame = vgui.Create( "DFrame" )
 * frame:SetSize( 400, 200 )
 * frame:Center()
 * frame:MakePopup()
 * 
 * local TextEntry = vgui.Create( "DTextEntry", frame ) // create the form as a child of frame
 * TextEntry:SetPos( 25, 50 )
 * TextEntry:SetSize( 75, 85 )
 * TextEntry:SetText( "Placeholder Text" )
 * TextEntry.OnEnter = function( self )
 * 	chat.AddText( self:GetValue() )	// print the form's text as server text
 * end
 * 
 * // Creates a text entry form that allows you to print messages into the local player's chat window. 
 */
declare class DTextEntry extends TextEntry {
    /**
     * Called whenever the value of the panel has been updated (whether by user input or otherwise).
     * 
     * It allows you to determine whether a user can modify the {{Type|TextEntry}}'s text.
     * 
     * By default, this only checks whether the panel disallows numeric characters, preventing it from being edited if the value contains any.
     * 
     * This is actually an engine hook that only works on {{Type|TextEntry}} derived elements. 
     * @param char  The last character entered into the panel. 
     * @returns Return true to prevent the value from changing, false to allow it. 
     * @example
     * 
     * local TextEntry = vgui.Create( "DTextEntry" )
     * TextEntry.AllowInput = function( self, stringValue )
     * 	return true
     * end
     * 
     * // Prevents the user from editing the text entirely. 
     */
    public AllowInput(char: string): boolean;
    
    /**
     * Returns whether a string is numeric or not.
     * Always returns false if the {{ClassFunction|DTextEntry|SetNumeric}} is set to false. 
     * @param strValue  The string to check. 
     * @returns Whether the string is numeric or not. 
     */
    public CheckNumeric(strValue: string): boolean;
    
    /**
     * Returns the cursor color of a DTextEntry. 
     * @returns The color of the cursor as a {{Struct|Color}}. 
     * @example
     * 
     * local TextEntry = vgui.Create( "DTextEntry" )
     * TextEntry:SetCursorColor( Color( 255, 0, 0, 255 ))
     * PrintTable( TextEntry:GetCursorColor() )
     * 
     * // 
     */
    public GetCursorColor(): Color;
    
    /**
     * Returns whether only numeric characters (123456789.-) can be entered into the DTextEntry. 
     * @returns Whether the DTextEntry is numeric or not. 
     */
    public GetNumeric(): boolean;
    
    /**
     * Returns the text color of a DTextEntry. 
     * @returns The color of the text as a {{Struct|Color}}. 
     * @example
     * 
     * local TextEntry = vgui.Create( "DTextEntry" )
     * TextEntry:SetTextColor( Color( 255, 0, 0, 255 ))
     * PrintTable( TextEntry:GetTextColor() )
     * 
     * // 
     */
    public GetTextColor(): Color;
    
    /**
     * Returns whether the {{Type|DTextEntry}} is set to run {{ClassFunction|DTextEntry|OnValueChange}} every time a character is typed or deleted or only when Enter is pressed. 
     * @returns 
     */
    public GetUpdateOnType(): boolean;
    
    /**
     * Returns whether this DTextEntry is being edited or not. (i.e. has focus) 
     * @returns Whether this DTextEntry is being edited or not 
     */
    public IsEditing(): boolean;
    
    /**
     * Called internally by {{ClassFunction|DTextEntry|OnTextChanged}} when the user modifies the text in the DTextEntry.
     * 
     * You should override this function to define custom behavior when the DTextEntry text changes. 
     */
    public OnChange(): void;
    
    /**
     * Called whenever enter is pressed on a DTextEntry.
     * 
     * **Note:**
     * >{{ClassFunction|DTextEntry|IsEditing}} will still return true in this callback! 
     * @example
     * 
     * local TextEntry = vgui.Create( "DTextEntry" )
     * TextEntry:SetTextColor( Color( 255, 0, 0, 255 ) )
     * 
     * TextEntry.OnEnter = function()
     *     TextEntry:SetTextColor( Color( 0, 0, 255, 255 ) )
     * end
     * 
     * // 
     */
    public OnEnter(): void;
    
    /**
     * Called whenever a valid character is typed while the text entry is focused.
     * 
     * **Note:**
     * >This hook only works on panels derived from {{Type|TextEntry}}, such as {{Type|DTextEntry}}. 
     * @param keyCode  They key code of the key pressed, see {{Enum|KEY}}. 
     * @returns Whether you've handled the key press. Returning true prevents the default text entry behavior from occurring. 
     */
    public OnKeyCodeTyped(keyCode: KEY): boolean;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called internally when the text inside the DTextEntry changes.
     * 
     * You should not override this function. Use {{ClassFunction|DTextEntry|OnValueChange}} instead. 
     * @param noMenuRemoval  Determines whether to remove the autocomplete menu (false) or not (true). 
     */
    public OnTextChanged(noMenuRemoval: boolean): void;
    
    /**
     * Called internally when the text changes of the {{Type|DTextEntry}} are applied. (And set to the attached console variable, if one is given)
     * 
     * See also {{ClassFunction|DTextEntry|OnChange}} for a function that is called on every text change, even if the console variable is not updated.
     * 
     * You should override this function to define custom behavior when the text changes.
     * 
     * This method is called:
     * * When Enter is pressed after typing
     * * When {{ClassFunction|DTextEntry|SetValue}} is used
     * * For every key typed - only if {{ClassFunction|DTextEntry|SetUpdateOnType}} was set to true (default is false) 
     * @param value  The DTextEntry text. 
     */
    public OnValueChange(value: string): void;
    
    /**
     * **Deprecated:**
     * >Use {{ClassFunction|Panel|SetEnabled}} instead.
     * 
     * Disables input on a DTextEntry and greys it out visually. This differs from {{ClassFunction|DTextEntry|SetEditable}} which doesn't visually change the textbox. 
     * @param disabled  Whether the textbox should be disabled 
     */
    public SetDisabled(disabled: boolean): void;
    
    /**
     * Disables Input on a DTextEntry. This differs from {{ClassFunction|DTextEntry|SetDisabled}} - SetEditable will not affect the appearance of the textbox. 
     * @param enabled  Whether the DTextEntry should be editable 
     * @example
     * 
     * local TextEntry = vgui.Create( "DTextEntry", frame ) // create the form as a child of frame
     * TextEntry:SetPos( 25, 50 )
     * TextEntry:SetSize( 75, 85 )
     * TextEntry:SetText( "Sample String" )
     * TextEntry:SetEditable ( false)
     * 
     * // 
     */
    public SetEditable(enabled: boolean): void;
    
    /**
     * Changes the font of the DTextEntry. 
     * @param font  The name of the font to be changed to. 
     * @example
     * 
     * local textentry = vgui.Create("DTextEntry")
     * textentry:SetFont("DermaDefault")
     * 
     * // Restores the original font the the DTextEntry. 
     */
    public SetFont(font: string): void;
    
    /**
     * Sets whether or not to decline non-numeric characters as input.
     * 
     * Numeric characters are 1234567890.- 
     * @param numericOnly  Whether to accept only numeric characters. 
     * @example
     * 
     * local TextEntry = vgui.Create( "DTextEntry" )
     * TextEntry:SetNumeric(true)
     * 
     * // 
     */
    public SetNumeric(numericOnly: boolean): void;
    
    /**
     * Allow you to add a hint. 
     * @param text [=nil] 
     */
    public SetPlaceholderText(text?: string): void;
    
    /**
     * Sets whether we should fire {{ClassFunction|DTextEntry|OnValueChange}} every time we type or delete a character or only when Enter is pressed. 
     * @param updateOnType 
     */
    public SetUpdateOnType(updateOnType: boolean): void;
    
    /**
     * Sets the text of the {{Type|DTextEntry}} and calls {{ClassFunction|DTextEntry|OnValueChange}}. 
     * @param text  The value to set. 
     */
    public SetValue(text: string): void;
}

/**
 * Similarly to {{Type|DIconLayout}}, this lays out panels in two dimensions as tiles. The difference between this and {{Type|DIconLayout}} is that {{Type|DIconLayout}} items all have the same height while {{Type|DTileLayout}} items do not have this enforcement. {{Type|DTileLayout}} will find the best way to "pack" its chidren. For example, in a two column layout, a item of height 2 units will be placed in one column while two items of height 1 unit will be placed in the other column. It is worth noting however that because this panel iterates through its children in an undefined order and lays out while it is iterating, there is no guarentee that this packing will lead to the lowest possible height.
 * 
 * This is used by the spawnmenu to arrange spawnicons.
 * 
 * The base size defines the smallest a tile can be, and it will resize vertically to accommodate all child panels. The number of elements in each row is determinded by the base size and width.
 * 
 * It also optionally permits the rearrangement of these tiles. To enable this functionality, call {{ClassFunction|DDragBase|MakeDroppable}} on the DTileLayout with a unique identifier. All panels added following this will be moveable. 
 * @example
 * 
 * local frame = vgui.Create("DFrame")
 * frame:SetSize(300, 300)
 * frame:SetTitle("DTileLayout Example")
 * frame:MakePopup()
 * frame:Center()
 * 
 * local layout = vgui.Create("DTileLayout", frame)
 * layout:SetBaseSize(32) // Tile size
 * layout:Dock(FILL)
 * 
 * //Draw a background so we can see what it's doing
 * layout:SetDrawBackground(true)
 * layout:SetBackgroundColor(Color(0, 100, 100))
 * 
 * layout:MakeDroppable("unique_name") // Allows us to rearrange children
 * 
 * for i = 1, 32 do
 * 	layout:Add(Label(" Label " .. i))
 * end
 * 
 * // Creates a DTileLayout within a {{Type|DFrame}}, sets the base size and adds 32 {{Type|DLabel}}s. 
 */
declare class DTileLayout extends DDragBase {
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Clears the panel's tile table. Used by {{ClassFunction|DTileLayout|LayoutTiles}}. 
     */
    public ClearTiles(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Called to designate a range of tiles as occupied by a panel. 
     * @param x  The x coordinate of the top-left corner of the panel. 
     * @param y  The y coordinate of the top-left corner of the panel. 
     * @param w  The panel's width. 
     * @param h  The panel's height. 
     */
    public ConsumeTiles(x: number, y: number, w: number, h: number): void;
    
    /**
     * Creates and returns an exact copy of the DTileLayout. 
     * @returns The created copy. 
     */
    public Copy(): Panel;
    
    /**
     * Creates copies of all the children from the given panel object and parents them to this one. 
     * @param source  The source panel from which to copy all children. 
     */
    public CopyContents(source: Panel): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Finds the coordinates of the first group of free tiles that fit the given size. 
     * @param x  The x coordinate to start looking from. 
     * @param y  The y coordinate to start looking from. 
     * @param w  The needed width. 
     * @param h  The needed height. 
     * @returns [The x coordinate of the found available space., The y coordinate of the found available space.] 
     * !TupleReturn
     */
    public FindFreeTile(x: number, y: number, w: number, h: number): [number, number];
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Determines if a group of tiles is vacant. 
     * @param x  The x coordinate of the first tile. 
     * @param y  The y coordinate of the first tile. 
     * @param w  The width needed. 
     * @param h  The height needed. 
     * @returns Whether or not this group is available for occupation. 
     */
    public FitsInTile(x: number, y: number, w: number, h: number): boolean;
    
    /**
     * Returns the size of each single tile, set with {{ClassFunction|DTileLayout|SetBaseSize}}. 
     * @returns Base tile size. 
     */
    public GetBaseSize(): number;
    
    /**
     * Returns the border spacing set by {{ClassFunction|DTileLayout|SetBorder}}. 
     * @returns 
     */
    public GetBorder(): number;
    
    /**
     * Returns the minimum height the DTileLayout can resize to. 
     * @returns The minimum height the panel can shrink to. 
     */
    public GetMinHeight(): number;
    
    /**
     * Returns the X axis spacing between 2 elements set by {{ClassFunction|DTileLayout|SetSpaceX}}. 
     * @returns 
     */
    public GetSpaceX(): number;
    
    /**
     * Returns the Y axis spacing between 2 elements set by {{ClassFunction|DTileLayout|SetSpaceY}}. 
     * @returns 
     */
    public GetSpaceY(): number;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Gets the occupied state of a tile. 
     * @param x  The x coordinate of the tile. 
     * @param y  The y coordinate of the tile. 
     * @returns The occupied state of the tile, normally ''1'' or ''nil''. 
     */
    public GetTile(x: number, y: number): any;
    
    /**
     * Resets the last width/height info, and invalidates the panel's layout, causing it to recalculate all child positions. It is called whenever a child is added or removed, and can be called to refresh the panel. 
     */
    public Layout(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Called by {{HookFunction|PANEL|PerformLayout}} to arrange and lay out the child panels, if it has changed in size. 
     */
    public LayoutTiles(): void;
    
    /**
     * Called when anything is dropped on or rearranged within the DTileLayout. 
     */
    public OnModified(): void;
    
    /**
     * Called when anything is dropped on or rearranged within the {{Type|DDragBase}}. 
     */
    public OnModified(): void;
    
    /**
     * Sets the size of a single tile. If a child panel is larger than this size, it will occupy several tiles.
     * 
     * If you are setting the size of the children properly then you probably don't need to change this. 
     * @param size  The size of each tile. It is recommended you use 2<sup>n</sup> (''16, 32, 64...'') numbers, and those above ''4'', as numbers lower than this will result in many tiles being processed and therefore slow operation. 
     */
    public SetBaseSize(size: number): void;
    
    /**
     * Sets the spacing between the border/edge of the {{Type|DTileLayout}} and all the elements inside. 
     * @param border 
     */
    public SetBorder(border: number): void;
    
    /**
     * Determines the minimum height the DTileLayout will resize to. This is useful if child panels will be added/removed often. 
     * @param minH  The minimum height the panel can shrink to. 
     */
    public SetMinHeight(minH: number): void;
    
    /**
     * Sets the spacing between 2 elements in the {{Type|DTileLayout}} on the X axis. 
     * @param spacingX 
     */
    public SetSpaceX(spacingX: number): void;
    
    /**
     * Sets the spacing between 2 elements in the {{Type|DTileLayout}} on the Y axis. 
     * @param spaceY 
     */
    public SetSpaceY(spaceY: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Called to set the occupied state of a tile. 
     * @param x  The x coordinate of the tile. 
     * @param y  The y coordinate of the tile. 
     * @param state  The new state of the tile, normally ''1'' or ''nil''. 
     */
    public SetTile(x: number, y: number, state: any): void;
}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * The panel used internally for tool tips. See {{ClassFunction|Panel|SetTooltip}}. 
 * @example
 * 
 * local DFrame = vgui.Create( "DFrame" )
 * DFrame:SetPos( 100, 100 )
 * DFrame:SetSize( 100, 100 )
 * 
 * local DTooltip = vgui.Create( "DTooltip" )
 * DTooltip:SetPos( 0, 0 )
 * DTooltip:SetSize( 250, 50 )
 * DTooltip:SetText( "Manual Tooltip" )
 * DTooltip:OpenForPanel( DFrame )
 * DTooltip:PositionTooltip()
 * DTooltip.Paint = function()
 * 	draw.RoundedBox( 5, 0, 0, 250, 50, Color( 255, 255, 255, 255 ) )
 * end
 * 
 * // Drawing a Tool Tip manually, then painting over it. 
 */
declare class DTooltip extends DLabel {
    /**
     * Forces the tooltip to close. This will remove the panel. 
     */
    public Close(): void;
    
    /**
     * Used to draw a triangle beneath the {{Type|DTooltip}}
     * **Note:**
     * >Requires {{ClassFunction|DTooltip|SetContents}}, without this it will error 
     * @param x  arrow location on the x axis 
     * @param y  arrow location on the y axis 
     */
    public DrawArrow(x: number, y: number): void;
    
    /**
     * Sets up the tooltip for display for given panel and starts the timer. 
     * @param pnl 
     */
    public OpenForPanel(pnl: Panel): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Positions the {{Type|DTooltip}} so it doesn't stay in the same draw position. 
     */
    public PositionTooltip(): void;
    
    /**
     * What Panel you want put inside of the {{Type|DTooltip}}
     * 
     * **Note:**
     * >You can only have one Panel at a time; use Parenting to add more 
     * @param panel  Contents 
     * @param bDelete [=false] If set to true, the panel in the first argument will be automatically removed when {{Type|DTooltip}} is closed via {{ClassFunction|DTooltip|Close}}. 
     */
    public SetContents(panel: Panel, bDelete?: DTooltip): void;
}

/**
 * A tree view element for Derma.
 * 
 * See also {{Type|DTree_Node}}. 
 * @example
 * 
 * local frame = vgui.Create( "DFrame" )
 * frame:SetSize( 300, 500 )
 * frame:Center()
 * frame:MakePopup()
 * 
 * local dtree  = vgui.Create( "DTree", frame )
 * dtree:Dock( FILL )
 * 
 * local node = dtree:AddNode( "Node One" )
 * local node = dtree:AddNode( "Node Two" )
 * local cnode = node:AddNode( "Node 2.1" )
 * local cnode = node:AddNode( "Node 2.2" )
 * local cnode = node:AddNode( "Node 2.3" )
 * local cnode = node:AddNode( "Node 2.4" )
 * local cnode = node:AddNode( "Node 2.5" )
 * local gcnode = cnode:AddNode( "Node 2.5" )
 * local cnode = node:AddNode( "Node 2.6" )
 * local node = dtree:AddNode( "Node Three ( Maps Folder )" )
 * node:MakeFolder( "maps", "GAME", true )
 * local node = dtree:AddNode( "Node Four" )
 * 
 * // Example of using DTree 
 */
declare class DTree extends DScrollPanel {
    /**
     * Add a node to the DTree 
     * @param name  Name of the option. 
     * @param icon [="icon16/folder.png"] The icon that will show nexto the node in the DTree. 
     * @returns Returns the created {{Type|DTree_Node}} panel. 
     */
    public AddNode(name: string, icon?: string): DTree_Node;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Calls directly to {{ClassFunction|Panel|InvalidateLayout}}.
     * Called by {{Type|DTree_Node}}s when a sub element has been expanded or collapsed.
     * 
     * Used as a placeholder function alongside {{ClassFunction|DTree|ExpandTo}}, {{ClassFunction|DTree|SetExpanded}} and {{ClassFunction|DTree|MoveChildTo}}.
     * 
     * The {{Type|DTree}} acts a root node and methods with the same name in {{Type|DTree_Node}} call to the parent. 
     * @param bExpand 
     */
    public ChildExpanded(bExpand: boolean): void;
    
    /**
     * Called when the any node is clicked. Called by {{ClassFunction|DTree_Node|DoClick}}. 
     */
    public DoClick(): void;
    
    /**
     * Called when the any node is right clicked. Called by {{ClassFunction|DTree_Node|DoRightClick}}. 
     */
    public DoRightClick(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Does nothing. Used as a placeholder empty function alongside {{ClassFunction|DTree|MoveChildTo}}, {{ClassFunction|DTree|SetExpanded}} and {{ClassFunction|DTree|ChildExpanded}}.
     * 
     * The {{Type|DTree}} acts a root node and methods with the same name in {{Type|DTree_Node}} call to the parent. 
     * @param bExpand 
     */
    public ExpandTo(bExpand: boolean): void;
    
    /**
     * Returns the status of {{ClassFunction|DTree|SetClickOnDragHover}}. See that for more info. 
     * @returns 
     */
    public GetClickOnDragHover(): boolean;
    
    /**
     * Returns the indentation size of the {{Type|DTree}}, the distance between each "level" of the tree is offset on the left from the previous level.
     * 
     * Currently this feature has no effect on the {{Type|DTree}} element. 
     * @returns The indentation size. 
     */
    public GetIndentSize(): number;
    
    /**
     * Returns the height of each {{Type|DTree_Node}} in the tree. 
     * @returns The height of each {{Type|DTree_Node}} in the tree. 
     */
    public GetLineHeight(): number;
    
    /**
     * Returns the currently selected node. 
     * @returns Curently selected node. 
     */
    public GetSelectedItem(): Panel;
    
    /**
     * Returns whether or not the [[Silkicons]] next to each node of the DTree will be displayed.
     * 
     * Individual icons can be set with {{ClassFunction|DTree_Node|SetIcon}} or passed as the second argument in {{ClassFunction|DTree|AddNode}}. 
     * @returns Whether or not the silkicons next to each node will be displayed. 
     */
    public GetShowIcons(): boolean;
    
    /**
     * **Deprecated!**
     * 
     * Does nothing. 
     */
    public LayoutTree(): void;
    
    /**
     * Moves given node to the top of {{Type|DTree}}s children. (Makes it the topmost mode)
     * 
     * Used as a placeholder function alongside {{ClassFunction|DTree|ExpandTo}}, {{ClassFunction|DTree|SetExpanded}} and {{ClassFunction|DTree|ChildExpanded}}.
     * 
     * The {{Type|DTree}} acts a root node and methods with the same name in {{Type|DTree_Node}} call to the parent. 
     * @param child  The node to move 
     * @param pos  **Deprecated!**
     *  Unused, does nothing. 
     */
    public MoveChildTo(child: Panel, pos: number): void;
    
    /**
     * This function is called when a node within a tree is selected. 
     * @param node  The node that was selected. 
     */
    public OnNodeSelected(node: Panel): void;
    
    /**
     * Returns the root {{Type|DTree_Node}}, the node that is the parent to all other nodes of the DTree. 
     * @returns Root node. 
     */
    public Root(): Panel;
    
    /**
     * Enables the "click when drag-hovering" functionality.
     * 
     * If enabled, when hovering over any {{Type|DTree_Node}} of this {{Type|DTree}} while dragging a panel, the node will be automatically clicked on (and subsequently {{ClassFunction|DTree|OnNodeSelected}} will be called) to open any attached panels, such as spawnlists in spawnmenu.
     * 
     * See also {{ClassFunction|Panel|DragHoverClick}} 
     * @param enable 
     */
    public SetClickOnDragHover(enable: boolean): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Does nothing. Is not called by the {{Type|DTree}} itself.
     * 
     * Used as a placeholder empty function alongside {{ClassFunction|DTree|ExpandTo}}, {{ClassFunction|DTree|MoveChildTo}} and {{ClassFunction|DTree|ChildExpanded}} to prevent errors when {{ClassFunction|DTree_Node|SetExpanded}} is incorrectly used on a {{Type|DTree}}. 
     * @param bExpand 
     */
    public SetExpanded(bExpand: boolean): void;
    
    /**
     * Sets the indentation size of the {{Type|DTree}}, the distance between each "level" of the tree is offset on the left from the previous level.
     * 
     * Currently this feature has no effect on the {{Type|DTree}} element. 
     * @param size  The new indentation size. 
     */
    public SetIndentSize(size: number): void;
    
    /**
     * Sets the height of each {{Type|DTree_Node}} in the tree.
     * 
     * The default value is 17. 
     * @param h  The height to set. 
     */
    public SetLineHeight(h: number): void;
    
    /**
     * Set the currently selected top-level node. 
     * @param node  {{Type|DTree_Node}} to select. 
     */
    public SetSelectedItem(node: DTree_Node): void;
    
    /**
     * Sets whether or not the [[Silkicons]] next to each node of the DTree will be displayed.
     * 
     * Individual icons can be set with {{ClassFunction|DTree_Node|SetIcon}} or passed as the second argument in {{ClassFunction|DTree|AddNode}}. 
     * @param show  Whether or not to show icons. 
     */
    public SetShowIcons(show: boolean): void;
    
    /**
     * Returns whether or not the [[Silkicons]] next to each node of the DTree will be displayed.
     * 
     * Alias of {{ClassFunction|DTree|GetShowIcons}}. 
     * @returns Whether or not the silkicons next to each node will be displayed. 
     */
    public ShowIcons(): boolean;
}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * This panel is created whenever you add a node to a {{Type|DTree}}.
 * 
 * The root node of a {{Type|DTree}} is also a {{Type|DTree_Node}} and controls much of its action; it can be accessed with {{ClassFunction|DTree|Root}}. 
 */
declare class DTree_Node extends DPanel {
    /**
     * A helper function that adds a new node and calls to {{ClassFunction|DTree_Node|MakeFolder}} on it. 
     * @param name  The name of the new node 
     * @param folder  The folder in the filesystem to use, relative to the garrysmod/ folder. 
     * @param path  The path to search in. See [[File Search Paths]] 
     * @param showFiles [=false] Should files be added as nodes (true) or folders only (false) 
     * @param wildcard [="*"] The wildcard to use when searching for files. 
     * @param bDontForceExpandable [=false] 
     */
    public AddFolder(name: string, folder: string, path: string, showFiles?: boolean, wildcard?: string, bDontForceExpandable?: boolean): void;
    
    /**
     * Add a child node to the DTree_Node 
     * @param name  Name of the node. 
     * @param icon [="icon16/folder.png"] The icon that will show nexto the node in the DTree. 
     * @returns Returns the created {{Type|DTree_Node}} panel. 
     */
    public AddNode(name: string, icon?: string): DTree_Node;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Adds the given panel to the child nodes list, a {{Type|DListLayout}}. 
     * @param pnl  The panel to add. 
     */
    public AddPanel(pnl: Panel): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Internal function that handles the expand/collapse animations. 
     * @param anim 
     * @param delta 
     * @param data 
     */
    public AnimSlide(anim: table, delta: number, data: table): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called when a child node is expanded or collapsed to propagate this event to parent nodes to update layout. 
     * @param expanded 
     */
    public ChildExpanded(expanded: boolean): void;
    
    /**
     * Cleans up the internal table of items (sub-nodes) of this node from invalid panels or sub-nodes that were moved from this node to another.
     * 
     * Appears the be completely unused by the game on its own. 
     */
    public CleanList(): void;
    
    /**
     * Create and returns a copy of this node, including all the sub-nodes. 
     * @returns The copied {{Type|DTree_Node}}. 
     */
    public Copy(): DTree_Node;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Creates the container {{Type|DListLayout}} for the {{Type|DTree_Node}}s.
     * 
     * This is called automatically so you don't have to. 
     */
    public CreateChildNodes(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called automatically to update the status of {{ClassFunction|DTree_Node|GetLastChild}} on children of this node. 
     */
    public DoChildrenOrder(): void;
    
    /**
     * Called when the node is clicked.
     * 
     * See also {{ClassFunction|DTree_Node|DoRightClick}}. 
     * @returns Return true to prevent DoClick from being called on parent nodes or the {{Type|DTree}} itself. 
     */
    public DoClick(): DTree;
    
    /**
     * Called when the node is right clicked.
     * 
     * See also {{ClassFunction|DTree_Node|DoClick}}. 
     * @returns Return true to prevent DoRightClick from being called on parent nodes or the {{Type|DTree}} itself. 
     */
    public DoRightClick(): DTree;
    
    /**
     * Expands or collapses this node, as well as ALL child nodes of this node.
     * 
     * Works opposite of {{ClassFunction|DTree_Node|ExpandTo}}. 
     * @param expand  Whether to expand (true) or collapse (false) 
     */
    public ExpandRecurse(expand: boolean): void;
    
    /**
     * Collapses or expands all nodes from the topmost-level node to this one.
     * 
     * Works opposite of {{ClassFunction|DTree_Node|ExpandRecurse}}. 
     * @param expand  Whether to expand (true) or collapse (false) 
     */
    public ExpandTo(expand: boolean): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called automatically from {{ClassFunction|DTree_Node|PopulateChildrenAndSelf}} and {{ClassFunction|DTree_Node|PopulateChildren}} to populate this node with child nodes of files and folders. 
     * @param bAndChildren  Does nothing. Set to true if called from {{ClassFunction|DTree_Node|PopulateChildren}}. 
     * @param bExpand  Expand self once population process is finished. 
     */
    public FilePopulate(bAndChildren: boolean, bExpand: boolean): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called automatically from {{ClassFunction|DTree_Node|FilePopulate}} to actually fill the node with sub-nodes based on set preferences like should files be added, etc. 
     * @param files  A list of files in this folder 
     * @param folders  A list of folder in this folder. 
     * @param foldername  The folder name/path this node represents 
     * @param path  The Path ID search was performed with. See [[File Search Paths]] 
     * @param bAndChildren  Inherited from the '''FilePopulate''' call. Does nothing 
     * @param wildcard  The wildcard that was given 
     */
    public FilePopulateCallback(files: table, folders: table, foldername: string, path: string, bAndChildren: boolean, wildcard: string): void;
    
    /**
     * Returns n-th child node.
     * 
     * Basically an alias of {{ClassFunction|Panel|GetChild}}. 
     * @param num  The number of the child to get, starting with 0 
     * @returns The child panel, if valid ID is given 
     */
    public GetChildNode(num: number): Panel;
    
    /**
     * **Deprecated!**
     * 
     * Returns value set by {{ClassFunction|DTree_Node|SetDirty}}. 
     * @returns 
     */
    public GetDirty(): boolean;
    
    /**
     * Returns whether the double clock to collapse/expand functionality is enabled on this node. 
     * @returns 
     */
    public GetDoubleClickToOpen(): boolean;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Returns what is set by {{ClassFunction|DTree_Node|SetDraggableName}}. 
     * @returns 
     */
    public GetDraggableName(): string;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Returns whether or not this node is drawing lines 
     * @returns 
     */
    public GetDrawLines(): boolean;
    
    /**
     * Returns the filepath of the file attached to this node. 
     * @returns 
     */
    public GetFileName(): string;
    
    /**
     * Returns the folder path to search in, set by {{ClassFunction|DTree_Node|MakeFolder}}. 
     * @returns The folder path. 
     */
    public GetFolder(): string;
    
    /**
     * Returns whether the expand/collapse button is shown on this node regardless of whether or not it has sub-nodes.
     * 
     * See also {{ClassFunction|DTree_Node|SetForceShowExpander}}. 
     * @returns 
     */
    public GetForceShowExpander(): boolean;
    
    /**
     * Returns whether the expand button (little + button) should be shown or hidden. 
     * @returns 
     */
    public GetHideExpander(): boolean;
    
    /**
     * Returns the image path to the icon of this node. 
     * @returns The path to the image 
     */
    public GetIcon(): string;
    
    /**
     * Returns the indentation level of the {{Type|DTree}} this node belongs to.
     * 
     * Alias of {{ClassFunction|DTree|GetIndentSize}}, see it for more info. 
     * @returns The indentation level. 
     */
    public GetIndentSize(): number;
    
    /**
     * Returns whether this node is the last child on this level or not. 
     * @returns 
     */
    public GetLastChild(): boolean;
    
    /**
     * The height of a single {{Type|DTree_Node}} of the {{Type|DTree}} this node belongs to.
     * 
     * Alias of {{ClassFunction|DTree|GetLineHeight}}. 
     * @returns The height of a single {{Type|DTree_Node}}. 
     */
    public GetLineHeight(): number;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * {{Stub}} 
     * @returns 
     */
    public GetNeedsChildSearch(): boolean;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Returns whether or not the node is set to be populated from the filesystem. 
     * @returns 
     */
    public GetNeedsPopulating(): boolean;
    
    /**
     * Returns the parent {{Type|DTree_Node}}. Note that {{ClassFunction|Panel|GetParent}} will not be the same! 
     * @returns The parent node. 
     */
    public GetParentNode(): Panel;
    
    /**
     * Returns the path ID ([[File Search Paths]]) used in populating the {{Type|DTree}} from the filesystem.
     * 
     * See {{ClassFunction|DTree_Node|SetPathID}} and {{ClassFunction|DTree_Node|MakeFolder}}. 
     * @returns The Path ID 
     */
    public GetPathID(): string;
    
    /**
     * Returns the root node, the {{Type|DTree}} this node is under.
     * 
     * See also {{ClassFunction|DTree_Node|GetParentNode}}. 
     * @returns The root node 
     */
    public GetRoot(): Panel;
    
    /**
     * Returns whether or not nodes for files should/will be added when populating the node from filesystem. 
     * @returns 
     */
    public GetShowFiles(): boolean;
    
    /**
     * Returns the wildcard set by {{ClassFunction|DTree_Node|MakeFolder}}. 
     * @returns The search wildcard 
     */
    public GetWildCard(): string;
    
    /**
     * Inserts a sub-node into this node before or after the given node. 
     * @param node  The {{Type|DTree_Node}} to insert. 
     * @param nodeNextTo  The node to insert the node above before or after. 
     * @param before  true to insert before, false to insert after. 
     */
    public Insert(node: DTree_Node, nodeNextTo: Panel, before: boolean): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Inserts an existing node as a "child" or a sub-node of this node.
     * Used internally by the drag'n'drop functionality. 
     * @param node  Has to be {{Type|DTree_Node}} 
     */
    public InsertNode(node: DTree_Node): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called automatically internally.
     * 
     * Makes the target node compatible with this node's drag'n'drop. 
     * @param node  The {{Type|DTree_Node}}. 
     */
    public InstallDraggable(node: DTree_Node): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * {{Stub}}
     * 
     * See {{ClassFunction|DTree_Node|DoClick}} 
     */
    public InternalDoClick(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * {{Stub}}
     * 
     * See {{ClassFunction|DTree_Node|DoRightClick}}. 
     */
    public InternalDoRightClick(): void;
    
    /**
     * Returns true if {{ClassFunction|DTree_Node|GetRoot}} is the same as {{ClassFunction|DTree_Node|GetParentNode}} of this node. 
     * @returns If this is a root node. 
     */
    public IsRootNode(): boolean;
    
    /**
     * Removes given node as a sub-node of this node.
     * 
     * It doesn't actually remove or unparent the panel, just removes it from the internal {{Type|DListView}}. 
     * @param pnl  The node to remove 
     */
    public LeaveTree(pnl: Panel): void;
    
    /**
     * Makes this node a folder in the filesystem. This will make it automatically populated.
     * 
     * See also {{ClassFunction|DTree_Node|AddFolder}}. 
     * @param folder  The folder in the filesystem to use, relative to the garrysmod/ folder. 
     * @param path  The path to search in. See [[File Search Paths]] 
     * @param showFiles [=false] Should files be added as nodes (true) or folders only (false) 
     * @param wildcard [="*"] The wildcard to use when searching for files. 
     * @param dontForceExpandable [=false] If set to true, don't show the expand buttons on empty nodes. 
     */
    public MakeFolder(folder: string, path: string, showFiles?: boolean, wildcard?: string, dontForceExpandable?: boolean): void;
    
    /**
     * Moves given panel to the top of the children of this node.
     * 
     * Despite name of this function, it cannot move the children to any position but the topmost. 
     * @param node  The node to move. 
     */
    public MoveChildTo(node: Panel): void;
    
    /**
     * Moves this node to the top of the level. 
     */
    public MoveToTop(): void;
    
    /**
     * Called when sub-nodes of this {{Type|DTree_Node}} were changed, such as being rearranged if that functionality is enabled. 
     */
    public OnModified(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called when this or a sub node is selected. Do not use this, it is not for override.
     * 
     * Use {{ClassFunction|DTree|OnNodeSelected}} or {{ClassFunction|DTree_Node|DoClick}} instead. 
     * @param node 
     */
    public OnNodeSelected(node: Panel): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called automatically to perform layout on this node if this node {{ClassFunction|DTree_Node|IsRootNode}}. 
     */
    public PerformRootNodeLayout(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called automatically from {{ClassFunction|DTree_Node|PopulateChildrenAndSelf}}. 
     */
    public PopulateChildren(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called automatically from {{ClassFunction|DTree_Node|SetExpanded}} (or when user manually expands the node) to populate the node with sub-nodes from the filesystem if this was enabled via {{ClassFunction|DTree_Node|MakeFolder}}. 
     * @param expand  Expand self once population process is finished. 
     */
    public PopulateChildrenAndSelf(expand: boolean): void;
    
    /**
     * **Deprecated!**
     * 
     * Appears to have no effect on the {{Type|DTree_Node}}. 
     * @param dirty 
     */
    public SetDirty(dirty: boolean): void;
    
    /**
     * Sets whether double clicking the node should expand/collapse it or not. 
     * @param enable  true to enable, false to disable this functionality. 
     */
    public SetDoubleClickToOpen(enable: boolean): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Used to store name for sub elements for a {{ClassFunction|Panel|Droppable}} call. 
     * @param name 
     */
    public SetDraggableName(name: string): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Sets whether or not this node should draw visual lines. 
     * @param draw 
     */
    public SetDrawLines(draw: boolean): void;
    
    /**
     * Expands or collapses this node. 
     * @param expand  Whether to expand (true) or collapse (false) 
     * @param surpressAnimation [=false] Whether to play animation (false) or not (true) 
     */
    public SetExpanded(expand: boolean, surpressAnimation?: boolean): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Sets the file full filepath to the file attached to this node 
     * @param filename 
     */
    public SetFileName(filename: string): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Sets the folder to search files and folders in.
     * 
     * Use {{ClassFunction|DTree_Node|MakeFolder}} instead. 
     * @param folder 
     */
    public SetFolder(folder: string): void;
    
    /**
     * Sets whether or not the expand/collapse button (+/- button) should be shown on this node regardless of whether it has sub-elements or not. 
     * @param forceShow 
     */
    public SetForceShowExpander(forceShow: boolean): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Sets whether the expand button (little + button) should be shown or hidden. 
     * @param hide 
     */
    public SetHideExpander(hide: boolean): void;
    
    /**
     * Sets the material for the icon of the {{Type|DTree_Node}}. 
     * @param path  The path to the material to be used. Do not include "materials/". .pngs are supported. 
     */
    public SetIcon(path: string): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called automatically to set whether this node is the last child on this level or not. 
     * @param last 
     */
    public SetLastChild(last: boolean): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * {{Stub}} 
     * @param newState 
     */
    public SetNeedsChildSearch(newState: boolean): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Sets whether or not the node needs populating from the filesystem. 
     * @param needs  Whether or not the node needs populating 
     */
    public SetNeedsPopulating(needs: boolean): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Sets the parent node of this node. Not the same as {{ClassFunction|Panel|SetParent}}.
     * 
     * This is set automatically, you shouldn't use this. 
     * @param parent  The panel to set as a parent node for this node 
     */
    public SetParentNode(parent: Panel): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Sets the path ID ([[File Search Paths]]) for populating the tree from the filesystem.
     * 
     * Use {{ClassFunction|DTree_Node|MakeFolder}} instead. 
     * @param path  The path ID to set. 
     */
    public SetPathID(path: string): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Sets the root node (the {{Type|DTree}}) of this node.
     * 
     * This is set automatically, you shouldn't use this. 
     * @param root  The panel to set as root node. 
     */
    public SetRoot(root: Panel): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called automatically to update the "selected" status of this node. 
     * @param selected  Whether this node is currently selected or not. 
     */
    public SetSelected(selected: boolean): void;
    
    /**
     * Sets the selected state of a selectable panel object. This functionality is set with {{ClassFunction|Panel|SetSelectable}} and checked with {{ClassFunction|Panel|IsSelectable}}. 
     * @param selected [=false] Whether the object should be selected or deselected. {{ClassFunction|Panel|IsSelected}} can be used to determine the selected state of the object. 
     */
    public SetSelected(selected?: boolean): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Sets whether or not nodes for files should be added when populating the node from filesystem. 
     * @param showFiles 
     */
    public SetShowFiles(showFiles: boolean): void;
    
    /**
     * Sets the text value of a panel object containing text, such as a {{Type|Label}}, {{Type|TextEntry}} or  {{Type|RichText}} and their derivatives, such as {{Type|DLabel}}, {{Type|DTextEntry}} or {{Type|DButton}}.
     * 
     * {{Warning|When used on a {{Type|Label}} or its derivatives ( {{Type|DLabel}} and {{Type|DButton}} ), it will automatically call {{ClassFunction|Panel|InvalidateLayout}}, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.}}
     * [[Category:Label]]
     * [[Category:DLabel]]
     * [[Category:TextEntry]]
     * [[Category:RichText]]
     * [[Category:DTree_Node]] 
     * @param text  The text value to set. 
     * @example
     * 
     * // Window frame for the RichText
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(250, 150)
     * TextFrame:Center()
     * TextFrame:SetTitle("#VAC_ConnectionRefusedTitle") // Results in "Connection Refused - VAC"
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Set the text to the message you get when VAC banned
     * richtext:SetText("#VAC_ConnectionRefusedDetail")
     * 
     * // Creates a {{Type|RichText}} element and sets the text to a localized string; the default VAC rejection message. 
     */
    public SetText(text: string): void;
    
    /**
     * Sets the text value of a panel object containing text, such as a {{Type|Label}}, {{Type|TextEntry}} or  {{Type|RichText}} and their derivatives, such as {{Type|DLabel}}, {{Type|DTextEntry}} or {{Type|DButton}}.
     * 
     * {{Warning|When used on a {{Type|Label}} or its derivatives ( {{Type|DLabel}} and {{Type|DButton}} ), it will automatically call {{ClassFunction|Panel|InvalidateLayout}}, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.}}
     * [[Category:Label]]
     * [[Category:DLabel]]
     * [[Category:TextEntry]]
     * [[Category:RichText]]
     * [[Category:DTree_Node]] 
     * @param text  The text value to set. 
     * @example
     * 
     * // Window frame for the RichText
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(250, 150)
     * TextFrame:Center()
     * TextFrame:SetTitle("#VAC_ConnectionRefusedTitle") // Results in "Connection Refused - VAC"
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Set the text to the message you get when VAC banned
     * richtext:SetText("#VAC_ConnectionRefusedDetail")
     * 
     * // Creates a {{Type|RichText}} element and sets the text to a localized string; the default VAC rejection message. 
     */
    public SetText(text: string): void;
    
    /**
     * **Deprecated!**
     * 
     * Currently does nothing, not implemented. 
     */
    public SetupCopy(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Sets the search wildcard.
     * 
     * Use {{ClassFunction|DTree_Node|MakeFolder}} instead 
     * @param wildcard  The wildcard to set 
     */
    public SetWildCard(wildcard: string): void;
    
    /**
     * Returns whether or not the {{Type|DTree}} this node is in has icons enabled.
     * 
     * See {{ClassFunction|DTree|ShowIcons}} for more info. 
     * @returns Whether the icons are shown or not 
     */
    public ShowIcons(): number;
}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * Used by {{Type|DTree_Node}}. 
 */
declare class DTree_Node_Button extends DButton {

}

/**
 * The duplicator library allows you to specify what should be saved when someone attempts to duplicate your custom entity with the duplicator tool. It can also be used by 3rd party duplicator tools to make use of the built in system. 
 */
declare namespace duplicator {
    /**
     * Allow this entity to be duplicated 
     * @param classname  An entity's classname 
     */
    function Allow(classname: string): void;
    
    /**
     * Calls every function registered with {{LibraryFunction|duplicator|RegisterBoneModifier}} on each bone the ent has. 
     * @param ply  The player whose entity this is 
     * @param ent  The entity in question 
     */
    function ApplyBoneModifiers(ply: Player, ent: Entity): void;
    
    /**
     * Calls every function registered with {{LibraryFunction|duplicator|RegisterEntityModifier}} on the entity. 
     * @param ply  The player whose entity this is 
     * @param ent  The entity in question 
     */
    function ApplyEntityModifiers(ply: Player, ent: Entity): void;
    
    /**
     * Clears/removes the chosen entity modifier from the entity. 
     * @param ent  The entity the modification is stored on 
     * @param key  The key of the stored entity modifier 
     */
    function ClearEntityModifier(ent: Entity, key: any): void;
    
    /**
     * Copies the entity, and all of its constraints and entities, then returns them in a table. 
     * @param ent  The entity to duplicate. The function will automatically copy all constrained entities. 
     * @param tableToAdd [={}] A preexisting table to add entities and constraints in from.
     * Uses the same table format as the table returned from this function. 
     * @returns A table containing duplication info which includes the following members:
     * * {{FuncArg|table|Entities}}
     * * {{FuncArg|table|Constraints}}
     * * {{FuncArg|Vector|Mins}}
     * * {{FuncArg|Vector|Maxs}}
     * 
     * The values of Mins & Maxs from the table are returned from {{LibraryFunction|duplicator|WorkoutSize}} 
     */
    function Copy(ent: Entity, tableToAdd?: table): table;
    
    /**
     * Copies the passed table of entities to save for later. 
     * @param ents  A table of entities to save/copy. 
     * @returns A table containing duplication info which includes the following members:
     * * {{FuncArg|table|Entities}}
     * * {{FuncArg|table|Constraints}}
     * * {{FuncArg|Vector|Mins}}
     * * {{FuncArg|Vector|Maxs}} 
     */
    function CopyEnts(ents: table): table;
    
    /**
     * Returns a table with some entity data that can be used to create a new entity with {{LibraryFunction|duplicator|CreateEntityFromTable}} 
     * @param ent  The entity table to save 
     * @returns See {{Struct|EntityCopyData}} 
     */
    function CopyEntTable(ent: Entity): EntityCopyData;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Creates a constraint from a saved/copied constraint table. 
     * @param constraint  Saved/copied constraint table 
     * @param entityList  The list of entities that are to be constrained 
     * @returns The newly created constraint entity 
     */
    function CreateConstraintFromTable(constraint: table, entityList: table): Entity;
    
    /**
     * "Create an entity from a table." 
     * 
     * This creates an entity using the data in EntTable.
     * 
     * If an entity factory has been registered for the entity's Class, it will be called. 
     * 
     * Otherwise, {{LibraryFunction|duplicator|GenericDuplicatorFunction}} will be called instead. 
     * @param ply  The player who wants to create something 
     * @param entTable  The duplication data to build the entity with. See {{Struct|EntityCopyData}} 
     * @returns The newly created entity 
     */
    function CreateEntityFromTable(ply: Player, entTable: EntityCopyData): Entity;
    
    /**
     * "Restores the bone's data."
     * 
     * Loops through Bones and calls {{ClassFunction|Entity|ManipulateBoneScale}}, {{ClassFunction|Entity|ManipulateBoneAngles}} and {{ClassFunction|Entity|ManipulateBonePosition}} on ent with the table keys and the subtable values s, a and p respectively. 
     * @param ent  The entity to be bone manipulated 
     * @param bones  Table with a {{Struct|BoneManipulationData}} for every bone (that has manipulations applied) using the bone ID as the table index. 
     */
    function DoBoneManipulator(ent: Entity, bones: BoneManipulationData): void;
    
    /**
     * Restores the flex data using {{ClassFunction|Entity|SetFlexWeight}} and {{ClassFunction|Entity|SetFlexScale}} 
     * @param ent  The entity to restore the flexes on 
     * @param flex  The flexes to restore 
     * @param scale [=nil] The flex scale to apply. (Flex scale is unchanged if omitted) 
     */
    function DoFlex(ent: Entity, flex: table, scale?: number): void;
    
    /**
     * "Applies generic every-day entity stuff for ent from table data."
     * 
     * Depending on the values of Model, Angle, Pos, Skin, Flex, Bonemanip, ModelScale, ColGroup, Name, and BodyG ({{Type|table}} of multiple values) in the data table, this calls {{ClassFunction|Entity|SetModel}}, {{ClassFunction|Entity|SetAngles}}, {{ClassFunction|Entity|SetPos}}, {{ClassFunction|Entity|SetSkin}}, {{LibraryFunction|duplicator|DoFlex}}, {{LibraryFunction|duplicator|DoBoneManipulator}}, {{ClassFunction|Entity|SetModelScale}}, {{ClassFunction|Entity|SetCollisionGroup}}, {{ClassFunction|Entity|SetName}}, {{ClassFunction|Entity|SetBodygroup}} on ent.
     * 
     * If ent has a RestoreNetworkVars function, it is called with data.DT. 
     * @param ent  The entity to be applied upon 
     * @param data  The data to be applied onto the entity 
     */
    function DoGeneric(ent: Entity, data: table): void;
    
    /**
     * "Applies bone data, generically."
     * 
     * If data contains a PhysicsObjects table, it moves, re-angles and if relevent freezes all specified bones, first converting from local coordinates to world coordinates. 
     * @param ent  The entity to be applied upon 
     * @param data  The data to be applied onto the entity 
     */
    function DoGenericPhysics(ent: Entity, data: table): void;
    
    /**
     * "Applies bone data, generically."
     * 
     * If data contains a PhysicsObjects table, it moves, re-angles and if relevent freezes all specified bones, first converting from local coordinates to world coordinates. 
     * @param ent  The entity to be applied upon 
     * @param ply [=nil] The player who owns the entity. Unused in function as of early 2013 
     * @param data [=] The data to be applied onto the entity 
     */
    function DoGenericPhysics(ent: Entity, ply?: Player, data?: table): void;
    
    /**
     * Returns the entity class factory registered with {{LibraryFunction|duplicator|RegisterEntityClass}}. 
     * @param name  The name of the entity class factory 
     * @returns Is compromised of the following members:
     * * {{FuncArg|function|Func|The function that creates the entity}}
     * * {{FuncArg|table|Args|Arguments to pass to the function}} 
     */
    function FindEntityClass(name: string): table;
    
    /**
     * "Generic function for duplicating stuff" 
     * 
     * This is called when {{LibraryFunction|duplicator|CreateEntityFromTable}} can't find an entity factory to build with. It calls {{LibraryFunction|duplicator|DoGeneric}} and {{LibraryFunction|duplicator|DoGenericPhysics}} to apply standard duplicator stored things such as the model and position. 
     * @param ply  The player who wants to create something 
     * @param data  The duplication data to build the entity with 
     * @returns The newly created entity 
     */
    function GenericDuplicatorFunction(ply: Player, data: table): Entity;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Fills entStorageTable with all of the entities in a group connected with constraints. Fills constraintStorageTable with all of the constrains constraining the group. 
     * @param ent  The entity to start from 
     * @param entStorageTable  The table the entities will be inserted into 
     * @param constraintStorageTable  The table the constraints will be inserted into 
     * @returns [entStorageTable, constraintStorageTable] 
     * !TupleReturn
     */
    function GetAllConstrainedEntitiesAndConstraints(ent: Entity, entStorageTable: table, constraintStorageTable: table): [table, table];
    
    /**
     * Returns whether the entity can be duplicated or not 
     * @param classname  An entity's classname 
     * @returns Returns true if the entity can be duplicated (nil otherwise) 
     */
    function IsAllowed(classname: string): boolean;
    
    /**
     * "Given entity list and constraint list, create all entities and return their tables"
     * 
     * Calls {{LibraryFunction|duplicator|CreateEntityFromTable}} on each sub-table of EntityList. If an entity is actually created, it calls {{HookFunction|ENTITY|OnDuplicated}} with the entity's duplicator data, then {{LibraryFunction|duplicator|ApplyEntityModifiers}}, {{LibraryFunction|duplicator|ApplyBoneModifiers}} and finally  {{HookFunction|ENTITY|PostEntityPaste}} is called.
     * 
     * The constraints are then created with {{LibraryFunction|duplicator|CreateConstraintFromTable}}. 
     * @param Player  The player who wants to create something 
     * @param EntityList  A table of duplicator data to create the entities from 
     * @param ConstraintList  A table of duplicator data to create the constraints from 
     * @returns [List of created entities, List of created constraints] 
     * @example
     * 
     * function TOOL:LeftClick( trace )
     * 	if (SERVER) then
     * 		duplicator.Paste(self:GetOwner(),Dupe.Entities,Dupe.Constraints)
     * 		print("PASTED")
     * 	end
     * 	return true
     * end
     *  
     * function TOOL:RightClick( trace )
     * 	if (SERVER and IsValid(trace.Entity)) then
     * 		Dupe = duplicator.Copy(trace.Entity)
     * 		print("COPIED")
     * 	end
     * 	return true
     * end
     * 
     * // Code used for a TOOL to copy duplication data on right click and paste it with its original info on left click. 
     * !TupleReturn
     */
    function Paste(Player: Player, EntityList: table, ConstraintList: table): [table, table];
    
    /**
     * Registers a function to be called on each of an entity's bones when {{LibraryFunction|duplicator|ApplyBoneModifiers}} is called.
     * 
     * **Note:**
     * >This function is available to call on the client, but registered functions aren't used anywhere! 
     * @param key  The type of the key doesn't appear to matter, but it is preferable to use a string. 
     * @param boneModifier  Function called on each bone that an ent has. Called during {{LibraryFunction|duplicator|ApplyBoneModifiers}}.
     * Function parameters are:
     * * {{FuncArg|Player|ply}}
     * * {{FuncArg|Entity|ent}}
     * * {{FuncArg|number|boneID}}
     * * {{FuncArg|PhysObj|bone}}
     * * {{FuncArg|table|data}}
     * 
     * The data table that is passed to boneModifier is set with {{LibraryFunction|duplicator|StoreBoneModifier}} 
     */
    function RegisterBoneModifier(key: any, boneModifier: Function): void;
    
    /**
     * Register a function used for creating a duplicated constraint. 
     * @param name  The unique name of new constraint 
     * @param callback  Function to be called when this constraint is created 
     * @param args  Arguments passed to the callback function 
     * @example
     * 
     * duplicator.RegisterConstraint( "Weld", Weld, "Ent1", "Ent2", "Bone1", "Bone2", "forcelimit", "nocollide", "deleteonbreak" )
     * 
     * // This is from lua/includes/modules/constraint.lua, it registers the Weld Constraint. 
     */
    function RegisterConstraint(name: string, callback: Function, ...args: (any)[]): void;
    
    /**
     * This allows you to specify a specific function to be run when your SENT is pasted with the duplicator, instead of relying on the generic automatic functions.
     * 
     * **Note:**
     * >Automatically calls {{LibraryFunction|duplicator|Allow}} for the entity class. 
     * @param name  The ClassName of the entity you wish to register a factory for 
     * @param func  The factory function you want to have called. It should have the arguments (Player, ...) where ... is whatever arguments you request to be passed. 
     * @param args  Strings of the names of arguments you want passed to function the from the {{Struct|EntityCopyData}}. As a special case, "Data" will pass the whole structure. 
     * @example
     * 
     * duplicator.RegisterEntityClass("prop_physics", function(ply, data)
     * 	PrintTable(data)
     * 	duplicator.GenericDuplicatorFunction(ply, data)
     * end, "Data")
     * 
     * // Prints the datatable and then lets the duplicator do it's job 
     */
    function RegisterEntityClass(name: string, func: Function, ...args: (any)[]): void;
    
    /**
     * This allows you to register tweaks to entities. For instance, if you were making an "unbreakable" addon, you would use this to enable saving the "unbreakable" state of entities between duplications.
     * 
     * This function registers a piece of generic code that is run on all entities with this modifier. In order to have it actually run, use {{LibraryFunction|duplicator|StoreEntityModifier}}.
     * 
     * This function does nothing when run clientside. 
     * @param name  An identifier for your modification. This is not limited, so be verbose. "Person's 'Unbreakable' mod" is far less likely to cause conflicts than "unbreakable" 
     * @param func  The function to be called for your modification. It should have the arguments (Player, Entity, Data), where data is what you pass to {{LibraryFunction|duplicator|StoreEntityModifier}}. 
     */
    function RegisterEntityModifier(name: string, func: Function): void;
    
    /**
     * Help to remove certain map created entities before creating the saved entities
     * This is obviously so we don't get duplicate props everywhere.
     * It should be called before calling Paste. 
     */
    function RemoveMapCreatedEntities(): void;
    
    /**
     * "When a copy is copied it will be translated according to these.
     * If you set them - make sure to set them back to 0 0 0!" 
     * @param v  The angle to offset all pastes from 
     */
    function SetLocalAng(v: Angle): void;
    
    /**
     * "When a copy is copied it will be translated according to these.
     * If you set them - make sure to set them back to 0 0 0!" 
     * @param v  The position to offset all pastes from 
     */
    function SetLocalPos(v: Vector): void;
    
    /**
     * Stores bone mod data for a registered bone modification function 
     * @param ent  The entity to add bone mod data to 
     * @param boneID  The bone ID.
     * See {{ClassFunction|Entity|GetPhysicsObjectNum}} 
     * @param key  The key for the bone modification 
     * @param data  The bone modification data that is passed to the bone modification function 
     */
    function StoreBoneModifier(ent: Entity, boneID: number, key: any, data: table): void;
    
    /**
     * Stores an entity modifier into an entity for saving 
     * @param entity  The entity to store modifier in 
     * @param name  Unique modifier name as defined in {{LibraryFunction|duplicator|RegisterEntityModifier}} 
     * @param data  Modifier data 
     */
    function StoreEntityModifier(entity: Entity, name: string, data: table): void;
    
    /**
     * "Work out the AABB size" 
     * @param Ents  A table of entity duplication datums. 
     */
    function WorkoutSize(Ents: table): void;
}

/**
 * Vertical version of {{Type|DHorizontalDivider}}. 
 */
declare class DVerticalDivider extends DPanel {

}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * A scrollbar used in {{Type|DScrollPanel}}.
 * 
 * The scrollbar notably contains '''DVScrollBar.btnUp, DVScrollBar.btnDown, and DVScrollBar.btnGrip''' which are the up button, down button, and grip respectively. Editing the paint functions of these allows custom scrollbar styling. See {{ClassFunction|DScrollPanel|GetVBar}} for an example. 
 */
declare class DVScrollBar extends Panel {
    /**
     * Adds specified amount of scroll in pixels. 
     * @param add  How much to scroll downwards. Can be negative for upwards scroll 
     * @returns True if the scroll level was changed (i.e. if we did or did not scroll) 
     */
    public AddScroll(add: number): boolean;
    
    /**
     * Smoothly scrolls to given level. 
     * @param scroll  The scroll level to animate to. In pixels from the top ( from 0 ) 
     * @param length  Length of the animation in seconds 
     * @param delay [=0] Delay of the animation in seconds 
     * @param ease [=-1] See {{ClassFunction|Panel|NewAnimation}} for explanation. 
     */
    public AnimateTo(scroll: number, length: number, delay?: number, ease?: number): void;
    
    /**
     * @returns 
     */
    public BarScale(): number;
    
    /**
     * Returns whether or not the manual up/down scroll buttons are visible or not. Set by {{ClassFunction|DVScrollBar|SetHideButtons}}. 
     * @returns Whether or not the manual up/down scroll buttons are visible or not. 
     */
    public GetHideButtons(): boolean;
    
    /**
     * Returns the negative of {{ClassFunction|DVScrollBar|GetScroll}}. 
     * @returns 
     */
    public GetOffset(): number;
    
    /**
     * Returns the amount of scroll level from the top in pixels 
     * @returns The amount of scroll level from the top 
     */
    public GetScroll(): number;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called from within {{Type|DScrollBarGrip}} 
     */
    public Grip(): void;
    
    /**
     * Allows hiding the up and down buttons for better visual stylisation. 
     * @param hide  True to hide 
     */
    public SetHideButtons(hide: boolean): void;
    
    /**
     * Sets the scroll level in pixels. 
     * @param scroll 
     */
    public SetScroll(scroll: number): void;
    
    /**
     * Sets up the scrollbar for use.
     * 
     * The scrollbar will automatically disable itself if the total height of the canvas is lower than the height of the panel that holds the canvas during this function call. 
     * @param barSize  The size of the panel that holds the canvas, basically size of "1 page". 
     * @param cavasSize  The total size of the canvas, this typically is the bigger number. 
     */
    public SetUp(barSize: number, cavasSize: number): void;
    
    /**
     * **Deprecated!**
     * 
     * Should return nil in all cases. See {{ClassFunction|DVScrollBar|GetScroll}}. 
     * @returns 
     */
    public Value(): any;
}

/**
 * Base panel used by DFrame, this panel is needed so that elements such as the TextEntry can obtain focus. 
 */
declare class EditablePanel {
    /**
     * **Deprecated!**
     * 
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Similar to {{ClassFunction|Panel|LoadControlsFromString}} but loads controls from a file.
     * 
     * [[Category:EditablePanel]] 
     * @param path  The path to load the controls from. 
     */
    public LoadControlsFromFile(path: string): void;
    
    /**
     * **Deprecated!**
     * 
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Loads controls(positions, etc) from given data. This is what the default options menu uses.
     * 
     * [[Category:EditablePanel]] 
     * @param data  The data to load controls from. Format unknown. 
     */
    public LoadControlsFromString(data: string): void;
    
    /**
     * {{Stub}}
     * 
     * Sets the panel that owns this FocusNavGroup to be the root in the focus traversal hierarchy.
     * 
     * [[Category:EditablePanel]] 
     * @param state 
     */
    public SetFocusTopLevel(state: boolean): void;
}

/**
 * These hooks are used inside of a Lua effect. Lua effects are stored in either the <kbd>/lua/effects</kbd> directory or in a gamemode in <kbd>/gamemodes/&lt;gamemodename&gt;/entities/effects</kbd>.
 * 
 * Effects are entities with the class CLuaEffect, and as such, {{Type|Entity}} functions are usable on them (using the <kbd>self</kbd> argument).
 * 
 * An EFFECT is made using either a combination of the {{HookFunction|EFFECT|Init}}, {{HookFunction|EFFECT|Render}} and optionally the {{HookFunction|EFFECT|Think}} hook. Another way is to create all particles in one go in the ''Init'' hook and don't use the other hooks at all.
 * {{Example
 * |Description=Creates a particle effect using a combination of the Init and the Think hooks.
 * |Code=function EFFECT:Init( data )
 * 	self.data = data
 * 	self.particles = 4
 * end
 * 
 * function EFFECT:Think()
 * 	return true
 * end
 * 
 * function EFFECT:Render()
 * 	local vOffset = self.data:GetOrigin() + Vector( 0, 0, 0.2 )
 * 	local vAngle = self.data:GetAngles()
 * 	
 * 	local emitter = ParticleEmitter( vOffset, false )
 * 		for i=0, self.particles do
 * 			local particle = emitter:Add( "effects/softglow", vOffset )
 * 			if particle then
 * 				particle:SetAngles( vAngle )
 * 				particle:SetVelocity( Vector( 0, 0, 15 ) )
 * 				particle:SetColor( 255, 102, 0 )
 * 				particle:SetLifeTime( 0 )
 * 				particle:SetDieTime( 0.2 )
 * 				particle:SetStartAlpha( 255 )
 * 				particle:SetEndAlpha( 0 )
 * 				particle:SetStartSize( 1.6 )
 * 				particle:SetStartLength( 1 )
 * 				particle:SetEndSize( 1.2 )
 * 				particle:SetEndLength( 4 )
 * 			end
 * 		end
 * 	emitter:Finish()
 * end
 * }}
 * {{Example
 * |Description=Creates a particle effect using only the Init hook. To use this effect in a loop one needs to create a new instance of this effect every drawn frame.
 * |Code=function EFFECT:Init( data )
 * 	local vOffset = data:GetOrigin() + Vector( 0, 0, 0.2 )
 * 	local vAngle = data:GetAngles()
 * 	local emitter = ParticleEmitter( vOffset, false )
 * 		for i=0,4 do
 * 			local particle = emitter:Add( "effects/softglow", vOffset )
 * 			if particle then
 * 				particle:SetAngles( vAngle )
 * 				particle:SetVelocity( Vector( 0, 0, 15 ) )
 * 				particle:SetColor( 255, 102, 0 )
 * 				particle:SetLifeTime( 0 )
 * 				particle:SetDieTime( 0.2 )
 * 				particle:SetStartAlpha( 255 )
 * 				particle:SetEndAlpha( 0 )
 * 				particle:SetStartSize( 1.6 )
 * 				particle:SetStartLength( 1 )
 * 				particle:SetEndSize( 1.2 )
 * 				particle:SetEndLength( 4 )
 * 			end
 * 		end
 * 	emitter:Finish()
 * end
 * 
 * function EFFECT:Think()
 * 	return false
 * end
 * 
 * function EFFECT:Render()
 * end
 * }} 
 * @example
 * 
 * function EFFECT:Init( data )
 * 	self.data = data
 * 	self.particles = 4
 * end
 * 
 * function EFFECT:Think()
 * 	return true
 * end
 * 
 * function EFFECT:Render()
 * 	local vOffset = self.data:GetOrigin() + Vector( 0, 0, 0.2 )
 * 	local vAngle = self.data:GetAngles()
 * 	
 * 	local emitter = ParticleEmitter( vOffset, false )
 * 		for i=0, self.particles do
 * 			local particle = emitter:Add( "effects/softglow", vOffset )
 * 			if particle then
 * 				particle:SetAngles( vAngle )
 * 				particle:SetVelocity( Vector( 0, 0, 15 ) )
 * 				particle:SetColor( 255, 102, 0 )
 * 				particle:SetLifeTime( 0 )
 * 				particle:SetDieTime( 0.2 )
 * 				particle:SetStartAlpha( 255 )
 * 				particle:SetEndAlpha( 0 )
 * 				particle:SetStartSize( 1.6 )
 * 				particle:SetStartLength( 1 )
 * 				particle:SetEndSize( 1.2 )
 * 				particle:SetEndLength( 4 )
 * 			end
 * 		end
 * 	emitter:Finish()
 * end
 * 
 * // Creates a particle effect using a combination of the Init and the Think hooks.@example
 * 
 * function EFFECT:Init( data )
 * 	local vOffset = data:GetOrigin() + Vector( 0, 0, 0.2 )
 * 	local vAngle = data:GetAngles()
 * 	local emitter = ParticleEmitter( vOffset, false )
 * 		for i=0,4 do
 * 			local particle = emitter:Add( "effects/softglow", vOffset )
 * 			if particle then
 * 				particle:SetAngles( vAngle )
 * 				particle:SetVelocity( Vector( 0, 0, 15 ) )
 * 				particle:SetColor( 255, 102, 0 )
 * 				particle:SetLifeTime( 0 )
 * 				particle:SetDieTime( 0.2 )
 * 				particle:SetStartAlpha( 255 )
 * 				particle:SetEndAlpha( 0 )
 * 				particle:SetStartSize( 1.6 )
 * 				particle:SetStartLength( 1 )
 * 				particle:SetEndSize( 1.2 )
 * 				particle:SetEndLength( 4 )
 * 			end
 * 		end
 * 	emitter:Finish()
 * end
 * 
 * function EFFECT:Think()
 * 	return false
 * end
 * 
 * function EFFECT:Render()
 * end
 * 
 * // Creates a particle effect using only the Init hook. To use this effect in a loop one needs to create a new instance of this effect every drawn frame. 
 */
declare class EFFECT {
    /**
     */
    public EndTouch(): void;
    
    /**
     * Used to get the "real" start position of a trace, for weapon tracer effects.
     * 
     * "real" meaning in 3rd person, the 3rd person position will be used, in first person the first person position will be used. 
     * @param pos  Default position if we fail 
     * @param ent  The weapon to use. 
     * @param attachment  Attachment ID of on the weapon "muzzle", to use as the start position.
     * 
     * **Note:**
     * >Please note that it is expected that the same attachment ID is used on both, the world and the view model. 
     * @returns The "real" start position. 
     */
    public GetTracerShootPos(pos: Vector, ent: Weapon, attachment: number): Vector;
    
    /**
     * Called when the effect is created. 
     * @param effectData  The effect data used to create the effect. 
     */
    public Init(effectData: CEffectData): void;
    
    /**
     * Called when the effect collides with anything. 
     * @param colData  Information regarding the collision. See {{Struct|CollisionData}} 
     * @param collider  The physics object of the entity that collided with the effect. 
     */
    public PhysicsCollide(colData: CollisionData, collider: PhysObj): void;
    
    /**
     * Called when the effect should be rendered. 
     */
    public Render(): void;
    
    /**
     */
    public StartTouch(): void;
    
    /**
     * Called when the effect should think, return false to kill the effect. 
     * @returns Return false to remove this effect. 
     */
    public Think(): boolean;
    
    /**
     */
    public Touch(): void;
}

/**
 * The effects library allows you to manually add scripted effects. 
 */
declare namespace effects {
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Returns the table of the effect specified. 
     * @param name  Effect name. 
     * @returns Effect table. 
     */
    function Create(name: string): table;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Registers a new effect. 
     * @param effect_table  Effect table. 
     * @param name  Effect name. 
     */
    function Register(effect_table: table, name: string): void;
}

/**
 * The engine library provides functions to access various features in the game's engine, most are related to the demo and save systems. 
 */
declare namespace engine {
    /**
     * Returns the name of the currently running gamemode.
     * 
     * **Bug [#1988](https://github.com/Facepunch/garrysmod-issues/issues/1988):**
     * >This will return the incorrect gamemode name on the client if used too early. 
     * @returns The active gamemode's name. This is the name of the gamemode's folder. 
     * @example
     * 
     * print( engine.ActiveGamemode() )
     * 
     * // Prints out the name of the active gamemode. 
     */
    function ActiveGamemode(): string;
    
    /**
     * Closes the server and completely exits.
     * 
     * This is only functional when running in server test mode (launch option -systemtest). Server test mode is used internally at Facepunch as part of the build process to make sure that the dedicated servers aren't crashing on startup. 
     */
    function CloseServer(): void;
    
    /**
     * Returns a list of addons the player have subscribed to on the workshop. 
     * @returns A table with 6 keys (downloaded, models, title, file, mounted, wsid) 
     * @example
     * 
     * PrintTable(engine.GetAddons())
     * 
     * // Will return a list of all the workshop addons you have downloaded / are downloading. 
     */
    function GetAddons(): table;
    
    /**
     * When starting playing a demo, {{LibraryFunction|engine|GetDemoPlaybackTick}} will be reset and its old value will be added to this functions return value. 
     * @returns 
     */
    function GetDemoPlaybackStartTick(): number;
    
    /**
     * Current tick of currently loaded demo.
     * 
     * If not playing a demo, it will return amount of ticks since last demo playback. 
     * @returns The amount of ticks of currently loaded demo. 
     */
    function GetDemoPlaybackTick(): number;
    
    /**
     * Returns time scale of demo playback.
     * 
     * If not during demo playback, returns 1. 
     * @returns The time scale of demo playback, value of demo_timescale console variable. 
     */
    function GetDemoPlaybackTimeScale(): number;
    
    /**
     * Returns total amount of ticks of currently loaded demo.
     * 
     * If not playing a demo, returns 0 or the value of last played demo. 
     * @returns Total amount of ticks of currently loaded demo. 
     */
    function GetDemoPlaybackTotalTicks(): number;
    
    /**
     * Returns a table containing info for all installed gamemodes 
     * @returns gamemodes 
     */
    function GetGamemodes(): table;
    
    /**
     * Returns an array of tables corresponding to all games from which Garry's Mod supports mounting content.
     * 
     * The "mounted" and "installed" values currently do not work correctly serverside on dedicated servers. Some games will always report true while others will always report false. 
     * @returns A table of tables containing all mountable games 
     * @example
     * 
     * PrintTable( engine.GetGames() )
     * 
     * // Prints out a list of games, their Steam AppIds, titles and status (owned, installed, mounted). 
     */
    function GetGames(): table[];
    
    /**
     * **Deprecated:**
     * >Used internally for in-game menus, may be merged in the future into {{LibraryFunction|engine|GetAddons}}.
     * 
     * Returns the UGC (demos, saves and dupes) the player have subscribed to on the workshop. 
     * @returns Returns a table with 6 keys (title, type, tags, wsid, timeadded) 
     */
    function GetUserContent(): table;
    
    /**
     * Returns true if we're currently playing a demo.
     * 
     * You will notice that there's no server-side version of this. That's because there is no server when playing a demo. Demos are both recorded and played back purely clientside. 
     * @returns Whether the game is currently playing a demo or not. 
     */
    function IsPlayingDemo(): boolean;
    
    /**
     * Returns true if the game is currently recording a demo file (.dem) using gm_demo 
     * @returns Whether the game is currently recording a demo or not. 
     */
    function IsRecordingDemo(): boolean;
    
    /**
     * This is a direct binding to the function “engine->LightStyle”. This function allows you to change the default light style of the map - so you can make lighting lighter or darker. You’ll need to call {{LibraryFunction|render|RedownloadAllLightmaps}} clientside to refresh the lightmaps to this new color. 
     * @param lightstyle  The lightstyle to edit. 0 to 63. If you want to edit map lighting, you want to set this to 0. 
     * @param pattern  The pattern to change the lightstyle to. "a" is the darkest, "z" is the brightest. You can use stuff like "abcxyz" to make flashing patterns. The normal brightness for a map is "m". Values over "z" are allowed, "~" for instance. 
     */
    function LightStyle(lightstyle: number, pattern: string): void;
    
    /**
     * Loads a duplication from the local filesystem. 
     * @param dupeName  Name of the file. e.g, engine.OpenDupe("dupes/8b809dd7a1a9a375e75be01cdc12e61f.dupe") 
     * @returns Compressed dupeData. Use util.JSONToTable to make it into a format useable by the duplicator tool. 
     */
    function OpenDupe(dupeName: string): string;
    
    /**
     * Returns an estimate of the server's performance. Equivalent to calling {{GlobalFunction|FrameTime}} from the server, according to source code. 
     * @returns [Frame time, Server Framerate Std Deviation] 
     * @example
     * 
     * print("Server Tick: "..(1/engine.ServerFrameTime()))
     * 
     * // Get the servers tickrate. Can be used to indicate lag 
     * !TupleReturn
     */
    function ServerFrameTime(): [number, number];
    
    /**
     * Sets the mounting options for mountable content. 
     * @param depotID  The depot id of the game to mount. 
     * @param doMount  The mount state, true to mount, false to unmount 
     */
    function SetMounted(depotID: string, doMount: boolean): void;
    
    /**
     * Returns the number of ticks since the game server started. 
     * @returns Number of ticks since the game server started. 
     */
    function TickCount(): number;
    
    /**
     * Returns the number of seconds between each gametick. 
     * @returns Number of seconds between each gametick. 
     * @example
     * 
     * print(1 / engine.TickInterval())
     * 
     * // 
     */
    function TickInterval(): number;
    
    /**
     * Returns video recording settings set by {{LibraryFunction|video|Record}}. Used by Demo-To-Video feature. 
     * @returns The video recording settings, see {{Struct|VideoData}}. 
     */
    function VideoSettings(): VideoData;
    
    /**
     * Saves a duplication as a file. 
     * @param dupe  Dupe table, encoded by {{LibraryFunction|util|TableToJSON}} and compressed by {{LibraryFunction|util|Compress}} 
     * @param jpeg  The dupe icon, created by {{LibraryFunction|render|Capture}} 
     */
    function WriteDupe(dupe: string, jpeg: string): void;
    
    /**
     * Stores savedata into the game (can be loaded using the LoadGame menu) 
     * @param saveData  Data generated by gmsave.SaveMap 
     * @param name  Name the save will have. 
     * @param time  When the save was saved during the game (Put CurTime here) 
     * @param map  The map the save is used for. 
     */
    function WriteSave(saveData: string, name: string, time: number, map: string): void;
}

/**
 * This is a list of all available methods for entites, which includes [http://wiki.garrysmod.com/page/Category:Player Players], [http://wiki.garrysmod.com/page/Category:Weapon Weapons], [http://wiki.garrysmod.com/page/Category:NPC NPCs] and [http://wiki.garrysmod.com/page/Category:Vehicle Vehicles]. 
 * !CustomConstructor Entity */
declare class Entity {
    /**
     * Returns the entity with the matching {{ClassFunction|Entity|EntIndex}}.
     * 
     * Indices 1 through {{LibraryFunction|game|MaxPlayers}}() are always reserved for players.
     * 
     * **Note:**
     * >In examples on this wiki, '''Entity( 1 )''' is used when a player entity is needed (see [[Help:Editing|wiki editing guide]]). In singleplayer and listen servers, '''Entity( 1 )''' will always be the first player. In dedicated servers, however, '''Entity( 1 )''' won't always be a valid player. 
     * @param entityIndex  The entity index. 
     */
    public constructor(entityIndex: number);
    
    /**
     * Called when another entity fires an event to this entity. 
     * @param inputName  The name of the input that was triggered. 
     * @param activator  The initial cause for the input getting triggered. 
     * @param called  The entity that directly trigger the input. 
     * @param data  The data passed. 
     * @returns Should we suppress the default action for this input? 
     */
    protected AcceptInput(inputName: string, activator: Entity, called: Entity, data: string): boolean;
    
    /**
     * Activates the entity. This needs to be used on some entities (like constraints) after being spawned.
     * 
     * **Note:**
     * >For some entity types when this function is used after {{ClassFunction|Entity|SetModelScale}}, the physics object will be recreated with the new scale. [https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/baseanimating.cpp#L321-L327 Source-sdk-2013]
     * 
     * **Bug [#3372](https://github.com/Facepunch/garrysmod-issues/issues/3372):**
     * >This crashes the game with scaled vehicles. 
     * @example
     * 
     * function ENT:SpawnMe(ply)
     * 	local SpawningPos = ply:GetPos()
     * 	local ent = ents.Create("sent_ball")
     * 	ent:SetPos( SpawningPos ) 
     * 	ent:Spawn()
     * 	ent:Activate()
     * end
     * 
     * // Spawns a 'sent_ball' on the player. 
     */
    public Activate(): void;
    
    /**
     * Add a callback function to a specific event. This is used instead of hooks to avoid calling empty functions unnecessarily.
     * 
     * This also allows you to use certain hooks in engine entities (non-scripted entities).
     * 
     * {{Warning|This method does not check if the function has already been added to this object before, so if you add the same callback twice, it will be run twice! Make sure to add your callback only once.}} 
     * @param hook  The hook name to hook onto. See [[Entity Callbacks]] 
     * @param func  The function to call 
     * @returns The callback ID that was just added, which can later be used in {{ClassFunction|Entity|RemoveCallback}}.
     * 
     * Returns nothing if the passed callback function was invalid or when asking for a non-existent hook. 
     * @example
     * 
     * function myfunc( entity, newangle )
     * 	// Do stuff
     * end
     * 
     * myentity:AddCallback( "OnAngleChange", myfunc )
     * 
     * // 
     */
    public AddCallback(hook: string, func: Function): number;
    
    /**
     * Applies an engine effect to an entity. 
     * @param effect  The effect to apply, see {{Enum|EF}}. 
     * @example
     * 
     * Entity:AddEffects( EF_ITEM_BLINK )
     * 
     * // Adds a blinking effect to an entity. 
     */
    public AddEffects(effect: EF): void;
    
    /**
     * Adds engine flags. 
     * @param flag  Engine flag to add, see {{Enum|EFL}} 
     */
    public AddEFlags(flag: EFL): void;
    
    /**
     * Adds flags to the entity. 
     * @param flag  Flag to add, see {{Enum|FL}} 
     */
    public AddFlags(flag: FL): void;
    
    /**
     * Adds a gesture animation to the entity and plays it.
     * 
     * See {{ClassFunction|Entity|AddGestureSequence}} and {{ClassFunction|Entity|AddLayeredSequence}} for functions that takes sequences instead of {{Enum|ACT}}.
     * 
     * **Note:**
     * >This function only works on [[BaseAnimatingOverlay]] entites! 
     * @param activity  The activity to play as the gesture. See {{Enum|ACT}}. 
     * @param autokill [=true] 
     * @returns Layer ID of the started gesture, used to manipulate the played gesture by other functions. 
     */
    public AddGesture(activity: ACT, autokill?: boolean): number;
    
    /**
     * Adds a gesture animation to the entity and plays it.
     * 
     * See {{ClassFunction|Entity|AddGesture}} for a function that takes {{Enum|ACT}}.
     * 
     * See also {{ClassFunction|Entity|AddLayeredSequence}}.
     * 
     * **Note:**
     * >This function only works on [[BaseAnimatingOverlay]] entites! 
     * @param sequence  The sequence ID to play as the gesture. See {{ClassFunction|Entity|LookupSequence}}. 
     * @param autokill [=true] 
     * @returns Layer ID of the started gesture, used to manipulate the played gesture by other functions. 
     */
    public AddGestureSequence(sequence: number, autokill?: boolean): number;
    
    /**
     * Adds a gesture animation to the entity and plays it.
     * 
     * See {{ClassFunction|Entity|AddGestureSequence}} for a function that doesn't take priority.
     * 
     * See {{ClassFunction|Entity|AddGesture}} for a function that takes {{Enum|ACT}}.
     * 
     * **Note:**
     * >This function only works on [[BaseAnimatingOverlay]] entites! 
     * @param sequence  The sequence ID to play as the gesture. See {{ClassFunction|Entity|LookupSequence}}. 
     * @param priority 
     * @returns Layer ID of created layer 
     */
    public AddLayeredSequence(sequence: number, priority: number): number;
    
    /**
     * Adds solid flag(s) to the entity. 
     * @param flags  The flag(s) to apply, see {{Enum|FSOLID}}. 
     */
    public AddSolidFlags(flags: FSOLID): void;
    
    /**
     * Adds a {{Type|PhysObj}}ect to the entity's motion controller so that {{HookFunction|ENTITY|PhysicsSimulate}} will be called for given {{Type|PhysObj}}ect as well.
     * 
     * You must first create a motion controller with {{ClassFunction|Entity|StartMotionController}}.
     * 
     * You can remove added {{Type|PhysObj}}ects by using {{ClassFunction|Entity|RemoveFromMotionController}}.
     * 
     * **Note:**
     * >Only works on a scripted {{Type|Entity}} of anim type 
     * @param physObj  The {{Type|PhysObj}} to add to the motion controller. 
     */
    public AddToMotionController(physObj: PhysObj): void;
    
    /**
     * Returns an angle based on the ones inputted that you can use to align an object.
     * 
     * **Note:**
     * >This function doesn't change the angle of the entity on its own (see example). 
     * @param from  The angle you want to align from 
     * @param to  The angle you want to align to 
     * @returns The resulting aligned angle 
     * @example
     * 
     * ent1:SetAngles(ent1:AlignAngles(ent1:GetForward():Angle(), ent2:GetUp():Angle()))
     * 
     * // This example will make ent1 face up from ent2. 
     */
    public AlignAngles(from: Angle, to: Angle): Angle;
    
    /**
     * Spawns a clientside ragdoll for the entity, positioning it in place of the original entity, and makes the entity invisible. It doesn't preserve flex values (face posing) as CSRagdolls don't support flex.
     * 
     * It does not work on players. Use {{ClassFunction|Player|CreateRagdoll}} instead.
     * 
     * The original entity is not removed, and neither are any ragdolls previously generated with this function.
     * 
     * To make the entity re-appear, run {{ClassFunction|Entity|SetNoDraw}}( false ) 
     * @returns The created ragdoll. 
     * @example
     * 
     * for k,npc in pairs( ents.FindByClass( "npc_*" ) ) do
     *     npc.RagDoll = npc:BecomeRagdollOnClient()
     * end
     * 
     * // Spawns a ragdoll for all NPCs. 
     */
    public BecomeRagdollOnClient(): CSEnt;
    
    /**
     * Returns true if the entity is being looked at by the local player and is within 256 units of distance. 
     * @returns Is the entity being looked at by the local player and within 256 units. 
     */
    public BeingLookedAtByLocalPlayer(): boolean;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Dispatches blocked events to this entity's blocked handler. This function is only useful when interacting with entities like func_movelinear. 
     * @param entity  The entity that is blocking us 
     */
    public Blocked(entity: Entity): void;
    
    /**
     * Returns a centered vector of this entity, NPCs use this internally to aim at their targets.
     * 
     * **Note:**
     * >This only works on players and NPCs. 
     * @param origin  The vector of where the the attack comes from. 
     * @param noisy [=false] Decides if it should return the centered vector with a random offset to it. 
     * @returns The centered vector. 
     */
    public BodyTarget(origin: Vector, noisy?: boolean): Vector;
    
    /**
     * Returns whether the entity's bone has the flag or not. 
     * @param boneID  Bone ID to test flag of. 
     * @param flag  The flag to test, see {{Enum|BONE}} 
     * @returns Whether the bone has that flag or not 
     */
    public BoneHasFlag(boneID: number, flag: BONE): boolean;
    
    /**
     * This function takes the boneID and returns the length of it in an unrounded decimal 
     * @param boneID  The ID of the bone you want the length of. You may want to get the length of the next bone ( boneID + 1 ) for decent results 
     * @returns The length of the bone 
     * @example
     * 
     * print( player.GetByID( 1 ):BoneLength( 1 ) )
     * 
     * // Returns first bones length of first player on the server 
     */
    public BoneLength(boneID: number): number;
    
    /**
     * Returns the distance between the center of the bounding box and the furthest bounding box corner. 
     * @returns The radius of the bounding box. 
     */
    public BoundingRadius(): number;
    
    /**
     * Called whenever the entity's position changes. A callback for when an entity's angle changes is available via {{ClassFunction|Entity|AddCallback}}.
     * 
     * Like {{HookFunction|ENTITY|RenderOverride}}, this hook works on any entity (scripted or not) it is applied on. 
     * @param pos  The entity's actual position. May differ from {{ClassFunction|Entity|GetPos}} 
     * @param ang  The entity's actual angles. May differ from {{ClassFunction|Entity|GetAngles}} 
     * @returns [New position, New angles] 
     * !TupleReturn
     */
    protected CalcAbsolutePosition(pos: Vector, ang: Angle): [Vector, Angle];
    
    /**
     * Causes a specified function to be run if the entity is removed by any means. This can later be undone by {{ClassFunction|Entity|RemoveCallOnRemove}} if you need it to not run.
     * 
     * **Bug [#1275](https://github.com/Facepunch/garrysmod-issues/issues/1275):**
     * >Using players with this function will provide a gimped entity to the callback. 
     * @param identifier  Identifier of the function within CallOnRemove 
     * @param removeFunc  Function to be called on remove 
     * @param argnargs  Optional arguments to pass to removeFunc. Do note that the first argument passed to the function will always be the entity being removed, and the arguments passed on here start after that. 
     * @example
     * 
     * Entity:CallOnRemove("StopEngineSound",function(ent) ent:StopSound( "enginenoise.wav" ) end)
     * 
     * // Stops an engine sound when the entity is removed 
     */
    public CallOnRemove(identifier: string, removeFunc: Function, ...argnargs: (any)[]): void;
    
    /**
     * Controls if a property can be used on this entity or not.
     * 
     * This hook will only work in Sandbox derived gamemodes that do not have {{HookFunction|SANDBOX|CanProperty}} overridden. 
     * @param ply  Player, that tried to use the property 
     * @param property  Class of the property that is tried to use, for example - bonemanipulate 
     * @returns Return false to disallow using that property, return true to allow. 
     */
    protected CanProperty(ply: Player, property: string): boolean;
    
    /**
     * Resets all pose parameters such as aim_yaw, aim_pitch and rotation. 
     */
    public ClearPoseParameters(): void;
    
    /**
     * Declares that the collision rules of the entity have changed, and subsequent calls for {{HookFunction|GM|ShouldCollide}} with this entity may return a different value than they did previously.
     * 
     * {{Warning|This function must '''not''' be called inside of <!--a physics hook, including -->{{HookFunction|GM|ShouldCollide}}. Instead, it must be called in advance when the condition is known to change.}}
     * 
     * {{Warning|Failure to use this function correctly will result in a crash of the physics engine.}} 
     */
    public CollisionRulesChanged(): void;
    
    /**
     * Returns whether the entity was created by map or not. 
     * @returns Is created by map? 
     */
    public CreatedByMap(): boolean;
    
    /**
     * Creates a clientside particle system attached to the entity. See also {{GlobalFunction|CreateParticleSystem}}
     * 
     * **Note:**
     * >The particle effect must be precached with {{GlobalFunction|PrecacheParticleSystem}} and the file its from must be added via {{LibraryFunction|game|AddParticles}} before it can be used! 
     * @param particle  The particle name to create 
     * @param attachment  Attachment ID to attach the particle to 
     * @param options [=nil] A table of tables ( IDs 1 to 64 ) having the following structure:
     * * {{FuncArg|number|attachtype|The particle attach type. See {{Enum|PATTACH}}. '''Default:''' PATTACH_ABSORIGIN}}
     * * {{FuncArg|Entity|entity|The parent entity? '''Default:''' NULL}}
     * * {{FuncArg|Vector|position|The offset position for given control point. '''Default:'''  nil}}
     * 
     * This only affects the control points of the particle effects and will do nothing if the effect doesn't use control points. 
     * @returns The created particle system. 
     */
    public CreateParticleEffect(particle: string, attachment: number, options?: table[]): CNewParticleEffect;
    
    /**
     * Draws the shadow of an entity. 
     */
    public CreateShadow(): void;
    
    /**
     * Whenever the entity is removed, entityToRemove will be removed also. 
     * @param entityToRemove  The entity to be removed 
     */
    public DeleteOnRemove(entityToRemove: Entity): void;
    
    /**
     * Removes the shadow for the entity.
     * 
     * The shadow will be recreated as soon as the entity wakes.
     * 
     * Doesn't affect shadows from flashlight/lamps/env_projectedtexture. 
     */
    public DestroyShadow(): void;
    
    /**
     * Disables an active matrix. 
     * @param matrixType  The name of the matrix type to disable.
     * 
     * The only known matrix type is "RenderMultiply". 
     */
    public DisableMatrix(matrixType: string): void;
    
    /**
     * Performs a trace attack. 
     * @param damageInfo  The damage to apply. 
     * @param traceRes  Trace result to use to deal damage. See {{Struct|TraceResult}} 
     * @param dir [=traceRes.HitNormal] Direction of the attack. 
     */
    public DispatchTraceAttack(damageInfo: CTakeDamageInfo, traceRes: TraceResult, dir?: Vector): void;
    
    /**
     * Called whenever an engine schedule is being ran. 
     */
    protected DoingEngineSchedule(): void;
    
    /**
     * This removes the argument entity from an ent's list of entities to 'delete on remove' 
     * @param entityToUnremove  The entity to be removed from the list of entities to delete 
     */
    public DontDeleteOnRemove(entityToUnremove: Entity): void;
    
    /**
     * Runs a Lua schedule. Runs tasks inside the schedule.
     * 
     * [[Category:ENT_AI_Hooks]] 
     * @param sched  The schedule to run. 
     */
    protected DoSchedule(sched: table): void;
    
    /**
     * Called if and when the entity should be drawn opaquely, based on the {{ClassFunction|Entity|GetRenderGroup}} of the entity.
     * 
     * See {{Struct|ENT}} and {{Enum|RENDERGROUP}} for more information. 
     * @param flags  The bit flags from {{Enum|STUDIO}} 
     * @example
     * 
     * function ENT:Draw()
     *         //Drawing the model
     * 	self:DrawModel()
     * 	
     *         //The amount to display
     * 	local amount = 10
     * 	
     * 	local Pos = self:GetPos()
     * 	local Ang1 = Angle(0, 0, 90)
     * 	local Ang2 = Angle(0, 0, 90)
     * 	
     * 	Ang1:RotateAroundAxis(Ang1:Right(), self.rotate)
     * 	Ang2:RotateAroundAxis(Ang2:Right(), self.rotate + 180)
     * 
     * 	//Draws front
     * 	cam.Start3D2D(Pos + Ang1:Up() * 0, Ang1, 0.2)
     * 		draw.DrawText("$ "..amount, "Default", 0, -50, Color(0, 255, 0, 255),TEXT_ALIGN_CENTER)
     * 	cam.End3D2D()
     * 	
     * 	//Draws back
     * 	cam.Start3D2D(Pos + Ang2:Up() * 0, Ang2, 0.2)
     * 		draw.DrawText("$ "..amount, "Default", 0, -50, Color(0, 255, 0, 255),TEXT_ALIGN_CENTER)
     * 	cam.End3D2D()
     * 	
     * 	//Resets the rotation
     * 	if(self.rotate > 359) then self.rotate = 0 end
     * 	
     * 	//Rotates
     * 	self.rotate = self.rotate - (100*(self.lasttime-SysTime( )))
     * 	self.lasttime = SysTime()
     * end
     * 
     * // Draws the model And makes a rotating text over the entity 
     */
    protected Draw(flags: STUDIO): void;
    
    /**
     * Draws the entity or model.
     * 
     * If called inside {{HookFunction|ENTITY|Draw}} or {{HookFunction|ENTITY|DrawTranslucent}}, it only draws the entity's model itself.
     * 
     * If called outside of those hooks, it will call both of said hooks depending on {{ClassFunction|Entity|GetRenderGroup}}, drawing the entire entity again.
     * 
     * **Note:**
     * >When drawing an entity more than once per frame in different positions, you should call {{ClassFunction|Entity|SetupBones}} before each draw; Otherwise, the entity will retain its first drawn position.
     * 
     * {{RenderingContext|Function|3D}}
     * 
     * **Bug [#1558](https://github.com/Facepunch/garrysmod-issues/issues/1558):**
     * >Calling this on entities with [[Enums/EF|EF_BONEMERGE]] and [[Enums/EF|EF_NODRAW]] applied causes a crash.
     * 
     * **Bug [#2688](https://github.com/Facepunch/garrysmod-issues/issues/2688):**
     * >Using this with a map model ({{LibraryFunction|game|GetWorld}}():[[Entity/GetModel|GetModel]]()) crashes the game. 
     * @example
     * 
     * local modelexample = ClientsideModel( "models/thrusters/jetpack.mdl" )
     * modelexample:SetNoDraw( true )
     * 
     * local offsetvec = Vector( 3, -5.6, 0 )
     * local offsetang = Angle( 180, 90, -90 )
     * 
     * hook.Add( "PostPlayerDraw" , "manual_model_draw_example" , function( ply )
     * 	local boneid = ply:LookupBone( "ValveBiped.Bip01_Spine2" )
     * 	
     * 	if not boneid then
     * 		return
     * 	end
     * 	
     * 	local matrix = ply:GetBoneMatrix( boneid )
     * 	
     * 	if not matrix then 
     * 		return 
     * 	end
     * 	
     * 	local newpos, newang = LocalToWorld( offsetvec, offsetang, matrix:GetTranslation(), matrix:GetAngles() )
     * 	
     * 	modelexample:SetPos( newpos )
     * 	modelexample:SetAngles( newang )
     * 	modelexample:SetupBones()
     * 	modelexample:DrawModel()
     * 	
     * end)
     * 
     * // Manually draws a single {{GlobalFunction|ClientsideModel}} on the specified bone, on the given offset for every player affected by this hook.
     * 
     * This is useful in case you want to reuse a single model without having to create one for each player. 
     */
    public DrawModel(): void;
    
    /**
     * Sets whether an entity's shadow should be drawn. 
     * @param shouldDraw  True to enable, false to disable shadow drawing. 
     */
    public DrawShadow(shouldDraw: boolean): void;
    
    /**
     * Called when the entity should be drawn translucently. 
     * @param flags  The bit flags from {{Enum|STUDIO}} 
     * @example
     * 
     * function ENT:DrawTranslucent()
     * 
     * 	// This is here just to make it backwards compatible.
     * 	// You shouldn't really be drawing your model here unless it's translucent
     * 
     * 	self:Draw()
     * 
     * end
     * 
     * // The default action for this hook is to call {{HookFunction|ENTITY|Draw}}. 
     */
    protected DrawTranslucent(flags: STUDIO): void;
    
    /**
     * Move an entity down until it collides with something.
     * {{Warning|The entity needs to already have something below it within 256 units.}} 
     * @example
     * 
     * for _, ent in pairs( ents.FindByClass( "prop_physics" ) ) do
     * 	ent:DropToFloor( )
     * end
     * 
     * // Move all props on the server down until they collide with something@example
     * 
     * hook.Add( "PlayerSpawn", "DropGround", function( ply )
     * 	ply:DropToFloor()
     * end )
     * 
     * // Drops players to the ground when they spawn 
     */
    public DropToFloor(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Sets up a self.dt.NAME alias for a Data Table variable.
     * 
     * {{Warning|You should use {{ClassFunction|Entity|NetworkVar}} instead}} 
     * @param Type  The type of the DTVar being set up. It can be one of the following: 'Int', 'Float', 'Vector', 'Angle', 'Bool', 'Entity' or 'String' 
     * @param ID  The ID of the DTVar. Can be between 0 and 3 
     * @param Name  Name by which you will refer to DTVar. It must be a valid variable name. (No spaces!) 
     * @example
     * 
     * function ENT:SetupDataTables()
     * 
     * 	self:DTVar( "Float", 0, "TargetZ" )
     * 	self:DTVar( "Float", 1, "Speed" )
     * 
     * end
     * 
     * // Sets up two float networked variables, '''TargetZ''' and '''Speed''' 
     */
    public DTVar(Type: string, ID: number, Name: string): void;
    
    /**
     * Plays a sound on an entity. If run clientside, the sound will only be heard locally.
     * 
     * If used on a player or NPC character with the mouth rigged, the character will "lip-sync". ( Does not work with all sounds )
     * 
     * **Note:**
     * >You can only override the volume and pitch if you use the filename, not the sound script/manifest name.
     * 
     * **Note:**
     * >It is recommended to use sound scripts ( see {{LibraryFunction|sound|Add}} ) over direct file paths. This will allow you to use {{ClassFunction|Entity|StopSound}} to stop the played sound scripts.
     * 
     * **Bug [#2651](https://github.com/Facepunch/garrysmod-issues/issues/2651):**
     * >This does not respond to {{GlobalFunction|SuppressHostEvents}}. 
     * @param soundName  The name of the sound to be played.
     * **Note:**
     * >Ensure this string has no whitespace at the start or end (you can use string.Trim), or else you'll get an error. 
     * @param soundLevel [=75] A modifier for the distance this sound will reach, acceptable range is 0 to 511. 100 means no adjustment to the level. See {{Enum|SNDLVL}} 
     * @param pitchPercent [=100] The pitch applied to the sound. The acceptable range is from 0 to 255. 100 means the pitch is not changed. 
     * @param volume [=1] The volume, from 0 to 1. 
     * @param channel [=CHAN_AUTO] The sound channel , see {{Enum|CHAN}}
     * **Note:**
     * >For weapons, the default is CHAN_WEAPON. 
     * @example
     * 
     * Entity(1):EmitSound( "path/to/sound.wav", 75, 100, 1, CHAN_AUTO ) // Same as below
     * Entity(1):EmitSound( "path/to/sound.wav" ) // You can remove the arguments that have default values.
     * 
     * // Plays sound from the first player on the server. 
     */
    public EmitSound(soundName: string, soundLevel?: SNDLVL, pitchPercent?: number, volume?: number, channel?: CHAN): void;
    
    /**
     * Toggles the constraints of this ragdoll entity on and off. 
     * @param toggleConstraints  Set to true to enable the constraints and false to disable them. 
     */
    public EnableConstraints(toggleConstraints: boolean): void;
    
    /**
     * Flags an entity as using custom lua defined collisions. Fixes entities having spongy player collisions or not hitting traces, such as after {{ClassFunction|Entity|PhysicsFromMesh}} 
     * @param useCustom  True to flag this entity 
     * @example
     * 
     * function ENT:ProceduralPlatform()
     * 	local VERTICES = {},
     * 	for x = 1, 32, 1, do
     * 		for y = 1, 32, do
     * 			table.insert( VERTICES, { pos = ( self:GetPos() + Vector( 0, 0, 1 ) ) } );
     * 			table.insert( VERTICES, { pos = ( self:GetPos() + Vector( 0, y, 1 ) ) } );
     * 			table.insert( VERTICES, { pos = ( self:GetPos() + Vector( x, y, 1 ) ) } );
     * 
     * 			table.insert( VERTICES, { pos = ( self:GetPos() + Vector( 0, 0, 1 ) ) } );
     * 			table.insert( VERTICES, { pos = ( self:GetPos() + Vector( x, y, 1 ) ) } );
     * 			table.insert( VERTICES, { pos = ( self:GetPos() + Vector( x, 0, 1 ) ) } );
     * 		end
     * 	end
     * 	self:PhysicsFromMesh( VERTICES );
     * 	self:GetPhysicsObject():EnableMotion( false );
     * 	self:EnableCustomCollisions( true );
     * end
     * 
     * // Creates a mesh table, and assigns it as the entity's collisions 
     */
    public EnableCustomCollisions(useCustom: boolean): void;
    
    /**
     * Can be used to apply a custom {{Type|VMatrix}} to the entity, mostly used for scaling the model by a {{Type|Vector}}.
     * 
     * To disable it, use {{ClassFunction|Entity|DisableMatrix}}.
     * 
     * If your old scales are wrong due to a recent update, use {{ClassFunction|Entity|SetLegacyTransform}} as a quick fix.
     * 
     * **Note:**
     * >The matrix can also be modified to apply a custom rotation and offset via the {{ClassFunction|VMatrix|SetAngles}} and {{ClassFunction|VMatrix|SetTranslation}} functions.
     * 
     * **Bug [#3502](https://github.com/Facepunch/garrysmod-issues/issues/3502):**
     * >This does not scale procedural bones. 
     * @param matrixType  The name of the matrix type.
     * 
     * The only implemented matrix type is "RenderMultiply". 
     * @param matrix  The matrix to apply before drawing the entity. 
     * @example
     * 
     * local scale = Vector(1,1,4)
     * 
     * local mat = Matrix()
     * mat:Scale(scale)
     * prop:EnableMatrix("RenderMultiply", mat)
     * 
     * // To scale a prop's height by 4x 
     */
    public EnableMatrix(matrixType: string, matrix: VMatrix): void;
    
    /**
     * Called when the entity stops touching another entity.
     * 
     * {{Warning|This only works for '''brush''' entities and for entities that have {{ClassFunction|Entity|SetTrigger}} set to true.}} 
     * @param entity  The entity which was touched. 
     */
    protected EndTouch(entity: Entity): void;
    
    /**
     * Called whenever an engine schedule is finished. 
     */
    protected EngineScheduleFinish(): void;
    
    /**
     * Gets the unique entity index of an entity.
     * 
     * **Note:**
     * >Entity indices are marked as unused after deletion, and can be reused by newly-created entities 
     * @returns The index of the entity.
     * 
     * -1 for clientside-only or serverside-only entities. 
     * @example
     * 
     * print( player.GetAll()[1]:EntIndex() )
     * 
     * // Demonstrates the use of this function. 
     */
    public EntIndex(): number;
    
    /**
     * {{Validate}}Called when an NPC's expression has finished. 
     * @param strExp  The path of the expression. 
     */
    protected ExpressionFinished(strExp: string): void;
    
    /**
     * Extinguishes the entity if it is on fire.
     * 
     * Has no effect if called inside EntityTakeDamage (and the attacker is the flame that's hurting the entity) 
     * @example
     * 
     * player.GetAll()[1]:Extinguish()
     * 
     * // Demonstrates the use of this function. 
     */
    public Extinguish(): void;
    
    /**
     * Returns the direction a player/npc/ragdoll is looking as a world-oriented angle.
     * 
     * **Bug [#1150](https://github.com/Facepunch/garrysmod-issues/issues/1150):**
     * >This can return an incorrect value in pods.
     * 
     * **Bug [#2620](https://github.com/Facepunch/garrysmod-issues/issues/2620):**
     * >This can return an incorrect value in jeeps when used with {{ClassFunction|Player|EnterVehicle}}. 
     * @returns eyeAng 
     * @example
     * 
     * print(LocalPlayer():EyeAngles())
     * 
     * // Print the local player's angles 
     */
    public EyeAngles(): Angle;
    
    /**
     * Returns the position of an Player/NPC's view, or two vectors for ragdolls (one for each eye) 
     * @returns [View position of the entity.
     * This will be be position of the first eye for ragdoll., For a ragdoll, this is the position of the second eye.] 
     * !TupleReturn
     */
    public EyePos(): [Vector, Vector];
    
    /**
     * Searches for bodygroup with given name. 
     * @param name  The bodygroup name to search for. 
     * @returns Bodygroup ID, -1 if not found 
     */
    public FindBodygroupByName(name: string): number;
    
    /**
     * Returns a transition from the given start and end sequence.
     * 
     * This function was only used by HL1 entities and NPCs, before the advent of sequence blending and gestures. 
     * @param currentSequence  The currently playing sequence 
     * @param goalSequence  The goal sequence. 
     * @returns The transition sequence, -1 if not available. 
     */
    public FindTransitionSequence(currentSequence: number, goalSequence: number): number;
    
    /**
     * Fires an entity's input. You can find inputs for most entities on the [https://developer.valvesoftware.com/wiki/Output Valve Developer Wiki] 
     * @param input  The name of the input to fire 
     * @param param [=""] The value to give to the input, can also be a {{Type|number}}. 
     * @param delay [=0] Delay in seconds before firing 
     * @example
     * 
     * local tr = LocalPlayer():GetEyeTrace()
     * local ent = tr.Entity
     * if IsValid(ent) then
     * 	ent:Fire("Lock")
     * end
     * 
     * // If you are looking at a door, this will lock it 
     */
    public Fire(input: string, param?: string, delay?: number): void;
    
    /**
     * Called before firing animation events, such as muzzle flashes or shell ejections.
     * 
     * **Note:**
     * >This hook only works on "anim" type entities. 
     * @param pos  Position of the effect 
     * @param ang  Angle of the effect 
     * @param event  The event ID of happened even. See [http://developer.valvesoftware.com/wiki/Animation_Events this page]. 
     * @param name  Name of the event 
     * @returns Return true to disable the effect 
     */
    protected FireAnimationEvent(pos: Vector, ang: Angle, event: number, name: string): boolean;
    
    /**
     * Fires a bullet.
     * 
     * When used in a [[:Category:WEAPON_Hooks | WEAPON]] hook such as {{HookFunction|WEAPON|Think}} or {{HookFunction|WEAPON|PrimaryAttack}}, it will use {{ClassFunction|Player|LagCompensation}} internally.
     * 
     * **Note:**
     * >Lag compensation will not work if this function is called in a timer, regardless if the timer was made in a [[:Category:WEAPON_Hooks|WEAPON]] hook. 
     * @param bulletInfo  The bullet data to be used. See the {{Struct|Bullet}}. 
     * @param suppressHostEvents [=false] Has the effect of encasing the FireBullets call in {{GlobalFunction|SuppressHostEvents}}, only works in multiplayer. 
     */
    public FireBullets(bulletInfo: Bullet, suppressHostEvents?: boolean): void;
    
    /**
     * Makes an entity follow another entity's bone.
     * 
     * Internally this function calls {{ClassFunction|Entity|SetParent}}( parent, boneid ) and {{ClassFunction|Entity|AddEffects}}( EF_FOLLOWBONE ).
     * **Note:**
     * >If the entity vibrates, you probably need to run {{ClassFunction|Entity|SetPredictable}}( false ) clientside. 
     * @param boneid  The bone to follow 
     */
    public FollowBone(boneid: number): void;
    
    /**
     * Makes an entity follow another entity's bone.
     * 
     * Internally this function calls {{ClassFunction|Entity|SetParent}}( parent, boneid ) and {{ClassFunction|Entity|AddEffects}}( EF_FOLLOWBONE ).
     * **Note:**
     * >If the entity vibrates, you probably need to run {{ClassFunction|Entity|SetPredictable}}( false ) clientside. 
     * @param parent [=NULL] The entity to follow the bone of. If unset, removes the FollowBone effect. 
     * @param boneid [=] The bone to follow 
     */
    public FollowBone(parent?: Entity, boneid?: number): void;
    
    /**
     * Forces the Entity to be dropped, when it is being held by a player's gravitygun or physgun. 
     */
    public ForcePlayerDrop(): void;
    
    /**
     * Advances the cycle of an animated entity by the given delta. Since cycle is a value between 0 and 1, delta should be as well.
     * 
     * Animations that loop will automatically reset the cycle so you don't have to - ones that do not will stop animating once you reach the end of their sequence. 
     * @param delta  Amount to advance frame by. 
     * @example
     * 
     * function PANEL:RunAnimation()
     * 	self.Entity:FrameAdvance( (RealTime()-self.LastPaint) * self.m_fAnimSpeed )	
     * end
     * 
     * // From DModelPanel 
     */
    public FrameAdvance(delta: number): void;
    
    /**
     * Returns the entity's velocity.
     * 
     * **Note:**
     * >Actually binds to CBaseEntity::GetLocalVelocity() which retrieves the velocity of the entity due to its movement in the world from forces such as gravity. Does not include velocity from entity-on-entity collision. 
     * @returns The velocity of the entity. 
     */
    public GetAbsVelocity(): Vector;
    
    /**
     * Gets the angles of given entity.
     * 
     * **Bug [#2764](https://github.com/Facepunch/garrysmod-issues/issues/2764):**
     * >This returns incorrect results for the local player clientside.
     * 
     * **Bug [#3106](https://github.com/Facepunch/garrysmod-issues/issues/3106):**
     * >This will return the local player's {{GlobalFunction|EyeAngles}} in [http://wiki.garrysmod.com/page/Category:3D_Rendering_Hooks rendering hooks].
     * 
     * **Bug [#3107](https://github.com/Facepunch/garrysmod-issues/issues/3107):**
     * >This will return {{GlobalFunction|Angle}}(0,0,0) in [http://wiki.garrysmod.com/page/Category:3D_Rendering_Hooks rendering hooks] while paused in single-player. 
     * @returns The angles of the entity. 
     * @example
     * 
     * print( player.GetByID(1):GetAngles() )
     * 
     * // Prints the 1st player's angles. 
     */
    public GetAngles(): Angle;
    
    /**
     * Returns a table containing the number of frames, flags, name, and FPS of an entity's animation ID.
     * 
     * **Note:**
     * >Animation ID is not the same as sequence ID.
     * 
     * {{Warning|Using an animation ID that is too far out of a model's range of animations can crash the client/server. When there are no animations left in the model the default animation info (animIndex <nowiki>=</nowiki> 0) is returned.}} 
     * @param animIndex  The animation ID to look up 
     * @returns Information about the animation 
     * @example
     * 
     * function GetAnimInfoSequence( ent, seq )
     * 
     * 	if( !IsValid( ent ) ) then return nil end
     * 
     * 	local seqname = ent:GetSequenceName( seq )
     * 	
     * 	if( seqname == "Unknown" ) then return nil end
     * 
     * 	local info = nil
     * 	local done = ent:GetAnimInfo(0).label	// this is how we know when to stop
     * 	local i = 1
     * 
     * 	// We don't want to increment too high or we will run into errors or possibly crashes
     * 	while(i < 1600) do    // arbitrary failsafe
     * 	
     * 		info = ent:GetAnimInfo(i)
     * 		
     * 		if(string.find(info.label, "@"..seqname) or string.find(info.label, "a_"..seqname)) then
     * 			return info
     * 		end
     * 		
     * 		// the first animation info is repeated when there are no animations left in the model
     * 		if(info.label == done) then break end
     * 		
     * 		i = i + 1
     * 		
     * 	end
     * 
     * 	return nil
     * 
     * end
     * 
     * // A function that finds an entity sequence's corresponding animation and returns the animation info. 
     */
    public GetAnimInfo(animIndex: number): table;
    
    /**
     * Returns the last time the entity had an animation update. Returns 0 if the entity doesn't animate. 
     * @returns The last time the entity had an animation update. 
     */
    public GetAnimTime(): number;
    
    /**
     * Gets the orientation and position of the attachment by its ID, returns nothing if the attachment does not exist.
     * 
     * **Note:**
     * >The update rate of this function is limited by the setting of ENT.AutomaticFrameAdvance for [[Scripted Entities]]!
     * 
     * **Bug [#1255](https://github.com/Facepunch/garrysmod-issues/issues/1255):**
     * >This will return improper values for viewmodels if used in {{HookFunction|GM|CalcView}}. 
     * @param attachmentId  The internal ID of the attachment. 
     * @returns The angle and position of the attachment. See the {{Struct|AngPos}}. Most notably, the table contains the keys "Ang" and "Pos". 
     * @example
     * 
     * local vm = ply:GetViewModel()
     * local obj = vm:LookupAttachment( "muzzle" )
     * local muzzlepos = vm:GetAttachment( obj )
     * 
     * // Grabs the muzzle position of a player's view model 
     */
    public GetAttachment(attachmentId: number): AngPos;
    
    /**
     * Returns a table containing all attachments of the given entitys model.
     * 
     * Returns an empty table or '''nil''' in case it's model has no attachments.
     * 
     * **Bug [#3167](https://github.com/Facepunch/garrysmod-issues/issues/3167):**
     * >This can have inconsistent results in single-player. 
     * @returns Attachment data. See {{Struct|AttachmentData}}. 
     * @example
     * 
     * PrintTable(LocalPlayer():GetAttachments())
     * 
     * // All the attachments present on the Kliener player model 
     */
    public GetAttachments(): AttachmentData;
    
    /**
     * {{Validate}} Called to determine how good an NPC is at using a particular weapon. 
     * @param wep  The weapon being used by the NPC. 
     * @param target  The target the NPC is attacking 
     * @returns The number of degrees of inaccuracy in the NPC's attack. 
     */
    protected GetAttackSpread(wep: Entity, target: Entity): number;
    
    /**
     * Returns the entity's base velocity which is their velocity due to forces applied by other entities. This includes entity-on-entity collision or riding a treadmill. 
     * @returns The base velocity of the entity. 
     */
    public GetBaseVelocity(): Vector;
    
    /**
     * Returns the blood color of this entity. This can be set with {{ClassFunction|Entity|SetBloodColor}}. 
     * @returns Color from {{Enum|BLOOD_COLOR}} 
     */
    public GetBloodColor(): BLOOD_COLOR;
    
    /**
     * Gets the exact value for specific bodygroup of given entity. 
     * @param id  The id of bodygroup to get value of. Starts from 0. 
     * @returns Current bodygroup. Starts from 0. 
     * @example
     * 
     * print( Entity(1):GetEyeTrace().Entity:GetBodygroup(2) )
     * 
     * // Gets the value of bodygroup 2 of entity player 1 is aiming at. 
     */
    public GetBodygroup(id: number): number;
    
    /**
     * Returns the count of possible values for this bodygroup.
     * 
     * This is '''not''' the maximum value, since the bodygroups start with 0, not 1. 
     * @param bodygroup  The ID of bodygroup to retrieve count of. 
     * @returns Count of values of passed bodygroup. 
     */
    public GetBodygroupCount(bodygroup: number): number;
    
    /**
     * Gets the name of specific bodygroup for given entity. 
     * @param id  The id of bodygroup to get the name of. 
     * @returns The name of the bodygroup 
     * @example
     * 
     * print( player.GetByID(1):GetEyeTrace().Entity:GetBodygroupName(1) )
     * 
     * // Demonstrates the use of this function. 
     */
    public GetBodygroupName(id: number): string;
    
    /**
     * Returns a list of all attachments of the entity. 
     * @returns Bodygroups as a table of {{Struct|BodyGroupData}}s if the entity can have bodygroups. 
     */
    public GetBodyGroups(): BodyGroupData[];
    
    /**
     * Returns the value of the bone controller with the specified ID.
     * 
     * **Note:**
     * >This is the precursor of pose parameters, and only works for Half Life 1: Source models supporting it. 
     * @param boneID  ID of the bone controller. Goes from 0 to 3. 
     * @returns The value set on the bone controller. 
     */
    public GetBoneController(boneID: number): number;
    
    /**
     * Returns the amount of bones in the entity. 
     * @returns The amount of bones in given entity; -1 on failure. 
     * @example
     * 
     * print( Entity(1):GetBoneCount() )
     * 
     * // Prints amount of bones in player 1 
     */
    public GetBoneCount(): number;
    
    /**
     * Returns the matrix (position / rotation transform) of a given bone entity.
     * 
     * **Bug [#884](https://github.com/Facepunch/garrysmod-issues/issues/884):**
     * >This can return the server's matrix during server lag.
     * 
     * **Bug [#3285](https://github.com/Facepunch/garrysmod-issues/issues/3285):**
     * >This can return garbage serverside or a 0,0,0 fourth column (represents position) for v49 models. 
     * @param boneID  The bone to retrieve matrix of.
     * * Bones clientside and serverside will differ 
     * @returns The matrix
     * 
     * * Some entities don't update animation every frame such as prop_physics and won't have accurate bone matrix. 
     */
    public GetBoneMatrix(boneID: number): VMatrix;
    
    /**
     * Returns name of given bone id. 
     * @param index  ID of bone to lookup name of 
     * @returns The name of given bone
     * 
     * * nil in case we failed or entity doesn't have a model
     * * "__INVALIDBONE__" in case the name cannot be read or the index is out of range. 
     * @example
     * 
     * print( Entity( 1 ):GetBoneName( 0 ) )
     * 
     * // Will print name of bone name with id 0 for first player.@example
     * 
     * function PrintBones(ent)
     *     for i=0, ent:GetBoneCount()-1 do
     *         print(i,ent:GetBoneName(i))
     *     end
     * end
     * 
     * // Prints all the bones of an entity. 
     */
    public GetBoneName(index: number): string;
    
    /**
     * Returns parent bone of given bone. 
     * @param bone  The bode ID of the bone to get parent of 
     * @returns Parent bone ID or -1 if we failed for some reason. 
     */
    public GetBoneParent(bone: number): number;
    
    /**
     * Returns the position and angle of the given attachment, relative to the world.
     * 
     * **Bug [#884](https://github.com/Facepunch/garrysmod-issues/issues/884):**
     * >This can return the server's position during server lag.
     * 
     * **Bug [#3285](https://github.com/Facepunch/garrysmod-issues/issues/3285):**
     * >This can return garbage serverside or {{GlobalFunction|Vector}}(0,0,0) for v49 models. 
     * @param boneIndex  The bone index of the bone to get the position of. See {{ClassFunction|Entity|LookupBone}}. 
     * @returns [The bone's position relative to the world., The bone's angle relative to the world.] 
     * !TupleReturn
     */
    public GetBonePosition(boneIndex: number): [Vector, Angle];
    
    /**
     * Returns info about given plane of non-nodraw brush model surfaces of the entity's model. Works on worldspawn as well. 
     * @param id  The index of the plane to get info of. Starts from 0. 
     * @returns [The origin of the plane.
     * 
     * This will be either the first vertex's position (if available) or the plane's normal multiplied by the plane's distance., The normal of the plane., The "distance" of the plane.
     * 
     * The distance is the dot product of the plane's normal and the point it was initialized with.] 
     * !TupleReturn
     */
    public GetBrushPlane(id: number): [Vector, Vector, number];
    
    /**
     * Returns the amount of planes of non-nodraw brush model surfaces of the entity's model. 
     * @returns The amount of brush model planes of the entity's model. 
     */
    public GetBrushPlaneCount(): number;
    
    /**
     * Returns the specified hook callbacks for this entity added with {{ClassFunction|Entity|AddCallback}}
     * 
     * The callbacks can then be removed with {{ClassFunction|Entity|RemoveCallback}}. 
     * @param hook  The hook to retrieve the callbacks from, see [[Entity Callbacks]] for the possible hooks. 
     * @returns A table containing the callbackid and function of all the callbacks for the specified hook 
     */
    public GetCallbacks(hook: string): table;
    
    /**
     * Returns ids of child bones of given bone. 
     * @param boneid  Bone id to lookup children of 
     * @returns A table of bone ids 
     */
    public GetChildBones(boneid: number): table;
    
    /**
     * Gets the children of the entity - that is, every entity whose move parent is this entity.
     * 
     * **Note:**
     * >This function returns {{ClassFunction|Entity|SetMoveParent}} children, '''NOT''' {{ClassFunction|Entity|SetParent}}!
     * {{ClassFunction|Entity|SetParent}} however also calls {{ClassFunction|Entity|SetMoveParent}}.
     * 
     * This means that some entities in the returned list might have a NULL {{ClassFunction|Entity|GetParent}}.
     * This also means that using this function on players will return their weapons on the client but not the server. 
     * @returns A list of movement children entities 
     * @example
     * 
     * // ent is a prop_effect entity
     * PrintTable( ent:GetChildren() )
     * 
     * // Example usage and output 
     */
    public GetChildren(): table;
    
    /**
     * Returns the classname of a entity. This is often the name of the Lua file or folder containing the files for the entity 
     * @returns The entity's classname 
     * @example
     * 
     * print( LocalPlayer( ):GetActiveWeapon( ):GetClass( ) )
     * 
     * // Prints the classname of the weapon that the player is holding. 
     */
    public GetClass(): string;
    
    /**
     * Returns an entity's collision bounding box. In most cases, this will return the same bounding box as {{ClassFunction|Entity|GetModelBounds}} unless the entity does not have a physics mesh or it has a {{Type|PhysObj}} different from the default.
     * 
     * **Bug [#223](https://github.com/Facepunch/garrysmod-issues/issues/223):**
     * >This can be out-of-sync between the client and server for weapons. 
     * @returns [The minimum vector of the collision bounds, The maximum vector of the collision bounds] 
     * !TupleReturn
     */
    public GetCollisionBounds(): [Vector, Vector];
    
    /**
     * Returns the entity's collision group 
     * @returns The collision group. See {{Enum|COLLISION_GROUP}} 
     */
    public GetCollisionGroup(): COLLISION_GROUP;
    
    /**
     * Returns the color the entity is set to. 
     * @returns The color of the entity as a {{Struct|Color}}. 
     */
    public GetColor(): Color;
    
    /**
     * Returns the two entities involved in a constraint ent, or nil if the entity is not a constraint. 
     * @returns [ent1, ent2] 
     * @example
     * 
     * function gmsave.ConstraintSave( ent )
     * 	local t = {}
     * 	t.EntOne, t.EntTwo = ent:GetConstrainedEntities()
     * 	local PhysA, PhysB = ent:GetConstrainedPhysObjects()
     * 
     * 	t.BoneOne = GetPhysicsObjectNum( t.EntOne, PhysA )
     * 	t.BoneTwo = GetPhysicsObjectNum( t.EntTwo, PhysB )
     * 	t.EntOne = gmsave.EntityEncode( t.EntOne )
     * 	t.EntTwo = gmsave.EntityEncode( t.EntTwo )
     * 	return t
     * 
     * end
     * 
     * // From gmsave/constraints.lua 
     * !TupleReturn
     */
    public GetConstrainedEntities(): [Entity, Entity];
    
    /**
     * Returns the two entities physobjects involved in a constraint ent, or no value if the entity is not a constraint. 
     * @returns [phys1, phys2] 
     * @example
     * 
     * function gmsave.ConstraintSave( ent )
     *  local t = {}
     *  t.EntOne, t.EntTwo = ent:GetConstrainedEntities()
     *  local PhysA, PhysB = ent:GetConstrainedPhysObjects()
     *  
     *  t.BoneOne = GetPhysicsObjectNum( t.EntOne, PhysA )
     *  t.BoneTwo = GetPhysicsObjectNum( t.EntTwo, PhysB )
     *  t.EntOne = gmsave.EntityEncode( t.EntOne )
     *  t.EntTwo = gmsave.EntityEncode( t.EntTwo )
     *  return t
     * end
     * 
     * // From gmsave/constraints.lua 
     * !TupleReturn
     */
    public GetConstrainedPhysObjects(): [PhysObj, PhysObj];
    
    /**
     * Returns entity's creation ID. Unlike {{ClassFunction|Entity|EntIndex}} or  {{ClassFunction|Entity|MapCreationID}}, it will always increase and old values won't be reused. 
     * @returns The creation ID 
     */
    public GetCreationID(): number;
    
    /**
     * Returns the time the entity was created on, relative to {{GlobalFunction|CurTime}}. 
     * @returns The time the entity was created on. 
     */
    public GetCreationTime(): number;
    
    /**
     * Gets the creator of the SENT. 
     * @returns The creator, NULL for no creator. 
     */
    public GetCreator(): Player;
    
    /**
     * Returns whether this entity uses custom collision check set by {{ClassFunction|Entity|SetCustomCollisionCheck}}. 
     * @returns Whether this entity uses custom collision check or not 
     */
    public GetCustomCollisionCheck(): boolean;
    
    /**
     * Returns the frame of the currently played sequence. This will be a number between 0 and 1 as a representation of sequence progress. 
     * @returns The frame of the currently played sequence 
     */
    public GetCycle(): number;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * This is called internally by the {{ClassFunction|Entity|NetworkVar}} system, you can use this in cases where using NetworkVar is not possible.
     * 
     * Get an angle stored in the datatable of the entity. 
     * @param key  Goes from 0 to 63.
     * Specifies what key to grab from datatable. 
     * @returns Requested angle. 
     */
    public GetDTAngle(key: number): Angle;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * This is called internally by the {{ClassFunction|Entity|NetworkVar}} system, you can use this in cases where using NetworkVar is not possible.
     * 
     * Get a boolean stored in the datatable of the entity. 
     * @param key  Goes from 0 to 63.
     * Specifies what key to grab from datatable. 
     * @returns Requested boolean. 
     */
    public GetDTBool(key: number): boolean;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * This is called internally by the {{ClassFunction|Entity|NetworkVar}} system, you can use this in cases where using NetworkVar is not possible.
     * 
     * Returns an entity stored in the datatable of the entity. 
     * @param key  Goes from 0 to 63.
     * Specifies what key to grab from datatable. 
     * @returns Requested entity. 
     */
    public GetDTEntity(key: number): Entity;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * This is called internally by the {{ClassFunction|Entity|NetworkVar}} system, you can use this in cases where using NetworkVar is not possible.
     * 
     * Get a float stored in the datatable of the entity. 
     * @param key  Goes from 0 to 63.
     * Specifies what key to grab from datatable. 
     * @returns Requested float. 
     */
    public GetDTFloat(key: number): number;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * This is called internally by the {{ClassFunction|Entity|NetworkVar}} system, you can use this in cases where using NetworkVar is not possible.
     * 
     * Get an integer stored in the datatable of the entity. 
     * @param key  Goes from 0 to 63.
     * Specifies what key to grab from datatable. 
     * @returns 32-bit signed integer 
     */
    public GetDTInt(key: number): number;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * This is called internally by the {{ClassFunction|Entity|NetworkVar}} system, you can use this in cases where using NetworkVar is not possible.
     * 
     * Get a string stored in the datatable of the entity. 
     * @param key  Goes from 0 to 3.
     * Specifies what key to grab from datatable. 
     * @returns Requested string. 
     */
    public GetDTString(key: number): string;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * This is called internally by the {{ClassFunction|Entity|NetworkVar}} system, you can use this in cases where using NetworkVar is not possible.
     * 
     * Get a vector stored in the datatable of the entity. 
     * @param key  Goes from 0 to 63.
     * Specifies what key to grab from datatable. 
     * @returns Requested vector. 
     */
    public GetDTVector(key: number): Vector;
    
    /**
     * Returns a bit flag of all engine effect flags of the entity. 
     * @returns Engine effect flags, see {{Enum|EF}} 
     */
    public GetEffects(): EF;
    
    /**
     * Returns a bit flag of all engine flags of the entity. 
     * @returns Engine flags, see {{Enum|EFL}} 
     */
    public GetEFlags(): EFL;
    
    /**
     * Returns the elasticity of this entity, used by some flying entities such as the Helicopter NPC to determine how much it should bounce around when colliding. 
     * @returns elasticity 
     */
    public GetElasticity(): number;
    
    /**
     * Returns all flags of given entity. 
     * @returns Flags of given entity as a bitflag, see {{Enum|FL}} 
     */
    public GetFlags(): FL;
    
    /**
     * Returns acceptable value range for the flex. 
     * @param flex  The ID of the flex to look up bounds of 
     * @returns [The minimum value for this flex, The maximum value for this flex] 
     * !TupleReturn
     */
    public GetFlexBounds(flex: number): [number, number];
    
    /**
     * Returns the ID of the flex based on given name. 
     * @param name  The name of the flex to get the ID of. Case sensitive. 
     * @returns The ID of flex
     * * nil if no flex with given name was found 
     */
    public GetFlexIDByName(name: string): number;
    
    /**
     * Returns flex name. 
     * @param id  The flex id to look up name of 
     * @returns The flex name 
     */
    public GetFlexName(id: number): string;
    
    /**
     * Returns the number of flexes this entity has. 
     * @returns The number of flexes. 
     */
    public GetFlexNum(): number;
    
    /**
     * Returns the flex scale of the entity. 
     * @returns The flex scale 
     */
    public GetFlexScale(): number;
    
    /**
     * Returns current weight ( value ) of the flex. 
     * @param flex  The ID of the flex to get weight of 
     * @returns The current weight of the flex 
     */
    public GetFlexWeight(flex: number): number;
    
    /**
     * Returns the forward vector of the entity, as a normalized direction vector 
     * @returns forwardDir 
     */
    public GetForward(): Vector;
    
    /**
     * Returns how much friction an entity has. Entities default to 1 (100%) and can be higher or even negative. 
     * @returns friction 
     */
    public GetFriction(): number;
    
    /**
     * Gets the gravity multiplier of the entity. 
     * @returns gravityMultiplier 
     */
    public GetGravity(): number;
    
    /**
     * Returns the object the entity is standing on. 
     * @returns The ground entity. 
     */
    public GetGroundEntity(): Entity;
    
    /**
     * Returns the entity's ground speed velocity, which is based on the entity's walk/run speed and/or the ground speed of their sequence ( {{ClassFunction|Entity|GetSequenceGroundSpeed}} ). Will return an empty {{Type|Vector}} if the entity isn't moving on the ground. 
     * @returns The ground speed velocity. 
     */
    public GetGroundSpeedVelocity(): Vector;
    
    /**
     * **Deprecated:**
     * >You should use {{ClassFunction|Entity|GetHitBoxBone}} instead. 
     */
    public GetHitboxBone(): void;
    
    /**
     * Gets the bone of a hit box 
     * @param hitbox  The number of the hit box 
     * @param group  The number of the hit box group 
     * @returns The number of the bone 
     * @example
     * 
     * local ply = LocalPlayer()
     * local numHitBoxGroups = ply:GetHitBoxGroupCount()
     * 
     * for group=0, numHitBoxGroups - 1 do
     *   local numHitBoxes = ply:GetHitBoxCount( group )
     *     
     *   for hitbox=0, numHitBoxes - 1 do
     *     local bone = ply:GetHitBoxBone(hitbox, group)
     * 
     *     print( "Hit box group " .. group .. ", hitbox " .. hitbox .. " is attached to bone " .. ply:GetBoneName(bone) )
     *   end
     * end
     * 
     * // 
     */
    public GetHitBoxBone(hitbox: number, group: number): number;
    
    /**
     * Gets the bounding box of a hit box 
     * @param hitbox  The number of the hitbox 
     * @param group  The group of the hitbox 
     * @returns [hit box mins, hit box maxs] 
     * @example
     * 
     * local mins, maxs = LocalPlayer():GetHitBoxBounds(0, 0)
     * print(mins, maxs)
     * 
     * // Displays the mins and maxs for the client's first hitbox in the first group, which is generally the head 
     * !TupleReturn
     */
    public GetHitBoxBounds(hitbox: number, group: number): [Vector, Vector];
    
    /**
     * Gets how many hit boxes are in a given hit box group 
     * @param group  The number of the hit box group 
     * @returns The number of hit boxes. 
     * @example
     * 
     * local numHitBoxGroups = LocalPlayer():GetHitBoxGroupCount()
     * 
     * for i=0, numHitBoxGroups - 1 do
     *   local numHitBoxes = LocalPlayer():GetHitBoxCount( i )
     *   print("Hit box group " .. i .. " has " .. numHitBoxes .. " hit boxes!")
     * end
     * 
     * // Will print out how many hit boxes the client has in each of their hit box groups 
     */
    public GetHitBoxCount(group: number): number;
    
    /**
     * Returns the number of hit box groups that an entity has. 
     * @returns number of hit box groups 
     * @example
     * 
     * local numHitBoxGroups = LocalPlayer():GetHitBoxGroupCount()
     * print(numHitBoxGroups)
     * 
     * // Prints how many hit box groups the client has 
     */
    public GetHitBoxGroupCount(): number;
    
    /**
     * Returns entity's current hit box set 
     * @returns [The current hit box set id, or no value if the entity doesn't have hit boxes, The current hit box set name, or no value if the entity doesn't have hit boxes] 
     * !TupleReturn
     */
    public GetHitboxSet(): [number, string];
    
    /**
     * Returns the amount of hitbox sets in the entity. 
     * @returns The amount of hitbox sets in the entity. 
     */
    public GetHitboxSetCount(): number;
    
    /**
     * An interface for accessing internal key values on entities.
     * 
     * This function returns variables created with '''DEFINE_KEYFIELD''' in C++ entities.
     * 
     * See {{ClassFunction|Entity|GetSaveTable}} for a more detailed explanation.
     * 
     * **Bug [#2552](https://github.com/Facepunch/garrysmod-issues/issues/2552):**
     * >This is missing prediction fields and most of the datatable clientside.
     * 
     * {{NextUpdate|This now supports '''DEFINE_FIELD'''s and supports all the same keys as {{ClassFunction|Entity|GetSaveTable}}.}} 
     * @param VariableName  Name of variable corresponding to an entity save value. 
     * @returns The internal variable value 
     */
    public GetInternalVariable(VariableName: string): any;
    
    /**
     * Returns a table containing all key values the entity has.
     * 
     * **Note:**
     * >This only includes engine defined key values. "targetname" is not an actual key value in-engine, use {{ClassFunction|Entity|GetName}} for that instead. For custom key values, use {{HookFunction|GM|EntityKeyValue}} or {{HookFunction|ENTITY|KeyValue}} to capture and store them. 
     * @returns A table of key values. 
     */
    public GetKeyValues(): table;
    
    /**
     * Returns the animation cycle/frame for given layer.
     * 
     * **Note:**
     * >This function only works on [[BaseAnimatingOverlay]] entites! 
     * @param layerID  The Layer ID 
     * @returns The animation cycle/frame for given layer. 
     */
    public GetLayerCycle(layerID: number): number;
    
    /**
     * Returns the duration of given layer.
     * 
     * **Note:**
     * >This function only works on [[BaseAnimatingOverlay]] entites! 
     * @param layerID  The Layer ID 
     * @returns The duration of the layer 
     */
    public GetLayerDuration(layerID: number): number;
    
    /**
     * Returns the current weight of the layer. See {{ClassFunction|Entity|SetLayerWeight}} for more information.
     * 
     * **Note:**
     * >This function only works on [[BaseAnimatingOverlay]] entites! 
     * @param layerID  The Layer ID 
     * @returns The current weight of the layer 
     */
    public GetLayerWeight(layerID: number): number;
    
    /**
     * Returns the rotation of the entity relative to its parent entity. 
     * @returns Relative angle 
     */
    public GetLocalAngles(): Angle;
    
    /**
     * Returns the non-VPhysics angular velocity of the entity relative to its parent entity. 
     * @returns The velocity 
     */
    public GetLocalAngularVelocity(): Angle;
    
    /**
     * Returns entity's position relative to it's parent. 
     * @returns Relative position 
     */
    public GetLocalPos(): Vector;
    
    /**
     * Gets the entity's angle manipulation of the given bone. This is relative to the default angle, so the angle is zero when unmodified. 
     * @param boneID  The bone's ID 
     * @returns The entity's angle manipulation of the given bone. 
     */
    public GetManipulateBoneAngles(boneID: number): Angle;
    
    /**
     * {{Validate}}
     * 
     * Returns the jiggle amount of the entity's bone. Seems to be broken. 
     * @param boneID  The bone ID 
     * @returns Returns a value ranging from 0 to 255 depending on the value set with {{ClassFunction|Entity|ManipulateBoneJiggle}}. 
     */
    public GetManipulateBoneJiggle(boneID: number): number;
    
    /**
     * Gets the entity's position manipulation of the given bone. This is relative to the default position, so it is zero when unmodified. 
     * @param boneId  The bone's ID 
     * @returns The entity's position manipulation of the given bone. 
     */
    public GetManipulateBonePosition(boneId: number): Vector;
    
    /**
     * Gets the entity's scale manipulation of the given bone. Normal scale is Vector( 1, 1, 1 ) 
     * @param boneID  The bone's ID 
     * @returns The entity's scale manipulation of the given bone 
     */
    public GetManipulateBoneScale(boneID: number): Vector;
    
    /**
     * Returns the material override for this entity. 
     * 
     * Returns an empty string if no material override exists. Use {{ClassFunction|Entity|GetMaterials}} to list it's default materials.
     * 
     * **Bug [#3362](https://github.com/Facepunch/garrysmod-issues/issues/3362):**
     * >The server's value takes priority on the client. 
     * @returns material 
     */
    public GetMaterial(): string;
    
    /**
     * Returns all materials of the entity's model.
     * 
     * This function is unaffected by {{ClassFunction|Entity|SetSubMaterial}} as it returns the original materials.
     * 
     * **Bug [#3362](https://github.com/Facepunch/garrysmod-issues/issues/3362):**
     * >The server's values take priority on the client.
     * 
     * **Bug:**
     * >The table returned by this function will not contain materials if they are missing from the disk/repository. This means that if you are attempting to find the ID of a material to replace with {{ClassFunction|Entity|SetSubMaterial}} and there are missing materials on the model, all subsequent materials will be offset in the table, meaning that the ID you are trying to get will be incorrect. 
     * @returns A table containing full paths to the materials of the model.
     * 
     * **Bug [#3216](https://github.com/Facepunch/garrysmod-issues/issues/3216):**
     * >This table is limited to 127 materials, even if the entity has more. 
     */
    public GetMaterials(): table;
    
    /**
     * Returns the surface material of this entity. 
     * @returns Surface material. See {{Enum|MAT}} 
     * @example
     * 
     * local function BackwardsEnums( enumname ) // Helper function to build our table of values.
     * 	local backenums = {}
     * 
     * 	for k, v in pairs( _G ) do
     * 		if type( k ) == "string" and string.find( k, "^"..enumname ) then
     * 			backenums[ v ] = k
     * 		end
     * 	end
     * 
     * 	return backenums
     * end
     * 
     * local MAT = BackwardsEnums( "MAT_" )
     * 
     * local validclasses = { prop_physics = true, prop_physics_multiplayer = true, prop_dynamic = true }
     * for k, v in pairs( ents.GetAll() ) do
     * 	if validclasses[ v:GetClass() ] then
     * 		print( v:GetModel(), MAT[ v:GetMaterialType() ] or "UNKNOWN" )
     * 	end
     * end
     * 
     * // Prints the MAT_ enum name for every prop on the map. 
     */
    public GetMaterialType(): MAT;
    
    /**
     * Returns the max health that the entity was given. It can be set via {{ClassFunction|Entity|SetMaxHealth}}. 
     * @returns Max health. 
     * @example
     * 
     * print( Entity( 1 ):GetMaxHealth() )
     * 
     * // Prints the maximum health set for player 1. 
     */
    public GetMaxHealth(): number;
    
    /**
     * Gets the model of given entity.
     * 
     * **Note:**
     * >This does not necessarily return the model's path, as is the case for brush and virtual models. 
     * @returns The entity's model. Will be a filesystem path for most models. 
     */
    public GetModel(): string;
    
    /**
     * Returns the entity's model bounds. This is different than the collision bounds/hull. This is not scaled with {{ClassFunction|Entity|SetModelScale}}, and will return the model's original, unmodified mins and maxs. 
     * @returns [The minimum vector of the bounds, The maximum vector of the bounds] 
     * !TupleReturn
     */
    public GetModelBounds(): [Vector, Vector];
    
    /**
     * Gets the physics bone count of the entity's model. 
     * @returns How many physics bones exist on the model. 
     */
    public GetModelPhysBoneCount(): number;
    
    /**
     * Gets the models radius. 
     * @returns The radius of the model 
     * @example
     * 
     * print( Entity(1):GetModelRadius() )
     * 
     * // Example usage of the function, tested on player. 
     */
    public GetModelRadius(): number;
    
    /**
     * {{Validate}}
     * Returns the entity's model render bounds. By default this will return the same bounds as {{ClassFunction|Entity|GetModelBounds}}. 
     * @returns [The minimum vector of the bounds, The maximum vector of the bounds] 
     * !TupleReturn
     */
    public GetModelRenderBounds(): [Vector, Vector];
    
    /**
     * Gets the selected entity's model scale. 
     * @returns Scale of that entity's model. 
     * @example
     * 
     * lua_run_cl print(LocalPlayer():GetModelScale())
     * 
     * // This example shows how one can get the model scale of their self. 
     */
    public GetModelScale(): number;
    
    /**
     * Returns the amount a momentary_rot_button entity is turned based on the given angle. 0 meaning completely turned closed, 1 meaning completely turned open. 
     * @param turnAngle  The angle of rotation to compare - usually should be {{ClassFunction|Entity|GetAngles}}. 
     * @returns The amount the momentary_rot_button is turned, ranging from 0 to 1, or nil if the entity is not a momentary_rot_button. 
     */
    public GetMomentaryRotButtonPos(turnAngle: Angle): number;
    
    /**
     * Returns the move collide type of the entity. The move collide is the way a physics object reacts to hitting an object - will it bounce, slide? 
     * @returns The move collide type, see {{Enum|MOVECOLLIDE}} 
     */
    public GetMoveCollide(): MOVECOLLIDE;
    
    /**
     * Returns the movement parent of this entity.
     * 
     * See {{ClassFunction|Entity|SetMoveParent}} for more info. 
     * @returns The movement parent of this entity. 
     */
    public GetMoveParent(): Entity;
    
    /**
     * Returns the entity's movetype 
     * @returns Move type. See {{Enum|MOVETYPE}} 
     */
    public GetMoveType(): MOVETYPE;
    
    /**
     * Returns the mapping name of this entity. 
     * @returns The name of the Entity 
     */
    public GetName(): string;
    
    /**
     * Gets networked angles for entity. 
     * @returns angle 
     */
    public GetNetworkAngles(): Angle;
    
    /**
     * **Deprecated:**
     * >You should use {{ClassFunction|Entity|GetNWAngle}} instead.
     * 
     * Retrieves a networked angle value at specified index on the entity that is set by {{ClassFunction|Entity|SetNetworkedAngle}}. 
     * @param key  The key that is associated with the value 
     * @param fallback [=Angle( 0, 0, 0 )] The value to return if we failed to retrieve the value. ( If it isn't set ) 
     * @returns The retrieved value 
     */
    public GetNetworkedAngle(key: string, fallback?: Angle): Angle;
    
    /**
     * **Deprecated:**
     * >You should use {{ClassFunction|Entity|GetNWBool}} instead.
     * 
     * Retrieves a networked boolean value at specified index on the entity that is set by {{ClassFunction|Entity|SetNetworkedBool}}. 
     * @param key  The key that is associated with the value 
     * @param fallback [=false] The value to return if we failed to retrieve the value. ( If it isn't set ) 
     * @returns The retrieved value 
     */
    public GetNetworkedBool(key: string, fallback?: boolean): boolean;
    
    /**
     * **Deprecated:**
     * >You should use {{ClassFunction|Entity|GetNWEntity}} instead.
     * 
     * Retrieves a networked float value at specified index on the entity that is set by {{ClassFunction|Entity|SetNetworkedEntity}}. 
     * @param key  The key that is associated with the value 
     * @param fallback [=NULL] The value to return if we failed to retrieve the value. ( If it isn't set ) 
     * @returns The retrieved value 
     */
    public GetNetworkedEntity(key: string, fallback?: Entity): Entity;
    
    /**
     * **Deprecated:**
     * >You should use {{ClassFunction|Entity|GetNWFloat}} instead.
     * 
     * Retrieves a networked float value at specified index on the entity that is set by {{ClassFunction|Entity|SetNetworkedFloat}}.
     * 
     * Seems to be the same as {{ClassFunction|Entity|GetNetworkedInt}}. 
     * @param key  The key that is associated with the value 
     * @param fallback [=0] The value to return if we failed to retrieve the value. ( If it isn't set ) 
     * @returns The retrieved value 
     */
    public GetNetworkedFloat(key: string, fallback?: number): number;
    
    /**
     * **Deprecated:**
     * >You should use {{ClassFunction|Entity|GetNWInt}} instead.
     * 
     * Retrieves a networked integer value at specified index on the entity that is set by {{ClassFunction|Entity|SetNetworkedInt}}. 
     * @param key  The key that is associated with the value 
     * @param fallback [=0] The value to return if we failed to retrieve the value. ( If it isn't set ) 
     * @returns The retrieved value 
     */
    public GetNetworkedInt(key: string, fallback?: number): number;
    
    /**
     * **Deprecated:**
     * >You should use {{ClassFunction|Entity|GetNWString}} instead.
     * 
     * Retrieves a networked string value at specified index on the entity that is set by {{ClassFunction|Entity|SetNetworkedString}}. 
     * @param key  The key that is associated with the value 
     * @param fallback [=""] The value to return if we failed to retrieve the value. ( If it isn't set ) 
     * @returns The retrieved value 
     */
    public GetNetworkedString(key: string, fallback?: string): string;
    
    /**
     * **Deprecated:**
     * >You should be using {{ClassFunction|Entity|GetNWVarProxy}} instead.
     * 
     * Returns callback function for given NWVar of this entity.
     * **Note:**
     * >Currently this function only works for the NW2Var system (accessed by adding a 2 in between Networked and Var for most NetworkedVar functions), which will replace the original one at some point in the future 
     * @param name  The name of the NWVar to get callback of. 
     * @returns The callback of given NWVar, if any. 
     * @example
     * 
     * print( Entity(1):GetNetworkedVarProxy( "Key" ) )
     * Entity(1):SetNetworkedVarProxy( "Key", print )
     * print( Entity(1):GetNetworkedVarProxy( "Key" ) )
     * 
     * // Prints callback function of a NWVar called "Key" of Player 1. 
     */
    public GetNetworkedVarProxy(name: string): Function;
    
    /**
     * **Deprecated:**
     * >You should be using {{ClassFunction|Entity|GetNWVarTable}} instead.
     * 
     * Returns all the networked variables in an entity.
     * 
     * {{NextUpdate|This feature is currently unavailable. It will be released in a future update.}} 
     * @returns Key-Value table of all networked variables. 
     * @example
     * 
     * PrintTable( Entity(1):GetNWVarTable() )
     * 
     * // Prints all NWVars that exist for Player 1. 
     */
    public GetNetworkedVarTable(): table;
    
    /**
     * **Deprecated:**
     * >You should use {{ClassFunction|Entity|GetNWVector}} instead.
     * 
     * Retrieves a networked vector value at specified index on the entity that is set by {{ClassFunction|Entity|SetNetworkedVector}}. 
     * @param key  The key that is associated with the value 
     * @param fallback [=Vector( 0, 0, 0 )] The value to return if we failed to retrieve the value. ( If it isn't set ) 
     * @returns The retrieved value 
     */
    public GetNetworkedVector(key: string, fallback?: Vector): Vector;
    
    /**
     * Gets networked origin for entity. 
     * @returns origin 
     */
    public GetNetworkOrigin(): Vector;
    
    /**
     * Returns if the entity's rendering and transmitting has been disabled.
     * 
     * **Note:**
     * >This is equivalent to calling {{ClassFunction|Entity|IsEffectActive}}( EF_NODRAW ) 
     * @returns Whether the entity's rendering and transmitting has been disabled. 
     */
    public GetNoDraw(): boolean;
    
    /**
     * Returns the body group count of the entity. 
     * @returns Amount of bodygroups the entitys model has 
     */
    public GetNumBodyGroups(): number;
    
    /**
     * Returns the number of pose parameters this entity has. 
     * @returns Amount of pose parameters the entity has 
     * @example
     * 
     * for i=0, ent:GetNumPoseParameters() - 1 do
     * 	local min, max = ent:GetPoseParameterRange( i )
     * 	print( ent:GetPoseParameterName( i ) .. ' ' .. min .. " / " .. max )
     * end
     * 
     * // Prints all the entities poses.
     * 
     * The entity used to generate the output is a model of the combine helicopter. 
     */
    public GetNumPoseParameters(): number;
    
    /**
     * Retrieves a networked angle value at specified index on the entity that is set by {{ClassFunction|Entity|SetNWAngle}}. 
     * @param key  The key that is associated with the value 
     * @param fallback [=Angle( 0, 0, 0 )] The value to return if we failed to retrieve the value. (If it isn't set) 
     * @returns The retrieved value 
     */
    public GetNWAngle(key: string, fallback?: any): Angle;
    
    /**
     * Retrieves a networked boolean value at specified index on the entity that is set by {{ClassFunction|Entity|SetNWBool}}. 
     * @param key  The key that is associated with the value 
     * @param fallback [=false] The value to return if we failed to retrieve the value. (If it isn't set) 
     * @returns The retrieved value 
     */
    public GetNWBool(key: string, fallback?: any): boolean;
    
    /**
     * Retrieves a networked entity value at specified index on the entity that is set by {{ClassFunction|Entity|SetNWEntity}}. 
     * @param key  The key that is associated with the value 
     * @param fallback [=NULL] The value to return if we failed to retrieve the value. (If it isn't set) 
     * @returns The retrieved value 
     */
    public GetNWEntity(key: string, fallback?: any): Entity;
    
    /**
     * Retrieves a networked float value at specified index on the entity that is set by {{ClassFunction|Entity|SetNWFloat}}. 
     * @param key  The key that is associated with the value 
     * @param fallback [=0] The value to return if we failed to retrieve the value. (If it isn't set) 
     * @returns The retrieved value 
     */
    public GetNWFloat(key: string, fallback?: any): number;
    
    /**
     * Retrieves a networked integer (whole number) value that was previously set by {{ClassFunction|Entity|SetNWInt}}.
     * 
     * **Bug [#3374](https://github.com/Facepunch/garrysmod-issues/issues/3374):**
     * >This function will not round decimal values as it actually networks a float internally. 
     * @param key  The key that is associated with the value 
     * @param fallback [=0] The value to return if we failed to retrieve the value (If it isn't set). 
     * @returns The stored integer, or the fallback if it doesn't exist. 
     */
    public GetNWInt(key: string, fallback?: any): number;
    
    /**
     * Retrieves a networked string value at specified index on the entity that is set by {{ClassFunction|Entity|SetNWString}}. 
     * @param key  The key that is associated with the value 
     * @param fallback [=""] The value to return if we failed to retrieve the value. (If it isn't set) 
     * @returns The retrieved value 
     * @example
     * 
     * print( Entity(1):GetNWString( "usergroup" ) )
     * 
     * // Prints the player's rank 
     */
    public GetNWString(key: string, fallback?: any): string;
    
    /**
     * Returns callback function for given NWVar of this entity.
     * **Note:**
     * >Currently this function only works for the NW2Var system (accessed by adding a 2 in between NW and Var for most NWVar functions), which will replace the original one at some point in the future 
     * @param key  The key of the NWVar to get callback of. 
     * @returns The callback of given NWVar, or nil if not found. 
     * @example
     * 
     * print( Entity(1):GetNWVarProxy( "Key" ) )
     * Entity(1):SetNWVarProxy( "Key", print )
     * print( Entity(1):GetNWVarProxy( "Key" ) )
     * 
     * // Prints callback function of a NWVar called "Key" of Player 1. 
     */
    public GetNWVarProxy(key: any): Function;
    
    /**
     * Returns all the networked variables in an entity.
     * 
     * {{NextUpdate|This feature is currently unavailable. It will be released in a future update.}} 
     * @returns Key-Value table of all networked variables. 
     * @example
     * 
     * PrintTable( Entity(1):GetNWVarTable() )
     * 
     * // Prints all NWVars that exist for Player 1. 
     */
    public GetNWVarTable(): table;
    
    /**
     * Retrieves a networked vector value at specified index on the entity that is set by {{ClassFunction|Entity|SetNWVector}}. 
     * @param key  The key that is associated with the value 
     * @param fallback [=Vector( 0, 0, 0 )] The value to return if we failed to retrieve the value. (If it isn't set) 
     * @returns The retrieved value 
     */
    public GetNWVector(key: string, fallback?: any): Vector;
    
    /**
     * Returns the owner entity of this entity. See {{ClassFunction|Entity|SetOwner}} for more info. 
     * @returns The owner entity of this entity. 
     */
    public GetOwner(): Entity;
    
    /**
     * Returns the parent entity of this entity. 
     * @returns parentEntity 
     */
    public GetParent(): Entity;
    
    /**
     * Returns the attachment index of the entity's parent. Returns 0 if the entity is not parented to a specific attachment or if it isn't parented at all.
     * 
     * This is set by second argument of {{ClassFunction|Entity|SetParent}} or the '''SetParentAttachment''' input. 
     * @returns The parented attachment index 
     */
    public GetParentAttachment(): number;
    
    /**
     * If the entity is parented to an entity that has a model with multiple physics objects (like a ragdoll), this is used to retrieve what physics object number the entity is parented to on it's parent. 
     * @returns The physics object id, or nil if the entity has no parent 
     */
    public GetParentPhysNum(): number;
    
    /**
     * Returns whether the entity is persistent or not.
     * 
     * See {{ClassFunction|Entity|SetPersistent}} for more information on persistence. 
     * @returns True if the entity is set to be persistent. 
     */
    public GetPersistent(): boolean;
    
    /**
     * Returns player who is claiming kills of physics damage the entity deals. 
     * @param timeLimit  The time to check if the entity was still a proper physics attacker.
     * 
     * **Note:**
     * >Some entities such as the Combine Ball disregard the time limit and always return the physics attacker. 
     * @returns The player. If entity that was set is not a player, it will return NULL entity. 
     */
    public GetPhysicsAttacker(timeLimit: number): Player;
    
    /**
     * Returns the entity's physics object, if the entity has physics. 
     * @returns The entity's physics object. 
     * @example
     * 
     * local phys = ent:GetPhysicsObject()
     * if ( IsValid( phys ) ) then // Always check with IsValid! The ent might not have physics!
     * 	return phys:GetMass()
     * else
     * 	return 0
     * end
     * 
     * // Gets the mass of an entity. 
     */
    public GetPhysicsObject(): PhysObj;
    
    /**
     * Returns the number of physics objects an entity has (usually 1 for non-ragdolls) 
     * @returns numObjects 
     * @example
     * 
     * for i=0, ragdoll:GetPhysicsObjectCount() - 1 do // "ragdoll" being a ragdoll entity
     *  
     * 	local phys = ragdoll:GetPhysicsObjectNum(i)
     * 	phys:ApplyForceCenter( Vector( 0, 0, 10000 ) )
     * 
     * end
     * 
     * // Finds all the Physics Objects in a ragdoll and applies an upward force 
     */
    public GetPhysicsObjectCount(): number;
    
    /**
     * Returns a specific physics object from an entity with multiple {{Type|PhysObj}}ects (like ragdolls)
     * 
     * See also {{ClassFunction|Entity|TranslateBoneToPhysBone}}. 
     * @param physNum  The number corresponding to the {{Type|PhysObj}} to grab. Starts at 0. 
     * @returns The physics object 
     * @example
     * 
     * if ( !LocalPlayer():Alive() && LocalPlayer():GetRagdollEntity() ) then
     * 	local ent = LocalPlayer():GetRagdollEntity()
     * 	local head = ent:GetPhysicsObjectNum( 10 ) // 10 is usually the bone number of the head.
     * 	head:ApplyForceCenter( Vector( 0, 0, 6000 ) )
     * end
     * 
     * // When run, if the player is dead it will throw their ragdoll up in the air by their head. 
     */
    public GetPhysicsObjectNum(physNum: number): PhysObj;
    
    /**
     * Returns the playback rate of the main sequence on this entity, with 1.0 being the default speed. 
     * @returns The playback rate. 
     */
    public GetPlaybackRate(): number;
    
    /**
     * Gets the position of entity in world. 
     * @returns The position of the entity. 
     * @example
     * 
     * concommand.Add( "entity_pos", function( ply )
     * 	local tr = ply:GetEyeTrace()
     * 	if ( IsValid( tr.Entity ) ) then
     * 		print( "Entity position:", tr.Entity:GetPos() )
     * 	else
     * 		print( "Crosshair position:", tr.HitPos )
     * 	end
     * end )
     * 
     * // Utility command that would give you the position of the entity you are looking at. 
     */
    public GetPos(): Vector;
    
    /**
     * Returns the pose parameter value 
     * @param name  Pose parameter name to look up 
     * @returns Value of given pose parameter.
     * 
     * {{Warning|This value will be from 0 - 1 on the client and from minimum range to maximum range on the server! You'll have to [[math/Remap|remap]] this value clientside to {{ClassFunction|Entity|GetPoseParameterRange}}'s returns if you want get the actual pose parameter value. See {{ClassFunction|Entity|SetPoseParameter}}'s example.}} 
     */
    public GetPoseParameter(name: string): number;
    
    /**
     * Returns name of given pose parameter 
     * @param id  Id of the pose paremeter 
     * @returns Name of given pose parameter 
     */
    public GetPoseParameterName(id: number): string;
    
    /**
     * Returns pose parameter range 
     * @param id  Pose parameter ID to look up 
     * @returns [The minimum value, The maximum value] 
     * !TupleReturn
     */
    public GetPoseParameterRange(id: number): [number, number];
    
    /**
     * Returns whether this entity is predictable or not.
     * 
     * See {{ClassFunction|Entity|SetPredictable}} for more information 
     * @returns Whether this entity is predictable or not. 
     */
    public GetPredictable(): boolean;
    
    /**
     * Returns the entity which the ragdoll came from. The opposite of {{ClassFunction|Player|GetRagdollEntity}}. 
     * @returns The entity who owns the ragdoll. 
     * @example
     * 
     * for e, ent in pairs( ents.GetAll() ) do
     * 	if( ent:GetRagdollOwner() ) then
     * 		print( ent:GetRagdollOwner() )
     * 	end
     * end
     * 
     * // Loop through all player ragdolls and print their owners. 
     */
    public GetRagdollOwner(): Entity;
    
    /**
     * Called when scripted NPC needs to check how he "feels" against another entity, such as when {{ClassFunction|NPC|Disposition}} is called. 
     * @param ent  The entity in question 
     * @returns How our scripter NPC "feels" towards the entity in question. See {{Enum|D}}. 
     */
    protected GetRelationship(ent: Entity): D;
    
    /**
     * Returns the entity's render angles, set by {{ClassFunction|Entity|SetRenderAngles}} in a drawing hook. 
     * @returns The entitys render angles 
     */
    public GetRenderAngles(): Angle;
    
    /**
     * Returns render bounds of the entity. Can be overridden by {{ClassFunction|Entity|SetRenderBounds}}.
     * 
     * If the render bounds are not inside players view, the entity will not be drawn! 
     * @returns [The minimum vector of the bounds, The maximum vector of the bounds.] 
     * !TupleReturn
     */
    public GetRenderBounds(): [Vector, Vector];
    
    /**
     * Returns current render FX of the entity. 
     * @returns The current render FX of the entity. See {{Enum|kRenderFx}} 
     */
    public GetRenderFX(): kRenderFx;
    
    /**
     * Returns the render group of the entity. 
     * @returns The render group. See {{Enum|RENDERGROUP}} 
     */
    public GetRenderGroup(): RENDERGROUP;
    
    /**
     * Specify a mesh that should be rendered instead of this SENT's model. 
     * @returns A table containing the following keys:
     * *{{FuncArg|IMesh|Mesh|Required}}
     * *{{FuncArg|IMaterial|Material|Required}}
     * *{{FuncArg|VMatrix|Matrix|Optional}} 
     * @example
     * 
     * AddCSLuaFile()
     * 
     * DEFINE_BASECLASS( "base_anim" )
     * 
     * ENT.PrintName = "Other Cube"
     * ENT.Spawnable = true
     * 
     * ENT.Mins = Vector( -16, -16, -16 )
     * ENT.Maxs = Vector(  16,  16,  16 )
     * 
     * ENT.Material = Material( "hunter/myplastic" )
     * 
     * function ENT:SpawnFunction( ply, tr, ClassName )
     *     local ent = ents.Create( ClassName )
     *     ent:SetPos( tr.HitPos + tr.HitNormal * 32 )
     *     ent:Spawn()
     *     return ent
     * end
     * 
     * function ENT:Initialize()
     *     if CLIENT then
     *         self:CreateMesh()
     *         self:SetRenderBounds( self.Mins, self.Maxs )
     *     end
     * 
     *     self:DrawShadow( false )
     * end
     * 
     * function ENT:GetRenderMesh()
     *     return { Mesh = self.Mesh, Material = self.Material }
     * end
     * 
     * function ENT:CreateMesh()
     *     self.Mesh = Mesh()
     * 
     *     local positions = {
     *         Vector( -0.5, -0.5, -0.5 ),
     *         Vector(  0.5, -0.5, -0.5 ),
     *         Vector( -0.5,  0.5, -0.5 ),
     *         Vector(  0.5,  0.5, -0.5 ),
     *         Vector( -0.5, -0.5,  0.5 ),
     *         Vector(  0.5, -0.5,  0.5 ),
     *         Vector( -0.5,  0.5,  0.5 ),
     *         Vector(  0.5,  0.5,  0.5 ),
     *     };
     * 
     *     local indices = {
     *         1, 7, 5,
     *         1, 3, 7,
     *         6, 4, 2,
     *         6, 8, 4,
     *         1, 6, 2,
     *         1, 5, 6,
     *         3, 8, 7,
     *         3, 4, 8,
     *         1, 4, 3,
     *         1, 2, 4,
     *         5, 8, 6,
     *         5, 7, 8,
     *     }
     * 
     *     local normals = {
     *        Vector( -1,  0,  0 ),
     *        Vector(  1,  0,  0 ),
     *        Vector(  0, -1,  0 ),
     *        Vector(  0,  1,  0 ),
     *        Vector(  0,  0, -1 ),
     *        Vector(  0,  0,  1 ),
     *     }
     * 
     *     local tangents = {
     *         { 0, 1, 0, -1 },
     *         { 0, 1, 0, -1 },
     *         { 0, 0, 1, -1 },
     *         { 1, 0, 0, -1 },
     *         { 1, 0, 0, -1 },
     *         { 0, 1, 0, -1 },
     *     }
     * 
     *     local uCoords = {
     *        0, 1, 0,
     *        0, 1, 1,
     *        0, 1, 0,
     *        0, 1, 1,
     *        0, 1, 0,
     *        0, 1, 1,
     *        0, 1, 0,
     *        0, 1, 1,
     *        0, 1, 0,
     *        0, 1, 1,
     *        0, 1, 0,
     *        0, 1, 1,
     *     }
     * 
     *     local vCoords = {
     *        0, 1, 1,
     *        0, 0, 1,
     *        0, 1, 1,
     *        0, 0, 1,
     *        0, 1, 1,
     *        0, 0, 1,
     *        0, 1, 1,
     *        0, 0, 1,
     *        0, 1, 1,
     *        0, 0, 1,
     *        0, 1, 1,
     *        0, 0, 1,
     *     }
     * 
     *     local verts = {}
     *     local scale = self.Maxs - self.Mins
     * 
     *     for vert_i = 1, #indices do
     *         local face_i = math.ceil( vert_i / 6 )
     * 
     *         verts[vert_i] = {
     *             pos = positions[indices[vert_i]] * scale,
     *             normal = normals[face_i],
     *             u = uCoords[vert_i],
     *             v = vCoords[vert_i],
     *             userdata = tangents[face_i]
     *         }
     *     end
     *     
     *     self.Mesh:BuildFromTriangles( verts )
     * end
     * 
     * // A box that renders nicely with ambient lighting, projected textures, and bumpmaps. Performed in the most lines of code possible. 
     */
    protected GetRenderMesh(): table;
    
    /**
     * Returns the render mode of the entity. 
     * @returns The render Mode. See {{Enum|RENDERMODE}} 
     */
    public GetRenderMode(): RENDERMODE;
    
    /**
     * Returns the entity's render origin, set by {{ClassFunction|Entity|SetRenderOrigin}} in a drawing hook. 
     * @returns The entitys render origin 
     */
    public GetRenderOrigin(): Vector;
    
    /**
     * Returns the rightward vector of the entity, as a normalized direction vector 
     * @returns rightDir 
     */
    public GetRight(): Vector;
    
    /**
     * Returns the min and max of the entity's axis-aligned bounding box. 
     * @param min  Minimum extent of the bounding box. 
     * @param max  Maximum extent of the bounding box. 
     * @returns [Minimum extent of the AABB, Maximum extent of the AABB] 
     * @example
     * 
     * local a, b = ent:GetRotatedAABB( v:OBBMins(), v:OBBMaxs() )
     * local pos = ( ent:GetPos() + ( a + b ) / 2 )
     * 
     * // The entity's AABB center (regardless of model origin) is stored in 'pos'. 
     * !TupleReturn
     */
    public GetRotatedAABB(min: Vector, max: Vector): [Vector, Vector];
    
    /**
     * Returns a table of save values for an entity.
     * 
     * These tables are not the same between the client and the server, and different entities may have different fields.
     * 
     * You can get the list different fields an entity has by looking at it's source code ( the 2013 SDK can be found online, https://github.com/ValveSoftware/source-sdk-2013 ). Accessible fields are defined by each DEFINE_FIELD and DEFINE_KEYFIELD inside the DATADESC block.
     * 
     * Take the headcrab, for example:
     * ```BEGIN_DATADESC( CBaseHeadcrab )
     * 	// m_nGibCount - don't save
     * 	DEFINE_FIELD( m_bHidden, FIELD_BOOLEAN ),
     * 	DEFINE_FIELD( m_flTimeDrown, FIELD_TIME ),
     * 	DEFINE_FIELD( m_bCommittedToJump, FIELD_BOOLEAN ),
     * 	DEFINE_FIELD( m_vecCommittedJumpPos, FIELD_POSITION_VECTOR ),
     * 	DEFINE_FIELD( m_flNextNPCThink, FIELD_TIME ),
     * 	DEFINE_FIELD( m_flIgnoreWorldCollisionTime, FIELD_TIME ),
     * 	
     * 	DEFINE_KEYFIELD( m_bStartBurrowed, FIELD_BOOLEAN, "startburrowed" ),
     * 	DEFINE_FIELD( m_bBurrowed, FIELD_BOOLEAN ),
     * 	DEFINE_FIELD( m_flBurrowTime, FIELD_TIME ),
     * 	DEFINE_FIELD( m_nContext, FIELD_INTEGER ),
     * 	DEFINE_FIELD( m_bCrawlFromCanister, FIELD_BOOLEAN ),
     * 	DEFINE_FIELD( m_bMidJump, FIELD_BOOLEAN ),
     * 	DEFINE_FIELD( m_nJumpFromCanisterDir, FIELD_INTEGER ),
     * 	DEFINE_FIELD( m_bHangingFromCeiling, FIELD_BOOLEAN ),
     * 	DEFINE_FIELD( m_flIlluminatedTime, FIELD_TIME ),
     * 		
     * 	DEFINE_INPUTFUNC( FIELD_VOID, "Burrow", InputBurrow ),
     * 	DEFINE_INPUTFUNC( FIELD_VOID, "BurrowImmediate", InputBurrowImmediate ),
     * 	DEFINE_INPUTFUNC( FIELD_VOID, "Unburrow", InputUnburrow ),
     * 	DEFINE_INPUTFUNC( FIELD_VOID, "StartHangingFromCeiling", InputStartHangingFromCeiling ),
     * 	DEFINE_INPUTFUNC( FIELD_VOID, "DropFromCeiling", InputDropFromCeiling ),
     * 	
     * 	// Function Pointers
     * 	DEFINE_THINKFUNC( EliminateRollAndPitch ),
     * 	DEFINE_THINKFUNC( ThrowThink ),
     * 	DEFINE_ENTITYFUNC( LeapTouch ),
     * END_DATADESC()
     * ```
     * 
     * For each '''DEFINE_FIELD''', the save table will have a key with name of '''first''' argument.
     * 
     * For each '''DEFINE_KEYFIELD''', the save table will have a key with name of the '''third''' argument.
     * 
     * See {{ClassFunction|Entity|GetInternalVariable}} for only retrieving one key of the save table.
     * 
     * **Bug [#2552](https://github.com/Facepunch/garrysmod-issues/issues/2552):**
     * >This is missing prediction fields and most of the datatable clientside. 
     * @returns A table containing all save values in key/value format.
     * 
     * {{NextUpdate|The value may be a sequential table (starting with 1) if the field in question is an array in engine.}} 
     * @example
     * 
     * local meta = FindMetaTable( "Player" )
     * 
     * function meta:GetLastDamageTime()
     * 	return self:GetSaveTable().m_flLastDamageTime
     * end
     * 
     * print( Entity( 1 ):GetLastDamageTime() )
     * 
     * // Get how long it has been since the player was damaged@example
     * 
     * function IsDoorLocked(ent)
     * 	return ent:GetSaveTable().m_bLocked
     * end
     * 
     * // Determine if a door is locked (only works on server side otherwise returns nil)@example
     * 
     * local TestingFunctions = {
     * 	["func_door"] = function( self )
     * 		return ( self:GetSaveTable().m_toggle_state == 0 )
     * 	end,
     * 	["func_door_rotating"] = function( self )
     * 		return ( self:GetSaveTable().m_toggle_state == 0 )
     * 	end,
     * 	["prop_door_rotating"] = function( self )
     * 		return ( self:GetSaveTable().m_eDoorState ~= 0 )
     * 	end,
     * }
     * function DoorIsOpen( door )
     * 	local func = TestingFunctions[door:GetClass()]
     * 	if func then
     * 		return func( door )
     * 	end
     * end
     * 
     * // Function ''DoorIsOpen( door )'' that returns whether a door is open or not, for different door classes 
     */
    public GetSaveTable(): table;
    
    /**
     * Return the index of the model sequence that is currently active for the entity. 
     * @returns The index of the model sequence. 
     */
    public GetSequence(): number;
    
    /**
     * Return activity id out of sequence id. Opposite of {{ClassFunction|Entity|SelectWeightedSequence}}. 
     * @param seq  The sequence ID 
     * @returns The activity ID, ie {{Enum|ACT}} 
     */
    public GetSequenceActivity(seq: number): ACT;
    
    /**
     * Returns the activity name for the given sequence id. 
     * @param sequenceId  The sequence id. 
     * @returns The {{Enum|ACT}} as a string, returns "Not Found!" with an invalid sequence and "No model!" when no model is set. 
     */
    public GetSequenceActivityName(sequenceId: number): string;
    
    /**
     * Returns the amount of sequences ( animations ) the entity's model has. 
     * @returns The amount of sequences ( animations ) the entity's model has. 
     */
    public GetSequenceCount(): number;
    
    /**
     * Returns the ground speed of the entity's sequence. 
     * @param sequenceId  The sequence ID. 
     * @returns The ground speed of this sequence. 
     * @example
     * 
     * local sequence = self:LookupSequence( "walk_all" )
     * 
     * if ( sequence ) then
     * 	self:StartActivity( ACT_WALK )
     * 	self:SetSequence( sequence )
     * 	self.loco:SetDesiredSpeed( self:GetSequenceGroundSpeed( sequence ) )
     * end
     * 
     * // Move the {{Type|NextBot}} based on the ground speed of its walking animation (within its {{Type|coroutine}}).
     * 
     * **Note:**
     * >In most cases it's better to use {{ClassFunction|NextBot|BodyMoveXY}} instead. 
     */
    public GetSequenceGroundSpeed(sequenceId: number): number;
    
    /**
     * Returns a table of information about an entity's sequence. 
     * @param sequenceId  The sequence id of the entity. 
     * @returns Table of information about the entity's sequence. 
     * @example
     * 
     * function GM:PostPlayerDraw( ply )
     * 
     * 	seqinfo = ply:GetSequenceInfo( ply:GetSequence() )
     * 	seqinfo.player = ply
     * 	
     * 	render.DrawWireframeBox( ply:GetPos(), ply:GetAngles(), seqinfo.bbmin, seqinfo.bbmax, color_white, true )
     * 	
     * end
     * 
     * function GM:HUDPaint()
     * 
     * 	local seqinfo, textpos = nil, nil
     * 
     * 	for p, ply in pairs(player.GetAll()) do
     * 	
     * 		seqinfo = ply:GetSequenceInfo(ply:GetSequence())
     * 		textpos = ( ply:GetPos() + Vector( 0, 0, seqinfo.bbmax.z + 10 ) ):ToScreen()
     * 	
     * 		if ( textpos.visible ) then
     * 			draw.SimpleText( seqinfo.label, "GModNotify", textpos.x, textpos.y, color_white, TEXT_ALIGN_CENTER )
     * 			draw.SimpleText( seqinfo.activity..": "..seqinfo.activityname, "GModNotify", textpos.x, textpos.y+20, color_white, TEXT_ALIGN_CENTER )
     * 		end
     * 	
     * 	end
     * 
     * end
     * 
     * // Draw each player's current sequence bounding box with sequence name, activity number, and activity name above their head. 
     */
    public GetSequenceInfo(sequenceId: number): table;
    
    /**
     * Returns a list of all sequences ( animations ) the model has. 
     * @returns The list of all sequences ( animations ) the model has. The indices start with 0! 
     * @example
     * 
     * PrintTable( Entity(1):GetSequenceList() )
     * 
     * // Example showing table structure. Prints a list of player model sequences. 
     */
    public GetSequenceList(): table;
    
    /**
     * Returns an entity's sequence move distance (the change in position over the course of the entire sequence). 
     * @param sequenceId  The sequence index. 
     * @returns The move distance of the sequence. 
     * @example
     * 
     * local ply, seq, move_dist, seq_dur, ground_speed = nil, nil, nil, nil, nil
     * 
     * function GM:Think()
     * 
     * 	// Player 1
     * 	ply = Entity(1)
     * 	
     * 	// Current sequence
     * 	seq = ply:GetSequence()
     * 	
     * 	// The move distance
     * 	move_dist = ply:GetSequenceMoveDist(seq)
     * 	
     * 	if(move_dist == 0) then return end	// If it doesn't move, don't bother
     * 	
     * 	// The sequence duration
     * 	seq_dur = ply:SequenceDuration(seq)
     * 	
     * 	// Actual sequence ground speed
     * 	ground_speed = ply:GetSequenceGroundSpeed(seq)
     * 	
     * 	// Compare the calculated value to the actual value
     * 	print(tostring(ground_speed-(move_dist/seq_dur)))
     * 
     * end
     * 
     * // Experiment which demonstrates that dividing the sequence move distance by {{ClassFunction|Entity|SequenceDuration}} results in a value extremely close to {{ClassFunction|Entity|GetSequenceGroundSpeed}}. 
     */
    public GetSequenceMoveDist(sequenceId: number): number;
    
    /**
     * Returns the delta movement and angles of a sequence of the entity's model. 
     * @param sequenceId  The sequence index. See {{ClassFunction|Entity|GetSequenceName}}. 
     * @param startCycle  The sequence start cycle. 0 is the start of the animation, 1 is the end. 
     * @param endCyclnde  The sequence end cycle. 0 is the start of the animation, 1 is the end. Values like 2, etc are allowed. 
     * @returns [Whether the operation was successful, The delta vector of the animation, how much the model's origin point moved., The delta angle of the animation.] 
     * !TupleReturn
     */
    public GetSequenceMovement(sequenceId: number, startCycle: number, endCyclnde: number): [boolean, Vector, Angle];
    
    /**
     * Returns the change in heading direction in between the start and the end of the sequence. 
     * @param seq  The sequence index. See {{ClassFunction|Entity|LookupSequence}}. 
     * @returns The yaw delta. Returns 99999 for no movement. 
     */
    public GetSequenceMoveYaw(seq: number): number;
    
    /**
     * Return the name of the sequence for the index provided.
     * Refer to {{ClassFunction|Entity|GetSequence}} to find the current active sequence on this entity. 
     * @param index  The index of the sequence to look up. 
     * @returns Name of the sequence. 
     */
    public GetSequenceName(index: number): string;
    
    /**
     * Checks if the entity plays a sound when picked up by a player.
     * 
     * **Bug [#1488](https://github.com/Facepunch/garrysmod-issues/issues/1488):**
     * >This will return nil if {{ClassFunction|Entity|SetShouldPlayPickupSound}} has not been called. 
     * @returns True if it plays the pickup sound, false otherwise. 
     */
    public GetShouldPlayPickupSound(): boolean;
    
    /**
     * Returns if entity should create a server ragdoll on death or a client one. 
     * @returns Returns true if ragdoll will be created on server, false if on client 
     */
    public GetShouldServerRagdoll(): boolean;
    
    /**
     * Returns the skin index of the current skin. 
     * @returns skinIndex 
     */
    public GetSkin(): number;
    
    /**
     * Returns solid type of an entity. 
     * @returns The solid type. See the {{Enum|SOLID}}. 
     */
    public GetSolid(): SOLID;
    
    /**
     * Returns solid flag(s) of an entity. 
     * @returns The flag(s) of the entity, see {{Enum|FSOLID}}. 
     */
    public GetSolidFlags(): FSOLID;
    
    /**
     * Returns if we should show a spawn effect on this entity. 
     * @returns The flag to allow or disallow the spawn effect. 
     * @example
     * 
     * function GM:NetworkEntityCreated( ent )
     * 
     * 	//
     * 	// If the entity wants to use a spawn effect
     * 	// then create a propspawn effect if the entity was
     * 	// created within the last second (this function gets called
     * 	// on every entity when joining a server)
     * 	//
     * 
     * 	if ( ent:GetSpawnEffect() && ent:GetCreationTime() > (CurTime() - 1.0) ) then
     * 	
     * 		local ed = EffectData()
     * 			ed:SetEntity( ent )
     * 		util.Effect( "propspawn", ed, true, true )
     * 
     * 	end
     * 
     * end
     * 
     * // Taken from sandbox's cl_init.lua 
     */
    public GetSpawnEffect(): boolean;
    
    /**
     * Returns the bitwise spawn flags used by the entity. 
     * @returns The spawn flags of the entity 
     * @example
     * 
     * local sf = ent:GetSpawnFlags()
     * 
     * if( bit.band( sf, SF_PHYSPROP_PREVENT_PICKUP ) > 0 ) then
     * 	print( "This prop cannot be picked up." )
     * end
     * 
     * // An alternative to {{ClassFunction|Entity|HasSpawnFlags}} 
     */
    public GetSpawnFlags(): number;
    
    /**
     * Returns the material override for the given index. 
     * 
     * Returns "" if no material override exists. Use {{ClassFunction|Entity|GetMaterials}} to list it's default materials.
     * 
     * **Bug [#3362](https://github.com/Facepunch/garrysmod-issues/issues/3362):**
     * >The server's value takes priority on the client. 
     * @param index  The index of the sub material. Acceptable values are from 0 to 31. 
     * @returns The material that overrides this index, if any. 
     */
    public GetSubMaterial(index: number): string;
    
    /**
     * Returns a list of models included into the entity's model in the .qc file. 
     * @returns The list of models included into the entity's model in the .qc file. 
     * @example
     * 
     * PrintTable(Entity(1):GetSubModels() )
     * 
     * // Example structure of the  table. Prints into console sub models of a player model. 
     */
    public GetSubModels(): table;
    
    /**
     * Returns the table that contains all values saved within the entity. 
     * @returns entTable 
     */
    public GetTable(): table;
    
    /**
     * Returns the last trace used in the collision callbacks such as {{HookFunction|ENTITY|StartTouch}}, {{HookFunction|ENTITY|Touch}} and {{HookFunction|ENTITY|EndTouch}}.
     * 
     * **Note:**
     * >This returns the last collision trace used, regardless of the entity that caused it. As such, it's only reliable when used in the hooks mentioned above 
     * @returns The {{Struct|TraceResult}} 
     * @example
     * 
     * function ENT:Touch( otherEntity )
     * 	local tr = self:GetTouchTrace()
     * 	local hitPos = tr.HitPos
     * 
     * 	local effectdata = EffectData()
     * 	effectdata:SetOrigin( hitPos )
     * 	util.Effect( "Explosion", effectdata )
     * 
     * end
     * 
     * // Dispatches an explosion at the point of impact with another entity. 
     */
    public GetTouchTrace(): TraceResult;
    
    /**
     * Returns true if the TransmitWithParent flag is set or not. 
     * @returns Is the TransmitWithParent flag is set or not 
     */
    public GetTransmitWithParent(): boolean;
    
    /**
     * Returns if the entity is unfreezable, meaning it can't be frozen with the physgun. By default props are freezable, so this function will typically return false.
     * 
     * **Bug [#1488](https://github.com/Facepunch/garrysmod-issues/issues/1488):**
     * >This will return nil if {{ClassFunction|Entity|SetUnFreezable}} has not been called. 
     * @returns True if the entity is unfreezable, false otherwise. 
     */
    public GetUnFreezable(): boolean;
    
    /**
     * Returns the upward vector of the entity, as a normalized direction vector 
     * @returns upDir 
     */
    public GetUp(): Vector;
    
    /**
     * Retrieves a value from entity's {{ClassFunction|Entity|GetTable}}. Set by {{ClassFunction|Entity|SetVar}}. 
     * @param key  Key of the value to retrieve 
     * @param defaultVal [=nil] A default value to fallback to if we couldn't retrieve the value from entity 
     * @returns Retrieved value 
     * @example
     * 
     * print( Entity( 1 ):GetVar( "Test" ) )
     * 
     * print( Entity( 1 ).Test )
     * 
     * // The 2 lines of code are functionally identical. 
     */
    public GetVar(key: any, defaultVal?: any): any;
    
    /**
     * Returns the entity's velocity.
     * 
     * **Note:**
     * >Actually binds to CBaseEntity::GetAbsVelocity() on the server and C_BaseEntity::EstimateAbsVelocity() on the client. This returns the total velocity of the entity and is equal to local velocity + base velocity.
     * 
     * **Bug [#774](https://github.com/Facepunch/garrysmod-issues/issues/774):**
     * >This can become out-of-sync on the client if the server has been up for a long time. 
     * @returns The velocity of the entity. 
     */
    public GetVelocity(): Vector;
    
    /**
     * **Deprecated!**
     * Returns ID of workshop addon that the entity is from.
     * 
     * {{Warning|The function '''currently''' does nothing and always returns nil}} 
     * @returns The workshop ID 
     */
    public GetWorkshopID(): number;
    
    /**
     * {{NextUpdate}}
     * 
     * Returns the position and angle of the entity as a 3x4 matrix ({{Type|VMatrix}} is 4x4 so the fourth row goes unused). The first three columns store the angle as a [https://en.wikipedia.org/wiki/Rotation_matrix rotation matrix], and the fourth column stores the position vector.
     * 
     * **Bug [#2764](https://github.com/Facepunch/garrysmod-issues/issues/2764):**
     * >This returns incorrect results for the angular component (columns 1-3) for the local player clientside.
     * 
     * **Bug [#3106](https://github.com/Facepunch/garrysmod-issues/issues/3106):**
     * >This will use the local player's {{GlobalFunction|EyeAngles}} in [http://wiki.garrysmod.com/page/Category:3D_Rendering_Hooks rendering hooks].
     * 
     * **Bug [#3107](https://github.com/Facepunch/garrysmod-issues/issues/3107):**
     * >Columns 1-3 will be all 0 (angular component) in [http://wiki.garrysmod.com/page/Category:3D_Rendering_Hooks rendering hooks] while paused in single-player. 
     * @returns The position and angle matrix. 
     */
    public GetWorldTransformMatrix(): VMatrix;
    
    /**
     * Causes the entity to break into its current models gibs, if it has any.
     * 
     * You must call {{ClassFunction|Entity|PrecacheGibs}} on the entity before using this function, or it will not create any gibs.
     * 
     * If called on server, the gibs will be spawned on the currently connected clients and will not be synchronized. Otherwise the gibs will be spawned only for the client the function is called on.
     * 
     * Note, that this function will not remove or hide the entity it is called on.
     * 
     * For more expensive version of this function see {{ClassFunction|Entity|GibBreakServer}}. 
     * @param force  The force to apply to the created gibs 
     */
    public GibBreakClient(force: Vector): void;
    
    /**
     * Causes the entity to break into its current models gibs, if it has any.
     * 
     * You must call {{ClassFunction|Entity|PrecacheGibs}} on the entity before using this function, or it will not create any gibs.
     * 
     * The gibs will be spawned on the server and be synchronized with all clients.
     * 
     * Note, that this function will not remove or hide the entity it is called on.
     * 
     * {{Warning|Large numbers of serverside gibs will cause lag.
     * 
     * You can avoid this cost by spawning the gibs on the client using {{ClassFunction|Entity|GibBreakClient}}}}
     * 
     * **Note:**
     * >Despite existing on client, it doesn't actually do anything on client. 
     * @param force  The force to apply to the created gibs 
     */
    public GibBreakServer(force: Vector): void;
    
    /**
     * Called by {{HookFunction|GM|GravGunPickupAllowed}} on ALL entites in Sandbox-derived  gamemodes and acts as an override. 
     * @param ply  The player aiming at us 
     * @returns Return true to allow the entity to be picked up 
     */
    protected GravGunPickupAllowed(ply: Player): boolean;
    
    /**
     * Called when this entity is about to be punted with the gravity gun (primary fire).
     * 
     * Only works in Sandbox derived gamemodes and only if {{HookFunction|GM|GravGunPunt}} is not overridden. 
     * @param ply  The player pressing left-click with the gravity gun at an entity 
     * @returns Return true or false to enable or disable punting respectively. 
     * @example
     * 
     * function ENT:GravGunPunt( ply )
     * 	self:GetPhysicsObject():EnableMotion( true )
     * 	return true
     * end
     * 
     * // Enables a scripted entity to be punted even when frozen. 
     */
    protected GravGunPunt(ply: Player): boolean;
    
    /**
     * Called before firing animation events, such as muzzle flashes or shell ejections.
     * 
     * **Note:**
     * >This hook only works on "anim" type entities. 
     * @param event  The event ID of happened even. See [http://developer.valvesoftware.com/wiki/Animation_Events this page]. 
     * @param eventTime  The absolute time this event occurred using {{GlobalFunction|CurTime}}. 
     * @param cycle  The frame this event occurred as a number between 0 and 1. 
     * @param type  Event type. See [https://github.com/ValveSoftware/source-sdk-2013/blob/master/mp/src/game/shared/eventlist.h#L14-L23 the Source SDK]. 
     * @param options  Name or options of this event. 
     */
    protected HandleAnimEvent(event: number, eventTime: number, cycle: number, type: number, options: string): void;
    
    /**
     * Returns whether or not the bone manipulation functions have ever been called on given  entity.
     * 
     * Related functions are {{ClassFunction|Entity|ManipulateBonePosition}}, {{ClassFunction|Entity|ManipulateBoneAngles}}, {{ClassFunction|Entity|ManipulateBoneJiggle}}, and {{ClassFunction|Entity|ManipulateBoneScale}}.
     * 
     * **Bug [#3131](https://github.com/Facepunch/garrysmod-issues/issues/3131):**
     * >This will return true if the entity's bones have ever been manipulated. Resetting the position/angles/jiggle/scaling to 0,0,0 will not affect this function. 
     * @returns True if the entity has been bone manipulated, false otherwise. 
     */
    public HasBoneManipulations(): boolean;
    
    /**
     * Returns whether or not the the entity has had flex manipulations performed with {{ClassFunction|Entity|SetFlexWeight}} or {{ClassFunction|Entity|SetFlexScale}}. 
     * @returns True if the entity has flex manipulations, false otherwise. 
     * @example
     * 
     * function FlexExample(ent)
     * 
     * 	if(!IsValid(ent)) then return end
     * 	
     * 	// Loop through all flexes
     * 	for i = 0, ent:GetFlexNum()-1 do
     * 	
     * 		// Set each flex to number ranging from 0.0 to 2.0
     * 		ent:SetFlexWeight(i, math.random()*2)
     * 		
     * 	end
     * 	
     * 	// Print whether or not we have flex manipulations
     * 	print(ent:HasFlexManipulatior())
     * 
     * end
     * 
     * // Defines server-side function which manipulates all of an entity's flexes and prints true if the entity has flex manipulations. 
     */
    public HasFlexManipulatior(): boolean;
    
    /**
     * Returns whether this entity has the specified spawnflags bits set. 
     * @param spawnFlags  The spawnflag bits to check, see {{Enum|SF}}. 
     * @returns Whether the entity has that spawnflag set or not. 
     * @example
     * 
     * function GM:PhysgunPickup( ply, ent )
     * 
     * 	// Don't move physboxes if the mapper logic says no
     * 	if ( ent:GetClass() == "func_physbox" && ent:HasSpawnFlags( SF_PHYSBOX_MOTIONDISABLED ) ) then return false end
     * 
     * 	return true
     * 	
     * end
     * 
     * // As seen in sandbox's PhysgunPickup hook. 
     */
    public HasSpawnFlags(spawnFlags: SF): boolean;
    
    /**
     * Returns the position of the head of this entity, NPCs use this internally to aim at their targets.
     * 
     * **Note:**
     * >This only works on players and NPCs. 
     * @param origin  The vector of where the attack comes from. 
     * @returns The head position. 
     */
    public HeadTarget(origin: Vector): Vector;
    
    /**
     * Returns the health of the entity. 
     * @returns health 
     * @example
     * 
     * print( Entity( 1 ):Health() >= Entity( 1 ):GetMaxHealth() )
     * 
     * // Prints if the entity's health is at full or more. 
     */
    public Health(): number;
    
    /**
     * Sets the entity on fire. 
     * @param length  How long to keep the entity ignited. Not supplying this argument will not ignite the entity at all. 
     * @param radius [=0] The radius of the ignition, will ignite everything around the entity that is in this radius. 
     * @example
     * 
     * for k, v in pairs(ents.FindByClass("prop_physics")) do
     *    v:Ignite(30)
     * end
     * 
     * // Ignite all props on the map for 30 seconds. 
     */
    public Ignite(length: number, radius?: number): void;
    
    /**
     * Called when a bullet trace hits this entity and allows you to override the default behavior by returning true. 
     * @param traceResult  The trace that hit this entity as a {{Struct|TraceResult}}. 
     * @param damageType  The damage bits associated with the trace, see {{Enum|DMG}} 
     * @param customImpactName [=nil] The effect name to override the impact effect with.
     * Possible arguments are ImpactJeep, AirboatGunImpact, HelicopterImpact, ImpactGunship. 
     * @returns Return true to override the default impact effects. 
     * @example
     * 
     * function ENT:ImpactTrace(trace,dmgtype,customimpactname)
     * 	local effectdata = EffectData()
     * 	effectdata:SetOrigin( trace.HitPos )
     * 	util.Effect( "Explosion", effectdata )
     * 	return true
     * end
     * 
     * // Hides the original bullet impact effect and dispatches explosions instead. 
     */
    protected ImpactTrace(traceResult: TraceResult, damageType: DMG, customImpactName?: string): boolean;
    
    /**
     * Called when the entity is created. This is called when you {{ClassFunction|Entity|Spawn}} the custom entity.
     * 
     * This is called '''after''' {{HookFunction|ENTITY|SetupDataTables}} and {{HookFunction|GM|OnEntityCreated}}.
     * 
     * **Bug [#2732](https://github.com/Facepunch/garrysmod-issues/issues/2732):**
     * >This is sometimes not called clientside. You can work around this by setting a variable in Initialize and check if it exists in {{HookFunction|ENTITY|Think}}. See the example below. 
     * @example
     * 
     * function ENT:Initialize()
     * 	// Sets what model to use
     * 	self:SetModel( "models/props/cs_assault/money.mdl" )
     * 
     * 	// Sets what color to use
     * 	self:SetColor( Color( 200, 255, 200 ) )
     * 
     * 	// Physics stuff
     * 	self:SetMoveType( MOVETYPE_VPHYSICS )
     * 	self:SetSolid( SOLID_VPHYSICS )
     * 
     * 	// Init physics only on server, so it doesn't mess up physgun beam
     * 	if ( SERVER ) then self:PhysicsInit( SOLID_VPHYSICS ) end
     * 	
     * 	// Make prop to fall on spawn
     * 	local phys = self:GetPhysicsObject()
     * 	if ( IsValid( phys ) ) then phys:Wake() end
     * end
     * 
     * // Example Initialize function@example
     * 
     * function SWEP:Initialize()
     * 	self.m_bInitialized = true
     * 
     * 	// Other code
     * end
     * 
     * function SWEP:Think()
     * 	if (not self.m_bInitialized) then
     * 		self:Initialize()
     * 	end
     * 
     * 	// Other code
     * end
     * 
     * // Fixes the function not being called clientside. 
     */
    protected Initialize(): void;
    
    /**
     * Initializes this entity as being clientside only.
     * 
     * Only works on entities fully created clientside, and as such it has currently no use due to the lack of clientside {{LibraryFunction|ents|Create}}.
     * 
     * This function is automatically called by {{LibraryFunction|ents|CreateClientProp}} and {{GlobalFunction|ClientsideModel}}, {{GlobalFunction|ClientsideModel}} and {{GlobalFunction|ClientsideScene}}.
     * 
     * **Bug [#3368](https://github.com/Facepunch/garrysmod-issues/issues/3368):**
     * >Calling this on a clientside entity will crash the game. 
     */
    public InitializeAsClientEntity(): void;
    
    /**
     * Fires input to the entity with the ability to make another entity responsible. Similar to {{ClassFunction|Entity|Fire}} 
     * @param input  The name of the input to fire 
     * @param activator  The entity that is directly responsible 
     * @param inflictor  The entity that is indirectly responsible (often a player) 
     * @param param [=nil] The value to give to the input. Can be a String, Float or Integer 
     */
    public Input(input: string, activator: Entity, inflictor: Entity, param?: any): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Sets up Data Tables from entity to use with {{ClassFunction|Entity|NetworkVar}}. 
     */
    public InstallDataTable(): void;
    
    /**
     * Resets the entity's bone cache values in order to prepare for a model change.
     * 
     * This should be called after calling {{ClassFunction|Entity|SetPoseParameter}}. 
     */
    public InvalidateBoneCache(): void;
    
    /**
     * Returns true if the entity has constraints attached to it 
     * @returns Whether the entity is constrained or not. 
     * @example
     * 
     * function ENT:PhysicsUpdate( physobj )
     * 
     * 	if ( CLIENT ) then return end
     * 
     * 	// Don't do anything if the player isn't holding us
     * 	if ( !self:IsPlayerHolding() && !self:IsConstrained() ) then
     * 		physobj:SetVelocity( Vector(0,0,0) )
     * 		physobj:Sleep() 
     * 	end
     * end
     * 
     * // From entities/prop_effect.lua 
     */
    public IsConstrained(): boolean;
    
    /**
     * Returns if entity is constraint or not 
     * @returns Is the entity a constraint or not 
     * @example
     * 
     * print( player.GetByID(1):GetEyeTrace().Entity:IsConstraint() )
     * 
     * // Returns true if player 1 is aiming at constraint. 
     */
    public IsConstraint(): boolean;
    
    /**
     * Returns whether the entity is dormant or not. Client/server entities become dormant when they leave the PVS on the server. Client side entities can decide for themselves whether to become dormant. This mainly applies to PVS. 
     * @returns Whether the entity is dormant or not. 
     */
    public IsDormant(): boolean;
    
    /**
     * Returns whether an entity has engine effect applied or not. 
     * @param effect  The effect to check for, see {{Enum|EF}}. 
     * @returns whether an entity has the engine effect applied or not. 
     */
    public IsEffectActive(effect: EF): boolean;
    
    /**
     * Checks if given flag is set or not. 
     * @param flag  The engine flag to test, see {{Enum|EFL}} 
     * @returns Is set or not 
     */
    public IsEFlagSet(flag: EFL): boolean;
    
    /**
     * Checks if given flag(s) is set or not. 
     * @param flag  The engine flag(s) to test, see {{Enum|FL}} 
     * @returns Is set or not 
     * @example
     * 
     * print( Entity( 1 ):IsFlagSet( FL_ONGROUND ))
     * 
     * // Checks if the player is on the ground. 
     */
    public IsFlagSet(flag: FL): boolean;
    
    /**
     * Returns whether the entity is inside a wall or outside of the map.
     * 
     * **Note:**
     * >Internally this function uses {{LibraryFunction|util|IsInWorld}}, that means that this function only checks {{ClassFunction|Entity|GetPos}} of the entity. If an entity is only partially inside a wall, or has a weird GetPos offset, this function may not give reliable output. 
     * @returns Is the entity in world 
     */
    public IsInWorld(): boolean;
    
    /**
     * Returns whether the entity is lag compensated or not. 
     * @returns Whether the entity is lag compensated or not. 
     */
    public IsLagCompensated(): boolean;
    
    /**
     * Returns true if the target is in line of sight. This will only work on CBaseCombatCharacter entities. 
     * @param target  The target to test. You can also supply an {{Type|Entity}} instead of a {{Type|Vector}} 
     * @returns Returns true if the line of sight is clear 
     */
    public IsLineOfSightClear(target: Entity | Vector): boolean;
    
    /**
     * Checks if the entity is an NPC or not. 
     * @returns Whether the entity is an NPC. 
     */
    public IsNPC(): boolean;
    
    /**
     * Returns whether the entity is on fire. 
     * @returns Whether the entity is on fire or not. 
     * @example
     * 
     * print( Entity(1):IsOnFire() )
     * 
     * // Demonstrates the use of this function. 
     */
    public IsOnFire(): boolean;
    
    /**
     * Returns whether the entity is on ground or not.
     * 
     * Internally, this checks if [[Enums/FL|FL_ONGROUND]] is set on the entity.
     * 
     * This function is an alias of {{ClassFunction|Entity|OnGround}}. 
     * @returns Whether the entity is on ground or not. 
     * @example
     * 
     * print( Entity( 1 ):IsOnGround() )
     * print( IsValid( Entity( 1 ):GetGroundEntity() ) ) // This should give the exact output as the first line
     * 
     * // Demonstrates the use of this function. 
     */
    public IsOnGround(): boolean;
    
    /**
     * Checks if the entity is a player or not. 
     * @returns Whether the entity is a player. 
     * @example
     * 
     * print( player.GetByID( 1 ):IsPlayer() )
     * print( ents.FindByClass( "prop_physics" )[ 1 ]:IsPlayer() )
     * 
     * // Checks if two entities are players. 
     */
    public IsPlayer(): boolean;
    
    /**
     * Returns true if the entity is being held by a player. Either by physics gun, gravity gun or use-key (+use).
     * 
     * **Bug [#2046](https://github.com/Facepunch/garrysmod-issues/issues/2046):**
     * >If multiple players are holding an object and one drops it, this will return false for the player still holding the object. 
     * @returns IsBeingHeld 
     */
    public IsPlayerHolding(): boolean;
    
    /**
     * Returns whether there's a gesture is given activity being played.
     * 
     * **Note:**
     * >This function only works on [[BaseAnimatingOverlay]] entites! 
     * @param activity  The activity to test. See {{Enum|ACT}}. 
     * @returns Whether there's a gesture is given activity being played. 
     */
    public IsPlayingGesture(activity: ACT): boolean;
    
    /**
     * Checks if the entity is a ragdoll. 
     * @returns Is ragdoll or not 
     */
    public IsRagdoll(): boolean;
    
    /**
     * Checks if the entity is a SENT or a built-in entity. 
     * @returns Returns true if entity is scripted ( SENT ), false if not ( A built-in engine entity ) 
     */
    public IsScripted(): boolean;
    
    /**
     * Returns if the entity is solid or not.
     * Very useful for determining if the entity is a trigger or not. 
     * @returns Whether the entity is solid or not. 
     */
    public IsSolid(): boolean;
    
    /**
     * Returns whether the entity is a valid entity or not.
     * 
     * An entity is valid if:
     * * It is not a [[Global_Variables|NULL]] entity
     * * It is not the worldspawn entity ({{LibraryFunction|game|GetWorld}})
     * 
     * Instead of calling this method directly, it's a good idea to call the global {{GlobalFunction|IsValid}} instead.
     * It will check whether the given variable contains an object (an Entity) or nothing at all for you. See examples. 
     * @returns true if the entity is valid, false otherwise 
     * @example
     * 
     * if ( entity && entity:IsValid() ) then
     * 	// Do stuff
     * end
     * 
     * // The above can be replaced with the following for the same effect (and cleaner code)
     * 
     * if ( IsValid( entity ) ) then
     * 	// Do stuff
     * end
     * 
     * // Shows how to use the global {{GlobalFunction|IsValid}} function instead of using this method directly.@example
     * 
     * print( LocalPlayer():IsValid() )
     * 
     * // 
     */
    public IsValid(): boolean;
    
    /**
     * Returns whether the given layer ID is valid and exists on this entity.
     * 
     * **Note:**
     * >This function only works on [[BaseAnimatingOverlay]] entites! 
     * @param layerID  The Layer ID 
     * @returns Whether the given layer ID is valid and exists on this entity. 
     */
    public IsValidLayer(layerID: number): boolean;
    
    /**
     * Checks if the entity is a vehicle or not. 
     * @returns Whether the entity is a vehicle. 
     */
    public IsVehicle(): boolean;
    
    /**
     * Checks if the entity is a weapon or not. 
     * @returns Whether the entity is a weapon 
     */
    public IsWeapon(): boolean;
    
    /**
     * Returns whether the entity is a widget or not.
     * 
     * This is used by the "Edit Bones" context menu property. 
     * @returns Whether the entity is a widget or not. 
     */
    public IsWidget(): boolean;
    
    /**
     * Returns if the entity is the map's Entity[0] worldspawn 
     * @returns isWorld 
     */
    public IsWorld(): boolean;
    
    /**
     * Called when the engine sets a value for this scripted entity.
     * 
     * See {{HookFunction|GM|EntityKeyValue}} for a hook that works for all entities.
     * 
     * See {{HookFunction|WEAPON|KeyValue}} for a hook that works for scripted weapons. 
     * @param key  The key that was affected. 
     * @param value  The new value. 
     * @returns Return true to suppress this KeyValue or return false or nothing to apply this key value. 
     */
    protected KeyValue(key: string, value: string): boolean;
    
    /**
     * Converts a vector local to an entity into a worldspace vector 
     * @param lpos  The local vector 
     * @returns The translated to world coordinates vector 
     * @example
     * 
     * return ent:LocalToWorld(Vector(100,0,0))
     * 
     * // Produces a worldvector 100 units in front of the center of the entity, taking into account the entity's angle 
     */
    public LocalToWorld(lpos: Vector): Vector;
    
    /**
     * Converts a local angle (local to the entity) to a world angle. 
     * @param ang  The local angle 
     * @returns The world angle 
     */
    public LocalToWorldAngles(ang: Angle): Angle;
    
    /**
     * Gets the attachment index of the given attachment name, returns 0 if the attachment does not exist, or -1 if the model is invalid. 
     * @param attachmentName  The name of the attachment. 
     * @returns attachmentIndex 
     */
    public LookupAttachment(attachmentName: string): number;
    
    /**
     * Gets the bone index of the given bone name, returns nothing if the bone does not exist. 
     * @param boneName  The name of the bone.
     * 
     * Common generic bones ( for player models and some HL2 models ): 
     * * ValveBiped.Bip01_Head1
     * * ValveBiped.Bip01_Spine
     * * ValveBiped.Anim_Attachment_RH
     * 
     * Common hand bones (left hand equivalents also available, replace _R_ with _L_)
     * * ValveBiped.Bip01_R_Hand
     * * ValveBiped.Bip01_R_Forearm
     * * ValveBiped.Bip01_R_Foot
     * * ValveBiped.Bip01_R_Thigh
     * * ValveBiped.Bip01_R_Calf
     * * ValveBiped.Bip01_R_Shoulder
     * * ValveBiped.Bip01_R_Elbow 
     * @returns Index of the given bone name 
     */
    public LookupBone(boneName: string): number;
    
    /**
     * Returns sequence ID from its name. 
     * @param name  Sequence name 
     * @returns [Sequence ID for that name. This '''will''' differ for models with same sequence names. Will be -1 whether the sequence is invalid., The sequence duration
     * * 0 if the sequence is invalid] 
     * !TupleReturn
     */
    public LookupSequence(name: string): [number, number];
    
    /**
     * Turns the {{ClassFunction|Entity|GetPhysicsObject}} into a physics shadow.
     * It's used internally for the Player's and NPC's physics object, and certain HL2 entities such as the crane.
     * 
     * A physics shadow can be used to have static entities that never move by setting both arguments to false.
     * 
     * **Note:**
     * >Unlike {{ClassFunction|Entity|PhysicsInitShadow}}, this function doesn't remove the current physics object. 
     * @param allowPhysicsMovement  Whether to allow the physics shadow to move under stress. 
     * @param allowPhysicsRotation  Whether to allow the physics shadow to rotate under stress. 
     */
    public MakePhysicsObjectAShadow(allowPhysicsMovement: boolean, allowPhysicsRotation: boolean): void;
    
    /**
     * Sets custom bone angles.
     * 
     * **Note:**
     * >The repeated use of bone manipulation in multiplayer games is highly discouraged due to the huge produced network traffic. 
     * @param boneID  Index of the bone you want to manipulate 
     * @param ang  Angle to apply.
     * 
     * The angle is relative to the original bone angle, not relative to the world or the entity. 
     * @example
     * 
     * local server_only = true // Change the value!
     * 
     * if server_only then
     * 	if SERVER then
     * 		hook.Add( "Think", "bone_manipulation_test", function()
     * 			for _,ent in ipairs( ents.FindByModel( "models/buggy.mdl" ) ) do
     * 				ent:ManipulateBoneAngles( 28, Angle( 0,0,RealTime()*180 ) )
     * 			end
     * 		end )
     * 	else
     * 		hook.Add( "Think", "bone_manipulation_test", function()
     * 		end )
     * 	end
     * else
     * 	if SERVER then
     * 		hook.Add( "Think", "bone_manipulation_test", function()
     * 			for _,ent in ipairs( ents.FindByModel( "models/buggy.mdl" ) ) do
     * 				ent:SetNWFloat( "bone_manipulation_test", RealTime()*180 ) // Entity:SetNW....() do not broadcast new values instantly
     * 			end
     * 		end )
     * 	else
     * 		hook.Add( "Think", "bone_manipulation_test", function()
     * 			for _,ent in ipairs( ents.GetAll() ) do
     * 				if ent:GetModel() == "models/buggy.mdl" then
     * 					ent:ManipulateBoneAngles( 28, Angle( 0,0,ent:GetNWFloat( "bone_manipulation_test" ) ) )
     * 				end
     * 			end
     * 		end )
     * 	end
     * end
     * 
     * // This example shows the network usage impact of repeatedly using bone manipulation serverside.
     * 
     * To see the difference, type in client's console: '''net_graph 3'''
     * 
     * The rotation is not smooth when using {{ClassFunction|Entity|SetNWFloat}}() because it does not update the value on every frame. 
     */
    public ManipulateBoneAngles(boneID: number, ang: Angle): void;
    
    /**
     * Manipulates the bone's jiggle value(s).
     * 
     * {{Validate|Working example required}} 
     * @param boneID  Index of the bone you want to manipulate. 
     * @param amount  0 = No Jiggle
     * 1 = Jiggle 
     */
    public ManipulateBoneJiggle(boneID: number, amount: number): void;
    
    /**
     * Sets custom bone offsets. 
     * @param boneID  Index of the bone you want to manipulate 
     * @param pos  Position vector to apply
     * 
     * Note that the position is relative to the original bone position, not relative to the world or the entity. 
     */
    public ManipulateBonePosition(boneID: number, pos: Vector): void;
    
    /**
     * Sets custom bone scale.
     * 
     * {{Warning|When used serverside, this method produces a huge network consumption!}}
     * 
     * **Bug [#3502](https://github.com/Facepunch/garrysmod-issues/issues/3502):**
     * >This does not scale procedural bones. 
     * @param boneID  Index of the bone you want to manipulate 
     * @param scale  Scale vector to apply. Note that the scale is relative to the original bone scale, not relative to the world or the entity.
     * 
     * **Bug [#1249](https://github.com/Facepunch/garrysmod-issues/issues/1249):**
     * >The vector will be normalised if its longer than 32 units. 
     */
    public ManipulateBoneScale(boneID: number, scale: Vector): void;
    
    /**
     * Returns entity's map creation ID. Unlike {{ClassFunction|Entity|EntIndex}} or {{ClassFunction|Entity|GetCreationID}}, it will always be the same on same map, no matter how much you clean up or restart it.
     * 
     * To be used in conjunction with {{LibraryFunction|ents|GetMapCreatedEntity}}. 
     * @returns The map creation ID or -1 if the entity is not compiled into the map. 
     */
    public MapCreationID(): number;
    
    /**
     * Refreshes the shadow of the entity. 
     */
    public MarkShadowAsDirty(): void;
    
    /**
     * Fires the muzzle flash effect of the weapon the entity is carrying. This only creates a light effect and is often called alongside {{ClassFunction|Weapon|SendWeaponAnim}} 
     */
    public MuzzleFlash(): void;
    
    /**
     * Performs a Ray OBBox intersection from the given position to the origin of the OBBox with the entity and returns the hit position on the OBBox 
     * @param position  The vector to start the intersection from. 
     * @returns The nearest hit point of the entity's bounding box in world coordinates. 
     */
    public NearestPoint(position: Vector): Vector;
    
    /**
     * Creates a network variable on the entity and adds Set/Get functions for it. This function should only be called in {{HookFunction|ENTITY|SetupDataTables}}. 
     * @param type  Supported choices:
     * 
     * * "String"
     * * "Bool"
     * * "Float"
     * * "Int" (32-bit signed integer)
     * * "Vector"
     * * "Angle"
     * * "Entity" 
     * @param slot  Each network var has to have a unique slot. The slot is per type - so you can have an int in slot 0, a bool in slot 0 and a float in slot 0 etc. but you can't have two ints in slot 0 instead you would do a int in slot 0 and another int in slot 1. 
     * 
     * The max slots right now are 32 - so you should pick a number between 0 and 31. An exception to this is strings which has a max slots of 4. 
     * @param name  The name will affect how you access it. If you call it "Foo" you would add two new functions on your entity - SetFoo and GetFoo. So be careful that what you call it won't collide with any existing functions (don't call it "Pos" for example). 
     * @param extended [=nil] A table of extended information. 
     * 
     * '''KeyName'''
     * 
     * If the table contains a "KeyName" key the value can be set using {{ClassFunction|Entity|SetKeyValue}}. This is useful if you're making an entity that you want to be loaded in a map. The sky entity uses this.
     * 
     * '''Edit'''
     * 
     * The edit key lets you mark this variable as editable. See [[Editable Entities]] for more information. 
     * @example
     * 
     * function ENT:SetupDataTables()
     * 
     * 	self:NetworkVar( "Float", 0, "Amount" )
     * 	self:NetworkVar( "Vector", 0, "StartPos" )
     * 	self:NetworkVar( "Vector", 1, "EndPos" )
     * 
     * end
     * 
     * // Code...
     * 
     * // Setting values on the entity
     * self:SetStartPos( Vector( 1, 0, 0 ) )
     * self:SetAmount( 100 )
     * 
     * // Code...
     * 
     * // Getting values
     * local startpos = self:GetStartPos()
     * 
     * // Setting up data tables 
     */
    public NetworkVar(type: string, slot: number, name: string, extended?: table): void;
    
    /**
     * Creates a callback that will execute when the given network variable changes - that is, when the Set<name> function is run.
     * 
     * **Note:**
     * >The callback is executed ''before'' the value is changed, and is called even if the new and old values are the same.
     * 
     * **Note:**
     * >This function does not exist on entities in which {{ClassFunction|Entity|InstallDataTable}} has not been called. By default, this means this function only exists on SENTs (both serverside and clientside) and on players with a [[Player Classes|Player Class]] (serverside and clientside {{GlobalFunction|LocalPlayer}} only!). It is therefore safest to only use this in {{HookFunction|ENTITY|SetupDataTables}}.
     * 
     * {{Warning|A clientside NetworkVarNotify will not be called when the network var is  changed serverside! This makes the function less useful. This is a bug. [https://github.com/Facepunch/garrysmod-requests/issues/324]}} 
     * @param name  Name of variable to track changes of 
     * @param callback  The function to call when the variable changes. It is passed 4 arugments:
     * * {{FuncArg|Entity|entity|Entity whos variable changed (This will be variable called "self" in ENT:CallBack format.)}}
     * * {{FuncArg|string|name|Name of changed variable}}
     * * {{FuncArg|any|old|Old/current variable value}}
     * * {{FuncArg|any|new|New variable value that it was set to}} 
     * @example
     * 
     * function ENT:SetupDataTables()
     * 
     * 	self:NetworkVar( "Float", 0, "Amount" )
     * 	self:NetworkVar( "Vector", 1, "StartPos" )
     * 	self:NetworkVar( "Vector", 2, "EndPos" )
     * 
     * 	if ( SERVER ) then
     * 		self:NetworkVarNotify( "EndPos", self.OnVarChanged )
     * 	end
     * 
     * end
     * 
     * function ENT:OnVarChanged( name, old, new )
     * 	print( name, old, new )
     * end
     * 
     * // Example usage 
     */
    public NetworkVarNotify(name: string, callback: Function): void;
    
    /**
     * Start the next task in specific schedule. 
     * @param sched  The schedule to start next task in. 
     */
    protected NextTask(sched: table): void;
    
    /**
     * In the case of a scripted entity, this will cause the next {{HookFunction|ENTITY|Think}} event to be run at the given time.
     * 
     * Does not work clientside! Use {{ClassFunction|Entity|SetNextClientThink}} instead.
     * 
     * **Bug [#3269](https://github.com/Facepunch/garrysmod-issues/issues/3269):**
     * >This does not work with SWEPs. 
     * @param timestamp  The relative to {{GlobalFunction|CurTime}} timestamp, at which the next think should occur. 
     * @example
     * 
     * function ENT:Think()
     *     print("Hello, World!")
     * 
     *     self:NextThink( CurTime() + 1 )
     *     return true // Note: You need to return true to override the default next think time
     * end
     * 
     * // Prints 'Hello, World!' in console and sleeps for a second. 
     */
    public NextThink(timestamp: number): void;
    
    /**
     * Returns the center of an entity's bounding box as a local vector. 
     * @returns OBBCenter 
     */
    public OBBCenter(): Vector;
    
    /**
     * Returns the highest corner of an entity's bounding box as a local vector. 
     * @returns The local position of the highest corner of the entity's oriented bounding box. 
     */
    public OBBMaxs(): Vector;
    
    /**
     * Returns the lowest corner of an entity's bounding box as a local vector. 
     * @returns The local position of the lowest corner of the entity's oriented bounding box. 
     */
    public OBBMins(): Vector;
    
    /**
     * Returns the entity's capabilities as a bitfield.
     * 
     * In the engine this function is mostly used to check the use type, the save/restore system and level transitions flags.
     * 
     * Even though the function is defined shared, it is not guaranteed to return the same value across states.
     * 
     * **Note:**
     * >The enums for this are not currently implemented in Lua, however you can access the defines [https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/shared/baseentity_shared.h#L21-L38 here]. 
     * @returns The bitfield, a combination of the [https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/shared/baseentity_shared.h#L21-L38 FCAP_] flags. 
     */
    public ObjectCaps(): number;
    
    /**
     * Called each time the NPC updates its condition. 
     * @param conditionID  The ID of condition. See {{ClassFunction|NPC|ConditionName}}. 
     */
    protected OnCondition(conditionID: number): void;
    
    /**
     * Called on any entity after it has been created by the {{Lib|duplicator}} and before any bone/entity modifiers have been applied.
     * 
     * This hook is called after {{HookFunction|ENTITY|Initialize}} and before {{HookFunction|ENTITY|PostEntityPaste}}. 
     * @param entTable  {{Struct|EntityCopyData}} of the source entity. 
     */
    protected OnDuplicated(entTable: EntityCopyData): void;
    
    /**
     * Called after duplicator finishes saving the entity, allowing you to modify the save data.
     * 
     * This is called after {{HookFunction|ENTITY|PostEntityCopy}}. 
     * @param data  The save {{Struct|EntityCopyData}} that you can modify. 
     * @example
     * 
     * function ENT:OnEntityCopyTableFinish( data )
     * 	for k, v in pairs( data ) do data[ k ] = nil end
     * end
     * 
     * // Prevent this entity from being copied and subsequently pasted. 
     */
    protected OnEntityCopyTableFinish(data: EntityCopyData): void;
    
    /**
     * Returns true if the entity is on the ground, and false if it isn't.
     * 
     * Internally, this checks if [[Enums/FL|FL_ONGROUND]] is set on the entity. This is only updated for players and NPCs, and thus won't inherently work for other entities. 
     * @returns Whether the entity is on the ground or not. 
     * @example
     * 
     * print( Entity( 1 ):OnGround() )
     * print( Entity( 1 ):IsFlagSet( FL_ONGROUND ) ) // This should give exact same output as the first line
     * 
     * // Prints if Entity(1) is on the ground or not. 
     */
    public OnGround(): boolean;
    
    /**
     * Called when the entity is reloaded by the lua auto-refresh system, i.e. when the developer edits the lua file for the entity while the game is running. 
     */
    protected OnReloaded(): void;
    
    /**
     * Called when the entity is about to be removed.
     * 
     * See also {{ClassFunction|Entity|CallOnRemove}}, which can even be used on engine (non-Lua) entities.
     * 
     * ==Clientside behaviour remarks==
     * 
     * {{Validate}}
     * 
     * This hook may be called at odd times (when entity has actually not yet been removed from the server). This happens during fullupdate with the {{HookFunction|ENTITY|Initialize}} function not being called even when the entity reappears.
     * You can debug this behaviour by enabling cheats and running '''cl_fullupdate''' on the client.
     * 
     * {{HookFunction|GM|NotifyShouldTransmit}} can be used to circumvent this problem. {{HookFunction|ENTITY|Think}} can also be used to detect that the entity has reappeared. You may reinitialize any necessary data in these hooks. 
     */
    protected OnRemove(): void;
    
    /**
     * Called when the entity is reloaded from a Source Engine save (not the Sandbox saves or dupes) or on a changelevel (for example Half-Life 2 campaign level transitions).
     * 
     * For the {{Lib|duplicator}} callbacks, see {{HookFunction|ENTITY|OnDuplicated}}. 
     */
    protected OnRestore(): void;
    
    /**
     * Called when the entity is taking damage. 
     * @param damage  The damage to be applied to the entity. 
     */
    protected OnTakeDamage(damage: CTakeDamageInfo): void;
    
    /**
     * Called from the engine when TaskComplete is called.
     * This allows us to move onto the next task - even when TaskComplete was called from an engine side task. 
     */
    protected OnTaskComplete(): void;
    
    /**
     * Tests whether the damage passes the entity filter.
     * 
     * This will call {{HookFunction|ENTITY|PassesDamageFilter}} on scripted entities of the type "filter".
     * 
     * **Note:**
     * >This function only works on entities of the type "filter". ( filter_* entities, including base game filter entites ) 
     * @param dmg  The damage info to test 
     * @returns Whether the damage info passes the entity filter. 
     */
    public PassesDamageFilter(dmg: CTakeDamageInfo): boolean;
    
    /**
     * Tests whether the entity passes the entity filter.
     * 
     * This will call {{HookFunction|ENTITY|PassesFilter}} on scripted entities of the type "filter".
     * 
     * **Note:**
     * >This function only works on entities of the type "filter". ( filter_* entities, including base game filter entites ) 
     * @param caller  The initiator of the test.
     * 
     * For example the trigger this filter entity is used in. 
     * @param ent  The entity to test against the entity filter. 
     * @returns Whether the entity info passes the entity filter. 
     */
    public PassesFilter(caller: Entity, ent: Entity): boolean;
    
    /**
     * Polls whenever the entity should trigger the brush.
     * 
     * {{Warning|This hook is broken and will not work without code below}} 
     * @param ent  The entity that is about to trigger. 
     * @returns Should trigger or not. 
     * @example
     * 
     * ENT.Entities = {}
     * 
     * function ENT:IsTouchedBy( ent )
     * 	return table.HasValue( self.Entities, ent )
     * end
     * 
     * function ENT:StartTouch( ent )
     * 	if ( !self:PassesTriggerFilters( ent ) ) then return end
     * 	table.insert( self.Entities, ent )
     * 
     * 	/* Code 
     * end
     * 
     * function ENT:Touch( ent )
     * 	if ( !self:PassesTriggerFilters( ent ) ) then return end
     * 	if ( !table.HasValue( ent ) ) then table.insert( self.Entities, ent ) end
     * 
     * 	/* Code 
     * end
     * 
     * function ENT:EndTouch( ent )
     * 	if ( !self:IsTouchedBy( ent ) ) then return end
     * 	table.RemoveByValue( self.Entities, ent )
     * 
     * 	/* Code 
     * end
     * 
     * // How this is supposed to work internally 
     */
    protected PassesTriggerFilters(ent: Entity): boolean;
    
    /**
     * Called when the entity collides with anything. The move type and solid type must be VPHYSICS for the hook to be called.
     * 
     * **Note:**
     * >If you want to use this hook on default/engine/non-Lua entites ( like prop_physics ), use {{ClassFunction|Entity|AddCallback}} instead! This page describes a hook for Lua entities 
     * @param colData  Information regarding the collision. See {{Struct|CollisionData}}. 
     * @param collider  The physics object that collided. 
     * @example
     * 
     * function ENT:PhysicsCollide( data, phys )
     * 	if ( data.Speed > 50 ) then self:EmitSound( Sound( "Flashbang.Bounce" ) ) end
     * end
     * 
     * // Play a sound when we hit something. 
     */
    protected PhysicsCollide(colData: CollisionData, collider: PhysObj): void;
    
    /**
     * Destroys the current physics object of an entity. 
     */
    public PhysicsDestroy(): void;
    
    /**
     * Initializes the physics mesh of the entity from a triangle soup defined by a table of vertices. The resulting mesh is hollow, may contain holes, and always has a volume of 0.
     * 
     * While this is very useful for static geometry such as terrain displacements, it is advised to use {{ClassFunction|Entity|PhysicsInitConvex}} or {{ClassFunction|Entity|PhysicsInitMultiConvex}} for moving solid objects instead.
     * 
     * {{ClassFunction|Entity|EnableCustomCollisions}} needs to be called if you want players to collide with the entity correctly. 
     * @param vertices  A table consisting of {{Struct|MeshVertex}} (only the ''pos'' element is taken into account). Every 3 vertices define a triangle in the physics mesh. 
     * @returns Returns true on success, nil otherwise. 
     */
    public PhysicsFromMesh(vertices: MeshVertex): boolean;
    
    /**
     * Initializes the [[Entity/GetPhysicsObject|physics object]] of the entity using its current [[Entity/GetModel|model]]. Deletes the previous physics object if it existed and the new object creation was successful.
     * 
     * If the entity's current model has no physics mesh associated to it, no physics object will be created and the previous object will still exist, if applicable.
     * 
     * **Note:**
     * >When called clientside, this will not create a valid {{Type|PhysObj}} if the model hasn't been [[util/PrecacheModel|precached]] serverside.
     * 
     * **Note:**
     * >If successful, this function will automatically call {{ClassFunction|Entity|SetSolid}}( solidType ) and {{ClassFunction|Entity|SetSolidFlags}}( 0 ).
     * 
     * **Bug:**
     * >Clientside physics objects are broken and do not move properly. Physics objects should only created on the server or you will experience incorrect physgun beam position and prediction issues. 
     * @param solidType  The solid type of the physics object to create, see {{Enum|SOLID}}. Should be SOLID_VPHYSICS in most cases.
     * 
     * **Note:**
     * >Using SOLID_NONE will only delete the current physics object - it does not create a new one. 
     * @returns Returns true on success, false otherwise. 
     */
    public PhysicsInit(solidType: SOLID): boolean;
    
    /**
     * Makes the physics object of the entity a AABB.
     * 
     * **Note:**
     * >If the volume of the resulting box is 0 (the mins and maxs are the same), the mins and maxs will be changed to {{GlobalFunction|Vector}}( -1, -1, -1 ) and {{GlobalFunction|Vector}}( 1, 1, 1 ), respectively.
     * 
     * **Note:**
     * >This function will automatically destroy any previous physics objects if successful and call {{ClassFunction|Entity|SetSolid}}( SOLID_BBOX ), {{ClassFunction|Entity|SetMoveType}}( MOVETYPE_VPHYSICS ), and {{ClassFunction|Entity|SetCollisionBounds}}( mins, maxs ).
     * 
     * **Bug:**
     * >Clientside physics objects are broken and do not move properly. Physics objects should only created on the server or you will experience incorrect physgun beam position and prediction issues. 
     * @param mins  The minimum position of the box. This is automatically ordered with the maxs. 
     * @param maxs  The maximum position of the box. This is automatically ordered with the mins. 
     * @returns Returns true on success, nil otherwise. This fails when the game cannot create any more {{Type|PhysCollide}}s. 
     */
    public PhysicsInitBox(mins: Vector, maxs: Vector): PhysCollide;
    
    /**
     * Initializes the physics mesh of the entity with a convex mesh defined by a table of points. The resulting mesh is the [[wikipedia:Convex hull|convex hull]] of all the input points. If successful, the previous physics object will be removed.
     * 
     * This is the standard way of creating moving physics objects with a custom convex shape. For more complex, concave shapes, see {{ClassFunction|Entity|PhysicsInitMultiConvex}}.
     * 
     * **Bug [#3301](https://github.com/Facepunch/garrysmod-issues/issues/3301):**
     * >This will crash if given all {{GlobalFunction|Vector}}(0,0,0)s.
     * 
     * **Bug:**
     * >Clientside physics objects are broken and do not move properly. Physics objects should only created on the server or you will experience incorrect physgun beam position and prediction issues. 
     * @param points  A table of eight {{Type|Vector}}s, in local coordinates, to be used in the computation of the convex mesh. Order does not matter. 
     * @returns Returns true on success, nil otherwise. 
     * @example
     * 
     * function ENT:Initialize()
     * 	if ( CLIENT ) then return end // We only want to run this code serverside
     * 
     * 	local x0 = -20 // Define the min corner of the box
     * 	local y0 = -10
     * 	local z0 = -5
     * 
     * 	local x1 = 20 // Define the max corner of the box
     * 	local y1 = 10
     * 	local z1 = 5
     * 
     * 	self:PhysicsInitConvex( {
     * 		Vector( x0, y0, z0 ),
     * 		Vector( x0, y0, z1 ),
     * 		Vector( x0, y1, z0 ),
     * 		Vector( x0, y1, z1 ),
     * 		Vector( x1, y0, z0 ),
     * 		Vector( x1, y0, z1 ),
     * 		Vector( x1, y1, z0 ),
     * 		Vector( x1, y1, z1 )
     * 	} )
     * 
     * 	// Set up solidity and movetype
     * 	self:SetMoveType( MOVETYPE_VPHYSICS )
     * 	self:SetSolid( SOLID_VPHYSICS )
     * 
     * 	// Enable custom collisions on the entity
     * 	self:EnableCustomCollisions( true )
     * end
     * 
     * // Creates a "box" physics mesh for the entity. 
     */
    public PhysicsInitConvex(points: Vector[]): boolean;
    
    /**
     * An advanced version of {{ClassFunction|Entity|PhysicsInitConvex}} which initializes a physics object from multiple convex meshes. This should be used for physics objects with a custom shape which cannot be represented by a single convex mesh.
     * 
     * If successful, the previous physics object will be removed.
     * 
     * **Bug:**
     * >Clientside physics objects are broken and do not move properly. Physics objects should only created on the server or you will experience incorrect physgun beam position and prediction issues. 
     * @param vertices  A table consisting of tables of {{Type|Vector}}s. Each sub-table defines a set of points to be used in the computation of one convex mesh. 
     * @returns Returns true on success, nil otherwise 
     * @example
     * 
     * local min1 = Vector( -30, -10, 0 ) // Box1 minimum corner
     * local max1 = Vector( -10, 10, 20 ) // Box1 maximum corner
     * 
     * local min2 = Vector( 10, -5, 10 ) // Box2 minimum corner
     * local max2 = Vector( 30, 5, 40 ) // Box2 maximum corner
     * 
     * if SERVER then
     * 	function ENT:Initialize()
     * 		self:SetModel( "models/props_c17/oildrum001.mdl" )
     * 
     * 		// Initializing the multi-convex physics mesh
     * 		self:PhysicsInitMultiConvex( {
     * 			{ // Each sub-table is a set of vertices of a convex piece, order doesn't matter
     * 				Vector( min1.x, min1.y, min1.z ), // The first box vertices
     * 				Vector( min1.x, min1.y, max1.z ),
     * 				Vector( min1.x, max1.y, min1.z ),
     * 				Vector( min1.x, max1.y, max1.z ),
     * 				Vector( max1.x, min1.y, min1.z ),
     * 				Vector( max1.x, min1.y, max1.z ),
     * 				Vector( max1.x, max1.y, min1.z ),
     * 				Vector( max1.x, max1.y, max1.z ),
     * 			},
     * 			{ // All these tables together form a concave collision mesh
     * 				Vector( min2.x, min2.y, min2.z ), // The second box vertices
     * 				Vector( min2.x, min2.y, max2.z ),
     * 				Vector( min2.x, max2.y, min2.z ),
     * 				Vector( min2.x, max2.y, max2.z ),
     * 				Vector( max2.x, min2.y, min2.z ),
     * 				Vector( max2.x, min2.y, max2.z ),
     * 				Vector( max2.x, max2.y, min2.z ),
     * 				Vector( max2.x, max2.y, max2.z ),
     * 			},
     * 		} )
     * 
     * 		self:SetSolid( SOLID_VPHYSICS ) // Setting the solidity
     * 		self:SetMoveType( MOVETYPE_VPHYSICS ) // Setting the movement type
     * 
     * 		self:EnableCustomCollisions( true ) // Enabling the custom collision mesh
     * 
     * 		self:PhysWake() // Enabling the physics motion
     * 	end
     * else
     * 	local col = Color( 0, 0, 255, 255 )
     * 
     * 	// Drawing collision boxes on the client
     * 	function ENT:Draw()
     * 		self:DrawModel()
     * 
     * 		local pos, ang = self:GetPos(), self:GetAngles()
     * 
     * 		render.DrawWireframeBox( pos, ang, min1, max1, col ) // Drawing the first collision box
     * 		render.DrawWireframeBox( pos, ang, min2, max2, col ) // Drawing the second collision box
     * 	end
     * end
     * 
     * // Creates a physics mesh for the entity which consists of two boxes. 
     */
    public PhysicsInitMultiConvex(vertices: table): boolean;
    
    /**
     * Initializes the entity's physics object as a physics shadow. Removes the previous physics object if successful. This is used internally for the Player's and NPC's physics object, and certain HL2 entities such as the crane.
     * 
     * A physics shadow can be used to have static entities that never move by setting both arguments to false.
     * 
     * **Bug:**
     * >Clientside physics objects are broken and do not move properly. Physics objects should only created on the server or you will experience incorrect physgun beam position and prediction issues. 
     * @param allowPhysicsMovement [=true] Whether to allow the physics shadow to move under stress. 
     * @param allowPhysicsRotation [=true] Whether to allow the physics shadow to rotate under stress. 
     * @returns Return true on success, nil otherwise. 
     */
    public PhysicsInitShadow(allowPhysicsMovement?: boolean, allowPhysicsRotation?: boolean): boolean;
    
    /**
     * Makes the physics object of the entity a sphere.
     * 
     * **Note:**
     * >This function will automatically destroy any previous physics objects and call {{ClassFunction|Entity|SetSolid}}( SOLID_BBOX ) and {{ClassFunction|Entity|SetMoveType}}( MOVETYPE_VPHYSICS ).
     * 
     * **Bug:**
     * >Clientside physics objects are broken and do not move properly. Physics objects should only created on the server or you will experience incorrect physgun beam position and prediction issues. 
     * @param radius  The radius of the sphere. 
     * @param physmat  Physical material from [https://github.com/Facepunch/garrysmod/blob/master/garrysmod/scripts/surfaceproperties.txt surfaceproperties.txt] or added with {{LibraryFunction|physenv|AddSurfaceData}}. 
     * @returns Returns true on success, false otherwise 
     */
    public PhysicsInitSphere(radius: number, physmat: string): boolean;
    
    /**
     * Initializes a static physics object of the entity using its [[Entity/GetModel|current model]]. If successful, the previous physics object is removed.
     * 
     * This is what used by entities such as func_breakable, prop_dynamic, item_suitcharger, prop_thumper and npc_rollermine while it is in its "buried" state in the Half-Life 2 Campaign.
     * 
     * If the entity's current model has no physics mesh associated to it, no physics object will be created.
     * 
     * **Note:**
     * >This function will automatically call {{ClassFunction|Entity|SetSolid}}( solidType ).
     * 
     * **Bug:**
     * >Clientside physics objects are broken and do not move properly. Physics objects should only created on the server or you will experience incorrect physgun beam position and prediction issues. 
     * @param solidType  The solid type of the physics object to create, see {{Enum|SOLID}}. Should be SOLID_VPHYSICS in most cases. 
     * @returns Returns true on success, false otherwise. This will fail if the entity's current model has no associated physics mesh. 
     */
    public PhysicsInitStatic(solidType: SOLID): boolean;
    
    /**
     * Called from the Entity's motion controller to simulate physics.
     * 
     * This will only be called after using {{ClassFunction|Entity|StartMotionController}} on a scripted entity of "anim" type.
     * 
     * **Note:**
     * >This hook can work on the CLIENT if you call {{ClassFunction|Entity|StartMotionController}} and use {{ClassFunction|Entity|AddToMotionController}} on the physics objects you want to control
     * 
     * {{Warning|Do not use functions such as {{ClassFunction|PhysObj|EnableCollisions}} or {{ClassFunction|PhysObj|EnableGravity}} in this hook as they're very likely to crash your game. You may want to use {{HookFunction|ENTITY|PhysicsUpdate}} instead.}} 
     * @param phys  The physics object of the entity. 
     * @param deltaTime  Time since the last call. 
     * @returns [Angular force, Linear force, One of the {{Enum|SIM}}.] 
     * !TupleReturn
     */
    protected PhysicsSimulate(phys: PhysObj, deltaTime: number): [Vector, Vector, SIM];
    
    /**
     * Called whenever the physics of the entity are updated.
     * 
     * {{Warning|This hook won't be called if the Entity's {{Type|PhysObj}} goes asleep}} 
     * @param phys  The physics object of the entity. 
     */
    protected PhysicsUpdate(phys: PhysObj): void;
    
    /**
     * Wakes up the entity's physics object 
     * @example
     * 
     * local phys = self:GetPhysicsObject()
     * if (phys:IsValid()) then
     * 	phys:Wake()
     * end
     * 
     * // This is what the function does internally. 
     */
    public PhysWake(): void;
    
    /**
     * Makes the entity play a .vcd scene. 
     * @param scene  Filepath to scene 
     * @param delay [=0] Delay in seconds until the scene starts playing. 
     * @example
     * 
     * local ent = Entity( 1 ):GetEyeTrace().Entity
     * 
     * if( IsValid( ent ) ) then
     * 	npc:PlayScene( "scenes/breencast/welcome.vcd" )
     * end
     * 
     * // Makes the entity that the player 1 is looking at play the "Welcome to City 17" speech. 
     */
    public PlayScene(scene: string, delay?: number): void;
    
    /**
     * Changes an entities angles so that it faces the target entity. 
     * @param target  The entity to face. 
     */
    public PointAtEntity(target: Entity): void;
    
    /**
     * Called after the duplicator finished copying the entity 
     */
    protected PostEntityCopy(): void;
    
    /**
     * Called after the {{Lib|duplicator}} pastes the entity, after the bone/entity modifiers have been applied to the entity.
     * 
     * This hook is called after {{HookFunction|ENTITY|OnDuplicated}}. 
     * @param ply  The player who pasted the entity.
     * 
     * {{Warning|This may not be a valid player in some circumstances. For example, when a save is loaded from the main menu, this hook will be called before the player is spawned. This argument will be a NULL entity in that case.}}
     * **Bug [#1408](https://github.com/Facepunch/garrysmod-issues/issues/1408):**
     * >This will be nil for invalid players. 
     * @param ent  The entity itself. Same as 'self'. 
     * @param createdEntities  All entities that are within the placed dupe. **Note:**
     * >The keys of each value in this table are the original entity indexes when the duplication was created. This can be utilized to restore entity references that don't get saved in duplications. 
     */
    protected PostEntityPaste(ply: Player, ent: Entity, createdEntities: table): void;
    
    /**
     * Precaches gibs for the entity's model.
     * 
     * Normally this function should be ran when the entity is spawned, for example the {{HookFunction|ENTITY|Initialize}}, after {{ClassFunction|Entity|SetModel}} is called.
     * 
     * This is required for {{ClassFunction|Entity|GibBreakServer}} and {{ClassFunction|Entity|GibBreakClient}} to work. 
     */
    public PrecacheGibs(): void;
    
    /**
     * Called before the duplicator copies the entity.
     * 
     * If you are looking for a way to make the duplicator spawn another entity when duplicated. ( For example, you duplicate a "prop_physics", but you want the duplicator to spawn "prop_physics_my" ), you should add prop_physics.ClassOverride = "prop_physics_my". The duplication table should be also stored on that prop_physics, not on prop_physics_my. 
     */
    protected PreEntityCopy(): void;
    
    /**
     * Normalizes the ragdoll. This is used alongside Kinect in {{ClassFunction|Entity|SetRagdollBuildFunction}}, for more info see ragdoll_motion entity. 
     */
    public RagdollSolve(): void;
    
    /**
     * Sets the function to build the ragdoll. This is used alongside Kinect in {{ClassFunction|Entity|SetRagdollBuildFunction}}, for more info see ragdoll_motion entity. 
     */
    public RagdollStopControlling(): void;
    
    /**
     * Makes the physics objects follow the set bone positions. This is used alongside Kinect in {{ClassFunction|Entity|SetRagdollBuildFunction}}, for more info see ragdoll_motion entity. 
     */
    public RagdollUpdatePhysics(): void;
    
    /**
     * Removes the entity it is used on. 
     */
    public Remove(): void;
    
    /**
     * Removes all decals from the entities surface. 
     * @example
     * 
     * for k, v in pairs( ents.FindByClass( "prop_physics" )) do
     * 	v:RemoveAllDecals()
     * end
     * 
     * // Removes all decals from all props in world. 
     */
    public RemoveAllDecals(): void;
    
    /**
     * Removes and stops all gestures.
     * 
     * **Note:**
     * >This function only works on [[BaseAnimatingOverlay]] entites! 
     */
    public RemoveAllGestures(): void;
    
    /**
     * Removes a callback previously added with {{ClassFunction|Entity|AddCallback}} 
     * @param hook  The hook name to remove. See [[Entity Callbacks]] 
     * @param callbackid  The callback id previously retrieved with the return of {{ClassFunction|Entity|AddCallback}} or {{ClassFunction|Entity|GetCallbacks}} 
     */
    public RemoveCallback(hook: string, callbackid: number): void;
    
    /**
     * Removes a function previously added via {{ClassFunction|Entity|CallOnRemove}}. 
     * @param identifier  Identifier of the function within CallOnRemove 
     * @example
     * 
     * Entity:RemoveCallOnRemove("StopEngineSound")
     * 
     * // Removes the call to stop an engine's sounds when the entity is removed 
     */
    public RemoveCallOnRemove(identifier: string): void;
    
    /**
     * Removes an engine effect applied to an entity. 
     * @param effect  The effect to remove, see {{Enum|EF}}. 
     */
    public RemoveEffects(effect: EF): void;
    
    /**
     * Removes specified engine flag 
     * @param flag  The flag to remove, see {{Enum|EFL}} 
     */
    public RemoveEFlags(flag: EFL): void;
    
    /**
     * Removes specified flag(s) from the entity 
     * @param flag  The flag(s) to remove, see {{Enum|FL}} 
     */
    public RemoveFlags(flag: FL): void;
    
    /**
     * Removes a {{Type|PhysObj}}ect from the entity's motion controller so that {{HookFunction|ENTITY|PhysicsSimulate}} will no longer be called for given {{Type|PhysObj}}ect.
     * 
     * You must first create a motion controller with {{ClassFunction|Entity|StartMotionController}}.
     * 
     * **Note:**
     * > Only works on a scripted {{Type|Entity}} of anim type 
     * @param physObj  The {{Type|PhysObj}} to remove from the motion controller. 
     */
    public RemoveFromMotionController(physObj: PhysObj): void;
    
    /**
     * Removes and stops the gesture with given activity.
     * 
     * **Note:**
     * >This function only works on [[BaseAnimatingOverlay]] entites! 
     * @param activity  The activity remove. See {{Enum|ACT}}. 
     */
    public RemoveGesture(activity: ACT): void;
    
    /**
     * Removes solid flag(s) from the entity. 
     * @param flags  The flag(s) to remove, see {{Enum|FSOLID}}. 
     */
    public RemoveSolidFlags(flags: FSOLID): void;
    
    /**
     * Called instead of the engine drawing function of the entity. This hook works on any entity (scripted or not) it is applied on.
     * 
     * This does not work on "physgun_beam", use {{HookFunction|GM|DrawPhysgunBeam}} instead.
     * 
     * **Note:**
     * >As a downside of this implementation, only one RenderOverride may be applied at a time.
     * 
     * **Bug [#3292](https://github.com/Facepunch/garrysmod-issues/issues/3292):**
     * >Drawing a viewmodel in this function will cause {{HookFunction|GM|PreDrawViewModel}}, {{HookFunction|WEAPON|PreDrawViewModel}}, {{HookFunction|WEAPON|ViewModelDrawn}}, {{HookFunction|GM|PostDrawViewModel}}, and {{HookFunction|WEAPON|PostDrawViewModel}} to be called twice.
     * 
     * **Bug [#3299](https://github.com/Facepunch/garrysmod-issues/issues/3299):**
     * >This is called before PrePlayerDraw for players. If this function exists at all on a player, their worldmodel will always be rendered regardless of PrePlayerDraw's return. 
     * @example
     * 
     * local function DontDrawMe( self )
     * 	if ( self:GetOwner() == LocalPlayer() ) then
     * 		return
     * 	end
     * 	
     * 	self:DrawModel()
     * end
     * 
     * local pickent = LocalPlayer():GetEyeTrace().Entity
     * 
     * if ( IsValid( pickent ) ) then
     * 	pickent.RenderOverride = DontDrawMe
     * end
     * 
     * // Set the entity the player is looking at to not draw if the player is its owner. 
     */
    protected RenderOverride(): void;
    
    /**
     * Plays an animation on the entity. This may not always work on engine entities.
     * 
     * {{Warning|This will not reset the animation on viewmodels, use {{ClassFunction|Entity|SendViewModelMatchingSequence}} instead.}}
     * 
     * **Note:**
     * >This will not work properly if called directly after calling {{ClassFunction|Entity|SetModel}}. Consider waiting until the next Tick.
     * 
     * **Note:**
     * >Will not work on players due to the animations being reset every frame by the base gamemode animation system. See {{HookFunction|GM|CalcMainActivity}}. 
     * @param sequence  The sequence to play. Also accepts strings.
     * 
     * **Note:**
     * >If set to a string, the function will automatically call {{ClassFunction|Entity|LookupSequence}} to retrieve the sequence ID as a number. 
     * @example
     * 
     * ENT.Base = "base_anim"
     * ENT.Spawnable = true
     * ENT.AutomaticFrameAdvance = true
     * 
     * ENT.PrintName = "Animation Test"
     * ENT.Category = "My Entity Category"
     * 
     * function ENT:Initialize()
     * 	if ( SERVER ) then // Only set this stuff on the server, it is networked to clients automatically
     * 		self:SetModel( "models/items/ammocrate_ar2.mdl" ) // Set the model
     * 		self:PhysicsInit( SOLID_VPHYSICS ) // Initialize physics
     * 		self:SetUseType( SIMPLE_USE ) // Make sure ENT:Use is ran only once per use ( per press of the use button on the entity, by default the E key )
     * 	end
     * end
     * 
     * function ENT:Think()
     * 	if ( SERVER ) then // Only set this stuff on the server
     * 		self:NextThink( CurTime() ) // Set the next think for the serverside hook to be the next frame/tick
     * 		return true // Return true to let the game know we want to apply the self:NextThink() call
     * 	end
     * end
     * 
     * if ( SERVER ) then // This hook is only available on the server
     * 	function ENT:Use( activator, caller ) // If a player uses this entity, play an animation
     * 		if ( !self.Opened ) then // If we are not "opened"
     * 			self:ResetSequence( "open" ) // Play the open sequence
     * 			self.Opened = true // We are now opened
     * 		else
     * 			self:ResetSequence( "close" ) // Play the close sequence
     * 			self.Opened = false // We are now closed
     * 		end
     * 	end
     * end
     * 
     * // Minimal code needed to make sequences work as expected on custom "anim" type entities.
     * 
     * In this example, when the player uses the crate, it will open, and when they use it again, it will close. 
     */
    public ResetSequence(sequence: number | string): void;
    
    /**
     * Reset entity sequence info such as playback rate, ground speed, last event check, etc. 
     */
    public ResetSequenceInfo(): void;
    
    /**
     * Makes the entity/weapon respawn.
     * 
     * Only usable on HL2 pickups and any weapons. Seems to be buggy with weapons.
     * Very unreliable. 
     */
    public Respawn(): void;
    
    /**
     * Restarts the entity's animation gesture. If the given gesture is already playing, it will reset it and play it from the beginning.
     * 
     * **Note:**
     * >This function only works on [[BaseAnimatingOverlay]] entites. 
     * @param activity  The activity number to send to the entity. See {{Enum|ACT}} and {{ClassFunction|Entity|GetSequenceActivity}} 
     * @param addIfMissing [=true] Add/start the gesture to if it has not been yet started. 
     * @param autokill [=true] 
     */
    public RestartGesture(activity: ACT, addIfMissing?: boolean, autokill?: boolean): void;
    
    /**
     * Called from the engine every 0.1 seconds. 
     */
    protected RunAI(): void;
    
    /**
     * Called when an engine task is ran on the entity.
     * 
     * **Note:**
     * >This hook only exists for '''ai''' type SENTs 
     * @param taskID  The task ID, see [https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/ai_task.h#L89-L502 ai_task.h] 
     * @param taskData  The task data. 
     */
    protected RunEngineTask(taskID: number, taskData: number): void;
    
    /**
     * Called every think on running task.
     * The actual task function should tell us when the task is finished. 
     * @param task  The task to run 
     */
    protected RunTask(task: table): void;
    
    /**
     * Called whenever a schedule is finished. 
     */
    protected ScheduleFinished(): void;
    
    /**
     * Set the schedule we should be playing right now. 
     * @param iNPCState 
     * @example
     * 
     * local schdTest = ai_schedule.New( "Test Schedule" )
     *  
     * schdTest:EngTask( "TASK_GET_PATH_TO_RANDOM_NODE",  128 )
     * schdTest:EngTask( "TASK_RUN_PATH", 		   0   )
     * schdTest:EngTask( "TASK_WAIT_FOR_MOVEMENT", 	   0   )
     *  
     *  
     * function ENT:SelectSchedule()
     *  
     * 	self:StartSchedule( schdTest )
     *  
     * end
     * 
     * // Creates a new schedule and assigns it to a scripted NPC. 
     */
    protected SelectSchedule(iNPCState: number): void;
    
    /**
     * Returns sequence ID corresponding to given activity ID.
     * 
     * Opposite of {{ClassFunction|Entity|GetSequenceActivity}}.
     * 
     * Similar to {{ClassFunction|Entity|LookupSequence}}.
     * 
     * See also {{ClassFunction|Entity|SelectWeightedSequenceSeeded}}. 
     * @param act  The activity ID, see {{Enum|ACT}}. 
     * @returns The sequence ID 
     * @example
     * 
     * local VModel = self.Owner:GetViewModel()
     * 
     * if ( self:Clip1() == 0 and VModel:SelectWeightedSequence( ACT_VM_RELOAD_EMPTY ) ) then
     * 
     * 	local SEQ = self:LookupSequence( ACT_VM_RELOAD_EMPTY )
     * 
     * 	if ( SEQ == -1 ) then
     * 
     * 		print( "reload" )
     * 
     * 		local EnumToSeq = VModel:SelectWeightedSequence( ACT_VM_RELOAD )
     * 
     * 		//	Play the normal reload animation
     * 		VModel:SendViewModelMatchingSequence( EnumToSeq )
     * 
     * 	else
     * 
     * 		print( "reload empty" )
     * 
     * 		local EnumToSeq = VModel:SelectWeightedSequence( ACT_VM_RELOAD_EMPTY )
     * 
     * 		// Play the empty reload animation
     * 		VModel:SendViewModelMatchingSequence( EnumToSeq )
     * 		
     * 	end
     * 
     * end
     * 
     * // Use this hook to check if the model has a certain ACT_* enumeration, and if it does, play it. 
     */
    public SelectWeightedSequence(act: ACT): number;
    
    /**
     * Returns the sequence ID corresponding to given activity ID, and uses the provided seed for random selection. The seed should be the same server-side and client-side if used in a predicted environment.
     * 
     * See {{ClassFunction|Entity|SelectWeightedSequence}} for a provided-seed version of this function. 
     * @param act  The activity ID, see {{Enum|ACT}}. 
     * @param seed  The seed to use for randomly selecting a sequence in the case the activity ID has multiple sequences bound to it. {{ClassFunction|Entity|SelectWeightedSequence}} uses the same seed as {{LibraryFunction|util|SharedRandom}} internally for this. 
     * @returns The sequence ID 
     */
    public SelectWeightedSequenceSeeded(act: ACT, seed: number): number;
    
    /**
     * Sends sequence animation to the view model. It is recommended to use this for view model animations, instead of {{ClassFunction|Entity|ResetSequence}}.
     * 
     * This function is only usable on view models.
     * 
     * **Bug [#3229](https://github.com/Facepunch/garrysmod-issues/issues/3229):**
     * >Sequences 0-6 will not be looped regardless if they're marked as a looped animation or not. 
     * @param seq  The sequence ID returned by {{ClassFunction|Entity|LookupSequence}} or  {{ClassFunction|Entity|SelectWeightedSequence}}. 
     * @example
     * 
     * local VModel = self.Owner:GetViewModel( )
     * local EnumToSeq = VModel:SelectWeightedSequence( ACT_VM_PRIMARYATTACK )
     * 
     * VModel:SendViewModelMatchingSequence( EnumToSeq )
     * 
     * // Converting an ACT_VM_* enumeration to a sequence usable by the function. 
     */
    public SendViewModelMatchingSequence(seq: number): void;
    
    /**
     * Returns length of currently played sequence.
     * 
     * **Bug [#2783](https://github.com/Facepunch/garrysmod-issues/issues/2783):**
     * >This will return incorrect results for weapons and viewmodels clientside in thirdperson. 
     * @param seqid [=nil] A sequence ID to return the length specific sequence of instead of the entity's main/currently playing sequence. 
     * @returns The length of the sequence 
     * @example
     * 
     * local ply = Entity( 1 )
     * local seq = ply:SelectWeightedSequence( ACT_GMOD_TAUNT_CHEER )
     * local len = ply:SequenceDuration( seq )
     * print( ply, seq, len )
     * 
     * // Example usage for the argument. Retrieve length of animation on specific gesture slot. 
     */
    public SequenceDuration(seqid?: number): number;
    
    /**
     * Sets the entity's velocity.
     * 
     * **Note:**
     * >Actually binds to CBaseEntity::SetLocalVelocity() which sets the entity's velocity due to movement in the world from forces such as gravity. Does not include velocity from entity-on-entity collision or other world movement. 
     * @param velocity  The new velocity to set. 
     * @example
     * 
     * Entity( 1 ):SetVelocity( Vector( 0, 0, 500 ) )
     * 
     * // Makes Entity(1) fly upwards. 
     */
    public SetAbsVelocity(velocity: Vector): void;
    
    /**
     * Sets the angles of the entity.
     * 
     * **Note:**
     * >To set a player's angles, use {{ClassFunction|Player|SetEyeAngles}} instead. 
     * @param angles  The new angles. 
     */
    public SetAngles(angles: Angle): void;
    
    /**
     * Sets a player's third-person animation. Mainly used by {{Type|Weapon}}s to start the player's weapon attack and reload animations. 
     * @param playerAnim  Player animation, see {{Enum|PLAYER}}. 
     */
    public SetAnimation(playerAnim: PLAYER_ANIM): void;
    
    /**
     * Sets the time (relative to {{GlobalFunction|CurTime}}) of the current animation frame, which is used to determine {{ClassFunction|Entity|GetCycle}}. 
     * @param time  The current animation time. 
     * @example
     * 
     * function GM:PrePlayerDraw(ply)
     * 
     * 	ply:SetAnimTime(CurTime()+1)
     * 
     * end
     * 
     * // Sets each player's animation time to 1 second in the future, which causes their animations to freeze in place. 
     */
    public SetAnimTime(time: number): void;
    
    /**
     * **Deprecated:**
     * >You should be using {{ClassFunction|Entity|SetParent}} instead.
     * 
     * Parents the sprite to an attachment on another model.
     * 
     * Works only on env_sprite.
     * 
     * Despite existing on client, it doesn't actually do anything on client. 
     * @param ent  The entity to attach/parent to 
     * @param attachment  The attachment ID to parent to 
     */
    public SetAttachment(ent: Entity, attachment: number): void;
    
    /**
     * Toggles automatic frame advancing for animated sequences on an entity.
     * 
     * This has the same effect as setting the '''ENT.AutomaticFrameAdvance''' property. 
     * @param enable  Whether or not to set automatic frame advancing. 
     */
    protected SetAutomaticFrameAdvance(enable: boolean): void;
    
    /**
     * Sets the blood color this entity uses. 
     * @param bloodColor  An integer corresponding to {{Enum|BLOOD_COLOR}}. 
     */
    public SetBloodColor(bloodColor: BLOOD_COLOR): void;
    
    /**
     * Sets an entities' bodygroup. 
     * @param bodygroup  The id of the bodygroup you're setting. Starts from 0. 
     * @param value  The value you're setting the bodygroup to. Starts from 0. 
     */
    public SetBodygroup(bodygroup: number, value: number): void;
    
    /**
     * Sets the bodygroups from a string. A convenience function for {{ClassFunction|Entity|SetBodygroup}}. 
     * @param bodygroups  Body groups to set. Each single-digit number in the string represents a separate bodygroup. '''This make it impossible to set any bodygroup to a value higher than 9!''' For that you need to use {{ClassFunction|Entity|SetBodygroup}}. 
     * @example
     * 
     * Entity(1):SetBodyGroups( "021" )
     * 
     * // Example of the format 
     */
    public SetBodyGroups(bodygroups: string): void;
    
    /**
     * Sets the specified value on the bone controller with the given ID of this entity, it's used in HL1 to change the head rotation of NPCs, turret aiming and so on.
     * 
     * **Note:**
     * >This is the precursor of pose parameters, and only works for Half Life 1: Source models supporting it. 
     * @param boneControllerID  The ID of the bone controller to set the value to.
     * Goes from 0 to 3. 
     * @param value  The value to set on the specified bone controller. 
     */
    public SetBoneController(boneControllerID: number, value: number): void;
    
    /**
     * Sets the bone matrix of given bone to given matrix. See also {{ClassFunction|Entity|GetBoneMatrix}}.
     * 
     * Does nothing on server. 
     * @param boneid  The ID of the bone 
     * @param matrix  The matrix to set. 
     */
    public SetBoneMatrix(boneid: number, matrix: VMatrix): void;
    
    /**
     * Sets the bone position and angles. 
     * @param bone  The bone ID to manipulate 
     * @param pos  The position to set 
     * @param ang  The angles to set 
     */
    public SetBonePosition(bone: number, pos: Vector, ang: Angle): void;
    
    /**
     * Sets the collision bounds for the entity, which are used for triggers ( {{ClassFunction|Entity|SetTrigger}}, {{HookFunction|ENTITY|Touch}} ), determining if rendering is necessary clientside, and collision ( If {{ClassFunction|Entity|SetSolid}} set as [[Enums/SOLID|SOLID_BBOX]] ).
     * 
     * Input bounds are relative to {{ClassFunction|Entity|GetPos}}! 
     * See also {{ClassFunction|Entity|SetCollisionBoundsWS}}. 
     * @param mins  The minimum vector of the bounds. The vector must be smaller than second argument on all axises. 
     * @param maxs  The maximum vector of the bounds. The vector must be bigger than first argument on all axises. 
     */
    public SetCollisionBounds(mins: Vector, maxs: Vector): void;
    
    /**
     * Sets the collision bounds for the entity, which are used for triggers ( {{ClassFunction|Entity|SetTrigger}}, {{HookFunction|ENTITY|Touch}} ), determining if rendering is necessary clientside, and collision ( If {{ClassFunction|Entity|SetSolid}} set as [[Enums/SOLID|SOLID_BBOX]] ).
     * 
     * Input bounds are in world coordinates!
     * See also {{ClassFunction|Entity|SetCollisionBounds}}. 
     * @param vec1  The first vector of the bounds. 
     * @param vec2  The second vector of the bounds. 
     */
    public SetCollisionBoundsWS(vec1: Vector, vec2: Vector): void;
    
    /**
     * Sets the entity's collision group. 
     * @param group  Collision group of the entity, see {{Enum|COLLISION_GROUP}} 
     */
    public SetCollisionGroup(group: COLLISION_GROUP): void;
    
    /**
     * Sets the color of an entity. 
     * @param color [=Color(255, 0, 255, 255)] The color to set. Uses the {{Struct|Color}}. 
     * @example
     * 
     * local colBlack = Color( 0, 0, 0, 255 ) // Creates a black color
     * for key, ply in pairs(player.GetAll()) do // Loop through all players on the server
     * 	ply:SetColor(colBlack) // Sets the players color to colBlack
     * end
     * 
     * // Loop through all players, make them black@example
     * 
     * local ent = ents.Create("prop_physics")
     * ent:SetPos(Vector(0,0,0))
     * ent:SetModel("models/props_junk/wood_crate001a.mdl")
     * ent:Spawn()
     * 
     * ent:SetColor( Color( 0, 255, 0, 230 ) ) 
     * ent:SetRenderMode( RENDERMODE_TRANSALPHA ) // You need to set the render mode on some entities in order for the color to change
     * 
     * // Creates a wooden crate at 0,0,0 and turns it a transparent green 
     */
    public SetColor(color?: Color): void;
    
    /**
     * Sets the creator of the SENT. 
     * @param ply  The creator 
     */
    public SetCreator(ply: Player): void;
    
    /**
     * Marks the entity to call {{HookFunction|GM|ShouldCollide}}. 
     * @param enable  Enable or disable the custom collision check 
     */
    public SetCustomCollisionCheck(enable: boolean): void;
    
    /**
     * Sets the progress of the current animation to a specific value between 0 and 1.
     * 
     * **Bug [#3038](https://github.com/Facepunch/garrysmod-issues/issues/3038):**
     * >This does not work with viewmodels. 
     * @param value  The desired cycle value 
     * @example
     * 
     * ent:SetCycle( .5 )
     * 
     * // Set the entity to be half way through its current sequence 
     */
    public SetCycle(value: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * This is called internally by the {{ClassFunction|Entity|NetworkVar}} system, you can use this in cases where using NetworkVar is not possible.
     * 
     * Sets the specified angle on the entity's datatable. 
     * @param key  Goes from 0 to 31. 
     * @param ang  The angle to write on the entity's datatable. 
     */
    public SetDTAngle(key: number, ang: Angle): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * This is called internally by the {{ClassFunction|Entity|NetworkVar}} system, you can use this in cases where using NetworkVar is not possible.
     * 
     * Sets the specified bool on the entity's datatable. 
     * @param key  Goes from 0 to 31. 
     * @param bool  The boolean to write on the entity's metatable. 
     */
    public SetDTBool(key: number, bool: boolean): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * This is called internally by the {{ClassFunction|Entity|NetworkVar}} system, you can use this in cases where using NetworkVar is not possible.
     * 
     * Sets the specified entity on this entity's datatable. 
     * @param key  Goes from 0 to 31. 
     * @param ent  The entity to write on this entity's datatable. 
     */
    public SetDTEntity(key: number, ent: Entity): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * This is called internally by the {{ClassFunction|Entity|NetworkVar}} system, you can use this in cases where using NetworkVar is not possible.
     * 
     * Sets the specified float on the entity's datatable. 
     * @param key  Goes from 0 to 31. 
     * @param float  The float to write on the entity's datatable. 
     */
    public SetDTFloat(key: number, float: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * This is called internally by the {{ClassFunction|Entity|NetworkVar}} system, you can use this in cases where using NetworkVar is not possible.
     * 
     * Sets the specified integer on the entity's datatable. 
     * @param key  Goes from 0 to 31. 
     * @param integer  The integer to write on the entity's datatable. This will be cast to a 32-bit signed integer internally. 
     */
    public SetDTInt(key: number, integer: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * This is called internally by the {{ClassFunction|Entity|NetworkVar}} system, you can use this in cases where using NetworkVar is not possible.
     * 
     * Sets the specified string on the entity's datatable.
     * 
     * **Note:**
     * >The length of these strings are capped at 512 characters. 
     * @param key  Goes from 0 to 3. 
     * @param str  The string to write on the entity's datatable, can't be more than 512 characters per string. 
     */
    public SetDTString(key: number, str: string): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * This is called internally by the {{ClassFunction|Entity|NetworkVar}} system, you can use this in cases where using NetworkVar is not possible.
     * 
     * Sets the specified vector on the entity's datatable. 
     * @param key  Goes from 0 to 31. 
     * @param vec  The vector to write on the entity's datatable. 
     */
    public SetDTVector(key: number, vec: Vector): void;
    
    /**
     * Sets the elasticity of this entity, used by some flying entities such as the Helicopter NPC to determine how much it should bounce around when colliding. 
     * @param elasticity  The elasticity to set. 
     */
    public SetElasticity(elasticity: number): void;
    
    /**
     * Allows you to set the Start or End entity attachment for the rope. 
     * @param name  The name of the variable to modify.
     * Accepted names are StartEntity and EndEntity. 
     * @param entity  The entity to apply to the specific attachment. 
     * @example
     * 
     * local rope = ents.Create( "keyframe_rope" )
     * 
     * // Attachment point 1
     * rope:SetEntity( "StartEntity", 	Entity(1) )
     * // Attachment point 2
     * rope:SetEntity( "EndEntity", 	Entity(2) )
     * 
     * // As seen in the constraints module. 
     */
    public SetEntity(name: string, entity: Entity): void;
    
    /**
     * Sets the position an entity's eyes look toward. 
     * @param pos  The world position the entity is looking toward. 
     * @example
     * 
     * for p, ply in pairs(player.GetAll()) do
     *     if(ply:EyePos():Distance(self:EyePos()) <= 60) then
     *         self:SetEyeTarget(ply:EyePos())
     *         break
     *     end
     * end
     * 
     * // Makes an NPC (self) look into a nearby player's eyes.@example
     * 
     * local lookat = Vector( 0, 0, 0 )
     * 
     * local attachment = ent:GetAttachment( ent:LookupAttachment( "eyes" ) )
     * local LocalPos, LocalAng = WorldToLocal( lookat, Angle( 0, 0, 0 ), attachment.Pos, attachment.Ang )
     * ent:SetEyeTarget( LocalPos )
     * 
     * // Makes an entity look at a vector the way the eyeposer does it 
     */
    public SetEyeTarget(pos: Vector): void;
    
    /**
     * Sets the flex scale of the entity.
     * 
     * **Bug [#1779](https://github.com/Facepunch/garrysmod-issues/issues/1779):**
     * >This does not work on {{GlobalFunction|ClientsideModel}}s or {{GlobalFunction|ClientsideRagdoll}}s. 
     * @param scale  The new flex scale to set to 
     */
    public SetFlexScale(scale: number): void;
    
    /**
     * Sets the flex weight.
     * 
     * **Bug [#1779](https://github.com/Facepunch/garrysmod-issues/issues/1779):**
     * >This does not work on {{GlobalFunction|ClientsideModel}}s or {{GlobalFunction|ClientsideRagdoll}}s. 
     * @param flex  The ID of the flex to modify weight of 
     * @param weight  The new weight to set 
     */
    public SetFlexWeight(flex: number, weight: number): void;
    
    /**
     * Sets how much friction an entity has when sliding against a surface. Entities default to 1 (100%) and can be higher or even negative.
     * 
     * **Note:**
     * >Works only for MOVETYPE_STEP entities.
     * 
     * **Bug [#1395](https://github.com/Facepunch/garrysmod-issues/issues/1395):**
     * >This has no effect on players. 
     * @param friction  Friction multiplier 
     */
    public SetFriction(friction: number): void;
    
    /**
     * Sets the gravity multiplier of the entity. 
     * @param gravityMultiplier  Value which specifies the gravity multiplier. 
     */
    public SetGravity(gravityMultiplier: number): void;
    
    /**
     * Sets the ground the entity is standing on. 
     * @param ground  The ground entity. 
     * @example
     * 
     * // shared.lua tick
     * function GM:Tick()
     * 	
     * 	local trace = {}
     * 	local world = Entity( 0 )
     * 	
     * 	for p, ply in pairs( player.GetAll() ) do
     * 	
     * 		trace = util.TraceLine( {
     * 			start = ply:GetPos() + Vector( 0, 0, 72),
     * 			endpos = ply:GetPos() + Vector( 0, 0, -3 ),
     * 			mask = MASK_WATER,
     * 			filter = function( ent ) return true end
     * 		} )
     * 		
     * 		if( trace.Hit ) then
     * 			ply:SetGravity( 0.0001 )
     * 			ply:SetGroundEntity( world )
     * 		else
     * 			ply:SetGravity( 1.0 )
     * 		end
     * 		
     * 	end
     * 	
     * end
     * 
     * // Gives all players the ability to (sort of) walk on water. 
     */
    public SetGroundEntity(ground: Entity): void;
    
    /**
     * Sets the health of the entity.
     * 
     * **Note:**
     * >You may want to take {{ClassFunction|Entity|GetMaxHealth}} into account when calculating what to set health to, in case a gamemode has a different max health than 100. 
     * @param newHealth  New health value. 
     * @example
     * 
     * Entity( 1 ):SetHealth( Entity( 1 ):GetMaxHealth() )
     * 
     * // Sets the entity's health to their maximum health.@example
     * 
     * Entity( 1 ):SetHealth( Entity( 1 ):Health() - 50 )
     * 
     * // Deducts 50 points of health from the entity. 
     */
    public SetHealth(newHealth: number): void;
    
    /**
     * Sets the current Hitbox Set for the entity. 
     * @param id  The new hitbox set to set. Can be a name as a {{Type|string}}, or the ID as a {{Type|number}}. 
     */
    public SetHitboxSet(id: number): void;
    
    /**
     * Enables or disable the inverse kinematic usage of this entity. 
     * @param useIK [=false] The state of the IK. 
     */
    public SetIK(useIK?: boolean): void;
    
    /**
     * Sets key value for the entity. 
     * @param key  The key 
     * @param value  The value 
     */
    public SetKeyValue(key: string, value: string): void;
    
    /**
     * This allows the entity to be lag compensated during {{ClassFunction|Player|LagCompensation}}.
     * 
     * **Note:**
     * >Players are lag compensated by default and there's no need to call this function for them.
     * 
     * It's best to not enable lag compensation on parented entities, as the system does not handle it that well ( they will be moved back but then the entity will lag behind ).
     * Parented entities move back with the parent if it's lag compensated, so if you are making some kind of armor piece you shouldn't do anything.
     * 
     * As a side note for parented entities, if your entity can be shot at, keep in mind that its collision bounds need to be bigger than the bone's hitbox the entity is parented to, or hull/line traces ( such as the crowbar attack or bullets ) might not hit at all. 
     * @param enable  Whether the entity should be lag compensated or not. 
     */
    public SetLagCompensated(enable: boolean): void;
    
    /**
     * {{Stub}}
     * 
     * **Note:**
     * >This function only works on [[BaseAnimatingOverlay]] entites! 
     * @param layerID  The Layer ID 
     * @param blendIn 
     */
    public SetLayerBlendIn(layerID: number, blendIn: number): void;
    
    /**
     * {{Stub}}
     * 
     * **Note:**
     * >This function only works on [[BaseAnimatingOverlay]] entites! 
     * @param layerID  The Layer ID 
     * @param blendOut 
     */
    public SetLayerBlendOut(layerID: number, blendOut: number): void;
    
    /**
     * Sets the animation cycle/frame of given layer.
     * 
     * **Note:**
     * >This function only works on [[BaseAnimatingOverlay]] entites! 
     * @param layerID  The Layer ID 
     * @param cycle  The new animation cycle/frame for given layer. 
     */
    public SetLayerCycle(layerID: number, cycle: number): void;
    
    /**
     * Sets the duration of given layer. This internally overrides the {{ClassFunction|Entity|SetLayerPlaybackRate}}.
     * 
     * **Note:**
     * >This function only works on [[BaseAnimatingOverlay]] entites! 
     * @param layerID  The Layer ID 
     * @param duration  The new duration of the layer in seconds. 
     */
    public SetLayerDuration(layerID: number, duration: number): void;
    
    /**
     * Sets whether the layer should loop or not.
     * 
     * **Note:**
     * >This function only works on [[BaseAnimatingOverlay]] entites! 
     * @param layerID  The Layer ID 
     * @param loop  Whether the layer should loop or not. 
     */
    public SetLayerLooping(layerID: number, loop: boolean): void;
    
    /**
     * Sets the layer player back rate. See also {{ClassFunction|Entity|SetLayerDuration}}.
     * 
     * **Note:**
     * >This function only works on [[BaseAnimatingOverlay]] entites! 
     * @param layerID  The Layer ID 
     * @param rate  The new playback rate. 
     */
    public SetLayerPlaybackRate(layerID: number, rate: number): void;
    
    /**
     * Sets the priority of given layer.
     * 
     * **Note:**
     * >This function only works on [[BaseAnimatingOverlay]] entites! 
     * @param layerID  The Layer ID 
     * @param priority  The new priority of the layer. 
     */
    public SetLayerPriority(layerID: number, priority: number): void;
    
    /**
     * Sets the layer weight. This influences how strongly the animation should be overriding the normal animations of the entity.
     * 
     * **Note:**
     * >This function only works on [[BaseAnimatingOverlay]] entites! 
     * @param layerID  The Layer ID 
     * @param weight  The new layer weight. 
     */
    public SetLayerWeight(layerID: number, weight: number): void;
    
    /**
     * This forces an entity to use the bone transformation behaviour from versions prior to '''2014-07-08'''.
     * 
     * This behaviour affects {{ClassFunction|Entity|EnableMatrix}} and {{ClassFunction|Entity|SetModelScale}} and is incorrect, therefore this function be used exclusively as a quick fix for old scripts that rely on it. 
     * @param enabled  Whether the entity should use the old bone transformation behaviour or not. 
     */
    public SetLegacyTransform(enabled: boolean): void;
    
    /**
     * Sets angles relative to angles of {{ClassFunction|Entity|GetParent}} 
     * @param ang  The local angle 
     */
    public SetLocalAngles(ang: Angle): void;
    
    /**
     * Sets the entity's angular velocity (rotation speed). 
     * @param angVel  The angular velocity to set. 
     */
    public SetLocalAngularVelocity(angVel: Angle): void;
    
    /**
     * Sets local position relative to the parented position. This is for use with {{ClassFunction|Entity|SetParent}} to offset position. 
     * @param pos  The local position 
     */
    public SetLocalPos(pos: Vector): void;
    
    /**
     * Sets the entity's local velocity which is their velocity due to movement in the world from forces such as gravity. Does not include velocity from entity-on-entity collision or other world movement.
     * 
     * {{Warning|Same as {{ClassFunction|Entity|SetAbsVelocity}}, but clamps the given velocity, and is not recommended to be used because of that.}} 
     * @param velocity  The new velocity to set. 
     */
    public SetLocalVelocity(velocity: Vector): void;
    
    /**
     * Sets the Level Of Detail model to use with this entity. This may not work for all models if the model doesn't include any LOD sub models.
     * 
     * This function works exactly like the clientside r_lod convar and takes priority over it. 
     * @param lod [=-1] The Level Of Detail model ID to use. -1 leaves the engine to automatically set the Level of Detail.
     * 
     * The Level Of Detail may range from 0 to 8, with 0 being the highest quality and 8 the lowest. 
     */
    public SetLOD(lod?: number): void;
    
    /**
     * Sets the rendering material override of the entity.
     * 
     * To set a Lua material created with {{GlobalFunction|CreateMaterial}}, just prepend a "!" to the material name.
     * 
     * **Note:**
     * >If you wish to override a single material on the model, use {{ClassFunction|Entity|SetSubMaterial}} instead.
     * 
     * **Note:**
     * >Please note that to apply materials to models, that material '''must''' have VertexLitGeneric shader. For that reason you cannot apply map textures onto models, map textures use a different material shader - LightmappedGeneric.
     * 
     * **Bug [#3362](https://github.com/Facepunch/garrysmod-issues/issues/3362):**
     * >The server's value takes priority on the client. 
     * @param materialName  New material name. Use an empty string (<kbd>""</kbd>) to reset to the default materials. 
     * @param forceMaterial [=false] Use it if you wish to apply material other than VertexLitGeneric (such as tools/toolswhite). 
     */
    public SetMaterial(materialName: string, forceMaterial?: boolean): void;
    
    /**
     * Sets the maximum health for entity. Note, that you can still set entity's health above this amount with {{ClassFunction|Entity|SetHealth}}. 
     * @param maxhealth  What the max health should be 
     */
    public SetMaxHealth(maxhealth: number): void;
    
    /**
     * Sets the model of the entity. 
     * @param modelName  New model value. 
     */
    public SetModel(modelName: string): void;
    
    /**
     * Alter the model name returned by {{ClassFunction|Entity|GetModel}}. Does not affect the entity's actual model. 
     * @param modelname  The new model name. 
     */
    public SetModelName(modelname: string): void;
    
    /**
     * Scales the model of the entity, if the entity is a {{Type|Player}} or an {{Type|NPC}} the hitboxes will be scaled as well.
     * 
     * For some entities, calling {{ClassFunction|Entity|Activate}} after this will scale the collision bounds and {{Type|PhysObj}} as well; be wary as there's no optimization being done internally and highly complex collision models might crash the server.
     * 
     * This is the same system used in TF2 for the Mann Vs Machine robots.
     * 
     * To resize the entity along any axis, use {{ClassFunction|Entity|EnableMatrix}} instead.
     * 
     * If your old scales are wrong due to a recent update, use {{ClassFunction|Entity|SetLegacyTransform}} as a quick fix.
     * 
     * **Bug [#2193](https://github.com/Facepunch/garrysmod-issues/issues/2193):**
     * >The hull does not scale properly with this function.
     * 
     * **Bug [#3502](https://github.com/Facepunch/garrysmod-issues/issues/3502):**
     * >This does not scale procedural bones. 
     * @param scale  A float to scale the model by. 0 will not draw anything. < 0 will draw the model inverted. 
     * @param deltaTime [=0] Transition time of the scale change, set to 0 to modify the scale right away. 
     * @example
     * 
     * ent:SetModelScale( ent:GetModelScale() * 1.25, 1 )
     * 
     * // From the "Biggify" option of right clicking an npc 
     */
    public SetModelScale(scale: number, deltaTime?: number): void;
    
    /**
     * Sets the move collide type of the entity. The move collide is the way a physics object reacts to hitting an object - will it bounce, slide? 
     * @param moveCollideType  The move collide type, see {{Enum|MOVECOLLIDE}} 
     */
    public SetMoveCollide(moveCollideType: MOVECOLLIDE): void;
    
    /**
     * Sets the Movement Parent of an entity to another entity.
     * 
     * Similar to {{ClassFunction|Entity|SetParent}}, except the object's coordinates are not translated automatically before parenting. 
     * @param Parent  The entity to change this entity's Movement Parent to. 
     * @example
     * 
     * local hat = ents.Create("prop_physics")
     * //Position and angles are relative to our future parent.
     * hat:SetPos(Vector(0,0,10))
     * hat:SetAngles(Angle(0,90,0))
     * 
     * hat:SetMoveParent(Entity(1))
     * 
     * hat:Spawn()
     * 
     * // Sets the Movement Entity of a new entity to Player 1. 
     */
    public SetMoveParent(Parent: Entity): void;
    
    /**
     * Sets the entity's move type. This should be called before initializing the physics object on the entity, unless it will override SetMoveType such as {{ClassFunction|Entity|PhysicsInitBox}}.
     * 
     * Despite existing on client, it doesn't actually do anything on client. 
     * @param movetype  The new movetype, see {{Enum|MOVETYPE}} 
     */
    public SetMoveType(movetype: MOVETYPE): void;
    
    /**
     * Sets the mapping name of the entity. 
     * @param mappingName  The name to set for the entity. 
     */
    public SetName(mappingName: string): void;
    
    /**
     * Alters networked entity angles. 
     * @param angle 
     */
    public SetNetworkAngles(angle: Angle): void;
    
    /**
     * **Deprecated:**
     * >You should use {{ClassFunction|Entity|SetNWAngle}} instead.
     * 
     * Sets a networked angle value at specified index on the entity.
     * 
     * The value then can be accessed with {{ClassFunction|Entity|GetNetworkedAngle}} both from client and server.
     * 
     * **Note:**
     * >Running this function clientside will only set it clientside for the client it is called on. 
     * @param key  The key to associate the value with 
     * @param value [=Angle( 0, 0, 0 )] The value to set 
     */
    public SetNetworkedAngle(key: string, value?: Angle): void;
    
    /**
     * **Deprecated:**
     * >You should use {{ClassFunction|Entity|SetNWBool}} instead.
     * 
     * Sets a networked boolean value at specified index on the entity.
     * 
     * The value then can be accessed with {{ClassFunction|Entity|GetNetworkedBool}} both from client and server.
     * 
     * **Note:**
     * >Running this function clientside will only set it clientside for the client it is called on. 
     * @param key  The key to associate the value with 
     * @param value [=false] The value to set 
     */
    public SetNetworkedBool(key: string, value?: boolean): void;
    
    /**
     * **Deprecated:**
     * >You should use {{ClassFunction|Entity|SetNWEntity}} instead.
     * 
     * Sets a networked entity value at specified index on the entity.
     * 
     * The value then can be accessed with {{ClassFunction|Entity|GetNetworkedEntity}} both from client and server.
     * 
     * **Note:**
     * >Running this function clientside will only set it clientside for the client it is called on. 
     * @param key  The key to associate the value with 
     * @param value [=NULL] The value to set 
     */
    public SetNetworkedEntity(key: string, value?: Entity): void;
    
    /**
     * **Deprecated:**
     * >You should use {{ClassFunction|Entity|SetNWFloat}} instead.
     * 
     * Sets a networked float value at specified index on the entity.
     * 
     * The value then can be accessed with {{ClassFunction|Entity|GetNetworkedFloat}} both from client and server.
     * 
     * Seems to be the same as {{ClassFunction|Entity|GetNetworkedInt}}.
     * 
     * **Note:**
     * >Running this function clientside will only set it clientside for the client it is called on. 
     * @param key  The key to associate the value with 
     * @param value [=0] The value to set 
     */
    public SetNetworkedFloat(key: string, value?: number): void;
    
    /**
     * **Deprecated:**
     * >You should use {{ClassFunction|Entity|SetNWInt}} instead.
     * 
     * Sets a networked integer value at specified index on the entity.
     * 
     * The value then can be accessed with {{ClassFunction|Entity|GetNetworkedInt}} both from client and server.
     * 
     * **Note:**
     * >Running this function clientside will only set it clientside for the client it is called on. 
     * @param key  The key to associate the value with 
     * @param value [=0] The value to set 
     */
    public SetNetworkedInt(key: string, value?: number): void;
    
    /**
     * Sets a networked number at the specified index on the entity. 
     * @param index  The index that the value is stored in. 
     * @param number  The value to network. 
     * @example
     * 
     * for k, v in pairs( player.GetAll() ) do
     *     v:SetNetworkedInt( 'score', 3 )
     * end
     * 
     * // This will set the networked number 'score' on all clients to 3. 
     */
    public SetNetworkedNumber(index: any, number: number): void;
    
    /**
     * **Deprecated:**
     * >You should use {{ClassFunction|Entity|SetNWString}} instead.
     * 
     * Sets a networked string value at specified index on the entity.
     * 
     * The value then can be accessed with {{ClassFunction|Entity|GetNetworkedString}} both from client and server.
     * 
     * **Note:**
     * >Running this function clientside will only set it clientside for the client it is called on. 
     * @param key  The key to associate the value with 
     * @param value [=""] The value to set 
     */
    public SetNetworkedString(key: string, value?: string): void;
    
    /**
     * **Deprecated:**
     * >You should be using {{ClassFunction|Entity|SetNWVarProxy}} instead.
     * 
     * Sets callback function to be called when given NWVar changes.
     * **Note:**
     * >Currently this function only works for the NW2Var system (accessed by adding a 2 in between Networked and Var for most NetworkedVar functions), which will replace the original one at some point in the future 
     * @param name  The name of the NWVar to add callback for. 
     * @param callback  The function to be called when the NWVar changes. 
     */
    public SetNetworkedVarProxy(name: string, callback: Function): void;
    
    /**
     * **Deprecated:**
     * >You should use {{ClassFunction|Entity|SetNWVector}} instead.
     * 
     * Sets a networked vector value at specified index on the entity.
     * 
     * The value then can be accessed with {{ClassFunction|Entity|GetNetworkedVector}} both from client and server.
     * 
     * **Note:**
     * >Running this function clientside will only set it clientside for the client it is called on. 
     * @param key  The key to associate the value with 
     * @param value [=Vector( 0, 0, 0 )] The value to set 
     */
    public SetNetworkedVector(key: string, value?: Vector): void;
    
    /**
     * Virtually changes entity position for clients. Does the same thing as {{ClassFunction|Entity|SetPos}} when used serverside. 
     * @param origin  The position to make clients think this entity is at. 
     */
    public SetNetworkOrigin(origin: Vector): void;
    
    /**
     * Sets the next time the clientside {{HookFunction|ENTITY|Think}} is called. 
     * @param nextthink  The next time, relative to {{GlobalFunction|CurTime}}, to execute the {{HookFunction|ENTITY|Think}} clientside. 
     */
    public SetNextClientThink(nextthink: number): void;
    
    /**
     * Sets if the entity's model should render at all.
     * 
     * If set on the server, this entity will no longer network to clients, and for all intents and purposes cease to exist clientside. 
     * @param shouldNotDraw  true disables drawing 
     */
    public SetNoDraw(shouldNotDraw: boolean): void;
    
    /**
     * Sets whether the entity is solid or not. 
     * @param IsNotSolid  True will make the entity not solid, false will make it solid. 
     */
    public SetNotSolid(IsNotSolid: boolean): void;
    
    /**
     * Sets a networked angle value on the entity.
     * 
     * The value can then be accessed with {{ClassFunction|Entity|GetNWAngle}} both from client and server.
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on. 
     * @param key  The key to associate the value with 
     * @param value  The value to set 
     * @example
     * 
     * for k, v in pairs( player.GetAll() ) do
     *     v:SetNWAngle( 'direction', Angle( -90, 0, 0 ) )
     * end
     * 
     * // This will set the networked angle 'direction' on all clients that is pointing straight up. 
     */
    public SetNWAngle(key: string, value: Angle): void;
    
    /**
     * Sets a networked boolean value on the entity.
     * 
     * The value can then be accessed with {{ClassFunction|Entity|GetNWBool}} both from client and server.
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on. 
     * @param key  The key to associate the value with 
     * @param value  The value to set 
     * @example
     * 
     * player:SetNWBool( "VIP", true )
     * print( player:GetNWBool( "VIP" ) )
     * 
     * // Sets a networked boolean with a key of "VIP" and a value of true on a player. 
     */
    public SetNWBool(key: string, value: boolean): void;
    
    /**
     * Sets a networked entity value on the entity.
     * 
     * The value can then be accessed with {{ClassFunction|Entity|GetNWEntity}} both from client and server.
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on. 
     * @param key  The key to associate the value with 
     * @param value  The value to set 
     * @example
     * 
     * for k, v in pairs( player.GetAll() ) do
     *     v:SetNWEntity( "owner", v )
     * end
     * 
     * // This will set the networked entity 'owner' on all clients to themselves. 
     */
    public SetNWEntity(key: string, value: Entity): void;
    
    /**
     * Sets a networked float (number) value on the entity.
     * 
     * The value can then be accessed with {{ClassFunction|Entity|GetNWFloat}} both from client and server.
     * 
     * Unlike {{ClassFunction|Entity|SetNWInt}}, floats don't have to be whole numbers.
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on. 
     * @param key  The key to associate the value with 
     * @param value  The value to set 
     * @example
     * 
     * for k,v in pairs( player.GetAll() ) do
     *     v:SetNWFloat( 'test', 0.5 )
     * end
     * 
     * // This will set the networked float 'test' on all clients to 0.5. 
     */
    public SetNWFloat(key: string, value: number): void;
    
    /**
     * Sets a networked integer (whole number) value on the entity.
     * 
     * The value can then be accessed with {{ClassFunction|Entity|GetNWInt}} both from client and server.
     * 
     * See {{ClassFunction|Entity|SetNWFloat}} for numbers that aren't integers.
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on.
     * 
     * **Bug [#3374](https://github.com/Facepunch/garrysmod-issues/issues/3374):**
     * >This function will not round decimal values as it actually networks a float internally. 
     * @param key  The key to associate the value with 
     * @param value  The value to set 
     * @example
     * 
     * for k, v in ipairs( player.GetAll() ) do
     *     v:SetNWInt( 'money', 100 )
     * end
     * 
     * // This will set the networked integer 'money' on all clients to 100. 
     */
    public SetNWInt(key: string, value: number): void;
    
    /**
     * Sets a networked string value on the entity.
     * 
     * The value can then be accessed with {{ClassFunction|Entity|GetNWString}} both from client and server.
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on. 
     * @param key  The key to associate the value with 
     * @param value  The value to set, up to 199 characters. 
     * @example
     * 
     * player:SetNWString( "Nickname", "John" )
     * print( player:GetNWString( "Nickname" ) )
     * 
     * // Sets a networked string with a key of "Nickname" and a value of 
     * "John" on a player. 
     */
    public SetNWString(key: string, value: string): void;
    
    /**
     * Sets a function to be called when the NWVar changes.
     * **Note:**
     * >Currently this function only works for the NW2Var system (accessed by adding a 2 in between NW and Var for most NWVar functions), which will replace the original one at some point in the future 
     * @param key  The key of the NWVar to add callback for. 
     * @param callback  The function to be called when the NWVar changes. It has 3 arguments:
     * * {{FuncArg|Entity|ent|The entity}}
     * * {{FuncArg|string|name|Name of the NWVar that has changed}}
     * * {{FuncArg|any|oldval|The old value}}
     * * {{FuncArg|any|newval|The new value}} 
     * @example
     * 
     * Entity( 1 ):SetNWVarProxy( "Key", print )
     * Entity( 1 ):SetNWString( "Key", "Value" )
     * Entity( 1 ):SetNWString( "Key", "Table" )
     * 
     * // Prints all changes to a NWVar called "Key" of Player 1. 
     */
    public SetNWVarProxy(key: any, callback: Function): void;
    
    /**
     * Sets a networked vector value on the entity.
     * 
     * The value can then be accessed with {{ClassFunction|Entity|GetNWVector}} both from client and server.
     * 
     * **Note:**
     * >Running this function clientside will only set it for the client it is called on. 
     * @param key  The key to associate the value with 
     * @param value  The value to set 
     * @example
     * 
     * for k, v in pairs( player.GetAll() ) do
     *     v:SetNWVector( 'direction', Vector( 0, 0, 1 ) )
     * end
     * 
     * // This will set the networked angle 'direction' on all clients to straight up. 
     */
    public SetNWVector(key: string, value: Vector): void;
    
    /**
     * Sets the owner of this entity, disabling all physics interaction with it.
     * 
     * **Note:**
     * >This function is generally used to disable physics interactions on projectiles being fired by their owner, but can also be used for normal ownership in case physics interactions are not involved at all. The Gravity gun will be able to pick up the entity even if the owner can't collide with it 
     * @param owner [=NULL] The entity to be set as owner. 
     * @example
     * 
     * function SWEP:PrimaryAttack()
     * 	self:SetNextPrimaryFire( CurTime() + 0.1 )
     * 	
     * 	if (!SERVER) then return end
     * 
     * 	local Forward = self.Owner:EyeAngles():Forward()
     * 
     * 	local ent = ents.Create( "hunter_flechette" )
     * 	
     * 	if ( IsValid( ent ) ) then
     * 
     * 		ent:SetPos( self.Owner:GetShootPos() + Forward * 32 )
     * 		ent:SetAngles( self.Owner:EyeAngles() )
     * 		ent:Spawn()
     * 		ent:SetVelocity( Forward * 2000 )
     * 		ent:SetOwner( self.Owner )
     * 	end
     * end
     * 
     * // Taken from Garry's Flechette gun , shoots a hunter's flechette and sets the owner of the flechette to the player using the weapon. 
     */
    public SetOwner(owner?: Entity): void;
    
    /**
     * Sets the parent of this entity, making it move with its parent.
     * 
     * **Bug [#3466](https://github.com/Facepunch/garrysmod-issues/issues/3466):**
     * >Parented entities do not interact with physics and have glitchy player collision. 
     * @param parent [=NULL] The entity to parent to. Setting this to nil will clear the parent. 
     * @param attachmentId [=-1] The attachment id to use when parenting, defaults to -1 or whatever the parent had set previously.
     * 
     * **Note:**
     * >You must call {{ClassFunction|Entity|SetMoveType}}( MOVETYPE_NONE ) on the child for this argument to have any effect! 
     */
    public SetParent(parent?: Entity, attachmentId?: number): void;
    
    /**
     * Sets the parent of an entity to another entity with the given physics bone number. Similar to {{ClassFunction|Entity|SetParent}}, except it is parented to a physbone. This function is useful mainly for ragdolls.
     * 
     * **Note:**
     * >Despite this function being available server side, it doesn't actually do anything server side. 
     * @param bone  Physics bone number to attach to. Use 0 for objects with only one physics bone. (See {{ClassFunction|Entity|GetPhysicsObjectNum}}) 
     */
    public SetParentPhysNum(bone: number): void;
    
    /**
     * Sets whether or not the given entity is persistent. A persistent entity will be saved on server shutdown and loaded back when the server starts up. Additionally, by default persistent entities cannot be grabbed with the physgun and tools cannot be used on them.
     * 
     * In sandbox, this can be set on an entity by opening the context menu, right clicking the entity, and choosing "Make Persistent".
     * 
     * **Note:**
     * >Persistence can only be enabled with the sbox_persist convar, which works as an identifier for the current set of persistent entities. An empty identifier (which is the default value) disables this feature.
     * 
     * **Note:**
     * >This feature only works in Sandbox and Sandbox-derived gamemodes. 
     * @param persist  Whether or not the entity should be persistent. 
     */
    public SetPersistent(persist: boolean): void;
    
    /**
     * When called on a constraint entity, sets the two physics objects to be constrained.
     * 
     * Usage is not recommended as the Constraint library provides easier ways to deal with constraints. 
     * @param Phys1  The first physics object to be constrained. 
     * @param Phys2  The second physics object to be constrained. 
     * @example
     * 
     * Constraint = ents.Create("phys_lengthconstraint")
     * 	Constraint:SetPos( WPos1 )
     * 	Constraint:SetKeyValue( "attachpoint", tostring(WPos2) )
     * 	Constraint:SetKeyValue( "minlength", "0.0" )
     * 	Constraint:SetKeyValue( "length", length + addlength )
     * 	if ( forcelimit ) then Constraint:SetKeyValue( "forcelimit", forcelimit ) end
     * 	if ( rigid ) then Constraint:SetKeyValue( "spawnflags", 2 ) end
     * 	Constraint:SetPhysConstraintObjects( Phys1, Phys2 )
     * Constraint:Spawn()
     * Constraint:Activate()
     * 
     * // From constraint.lua 
     */
    public SetPhysConstraintObjects(Phys1: PhysObj, Phys2: PhysObj): void;
    
    /**
     * Sets the player who gets credit if this entity kills something with physics damage within the time limit.
     * 
     * **Note:**
     * >This can only be called on props. 
     * @param ent  Player who gets the kills. Setting this to a non-player entity will not work. 
     * @param timeLimit [=5] Time in seconds until the entity forgets its physics attacker and prevents it from getting the kill credit. 
     */
    public SetPhysicsAttacker(ent: Player, timeLimit?: number): void;
    
    /**
     * Allows you to set how fast an entity's animation will play, with 1.0 being the default speed. 
     * @param fSpeed  How fast the animation will play. 
     * @example
     * 
     * Entity(1):GetViewModel():SetPlaybackRate(0.5)
     * 
     * // Makes Entity(1)'s viewmodel play animations 50% slower. 
     */
    public SetPlaybackRate(fSpeed: number): void;
    
    /**
     * Moves the entity to the specified position.
     * 
     * **Note:**
     * >If the new position doesn't take effect right away, you can use {{ClassFunction|Entity|SetupBones}} to force it to do so. This issue is especially common when trying to render the same entity twice or more in a single frame at different positions.
     * 
     * {{Warning|Entities with {{ClassFunction|Entity|GetSolid}} of SOLID_BBOX will have their angles reset!}}
     * 
     * **Bug [#2447](https://github.com/Facepunch/garrysmod-issues/issues/2447):**
     * >This will fail inside of predicted functions called during player movement processing. This includes {{HookFunction|WEAPON|PrimaryAttack}} and {{HookFunction|WEAPON|Think}}. 
     * @param position  The position to move the entity to. 
     * @example
     * 
     * Entity(1):SetPos( Vector(0, 0, 0) )
     * 
     * // Sets the player's position to (0, 0, 0) 
     */
    public SetPos(position: Vector): void;
    
    /**
     * Sets the specified pose parameter to the specified value.
     * 
     * You should call {{ClassFunction|Entity|InvalidateBoneCache}} after calling this function.
     * 
     * **Note:**
     * >Avoid calling this in draw hooks, especially when animating things, as it might cause visual artifacts. 
     * @param poseName  Name of the pose parameter. 
     * @param poseValue  The value to set the pose to. 
     * @example
     * 
     * local function CopyPoseParams(pEntityFrom, pEntityTo)
     * 	if (SERVER) then
     * 		for i = 0, pEntityFrom:GetNumPoseParameters() - 1 do
     * 			local sPose = pEntityFrom:GetPoseParameterName(i)
     * 			pEntityTo:SetPoseParameter(sPose, pEntityFrom:GetPoseParameter(sPose))
     * 		end
     * 	else
     * 		for i = 0, pEntityFrom:GetNumPoseParameters() - 1 do
     * 			local flMin, flMax = pEntityFrom:GetPoseParameterRange(i)
     * 			local sPose = pEntityFrom:GetPoseParameterName(i)
     * 			pEntityTo:SetPoseParameter(sPose, math.Remap(pEntityFrom:GetPoseParameter(sPose), 0, 1, flMin, flMax))
     * 		end
     * 	end
     * end
     * 
     * // Copies pose parameters from one entity to another. Since {{LibraryFunction|Entity|GetPoseParameter}} returns pose parameter values 0-1 on the client, they have to be remapped to the range returned by {{LibraryFunction|Entity|GetPoseParameterRange}} before being set on the target entity. 
     */
    public SetPoseParameter(poseName: string, poseValue: number): void;
    
    /**
     * Sets whether an entity should be predictable or not.
     * When an entity is set as predictable, its DT vars can be changed during predicted hooks. This is useful for entities which can be controlled by player input.
     * 
     * Any datatable value that mismatches from the server will be overridden and a prediction error will be spewed.
     * 
     * Weapons are predictable by default, and the drive system uses this function to make the controlled prop predictable as well.
     * 
     * Visit [[:Category:Predicted_Hooks|Predicted Hooks]] for a list of all predicted hooks, and the [[Prediction]] page.
     * For further technical information on the subject, visit [https://developer.valvesoftware.com/wiki/Prediction valve's wiki].
     * 
     * **Note:**
     * >This function resets the datatable variables everytime it's called, it should ideally be called when a player starts using the entity and when he stops
     * 
     * **Note:**
     * >Entities set as predictable with this function will be unmarked when the user lags and receives a full packet update, to handle such case visit {{HookFunction|GM|NotifyShouldTransmit}} 
     * @param setPredictable  whether to make this entity predictable or not. 
     */
    public SetPredictable(setPredictable: boolean): void;
    
    /**
     * Prevents the server from sending any further information about the entity to a player.
     * 
     * **Bug [#1736](https://github.com/Facepunch/garrysmod-issues/issues/1736):**
     * >This does not work for nextbots.
     * 
     * {{Validate}}
     * 
     * UNCONFIRMED: When using this function, {{ClassFunction|Entity|SetFlexScale}} will conflict with this function. Instead, consider using {{ClassFunction|Entity|SetFlexScale}} on the client. 
     * @param player  The player to stop networking the entity to. 
     * @param stopTransmitting  true to stop the entity from networking, false to make it network again. 
     */
    public SetPreventTransmit(player: Player, stopTransmitting: boolean): void;
    
    /**
     * Sets the bone angles. This is used alongside Kinect in {{ClassFunction|Entity|SetRagdollBuildFunction}}, for more info see ragdoll_motion entity. 
     * @param boneid  Bone ID 
     * @param pos  Angle to set 
     */
    public SetRagdollAng(boneid: number, pos: Angle): void;
    
    /**
     * Sets the function to build the ragdoll. This is used alongside Kinect, for more info see ragdoll_motion entity. 
     * @param func  The build function. This function has one argument:
     * * {{FuncArg|Entity|ragdoll|The ragdoll to build}} 
     */
    public SetRagdollBuildFunction(func: Function): void;
    
    /**
     * Sets the bone position. This is used alongside Kinect in {{ClassFunction|Entity|SetRagdollBuildFunction}}, for more info see ragdoll_motion entity. 
     * @param boneid  Bone ID 
     * @param pos  Position to set 
     */
    public SetRagdollPos(boneid: number, pos: Vector): void;
    
    /**
     * Sets the render angles of the Entity. 
     * @param newAngles  The new render angles to be set to. 
     */
    public SetRenderAngles(newAngles: Angle): void;
    
    /**
     * Sets the render bounds for the entity. For world space coordinates see {{ClassFunction|Entity|SetRenderBoundsWS}}. 
     * @param mins  The minimum corner of the bounds, relative to origin of the entity. 
     * @param maxs  The maximum corner of the bounds, relative to origin of the entity. 
     * @param add [=Vector( 0, 0, 0 )] If defined, adds this vector to maxs and subtracts this vector from mins. 
     */
    public SetRenderBounds(mins: Vector, maxs: Vector, add?: Vector): void;
    
    /**
     * Sets the render bounds for the entity in world space coordinates. For relative coordinates see {{ClassFunction|Entity|SetRenderBounds}}. 
     * @param mins  The minimum corner of the bounds, relative to origin of the world/map. 
     * @param maxs  The maximum corner of the bounds, relative to origin of the world/map. 
     * @param add [=Vector( 0, 0, 0 )] If defined, adds this vector to maxs and subtracts this vector from mins. 
     */
    public SetRenderBoundsWS(mins: Vector, maxs: Vector, add?: Vector): void;
    
    /**
     * Used to specify a plane, past which an object will be visually clipped. 
     * @param planeNormal  The normal of the plane. Anything behind the normal will be clipped. 
     * @param planePosition  The position of the plane. 
     * @example
     * 
     * local ent = ents.Create( "prop_physics" )
     * ent:SetModel( "models/props_borealis/bluebarrel001.mdl" )
     * ent:SetPos( Vector(0, 0, 0) )
     * ent:Spawn()
     * ent:GetPhysicsObject():EnableMotion(false)
     * 
     * local normal = ent:GetUp()
     * local position = normal:Dot( ent:GetPos() )
     * ent:SetRenderClipPlaneEnabled( true )
     * ent:SetRenderClipPlane( normal, position )
     * 
     * // Creates a blue barrel at Vector(0, 0, 0), freezes it, and will visually clip the barrel's lower half. 
     */
    public SetRenderClipPlane(planeNormal: Vector, planePosition: number): void;
    
    /**
     * Enables the use of clipping planes to "cut" objects. 
     * @param enabled  Enable or disable clipping planes 
     */
    public SetRenderClipPlaneEnabled(enabled: boolean): void;
    
    /**
     * Sets entity's render FX. 
     * @param renderFX  The new render FX to set, see {{Enum|kRenderFx}} 
     */
    public SetRenderFX(renderFX: kRenderFx): void;
    
    /**
     * Sets the render mode of the entity. 
     * @param renderMode  New render mode to set, see {{Enum|RENDERMODE}}. 
     */
    public SetRenderMode(renderMode: RENDERMODE): void;
    
    /**
     * Set the origin in which the Entity will be drawn from. 
     * @param newOrigin  The new origin in world coordinates where the Entity's model will now be rendered from. 
     */
    public SetRenderOrigin(newOrigin: Vector): void;
    
    /**
     * Sets a save value for an entity. 
     * @param name  Name of the save value to set 
     * @param value  Value to set 
     * @returns Key successfully set 
     * @example
     * 
     * for k, v in pairs( ents.FindByClass( "npc_rollermine" ) ) do
     *     v:SetSaveValue( "m_bHackedByAlyx", true )
     * end
     * 
     * // Make all rollermines currently on the map friendly 
     */
    public SetSaveValue(name: string, value: any): boolean;
    
    /**
     * Sets the entity's model sequence.
     * 
     * If the specified sequence is already active, the animation will not be restarted. See {{ClassFunction|Entity|ResetSequence}} for a function that restarts the animation even if it is already playing.
     * 
     * In some cases you want to run {{ClassFunction|Entity|ResetSequenceInfo}} to make this function run.
     * 
     * **Note:**
     * >This will not work properly if called directly after calling {{ClassFunction|Entity|SetModel}}. Consider waiting until the next Tick.
     * 
     * **Note:**
     * >Will not work on players due to the animations being reset every frame by the base gamemode animation system. See {{HookFunction|GM|CalcMainActivity}}. 
     * @param sequenceId  The sequence to play. Also accepts strings.
     * 
     * **Note:**
     * >If set to a string, the function will automatically call {{ClassFunction|Entity|LookupSequence}} to retrieve the sequence ID as a number. 
     * @example
     * 
     * self:SetSequence( "idle" )
     * 
     * // Set the entity to play the "idle" sequence.@example
     * 
     * self:SetSequence( 0 )
     * 
     * // Set the entity to play the first sequence defined on the model (usually idle). 
     */
    public SetSequence(sequenceId: number | string): void;
    
    /**
     * Sets whether or not the entity should make a physics contact sound when it's been picked up by a player. 
     * @param playsound [=false] True to play the pickup sound, false otherwise. 
     * @example
     * 
     * function GM:OnEntityCreated(ent)
     *     ent:SetShouldPlayPickupSound(true)
     * end
     * 
     * // Enable pickup sound on all entities. 
     */
    public SetShouldPlayPickupSound(playsound?: boolean): void;
    
    /**
     * Sets if entity should create a server ragdoll on death or a client one. 
     * @param serverragdoll  Set true if ragdoll should be created on server, false if on client 
     */
    public SetShouldServerRagdoll(serverragdoll: boolean): void;
    
    /**
     * Sets the skin of the entity. 
     * @param skinIndex  Index of the skin to use. 
     */
    public SetSkin(skinIndex: number): void;
    
    /**
     * Sets the solidity of an entity. 
     * @param solid_type  The solid type. See the {{Enum|SOLID}}. 
     */
    public SetSolid(solid_type: SOLID): void;
    
    /**
     * Sets solid flag(s) for the entity.
     * 
     * This overrides any other flags the entity might have had. See {{ClassFunction|Entity|AddSolidFlags}} for adding flags. 
     * @param flags  The flag(s) to set, see {{Enum|FSOLID}}. 
     */
    public SetSolidFlags(flags: FSOLID): void;
    
    /**
     * Sets whether the entity should use a spawn effect. See also: {{ClassFunction|Entity|GetSpawnEffect}}
     * 
     * **Note:**
     * >This function doesn't actually give the entity a spawn effect, but it's merely a networked bool. 
     * @param spawnEffect  Sets if we should show a spawn effect. 
     * @example
     * 
     * local function MakeRagdoll( Player, Pos, Ang, Model, PhysicsObjects, Data )
     * 
     * 	local Ent = ents.Create( "prop_ragdoll" )
     * 	duplicator.DoGeneric( Ent, Data )
     * 	Ent:Spawn()
     * 	
     * 	duplicator.DoGenericPhysics( Ent, Player, Data )
     * 	Ent:Activate()
     * 
     * 	Ent:SetSpawnEffect( true );
     * 	return Ent	
     * end
     * 
     * // Simplified code taken from sandbox's commands.lua 
     */
    public SetSpawnEffect(spawnEffect: boolean): void;
    
    /**
     * Overrides a single material on the model of this entity.
     * 
     * To set a Lua material created with {{GlobalFunction|CreateMaterial}}, just prepend a "!" to the material name.
     * 
     * **Bug [#3362](https://github.com/Facepunch/garrysmod-issues/issues/3362):**
     * >The server's value takes priority on the client. 
     * @param index [=nil] Index of the material to override, acceptable values are from 0 to 31.
     * 
     * Indexes are by {{ClassFunction|Entity|GetMaterials}}, but you have to subtract 1 from them.
     * 
     * If called with no arguments, all sub materials will be reset. 
     * @param material [=nil] The material to override the default one with. Set to nil to revert to default material. 
     */
    public SetSubMaterial(index?: number, material?: string): void;
    
    /**
     * Changes the table that can be accessed by indexing an entity. Each entity starts with its own table by default. 
     * @param tab  Table for the entity to use 
     */
    public SetTable(tab: table): void;
    
    /**
     * Sets the current task. 
     * @param task  The task to set. 
     */
    protected SetTask(task: table): void;
    
    /**
     * When this flag is set the entity will only transmit to the player when its parent is transmitted. This is useful for things like viewmodel attachments since without this flag they will transmit to everyone (and cause the viewmodels to transmit to everyone too).
     * 
     * **Note:**
     * >In the case of scripted entities, this will override {{HookFunction|ENTITY|UpdateTransmitState}} 
     * @param onoff  Will set the TransmitWithParent flag on or off 
     */
    public SetTransmitWithParent(onoff: boolean): void;
    
    /**
     * Marks the entity as a trigger, so it will generate {{HookFunction|ENTITY|StartTouch}}, {{HookFunction|ENTITY|Touch}} and {{HookFunction|ENTITY|EndTouch}} callbacks.
     * 
     * Internally this is stored as {{Enum|FSOLID}} flag. 
     * @param maketrigger  Make the entity trigger or not 
     */
    public SetTrigger(maketrigger: boolean): void;
    
    /**
     * Sets whether an entity can be unfrozen, meaning that it cannot be unfrozen using the physgun. 
     * @param freezable [=false] True to make the entity unfreezable, false otherwise. 
     */
    public SetUnFreezable(freezable?: boolean): void;
    
    /**
     * Forces the entity to reconfigure its bones. You might need to call this after changing your model's scales or when manually drawing the entity multiple times at different positions.
     * 
     * **Note:**
     * >This calls the BuildBonePositions callback added via {{ClassFunction|Entity|AddCallback}}, so avoid calling this function inside it to prevent an infinite loop. 
     */
    public SetupBones(): void;
    
    /**
     * Called when the entity should set up its [[Networking Entities| Data Tables]].
     * 
     * This is a much better option than using Set/Get Networked Values. 
     * @example
     * 
     * function ENT:SetupDataTables()
     * 
     * 	self:NetworkVar( "Float", 0, "Amount" );
     * 	self:NetworkVar( "Vector", 0, "BloodPos" );
     * 	self:NetworkVar( "Vector", 1, "UrinePos" );
     * 
     * 	if SERVER then
     * 		self:SetAmount(3)
     * 		self:SetBloodPos(Vector(0,-32,0))
     * 		self:SetUrinePos(Vector(0,0,-16))
     * 	end
     * 
     * end
     * 
     * // Sets up networked variables, adds functions SetAmount, GetAmount, GetBloodPos, SetBloodPos, GetUrinePos, SetUrinePos.
     * 
     * This function only supports 64 data tables per type (#0-63), except for strings which only supports 4. 
     */
    protected SetupDataTables(): void;
    
    /**
     * Initializes the class names of an entity's phoneme mappings (mouth movement data). This is called by default with argument "phonemes" when a flex-based entity (such as an {{Type|NPC}}) is created. 
     * @param fileRoot  The file prefix of the phoneme mappings (relative to "garrysmod/expressions/"). 
     * @example
     * 
     * // Turn phoneme mappings on or off
     * function EnablePhonemes(ent, on)
     * 
     * 	if(!IsValid(ent)) then return end
     * 	
     * 	if(!on) then
     * 		// Disable mouth movement
     * 		ent:SetupPhonemeMappings("")
     * 	else
     * 		// Enable mouth movement
     * 		ent:SetupPhonemeMappings("phonemes")
     * 	end
     * 
     * end
     * 
     * // Defines a function that can enable or disable phoneme mappings on an entity. 
     */
    public SetupPhonemeMappings(fileRoot: string): void;
    
    /**
     * Sets the use type of an entity, affecting how often {{HookFunction|ENTITY|Use}} will be called for Lua entities. 
     * @param useType  The use type to apply to the entity. Uses {{Enum|_USE}}. 
     * @example
     * 
     * Entity:SetUseType( SIMPLE_USE )
     * 
     * // Makes the {{HookFunction|ENTITY|Use}} hook only get called once at every use. 
     */
    public SetUseType(useType: _USE): void;
    
    /**
     * Allows to quickly set variable to entity's {{ClassFunction|Entity|GetTable}}.
     * 
     * **Note:**
     * >This will not network the variable to client(s). You want {{ClassFunction|Entity|SetNWString}} and similar functions for that 
     * @param key  Key of the value to set 
     * @param value  Value to set the variable to 
     */
    public SetVar(key: any, value: any): void;
    
    /**
     * Sets the entity's velocity.
     * 
     * **Note:**
     * >Actually binds to CBaseEntity::SetBaseVelocity() which sets the entity's velocity due to forces applied by other entities. 
     * @param velocity  The new velocity to set. 
     */
    public SetVelocity(velocity: Vector): void;
    
    /**
     * Sets the model and associated weapon to this viewmodel entity.
     * 
     * This is used internally when the player switches weapon.
     * 
     * **Note:**
     * >View models are not drawn without a weapons associated to them.
     * 
     * {{Warning|This will silently fail if the entity is not a viewmodel.}} 
     * @param viewModel  The model string to give to this viewmodel.
     * Example: "models/weapons/c_smg1.mdl" 
     * @param weapon [=NULL] The weapon entity to associate this viewmodel to. 
     * @example
     * 
     * Entity( 1 ):GetViewModel( 1 ):SetWeaponModel( "models/weapons/c_smg1.mdl", Entity( 1 ):GetActiveWeapon() )
     * 
     * // Sets the model of the second viewmodel to the smg and associates it with the player's current weapon.@example
     * 
     * SWEP.ViewModel = "models/weapons/v_pistol.mdl"
     * SWEP.UseHands = false
     * SWEP.ViewModelFlip = false	//the default viewmodel won't be flipped
     * SWEP.ViewModelFlip1 = true	//the second viewmodel will
     * 
     * function SWEP:Deploy()
     * 	//get the second viewmodel
     * 	local viewmodel1 = self.Owner:GetViewModel( 1 )
     * 	if ( IsValid( viewmodel1 ) ) then
     * 		//associate its weapon to us
     * 		viewmodel1:SetWeaponModel( self.ViewModel , self )
     * 	end
     * 	
     * 	self:SendViewModelAnim( ACT_VM_DEPLOY , 1 )
     * 	
     * 	return true
     * end
     * 
     * function SWEP:Holster()
     * 	local viewmodel1 = self.Owner:GetViewModel( 1 )
     * 	if ( IsValid( viewmodel1 ) ) then
     * 		//set its weapon to nil, this way the viewmodel won't show up again
     * 		viewmodel1:SetWeaponModel( self.ViewModel , nil )
     * 	end
     * 	
     * 	return true
     * end
     * 
     * //since self:SendWeaponAnim always sends the animation to the first viewmodel, we need this as a replacement
     * function SWEP:SendViewModelAnim( act , index , rate )
     * 	
     * 	if ( not game.SinglePlayer() and not IsFirstTimePredicted() ) then
     * 		return
     * 	end
     * 	
     * 	local vm = self.Owner:GetViewModel( index )
     * 	
     * 	if ( not IsValid( vm ) ) then
     * 		return
     * 	end
     * 	
     * 	local seq = vm:SelectWeightedSequence( act )
     * 	
     * 	if ( seq == -1 ) then
     * 		return
     * 	end
     * 	
     * 	vm:SendViewModelMatchingSequence( seq )
     * 	vm:SetPlaybackRate( rate or 1 )
     * end
     * 
     * function SWEP:PrimaryAttack()
     * 	
     * 	self:SendViewModelAnim( ACT_VM_PRIMARYATTACK , 0 )//target the first viewmodel
     * 	self:SetNextPrimaryFire( CurTime() + 0.25 )
     * 	
     * end
     * 
     * function SWEP:SecondaryAttack()
     * 	
     * 	self:SendViewModelAnim( ACT_VM_PRIMARYATTACK , 1 )//target the second
     * 	self:SetNextSecondaryFire( CurTime() + 0.25 )
     * 	
     * end
     * 
     * // Initializes the extra viewmodel in Deploy and hides it again on Holster, also plays the attack animation on left and right click. 
     */
    public SetWeaponModel(viewModel: string, weapon?: Weapon): void;
    
    /**
     * Returns the amount of skins the entity has. 
     * @returns skinCount 
     */
    public SkinCount(): number;
    
    /**
     * Moves the model instance from the source entity to this entity. This can be used to transfer decals that have been applied on one entity to another.
     * 
     * Both entities must have the same model. 
     * @param srcEntity  Entity to move the model instance from. 
     * @returns Whether the operation was successful or not 
     */
    public SnatchModelInstance(srcEntity: Entity): boolean;
    
    /**
     * Initializes the entity and starts its networking. If called on a player, it will respawn them.
     * 
     * This calls {{HookFunction|ENTITY|Initialize}} on Lua-defined entities. 
     */
    public Spawn(): void;
    
    /**
     * This is the spawn function. It's called when a player spawns the entity from the spawnmenu.
     * 
     * If you want to make your SENT spawnable you need this function to properly create the entity. 
     * @param ply  The player that is spawning this SENT 
     * @param tr  A {{Struct|TraceResult}} from player eyes to their aim position 
     * @param ClassName  The classname of your entity 
     * @example
     * 
     * function ENT:SpawnFunction( ply, tr, ClassName )
     * 
     * 	if ( !tr.Hit ) then return end
     * 
     * 	local SpawnPos = tr.HitPos + tr.HitNormal * 16
     * 
     * 	local ent = ents.Create( ClassName )
     * 	ent:SetPos( SpawnPos )
     * 	ent:SetBallSize( math.random( 16, 48 ) )
     * 	ent:Spawn()
     * 	ent:Activate()
     * 
     * 	return ent
     * 
     * end
     * 
     * // This is how it is defined in sent_ball@example
     * 
     * function ENT:SpawnFunction( ply, tr, ClassName )
     * 
     * 	if ( !tr.Hit ) then return end
     * 	
     * 	local SpawnPos = tr.HitPos + tr.HitNormal * 10
     * 	local SpawnAng = ply:EyeAngles()
     * 	SpawnAng.p = 0
     * 	SpawnAng.y = SpawnAng.y + 180
     * 	
     * 	local ent = ents.Create( ClassName )
     * 	ent:SetPos( SpawnPos )
     * 	ent:SetAngles( SpawnAng )
     * 	ent:Spawn()
     * 	ent:Activate()
     * 	
     * 	return ent
     * 	
     * end
     * 
     * // This is how base_edit spawns (also rotates the entity to face the player, remove * 10 if it spawns in the air) 
     */
    protected SpawnFunction(ply: Player, tr: TraceResult, ClassName: string): void;
    
    /**
     * Starts an engine schedule. 
     * @param scheduleID  Schedule ID to start. See {{Enum|SCHED}} 
     */
    protected StartEngineSchedule(scheduleID: SCHED): void;
    
    /**
     * Called when an engine task has been started on the entity.
     * 
     * **Note:**
     * >This hook only exists for '''ai''' type SENTs 
     * @param taskID  Task ID to start, see [https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/ai_task.h#L89-L502 ai_task.h] 
     * @param TaskData  Task data 
     */
    protected StartEngineTask(taskID: number, TaskData: number): void;
    
    /**
     * Starts a "looping" sound. As with any other sound playing methods, this function expects the sound file to be looping itself and will not automatically loop a non looping sound file as one might expect.
     * 
     * This function is almost identical to {{GlobalFunction|CreateSound}}, with the exception of the sound being created in the STATIC channel and with normal attenuation.
     * 
     * See also {{ClassFunction|Entity|StopLoopingSound}} 
     * @param sound  Sound to play. Can be either a sound script or a filepath. 
     * @returns The ID number of started sound starting with 0, or -1 if we failed for some reason. 
     */
    public StartLoopingSound(sound: string): number;
    
    /**
     * Starts a motion controller in the physics engine tied to this entity's {{Type|PhysObj}}, which enables the use of {{HookFunction|ENTITY|PhysicsSimulate}}.
     * 
     * The motion controller can later be destroyed via {{ClassFunction|Entity|StopMotionController}}.
     * 
     * Motion controllers are used internally to control other Entities' {{Type|PhysObj}}ects, such as the Gravity Gun, +use pickup and the Physics Gun.
     * 
     * This function should be called every time you recreate the Entity's {{Type|PhysObj}}. Or alternatively you should call {{ClassFunction|Entity|AddToMotionController}} on the new {{Type|PhysObj}}.
     * 
     * Also see {{ClassFunction|Entity|AddToMotionController}} and {{ClassFunction|Entity|RemoveFromMotionController}}.
     * 
     * **Note:**
     * >Only works on a scripted {{Type|Entity}} of anim type. 
     */
    public StartMotionController(): void;
    
    /**
     * Starts a schedule previously created by {{LibraryFunction|ai_schedule|New}}.
     * 
     * Not to be confused with {{HookFunction|ENTITY|StartEngineSchedule}} or {{ClassFunction|NPC|SetSchedule}} which start an Engine-based schedule. 
     * @param sched  Schedule to start. 
     */
    protected StartSchedule(sched: Schedule): void;
    
    /**
     * Called once on starting task. 
     * @param task  The task to start, created by {{LibraryFunction|ai_task|New}}. 
     * @example
     * 
     * function ENT:StartTask( task )
     * 	task:Start( self.Entity )
     * end
     * 
     * // How it is defined: 
     */
    protected StartTask(task: Task): void;
    
    /**
     * Called when the entity starts touching another entity.
     * 
     * {{Warning|This only works for '''brush''' entities and for entities that have {{ClassFunction|Entity|SetTrigger}} set to true.}} 
     * @param entity  The entity which is being touched. 
     */
    protected StartTouch(entity: Entity): void;
    
    /**
     * Stops all particle effects parented to the entity and immediately destroys them. 
     */
    public StopAndDestroyParticles(): void;
    
    /**
     * Stops a sound created by {{ClassFunction|Entity|StartLoopingSound}}. 
     * @param id  The sound ID returned by {{ClassFunction|Entity|StartLoopingSound}} 
     */
    public StopLoopingSound(id: number): void;
    
    /**
     * Stops the motion controller created with {{ClassFunction|Entity|StartMotionController}}. 
     */
    public StopMotionController(): void;
    
    /**
     * Stops all particle effects parented to the entity.
     * 
     * This is ran automatically on every client by {{ClassFunction|Entity|StopParticles}} if called on the server. 
     */
    public StopParticleEmission(): void;
    
    /**
     * Stops any attached to the entity .pcf particles using {{GlobalFunction|ParticleEffectAttach}}.
     * 
     * On client, this is the same as {{ClassFunction|Entity|StopParticleEmission}}. ( and you should use StopParticleEmission instead )
     * 
     * On server, this is the same as running {{ClassFunction|Entity|StopParticleEmission}} on every client. 
     */
    public StopParticles(): void;
    
    /**
     * Stops all particle effects parented to the entity with given name. 
     * @param name  The name of the particle to stop. 
     */
    public StopParticlesNamed(name: string): void;
    
    /**
     * Stops all particle effects parented to the entity with given name on given attachment. 
     * @param name  The name of the particle to stop. 
     * @param attachment  The attachment of the entity to stop particles on. 
     */
    public StopParticlesWithNameAndAttachment(name: string, attachment: number): void;
    
    /**
     * Stops emitting the given sound script from the entity, especially useful for looping sound scripts.
     * 
     * **Note:**
     * >This only works with sound scripts ({{LibraryFunction|sound|Add}}), using a file path will not work! 
     * @param soundscript  The name of the sound script to stop playback of. 
     */
    public StopSound(soundscript: string): void;
    
    /**
     * Used to store an output so it can be triggered with {{HookFunction|ENTITY|TriggerOutput}}.
     * Outputs compiled into a map are passed to entities as key/value pairs through {{HookFunction|ENTITY|KeyValue}}.
     * 
     * TriggerOutput will do nothing if this function has not been called first. 
     * @param name  Name of output to store 
     * @param info  Output info 
     * @example
     * 
     * function ENT:KeyValue( k, v )
     * 	// 99% of all outputs are named 'OnSomethingHappened'.
     * 	if ( string.Left( k, 2 ) == "On" ) then
     * 		self:StoreOutput( k, v )
     * 	end
     * end
     * 
     * // Stores all outputs that are assigned to an entity in Hammer. 
     */
    protected StoreOutput(name: string, info: string): void;
    
    /**
     * Applies the specified amount of damage to the entity. 
     * @param damageAmount  The amount of damage to be applied. 
     * @param attacker  The entity that initiated the attack that caused the damage. 
     * @param inflictor  The entity that applied the damage, eg. a weapon. 
     */
    public TakeDamage(damageAmount: number, attacker: Entity, inflictor: Entity): void;
    
    /**
     * Applies the damage specified by the damage info to the entity. 
     * @param damageInfo  The damage to apply. 
     * @example
     * 
     * function DissolveIt( ent )
     * 	local d = DamageInfo()
     * 	d:SetDamage( ent:Health() )
     * 	d:SetAttacker( ent )
     * 	d:SetDamageType( DMG_DISSOLVE )
     * 
     * 	ent:TakeDamageInfo( d )
     * end
     * 
     * DissolveIt( Entity( 1 ) )
     * 
     * // Dissolve the target into oblivion. 
     */
    public TakeDamageInfo(damageInfo: CTakeDamageInfo): void;
    
    /**
     * Applies physics damage to the entity 
     * @param dmginfo  The damage to apply 
     */
    public TakePhysicsDamage(dmginfo: CTakeDamageInfo): void;
    
    /**
     * Returns true if the current running Task is finished. 
     * @returns Is the current running Task is finished or not. 
     */
    protected TaskFinished(): boolean;
    
    /**
     * Returns how many seconds we've been doing this current task 
     * @returns How many seconds we've been doing this current task 
     */
    protected TaskTime(): number;
    
    /**
     * Allows you to override trace result when a trace hits the entitys Bounding Box.
     * 
     * **Note:**
     * >Your entity must have {{ClassFunction|Entity|EnableCustomCollisions}} enabled for this hook to work 
     * @param startpos  Start position of the trace 
     * @param delta  Offset from startpos to the endpos of the trace 
     * @param isbox  Is the trace a hull trace? 
     * @param extents  Size of the hull trace? 
     * @param mask  The {{Enum|CONTENTS}} mask 
     * @returns A table containing new HitPos, Fraction and Normal. Returning nothing allows the trace to ignore the entity completely. 
     * @example
     * 
     * function ENT:TestCollision( startpos, delta, isbox, extents )
     * 
     *         if ( isbox ) then return end
     *         if ( !widgets.Tracing ) then return end
     *         
     *         // TODO. Actually trace against our cube!
     *         
     *         return 
     *         { 
     *                 HitPos                = self:GetPos(),
     *                 Fraction        = 0.5 * self:GetPriority()
     *         }
     * 
     * end
     * 
     * // Example taken from lua/entities/widget_base.lua 
     */
    protected TestCollision(startpos: Vector, delta: Vector, isbox: boolean, extents: Vector, mask: CONTENTS): table;
    
    /**
     * Check if the given position or entity is within this entity's PVS.
     * 
     * **Note:**
     * >The function won't take in to account {{GlobalFunction|AddOriginToPVS}} and the like. 
     * @param testPoint  {{Type|Entity}} or {{Type|Vector}} to test against. If an entity is given, this function will test using its bounding box. 
     * @returns True if the testPoint is within our PVS. 
     */
    public TestPVS(testPoint: Entity | Vector): boolean;
    
    /**
     * Called every frame on the client.
     * Called every tick on the server.
     * 
     * **Note:**
     * >By default, it runs about 5-6 times per second on the server, but you can force it to run at servers tickrate using the example below. 
     * @returns Return true if you used {{ClassFunction|Entity|NextThink}} to override the next execution time. 
     * @example
     * 
     * function ENT:Think()
     * 	// Do stuff
     * 
     * 	self:NextThink( CurTime() )
     * 	return true
     * end
     * 
     * // Force the think hook to run at the maximum frequency.
     * This is generally only useable for anim entities, if the entity has any animations. 
     */
    protected Think(): boolean;
    
    /**
     * Called every tick for every entity being "touched".
     * 
     * See also {{HookFunction|ENTITY|StartTouch}} and {{HookFunction|ENTITY|EndTouch}}.
     * 
     * {{Warning|This only works for '''brush''' entities and for entities that have {{ClassFunction|Entity|SetTrigger}} set to true.}}
     * 
     * **Note:**
     * >For physics enabled entities, this hook will '''not''' be ran while the entity's physics is asleep. See {{ClassFunction|PhysObj|Wake}}. 
     * @param entity  The entity that touched it. 
     * @example
     * 
     * function ENTITY:Touch(entity)
     * 	self:EmitSound("ambient/explosions/explode_" .. math.random(1, 9) .. ".wav")
     * 	self:Remove()
     * end
     * 
     * // 
     */
    protected Touch(entity: Entity): void;
    
    /**
     * Returns the ID of a {{Type|PhysObj}} attached to the given bone. To be used with {{ClassFunction|Entity|GetPhysicsObjectNum}}.
     * 
     * See {{ClassFunction|Entity|TranslatePhysBoneToBone}} for reverse function. 
     * @param boneID  The ID of a bone to look up the "physics root" bone of. 
     * @returns The {{Type|PhysObj}} ID of the given bone.
     * 
     * * -1 if we somehow cannot translate 
     */
    public TranslateBoneToPhysBone(boneID: number): number;
    
    /**
     * Returns the boneID of the bone the given {{Type|PhysObj}} is attached to.
     * 
     * See {{ClassFunction|Entity|TranslateBoneToPhysBone}} for reverse function. 
     * @param physNum  The {{Type|PhysObj}} number on the entity 
     * @returns The boneID of the bone the {{Type|PhysObj}} is attached to. 
     * @example
     * 
     * local tr = LocalPlayer():GetEyeTrace()
     * local bone = tr.Entity:TranslatePhysBoneToBone( tr.PhysicsBone )
     * print( bone )
     * 
     * // Does a trace, gets the physics bone from the trace, converts the physics bone number into the bone number and prints the result 
     */
    public TranslatePhysBoneToBone(physNum: number): number;
    
    /**
     * Triggers all outputs stored using {{HookFunction|ENTITY|StoreOutput}}. 
     * @param output  Name of output to fire 
     * @param activator  Activator entity 
     * @param data [=nil] The data to give to the output. 
     */
    protected TriggerOutput(output: string, activator: Entity, data?: string): void;
    
    /**
     * Called whenever the transmit state should be updated. 
     * @returns Transmit state to set, see {{Enum|TRANSMIT}}. 
     * @example
     * 
     * function ENT:Touch( other )
     * 	if ( self.NextRespawn > CurTime() ) then return end
     * 	
     * 	self.NextRespawn = CurTime() + 5
     * 	self:AddEFlags( EFL_FORCE_CHECK_TRANSMIT )
     * end
     * 
     * function ENT:UpdateTransmitState()
     * 	if ( self.NextRespawn > CurTime() ) then
     * 		return TRANSMIT_NEVER
     * 	end
     * 	
     * 	return TRANSMIT_PVS
     * end
     * 
     * function ENT:Think()
     * 	if ( self.NextRespawn != -1 && self.NextRespawn < CurTime() ) then
     * 		self.NextRespawn = -1
     * 		self:AddEFlags( EFL_FORCE_CHECK_TRANSMIT )
     * 	end
     * end
     * 
     * // Entity pickup example, stops the entity from being networked after it's been picked up, and restores it once it "respawns". 
     */
    protected UpdateTransmitState(): TRANSMIT;
    
    /**
     * Called when another entity uses this entity, example would be a player pressing "+use" this entity.
     * 
     * To change how often the function is called, see {{ClassFunction|Entity|SetUseType}}. 
     * @param activator  The initial cause for the input getting triggered. This can be different from the caller in some cases. 
     * @param caller  The entity originally responsible for the input. Typically you should use this if you're checking for which player pressed +use. 
     * @param useType  Use type, see {{Enum|USE}}. 
     * @param value  Any passed value. 
     * @example
     * 
     * function ENT:Use( activator, caller )
     * 	if IsValid(caller) and caller:IsPlayer() then 
     * 		caller:Kill()
     * 	end
     * end
     * 
     * // Kills any player that uses this entity. 
     */
    protected Use(activator: Entity, caller: Entity, useType: USE, value: number): void;
    
    /**
     * **Note:**
     * >Does nothing on server.
     * 
     * Animations will be handled purely clientside instead of a fixed animtime, enabling interpolation. This does not affect layers and gestures. 
     */
    public UseClientSideAnimation(): void;
    
    /**
     * Enables or disables trigger bounds.
     * 
     * This will give the entity a "trigger box" that extends around its bounding box by iBloatSize units in X/Y and (iBloatSize/2) in +Z (-Z remains the same).
     * 
     * The trigger box is world aligned and will work regardless of the object's solidity and collision group.
     * 
     * It will be visible as a light blue box when the ent_bbox console command is used.
     * 
     * Valve use trigger boxes for all pickup items. Their bloat size is 24, a surprisingly large figure. 
     * @param enable  Should we enable or disable the bounds. 
     * @param bloat [=0] The distance/size of the trigger bounds. 
     */
    public UseTriggerBounds(enable: boolean, bloat?: number): void;
    
    /**
     * Returns the index of this view model, it can be used to identify which one of the player's view models this entity is. 
     * @returns View model index, ranges from 0 to 2, nil if the entity is not a view model 
     */
    public ViewModelIndex(): number;
    
    /**
     * Returns true if the provided entity is visible from the passed entity.
     * 
     * This is achieved similarly to a trace. 
     * @param Entity  Entity to check for visibility to. 
     * @returns If the entities can see each other. 
     */
    public Visible(Entity: Entity): boolean;
    
    /**
     * Returns true if supplied vector is visible from the entity's line of sight.
     * 
     * This is achieved similarly to a trace. 
     * @param pos  The position to check for visibility 
     * @returns Within line of sight 
     */
    public VisibleVec(pos: Vector): boolean;
    
    /**
     * Returns an integer that represents how deep in water the entity is.
     * 
     * * '''0''' - The entity isn't in water.
     * 
     * * '''1''' - Slightly submerged (at least to the feet).
     * 
     * * '''2''' - The majority of the entity is submerged (at least to the waist).
     * 
     * * '''3''' - Completely submerged. 
     * @returns The water level. 
     */
    public WaterLevel(): number;
    
    /**
     * Sets the activity of the entity's active weapon.
     * 
     * **Note:**
     * >This does nothing on the client.
     * 
     * **Note:**
     * >Only works for CBaseCombatCharacter entities, which includes players and NPCs. 
     * @param act  Activity number. See {{Enum|ACT}}. 
     * @param duration  How long the animation should take in seconds. 
     */
    public Weapon_SetActivity(act: ACT, duration: number): void;
    
    /**
     * Calls and returns {{HookFunction|WEAPON|TranslateActivity}} on the weapon the entity ( player or NPC ) carries.
     * 
     * Despite existing on client, it doesn't actually do anything on client. 
     * @param act  The activity to translate 
     * @returns The translated activity 
     */
    public Weapon_TranslateActivity(act: number): number;
    
    /**
     * Returns two vectors representing the minimum and maximum extent of the entity's bounding box. 
     * @returns [The minimum vector for the entity's bounding box., The maximum vector for the entity's bounding box.] 
     * @example
     * 
     * local min,max = Entity(1):WorldSpaceAABB()
     * print(max)
     * 
     * // Prints Entity(1)'s maximum bounding box vector. 
     * !TupleReturn
     */
    public WorldSpaceAABB(): [Vector, Vector];
    
    /**
     * Returns the center of the entity according to its collision model. 
     * @returns The center of the entity 
     */
    public WorldSpaceCenter(): Vector;
    
    /**
     * Converts a worldspace vector into a vector local to an entity 
     * @param wpos  The world vector 
     * @returns The local vector 
     */
    public WorldToLocal(wpos: Vector): Vector;
    
    /**
     * Converts world angles to local angles ( local to the entity ) 
     * @param ang  The world angles 
     * @returns The local angles 
     */
    public WorldToLocalAngles(ang: Angle): Angle;
}

/**
 * The ents library provides functions for creating and finding entities in the game. 
 */
declare namespace ents {
    /**
     * Creates an entity. This function will fail and return NULL if the soft-edict limit is hit (8176), or the provided entity class doesn't exist.
     * 
     * {{Warning|Do not use before {{HookFunction|GM|InitPostEntity}} has been called, otherwise the server will crash!
     * If you need to perform entity creation when the game starts, create a hook for {{HookFunction|GM|InitPostEntity}} and do it there}} 
     * @param classRef  The classname of the entity to create 
     * @returns The created entity, or NULL if failed 
     * @example
     * 
     * local button = ents.Create( "gmod_button" )
     * if ( !IsValid( button ) ) then return end // Check whether we successfully made an entity, if not - bail
     * button:SetModel( "models/dav0r/buttons/button.mdl" )
     * button:SetPos( Vector( 0, 0, 100 ) )
     * button:Spawn()
     * 
     * // Creates a gmod_button entity near 0,0,0 
     */
    function Create(classRef: string): Entity;
    
    /**
     * Creates a clientside only prop. See also {{GlobalFunction|ClientsideModel}}.
     * 
     * **Bug [#1387](https://github.com/Facepunch/garrysmod-issues/issues/1387):**
     * >Clientside entities are not garbage-collected, thus you must store a reference to the object and call {{ClassFunction|CSEnt|Remove}} manually.
     * 
     * **Bug [#3268](https://github.com/Facepunch/garrysmod-issues/issues/3268):**
     * >Projected textures do not work on clientside props under specific conditions (see [https://github.com/Facepunch/garrysmod-issues/issues/3268#issuecomment-324821962 this explanation]). 
     * @param model [="models/error.mdl"] The model for the entity to be created.
     * 
     * {{Warning|Model must be precached with {{LibraryFunction|util|PrecacheModel}} on the server before usage.}} 
     * @returns Created entity. 
     * @example
     * 
     * function GhostBarrel( ply )
     * 	local c_Model = ents.CreateClientProp()
     * 	c_Model:SetPos( ply:GetPos() )
     * 	c_Model:SetModel( "models/props_borealis/bluebarrel001.mdl" )
     * 	c_Model:SetParent( ply )
     * 	c_Model:Spawn()
     * end
     * 
     * // Creates a clientside prop at the player location. 
     */
    function CreateClientProp(model?: string): CSEnt;
    
    /**
     * Returns a table of all entities along the ray. The ray does not stop on collisions, meaning it will go through walls/entities. 
     * @param start  The start position of the ray 
     * @param end  The end position of the ray 
     * @param mins [=nil] The mins corner of the ray 
     * @param maxs [=nil] The maxs corner of the ray 
     * @returns Table of the found entities. 
     */
    function FindAlongRay(start: Vector, end: Vector, mins?: Vector, maxs?: Vector): Entity[];
    
    /**
     * Gets all entities with the given class, supports wildcards. This works internally by iterating over {{LibraryFunction|ents|GetAll}}.
     * 
     * **Note:**
     * >Asterisks (*) are the only wildcard supported. 
     * @param classRef  The class of the entities to find. 
     * @returns A table containing all found entities 
     * @example
     * 
     * for k, v in pairs( ents.FindByClass( "prop_*" ) ) do
     * 	print( v:GetPos() )
     * end
     * 
     * // Prints the location of every prop on the map. 
     */
    function FindByClass(classRef: string): Entity[];
    
    /**
     * Finds all entities that are of given class and are children of given entity. This works internally by iterating over {{LibraryFunction|ents|GetAll}}. 
     * @param classRef  The class of entities to search for 
     * @param parent  Parent of entities that are being searched for 
     * @returns A table of found entities or nil if none are found 
     */
    function FindByClassAndParent(classRef: string, parent: Entity): Entity[];
    
    /**
     * Gets all entities with the given model, supports wildcards. This works internally by iterating over {{LibraryFunction|ents|GetAll}}.
     * 
     * **Bug [#2872](https://github.com/Facepunch/garrysmod-issues/issues/2872):**
     * >This currently only supports trailing asterisks (*) for wildcards. 
     * @param model  The model of the entities to find. 
     * @returns A table of all found entities. 
     */
    function FindByModel(model: string): Entity[];
    
    /**
     * Gets all entities with the given hammer targetname. This works internally by iterating over {{LibraryFunction|ents|GetAll}}.
     * 
     * **Note:**
     * >A player's Name is his nickname, see {{ClassFunction|Player|GetName}}
     * 
     * Doesn't do anything on client. 
     * @param name  The targetname to look for 
     * @returns A table of all found entities 
     */
    function FindByName(name: string): Entity[];
    
    /**
     * Returns all entities within the specified box.
     * 
     * **Note:**
     * >Clientside entities will not be returned by this function.
     * 
     * {{Warning|There is a limit of 512 entities for the output!}} 
     * @param boxMins  The box minimum coordinates. 
     * @param boxMaxs  The box maximum coordinates. 
     * @returns A table of all found entities. 
     * @example
     * 
     * function ents.FindPlayersInBox( vCorner1, vCorner2 )
     * 	local tEntities = ents.FindInBox( vCorner1, vCorner2 )
     * 	local tPlayers = {}
     * 	local iPlayers = 0
     * 	
     * 	for i = 1, #tEntities do
     * 		if ( tEntities[ i ]:IsPlayer() ) then
     * 			iPlayers = iPlayers + 1
     * 			tPlayers[ iPlayers ] = tEntities[ i ]
     * 		end
     * 	end
     * 	
     * 	return tPlayers, iPlayers
     * end
     * 
     * // Returns a table of players in a box using ents.FindInBox 
     */
    function FindInBox(boxMins: Vector, boxMaxs: Vector): Entity[];
    
    /**
     * [[File:ents.FindInCone.png|thumb|2D visualization of the actual shape of the cone, click to enlarge]]
     * Finds and returns all entities within the specified cone. Only entities whose {{ClassFunction|Entity|WorldSpaceCenter}} is within the cone are considered to be in it.
     * 
     * The "cone" is actually a conical "slice" of an axis-aligned box (see: {{LibraryFunction|ents|FindInBox}}). The image to the right shows approximately how this function would look in 2D. Due to this, the entity may be farther than the specified range!
     * 
     * **Note:**
     * >Clientside entities will not be returned by this function.
     * 
     * {{Warning|If there are more than 512 entities in the axis-aligned box around the origin, then the result may be incomplete!}} 
     * @param origin  The tip of the cone. 
     * @param normal  Direction of the cone. 
     * @param range  The range of the cone/box around the origin. <!-- The function internally adds 1 to this argument before using it. --> 
     * @param angle_cos  The [[math/cos|cosine]] of the angle between the center of the cone to its edges, which is half the overall angle of the cone.
     * 
     * 1 makes a 0° cone, 0.707 makes approximately 90°, 0 makes 180°, and so on. 
     * @returns A table of all found {{Type|Entity}}s. 
     * @example
     * 
     * local mat = Material( "models/shiny" )
     * mat:SetFloat( "$alpha", 0.5 )
     * 
     * hook.Add( "PostDrawOpaqueRenderables", "conetest", function()
     * 	local size = 200
     * 	local dir = LocalPlayer():GetAimVector()
     * 	local angle = math.cos( math.rad( 15 ) ) // 15 degrees
     * 	local startPos = LocalPlayer():EyePos()
     * 
     * 	local entities = ents.FindInCone( startPos, dir, size, angle )
     * 
     * 	// draw the outer box
     * 	local mins = Vector( -size, -size, -size )
     * 	local maxs = Vector( size, size, size )
     * 
     * 	render.SetMaterial( mat )
     * 	render.DrawWireframeBox( startPos, Angle( 0, 0, 0 ), mins, maxs, color_white, true )
     * 	render.DrawBox( startPos, Angle( 0, 0, 0 ), -mins, -maxs, color_white )
     * 
     * 	// draw the lines
     * 	for id, ent in pairs( entities ) do
     * 		render.DrawLine( ent:WorldSpaceCenter() - dir * ( ent:WorldSpaceCenter()-startPos ):Length(), ent:WorldSpaceCenter(), Color( 255, 0, 0 ) )
     * 	end
     * end )
     * 
     * // An example usage of this function. This example shows which entities are being returned by the function with red lines and the range with white transparent box. 
     */
    function FindInCone(origin: Vector, normal: Vector, range: number, angle_cos: number): Entity[];
    
    /**
     * Finds all entities that lie within a [https://developer.valvesoftware.com/wiki/PVS PVS].
     * 
     * **Note:**
     * >The function won't take in to account {{GlobalFunction|AddOriginToPVS}} and the like. 
     * @param viewPoint  {{Type|Entity}} or {{Type|Vector}} to find entities within the PVS of. If a player is given, this function will use the player's view entity. 
     * @returns The found {{Type|Entity}}s. 
     */
    function FindInPVS(viewPoint: Entity | Vector): table;
    
    /**
     * Gets all entities within the specified sphere.
     * 
     * **Note:**
     * >Clientside entities will not be returned by this function. 
     * @param origin  Center of the sphere. 
     * @param radius  Radius of the sphere. 
     * @returns A table of all found {{Type|Entity}}s. Has a limit of 1024 entities. 
     */
    function FindInSphere(origin: Vector, radius: number): Entity[];
    
    /**
     * Fires a use event. 
     * @param target  Name of the target entity. 
     * @param activator  Activator of the event. 
     * @param caller  Caller of the event. 
     * @param usetype  Use type. See the {{Enum|USE}}. 
     * @param value  This value is passed to {{HookFunction|ENTITY|Use}}, but isn't used by any default entities in the engine. 
     */
    function FireTargets(target: string, activator: Entity, caller: Entity, usetype: USE, value: number): void;
    
    /**
     * Returns a table of all existing entities. 
     * @returns Table of all existing {{Type|Entity}}s. 
     */
    function GetAll(): Entity[];
    
    /**
     * Returns an entity by its index. Same as {{GlobalFunction|Entity}}. 
     * @param entIdx  The index of the entity. 
     * @returns The entity if it exists. 
     */
    function GetByIndex(entIdx: number): Entity;
    
    /**
     * Gives you the amount of currently existing entities.
     * Similar to #{{LibraryFunction|ents|GetAll}} but with much better performance. 
     * @param IncludeKillMe [=false] Include entities with the FL_KILLME flag. This will skip an internal loop, and the function will be more efficient as a byproduct. 
     * @returns Number of entities 
     */
    function GetCount(IncludeKillMe?: boolean): number;
    
    /**
     * Returns the amount of networked entities, which is limited to 8192. {{LibraryFunction|ents|Create}} will fail somewhere between 8064 and 8176 - this can vary based on the amount of existing temp ents. 
     * @returns Number of networked entities 
     */
    function GetEdictCount(): number;
    
    /**
     * Returns entity that has given {{ClassFunction|Entity|MapCreationID}}. 
     * @param id  Entity's creation id 
     * @returns Found entity 
     */
    function GetMapCreatedEntity(id: number): Entity;
}

/**
 * The file library provides functions for finding, reading and writing to files. 
 * 
 * The following path values are most commonly used:
 * * “LUA” searches the lua files (in /lua/, in your gamemodes, in all the addons).
 * * “GAME” searches all the mounted content (main folder, addons, mounted games etc).
 * * “MOD” searches only the garrysmod folder.
 * * “DATA” searches in the data folder.
 * For the full list of path values, type “path” in the console. 
 */
declare namespace file {
    /**
     * Appends a file relative to the ''data'' folder. 
     * @param name  The file's name. 
     * @param content  The content which should be appended to the file. 
     * @example
     * 
     * file.Append( "helloworld.txt", "Append!" )
     * 
     * print( file.Read( "helloworld.txt", "DATA" ) )
     * 
     * // Adds "Append!" to ''helloworld.txt'', then prints it. 
     */
    function Append(name: string, content: string): void;
    
    /**
     * Creates a directory that is relative to the ''data'' folder. 
     * @param name  The directory's name. 
     * @example
     * 
     * file.CreateDir("sample")
     * 
     * // Creates a directory named ''sample'' in the ''data'' folder.@example
     * 
     * file.CreateDir("a/b/c/d/e/f/g")
     * 
     * // This function will create all subfolders you specify. 
     */
    function CreateDir(name: string): void;
    
    /**
     * Deletes a file or ''empty'' folder that is relative to the '''data''' folder.
     * You can't remove any files outside of '''data''' folder. 
     * @param name  The file name 
     * @example
     * 
     * file.Delete( "helloworld.txt" )
     * 
     * // Deletes '''data/helloworld.txt''' file. 
     */
    function Delete(name: string): void;
    
    /**
     * Returns a boolean of whether the file or directory exists or not. 
     * @param name  The file or directory's name. 
     * @param path  The path of where to look for the file.
     * 
     * * "GAME" Structured like base folder (garrysmod/), searches all the mounted content (main folder, addons, mounted games etc)
     * * "LUA" or "lsv" - All Lua folders (lua/) including gamesmodes and addons
     * * "DATA" Data folder (garrysmod/data)
     * * "MOD" Strictly the game folder (garrysmod/), ignores mounting. 
     * @returns Returns true if the file exists and false if it is not. 
     * @example
     * 
     * print( file.Exists("data", "GAME") )
     * 
     * // Prints whether the ''data'' folder exists in the base directory. 
     */
    function Exists(name: string, path: string): boolean;
    
    /**
     * Returns a list of files and directories inside a single folder.
     * 
     * **Bug [#3437](https://github.com/Facepunch/garrysmod-issues/issues/3437):**
     * >This will have undefined results if a path contains 3+ slashes. 
     * @param name  The wildcard to search for. "models/*.mdl" will list .mdl files in the models/ folder. 
     * @param path  The path to look for the files and directories in. See [[File_Search_Paths|this list]] for a list of valid paths. 
     * @param sorting [="nameasc"] The sorting to be used, optional.
     * 
     * * "nameasc" sort the files ascending by name
     * * "namedesc" sort the files descending by name
     * * "dateasc" sort the files ascending by date
     * * "datedesc" sort the files descending by date 
     * @returns [A table of found files, or nil if the path is invalid, A table of found directories, or nil if the path is invalid] 
     * @example
     * 
     * local files, directories = file.Find("*", "DATA")
     * 
     * print( "File: " .. files[1], "Folder: " .. directories[1] )
     * 
     * // Prints the first file and the first directory in the ''data'' folder. 
     * !TupleReturn
     */
    function Find(name: string, path: string, sorting?: string): [table, table];
    
    /**
     * Returns whether the given file is a directory or not. 
     * @param fileName  The file or directory's name. 
     * @param path  The path type. 
     * @returns True if the given path is a directory or false if it is a file. 
     * @example
     * 
     * print( file.IsDir("helloworld.txt", "DATA") )
     * 
     * // Prints if ''helloworld.txt'' is a directory. 
     */
    function IsDir(fileName: string, path: string): boolean;
    
    /**
     * Attempts to open a file with the given mode. 
     * @param fileName  The files name. See {{LibraryFunction|file|Write}} for details on filename restrictions when writing to files. 
     * @param fileMode  The mode to open the file in. Possible values are:
     * * '''r''' - read mode
     * * '''w''' - write mode
     * * '''a''' - append mode
     * 
     * * '''rb''' - binary read mode
     * * '''wb''' - binary write mode
     * * '''ab''' - binary append mode 
     * @param path  The path type.
     * 
     * * "GAME" Structured like base folder (garrysmod/), searches all the mounted content (main folder, addons, mounted games etc)
     * * "LUA" or "lsv" - All Lua folders (lua/) including gamesmodes and addons
     * * "DATA" Data folder (garrysmod/data)
     * * "MOD" Strictly the game folder (garrysmod/), ignores mounting. 
     * @returns The opened file object, or nil if it failed to open due to it not existing or being used by another process. 
     */
    function Open(fileName: string, fileMode: string, path: string): File;
    
    /**
     * Returns the content of a file.
     * 
     * Beware of casing -- some filesystems are case-sensitive. SRCDS on Linux seems to force file/directory creation to lowercase, but will not modify read operations. 
     * @param fileName  The name of the file. 
     * @param path [="DATA"] The path used to look up the file.
     * * "GAME" Structured like base folder (garrysmod/), searches all the mounted content (main folder, addons, mounted games etc)
     * * "LUA" or "lsv" - All Lua folders (lua/) including gamesmodes and addons
     * * "DATA" Data folder (garrysmod/data)
     * * "MOD" Strictly the game folder (garrysmod/), ignores mounting.
     * 
     * It can also be a boolean:
     * * true = "GAME"
     * * false = "DATA" 
     * @returns The data from the file as a string, or nil if the file isn't found 
     * @example
     * 
     * print( file.Read("helloworld.txt", "DATA") )
     * 
     * // Prints out the content of ''helloworld.txt''. 
     */
    function Read(fileName: string, path?: string): string;
    
    /**
     * Attempts to rename a file with the given name to another given name.
     * 
     * This function is constrained to the data/ folder. 
     * @param orignalFileName  The original file or folder name. See {{LibraryFunction|file|Write}} for details on filename restrictions when writing to files. 
     * @param targetFileName  The target file or folder name. See {{LibraryFunction|file|Write}} for details on filename restrictions when writing to files. 
     * @returns True on success, false otherwise. 
     */
    function Rename(orignalFileName: string, targetFileName: string): boolean;
    
    /**
     * Returns the file's size in bytes. If the file is not found, returns -1. 
     * @param fileName  The file's name. 
     * @param path  The path type.
     * 
     * * "GAME" Structured like base folder (garrysmod/), searches all the mounted content (main folder, addons, mounted games etc)
     * * "LUA" or "lsv" - All Lua folders (lua/) including gamesmodes and addons
     * * "DATA" Data folder (garrysmod/data)
     * * "MOD" Strictly the game folder (garrysmod/), ignores mounting. 
     * @example
     * 
     * print( file.Size("helloworld.txt", "DATA") )
     * 
     * // Prints the size of ''helloworld.txt''. 
     */
    function Size(fileName: string, path: string): void;
    
    /**
     * Returns when the file or folder was lasted modified in Unix time. 
     * @param path  The '''file''' or '''folder''' path. 
     * @param gamePath  The game path to be used.
     * 
     * * "GAME" Structured like base folder (garrysmod/), searches all the mounted content (main folder, addons, mounted games etc)
     * * "LUA" or "lsv" - All Lua folders (lua/) including gamesmodes and addons
     * * "DATA" Data folder (garrysmod/data)
     * * "MOD" Strictly the game folder (garrysmod/), ignores mounting. 
     * @returns Seconds passed since Unix epoch. 
     * @example
     * 
     * print( os.date("%d.%m.%Y", file.Time("helloworld.txt", "DATA") ) )
     * 
     * // Prints out the last modified date of '''file''' helloworld.txt@example
     * 
     * print( os.date( "%d.%m.%Y", file.Time( "lua", "GAME" ) ) )
     * 
     * // Prints out the last modified date of '''folder''' lua 
     */
    function Time(path: string, gamePath: string): number;
    
    /**
     * Writes the given string to a file. Erases all previous data in the file. To add data without deleting previous data, use {{LibraryFunction|file|Append}}.
     * 
     * It is recommended to write only to lowercase file paths and names because some filesystems are case-sensitive. The Linux build of SRCDS seems to auto-lower directory and file names on write, but not on read. 
     * @param fileName  The name of the file being written into.
     * 
     * The filename '''must''' end with ".txt", ".jpg", ".png", ".vtf" or ".dat" and the path is relative to the '''data/''' folder.
     * Restricted symbols are: '''" :''' 
     * @param content  The content that will be written into the file. 
     * @example
     * 
     * file.Write( "helloworld.txt", "This is the content!" )
     * 
     * // Writes to '''data/helloworld.txt'''. 
     */
    function Write(fileName: string, content: string): void;
}

/**
 * This is the file object. It used used primarily to read or write binary data from files.
 * 
 * The object is returned by {{LibraryFunction|file|Open}}. 
 */
declare class File {
    /**
     * Dumps the file changes to disk and closes the file handle which makes the handle useless. 
     */
    public Close(): void;
    
    /**
     * Dumps the file changes to disk and saves the file. 
     */
    public Flush(): void;
    
    /**
     * Reads the specified amount of chars and returns them as a binary string. 
     * @param length  Reads the specified amount of chars. 
     * @returns data 
     * @example
     * 
     * function file.Read( filename, path )
     * 	if ( path == true ) then path = "GAME" end
     * 	if ( path == nil or path == false ) then path = "DATA" end
     * 
     * 	local f = file.Open( filename, "r", path )
     * 	if ( !f ) then return end
     * 	local str = f:Read( f:Size() )
     * 	f:Close()
     * 	return str or ""
     * end
     * 
     * // Adapted from extensions/file.lua 
     */
    public Read(length: number): string;
    
    /**
     * Reads one byte of the file and returns whether that byte was not 0. 
     * @returns val 
     */
    public ReadBool(): boolean;
    
    /**
     * Reads one unsigned 8-bit integer from the file. 
     * @returns The unsigned 8-bit integer from the file. 
     */
    public ReadByte(): number;
    
    /**
     * Reads 8 bytes from the file converts them to a double and returns them. 
     * @returns value 
     */
    public ReadDouble(): number;
    
    /**
     * Reads 4 bytes from the file converts them to a float and returns them. 
     * @returns value 
     */
    public ReadFloat(): number;
    
    /**
     * Returns the contents of the file from the current position up until the end of the current line. This function will not return more than 8192 characters. 
     * @returns The string of data from the read line. 
     */
    public ReadLine(): string;
    
    /**
     * Reads a signed 32-bit integer from the file. 
     * @returns A signed 32-bit integer 
     */
    public ReadLong(): number;
    
    /**
     * Reads a signed 16-bit integer from the file. 
     * @returns int16 
     */
    public ReadShort(): number;
    
    /**
     * Reads a unsigned 32-bit integer from the file. 
     * @returns An unsigned 32-bit integer 
     */
    public ReadULong(): number;
    
    /**
     * Reads a unsigned 16-bit integer from the file. 
     * @returns The 16-bit integer 
     */
    public ReadUShort(): number;
    
    /**
     * Sets the file pointer to the specified position. 
     * @param pos  Pointer position. 
     */
    public Seek(pos: number): void;
    
    /**
     * Returns the size of the file in bytes. 
     * @returns size 
     */
    public Size(): number;
    
    /**
     * Moves the file pointer by the specified amount of chars. 
     * @param amount  The amount of chars to skip, can be negative to skip backwards. 
     * @returns amount 
     */
    public Skip(amount: number): number;
    
    /**
     * Returns the current position of the file pointer. 
     * @returns pos 
     */
    public Tell(): number;
    
    /**
     * Writes the given string into the file. 
     * @param data  Binary data to write to the file. 
     */
    public Write(data: string): void;
    
    /**
     * Writes a boolean value to the file as one '''byte'''. 
     * @param bool  The bool to be written to the file. 
     */
    public WriteBool(bool: boolean): void;
    
    /**
     * Write an 8-bit unsigned integer to the file. 
     * @param uint8  The 8-bit unsigned integer to be written to the file. 
     */
    public WriteByte(uint8: number): void;
    
    /**
     * Writes a 8byte floating point double to the file. 
     * @param double  The double to be written to the file. 
     */
    public WriteDouble(double: number): void;
    
    /**
     * Writes a 4byte float to the file. 
     * @param float  The float to be written to the file. 
     */
    public WriteFloat(float: number): void;
    
    /**
     * Writes a 32-bit signed integer to the file. 
     * @param int32  The 32-bit signed integer to be written to the file. 
     */
    public WriteLong(int32: number): void;
    
    /**
     * Writes a 16-bit signed integer to the file. 
     * @param int16  The 16-bit signed integer to be written to the file. 
     */
    public WriteShort(int16: number): void;
    
    /**
     * Writes an unsigned 32-bit integer to the file. 
     * @param uint32  The unsigned 32-bit integer to be written to the file. 
     */
    public WriteULong(uint32: number): void;
    
    /**
     * Writes an unsigned 16-bit integer to the file. 
     * @param uint16  The unsigned 16-bit integer to the file. 
     */
    public WriteUShort(uint16: number): void;
}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * A panel used by Sandbox's Finger Poser tool. 
 */
declare class fingerposer extends ContextBase {

}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * A panel used by Sandbox's Finger Poser tool. 
 */
declare class FingerVar extends Panel {

}

/**
 * A window that in which you can place just about every other component and even another frame. 
 * @example
 * 
 * local frame = vgui.Create("Frame")
 * frame:SetSize( ScrW()*0.25, ScrH()*0.25 )
 * frame:Center()
 * frame:SetVisible( true )
 * frame:MakePopup()
 * 
 * // Creates a simple frame that's centered. 
 */
declare class Frame extends Panel {

}

/**
 * The frame blending library. 
 */
declare namespace frame_blend {
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Adds a frame to the blend. Calls {{LibraryFunction|frame_blend|CompleteFrame}} once enough frames have passed since last {{LibraryFunction|frame_blend|CompleteFrame}} call. 
     */
    function AddFrame(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Blends the frame(s). 
     */
    function BlendFrame(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Renders the frame onto internal render target. 
     */
    function CompleteFrame(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Actually draws the frame blend effect. 
     */
    function DrawPreview(): void;
    
    /**
     * Returns whether frame blend post processing effect is enabled or not. 
     * @returns Is frame blend enabled or not 
     */
    function IsActive(): boolean;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * {{Validate}}
     * 
     * Returns whether the current frame is the last frame? 
     * @returns Whether the current frame is the last frame? 
     */
    function IsLastFrame(): boolean;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * {{Validate}}
     * 
     * Returns amount of frames needed to render? 
     * @returns Amount of frames needed to render? 
     */
    function RenderableFrames(): number;
    
    /**
     * Returns whether we should skip frame or not 
     * @returns Should the frame be skipped or not 
     */
    function ShouldSkipFrame(): boolean;
}

/**
 * The game library provides functions to access various features in the game's engine, most of it's functions are related to controlling the map. 
 */
declare namespace game {
    /**
     * Adds a new ammo type to the game.
     * 
     * You can find a list of default ammo types [[Default_Ammo_Types|here]].
     * 
     * {{Warning|This function must be called shared or you will have unexpected problems.}}
     * **Note:**
     * >There is a limit of 128 ammo types, including the default ones.
     * 
     * **Bug [#1487](https://github.com/Facepunch/garrysmod-issues/issues/1487):**
     * >This will have unpredictable results when registering ammo types with the same name but different capitalisation. 
     * @param ammoData  The attributes of the ammo. See the {{Struct|AmmoData}}. 
     * @example
     * 
     * game.AddAmmoType({
     * 	name = "ammo_9mm_max",
     * 	dmgtype = DMG_BULLET,
     * 	tracer = TRACER_LINE,
     * 	plydmg = 0,
     * 	npcdmg = 0,
     * 	force = 2000,
     * 	minsplash = 10,
     * 	maxsplash = 5
     * })
     * 
     * // Add an ammo type 
     */
    function AddAmmoType(ammoData: AmmoData): void;
    
    /**
     * Registers a new decal. 
     * @param decalName  The name of the decal. 
     * @param materialName  The material to be used for the decal. May also be a list of material names, in which case a random material from that list will be chosen every time the decal is placed. 
     */
    function AddDecal(decalName: string, materialName: string): void;
    
    /**
     * Loads a particle file.
     * 
     * **Note:**
     * >You will still need to call this function clientside regardless if you create the particle effects serverside. 
     * @param particleFileName  The path of the file to add. Must be (file).pcf. 
     * @example
     * 
     * game.AddParticles( "particles/myparticles.pcf" )
     * 
     * // Adds the particle file named "myparticles.pcf" 
     */
    function AddParticles(particleFileName: string): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called by the engine to retrieve the ammo types. 
     * @returns All ammo types registered via {{LibraryFunction|game|AddAmmoType}}, sorted by its name value. 
     */
    function BuildAmmoTypes(): table;
    
    /**
     * If called serverside it will remove ALL entities which were not created by the map(not players or weapons held by players).
     * 
     * On the client it will remove decals, sounds, gibs, dead NPCs, and entities created via {{LibraryFunction|ents|CreateClientProp}}.
     * 
     * This function calls {{HookFunction|GM|PreCleanupMap}} before cleaning up the map and {{HookFunction|GM|PostCleanupMap}} after cleaning up the map.
     * 
     * **Bug [#1142](https://github.com/Facepunch/garrysmod-issues/issues/1142):**
     * >Calling this in a {{HookFunction|ENTITY|StartTouch}} or {{HookFunction|ENTITY|Touch}} hook will crash the game.
     * 
     * **Bug [#2874](https://github.com/Facepunch/garrysmod-issues/issues/2874):**
     * >Calling this destroys all BASS streams. 
     * @param dontSendToClients [=false] If set to true, don't run this functions on all clients. 
     * @param ExtraFilters [={}] Entity classes not to reset during cleanup. 
     */
    function CleanUpMap(dontSendToClients?: boolean, ExtraFilters?: table): void;
    
    /**
     * Runs a console command.
     * Make sure to add a newline ("\n") at the end of the command.
     * 
     * {{Warning|If you use data that were received from a client, you should avoid using this function because newline and semicolon (at least) allow the client to run arbitrary commands!
     * 
     * For safety, you are urged to prefer using {{GlobalFunction|RunConsoleCommand}} in this case.}} 
     * @param stringCommand  String containing the command and arguments to be ran. 
     * @example
     * 
     * game.ConsoleCommand("sv_gravity 400\n")
     * 
     * // Changes the gravity to 400 (default 600). 
     */
    function ConsoleCommand(stringCommand: string): void;
    
    /**
     * Returns the damage type of given ammo type. 
     * @param id  Ammo ID to retrieve the damage type of. Starts from 1. 
     * @returns See {{Enum|DMG}} 
     */
    function GetAmmoDamageType(id: number): DMG;
    
    /**
     * Returns the ammo bullet force that is applied when an entity is hit by a bullet of given ammo type. 
     * @param id  Ammo ID to retrieve the force of. Starts from 1. 
     * @returns 
     */
    function GetAmmoForce(id: number): number;
    
    /**
     * Returns the ammo type ID for given ammo type name.
     * 
     * See {{LibraryFunction|game|GetAmmoName}} for reverse. 
     * @param name  Name of the ammo type to look up ID of 
     * @returns The ammo type ID of given ammo type name, or -1 if not found 
     */
    function GetAmmoID(name: string): number;
    
    /**
     * Returns the real maximum amount of ammo of given ammo ID.
     * 
     * **Note:**
     * >Currently all ammo types have overridden maximum value of reserve ammo set to 9999. 
     * @param id  Ammo type ID 
     * @returns The maximum amount of reserve ammo a player can hold of this ammo type. 
     */
    function GetAmmoMax(id: number): number;
    
    /**
     * Returns the ammo name for given ammo type ID.
     * 
     * See {{LibraryFunction|game|GetAmmoID}} for reverse. 
     * @param id  Ammo ID to retrieve the name of. Starts from 1. 
     * @returns The name of given ammo type ID or nil if ammo type ID is invalid. 
     */
    function GetAmmoName(id: number): string;
    
    /**
     * Returns the damage given ammo type should do to NPCs. 
     * @param id  Ammo ID to retrieve the damage info of. Starts from 1. 
     * @returns 
     */
    function GetAmmoNPCDamage(id: number): number;
    
    /**
     * Returns the damage given ammo type should do to players. 
     * @param id  Ammo ID to retrieve the damage info of. Starts from 1. 
     * @returns 
     */
    function GetAmmoPlayerDamage(id: number): number;
    
    /**
     * Returns the counter of a Global State.
     * 
     * See [[Global States]] for more information. 
     * @param name  The name of the Global State to set. 
     * 
     * If the Global State by that name does not exist, it will be created.
     * 
     * See [[Global States]] for a list of default global states. 
     * @returns The value of the given Global State, 0 if the global state doesn't exist. 
     */
    function GetGlobalCounter(name: string): number;
    
    /**
     * Returns whether a Global State is off, active or dead ( inactive )
     * 
     * See [[Global States]] for more information. 
     * @param name  The name of the Global State to retrieve the state of. 
     * 
     * If the Global State by that name does not exist, '''GLOBAL_DEAD''' will be returned.
     * 
     * See [[Global States]] for a list of default global states. 
     * @returns The state of the Global State. See {{Enum|GLOBAL}} 
     */
    function GetGlobalState(name: string): GLOBAL;
    
    /**
     * Returns the public IP address and port of the current server. This will return the IP/port that you are connecting through when ran clientside.
     * **Note:**
     * >Returns "0.0.0.0:0" in singleplayer.
     * 
     * **Bug [#3001](https://github.com/Facepunch/garrysmod-issues/issues/3001):**
     * >Returns "0.0.0.0:''port''" on the server when called too early, including in {{HookFunction|GM|Initialize}} and {{HookFunction|GM|InitPostEntity}}. This bug seems to only happen the first time a server is launched, and will return the correct value after switching maps. 
     * @returns The IP address and port in the format "x.x.x.x:x" 
     */
    function GetIPAddress(): string;
    
    /**
     * Returns the name of the current map, without a file extension.
     * On the menu state, returns "menu". 
     * @returns The name of the current map, without a file extension. 
     * @example
     * 
     * print(game.GetMap())
     * 
     * // 
     */
    function GetMap(): string;
    
    /**
     * Returns the next map that would be loaded according to the file that is set by the mapcyclefile convar. 
     * @returns nextMap 
     */
    function GetMapNext(): string;
    
    /**
     * Returns the VBSP version of the current map. 
     * @returns mapVersion 
     */
    function GetMapVersion(): number;
    
    /**
     * Returns the difficulty level of the game.
     * 
     * '''TIP:''' You can use this function in your scripted NPCs or Nextbots to make them harder, however, it is a good idea to lock powerful attacks behind the highest difficulty instead of just increasing the health.
     * 
     * **Note:**
     * >Internally this is tied to the gamerules entity, so you'll have to wait to wait until {{HookFunction|GM|InitPostEntity}} is called to return the skill level 
     * @returns The difficulty level, Easy( 1 ), Normal( 2 ), Hard( 3 ). 
     */
    function GetSkillLevel(): number;
    
    /**
     * Returns the time scale of the game 
     * @returns The time scale 
     */
    function GetTimeScale(): number;
    
    /**
     * Returns the worldspawn entity. 
     * @returns The world 
     */
    function GetWorld(): Entity;
    
    /**
     * Returns true if the server is a dedicated server, false if it is a [[wikipedia:Listen server|Listen server]] or a singleplayer game.
     * 
     * **Bug [#1495](https://github.com/Facepunch/garrysmod-issues/issues/1495):**
     * >This always returns false on the client. 
     * @returns Is the server dedicated or not. 
     */
    function IsDedicated(): boolean;
    
    /**
     * Kicks a player from the server. This can be ran before the player has spawned. 
     * @param id  UserID or SteamID of the player to kick. 
     * @param reason [="No reason given"] Reason to display to the player. This can span across multiple lines. 
     */
    function KickID(id: string, reason?: string): void;
    
    /**
     * Loads the next map according to the nextlevel convar, or from the current mapcycle file set by the respective convar. 
     */
    function LoadNextMap(): void;
    
    /**
     * Returns the map load type of the current map.
     * 
     * After changing the map with the console command ''changelevel'', "newgame" is returned. With ''changelevel2'' (single player only), "transition" is returned. 
     * @returns The load type. Possible values are: "newgame", "loadgame", "transition", "background". 
     */
    function MapLoadType(): string;
    
    /**
     * Returns the maximum amount of players (including bots) that the server can have. 
     * @returns The maximum amount of players 
     */
    function MaxPlayers(): number;
    
    /**
     * Mounts a GMA addon from the disk. Any error models currently loaded that the mounted addon provides will be reloaded.
     * 
     * Can be used with {{LibraryFunction|steamworks|Download}} 
     * @param path  Location of the GMA file to mount, relative to the garrysmod directory 
     * @returns [success, If successful, a table of files that have been mounted] 
     * @example
     * 
     * steamworks.FileInfo( 104548572, function( result )
     * 	steamworks.Download( result.fileid, true, function( name )
     * 		game.MountGMA( name )
     * 	end) 
     * end)
     * 
     * // Downloads the Playable Piano addon and mounts the content. 
     * !TupleReturn
     */
    function MountGMA(path: string): [boolean, table];
    
    /**
     * Removes all the clientside ragdolls. 
     * @example
     * 
     * timer.Create( "removeRagdolls", 3, 0, function() game.RemoveRagdolls() end )
     * 
     * // This will remove all the client ragdolls every 3 secconds. 
     */
    function RemoveRagdolls(): void;
    
    /**
     * Sets the counter of a Global State.
     * 
     * See [[Global States]] for more information. 
     * @param name  The name of the Global State to set. 
     * 
     * If the Global State by that name does not exist, it will be created.
     * 
     * See [[Global States]] for a list of default global states. 
     * @param count  The value to set for that Global State. 
     */
    function SetGlobalCounter(name: string, count: number): void;
    
    /**
     * Sets whether a Global State is off, active or dead ( inactive )
     * 
     * See [[Global States]] for more information. 
     * @param name  The name of the Global State to set. 
     * 
     * If the Global State by that name does not exist, it will be created.
     * 
     * See [[Global States]] for a list of default global states. 
     * @param state  The state of the Global State. See {{Enum|GLOBAL}} 
     */
    function SetGlobalState(name: string, state: GLOBAL): void;
    
    /**
     * Sets the difficulty level of the game, can be retrieved with {{LibraryFunction|game|GetSkillLevel}}.
     * 
     * This will automatically change whenever the "skill" convar is modified serverside.
     * 
     * **Bug [#3491](https://github.com/Facepunch/garrysmod-issues/issues/3491):**
     * >This function will not work if the skill convar doesn't match the targeted value. To work around this, you must use RunConsoleCommand("skill", num) alongside this function. 
     * @param level  The difficulty level, Easy( 1 ), Normal( 2 ), Hard( 3 ). 
     */
    function SetSkillLevel(level: number): void;
    
    /**
     * Sets the time scale of the game.
     * 
     * This function is supposed to remove the need of using the host_timescale convar, which is cheat protected.
     * 
     * To slow down or speed up the movement of a specific player, use {{ClassFunction|Player|SetLaggedMovementValue}} instead.
     * 
     * **Note:**
     * >Like host_timescale, this method does not affect sounds, if you wish to change that, look into {{HookFunction|GM|EntityEmitSound}}. 
     * @param timeScale  The new timescale, minimum value is 0.001 and maximum is 5. 
     */
    function SetTimeScale(timeScale: number): void;
    
    /**
     * Returns whenever the current session is a single player game. 
     * @returns isSinglePlayer 
     */
    function SinglePlayer(): boolean;
    
    /**
     * Returns position the player should start from, this is not the same thing as spawn points, it is used to properly transit the player between maps. 
     * @returns startSpot 
     */
    function StartSpot(): Vector;
}

/**
 * Used to interface with the built in game events system. 
 */
declare namespace gameevent {
    /**
     * Add a game event listener. 
     * @param eventName  The event to listen to, travels through hooks with eventName as event.
     * 
     * List of valid events can be found [[Game_Events|here]]. 
     * @example
     * 
     * gameevent.Listen( "player_connect" )
     * hook.Add("player_connect", "AnnounceConnection", function( data )
     * 	for k,v in pairs( player.GetAll() ) do
     * 		v:ChatPrint( data.name .. " has connected to the server." )
     * 	end
     * end)
     * 
     * // Announce to everyone that a player has connected.@example
     * 
     * gameevent.Listen( "player_connect" )
     * hook.Add( "player_connect", "player_connect_example", function( data )
     * 	local name = data.name			// Same as Player:Nick()
     * 	local steamid = data.networkid	// Same as Player:SteamID()
     * 	local ip = data.address			// Same as Player:IPAddress()
     * 	local id = data.userid			// Same as Player:UserID()
     * 	local bot = data.bot			// Same as Player:IsBot()
     * 	local index = data.index		// Same as Player:EntIndex()
     * 
     * 	// Player has connected; this happens instantly after they join // do something..
     * 
     * end )
     * 
     * // This is a basic template for creating game_event listeners/hooks with the purpose of including all arguments / table variables for each game-event to make it easily known which values can be accessed and when: player_connect. player_connect is triggered at the exact moment they join the server.@example
     * 
     * gameevent.Listen( "player_disconnect" )
     * hook.Add( "player_disconnect", "player_disconnect_example", function( data )
     * 	local name = data.name			// Same as Player:Nick()
     * 	local steamid = data.networkid		// Same as Player:SteamID()
     * 	local id = data.userid			// Same as Player:UserID()
     * 	local bot = data.bot			// Same as Player:IsBot()
     * 	local reason = data.reason		// Text reason for disconnected such as "Kicked by console!", "Timed out!", etc...
     * 
     * 	// Player has disconnected - this is more reliable than PlayerDisconnect
     * 	
     * end )
     * 
     * // This is a basic template for creating game_event listeners/hooks with the purpose of including all arguments / table variables for each game-event to make it easily known which values can be accessed and when: player_disconnect. player_disconnect is triggered at the exact moment they disconnect from the server and will ALWAYS trigger regardless of whether they time-out, are kick/banned, client crashes, they click the X, they type quit in console, etc...@example
     * 
     * gameevent.Listen( "player_spawn" )
     * hook.Add( "player_spawn", "player_spawn_example", function( data ) 
     * 	local id = data.userid	// Same as Player:UserID()
     * 
     * 	// Called when the player spawns initially or respawns.
     * 
     * end )
     * 
     * // This is a basic template for creating game_event listeners/hooks with the purpose of including all arguments / table variables for each game-event to make it easily known which values can be accessed and when: player_spawn. player_spawn is triggered when the player initially spawns, or respawns.@example
     * 
     * gameevent.Listen( "player_hurt" )
     * hook.Add( "player_hurt", "player_hurt_example", function( data ) 
     * 	local health = data.health				// Remaining health after injury
     * 	local priority = SERVER and data.Priority or 5 		// Priority ??
     * 	local id = data.userid					// Same as Player:UserID()
     * 	local attackerid = data.attacker			// Same as Player:UserID() but it's the attacker id.
     * 
     * 	// Called when the player is injured or dies.
     * 
     * end )
     * 
     * // This is a basic template for creating game_event listeners/hooks with the purpose of including all arguments / table variables for each game-event to make it easily known which values can be accessed and when: player_hurt. player_hurt is triggered when the player is injured or dies.
     * 
     * The SERVER receives 1 extra value - Priority.@example
     * 
     * gameevent.Listen( "player_say" )
     * hook.Add( "player_say", "player_say_example", function( data ) 
     * 	local priority = SERVER and data.Priority or 1 	// Priority ??
     * 	local id = data.userid				// Same as Player:UserID() for the speaker
     * 	local text = data.text				// The written text.
     * 
     * 	// Called when a player writes text ( Called by the SERVER on the client AFTER the PlayerSay hook )
     * 
     * end )
     * 
     * // This is a basic template for creating game_event listeners/hooks with the purpose of including all arguments / table variables for each game-event to make it easily known which values can be accessed and when: player_hurt. player_hurt is triggered when the player is injured or dies.
     * 
     * The SERVER receives 1 extra value - Priority.@example
     * 
     * gameevent.Listen( "entity_killed" )
     * hook.Add( "entity_killed", "entity_killed_example", function( data ) 
     * 	local inflictor_index = data.entindex_inflictor		// Same as Weapon:EntIndex() / weapon used to kill victim
     * 	local attacker_index = data.entindex_attacker		// Same as Player/Entity:EntIndex() / person or entity who did the damage
     * 	local damagebits = data.damagebits			// DAMAGE_TYPE - use BIT operations to decipher damage types...
     * 	local victim_index = data.entindex_killed		// Same as Victim:EntIndex() / the entity / player victim
     * 
     * 	// Called when a Player or Entity is killed
     * 
     * end )
     * 
     * // This is a basic template for creating game_event listeners/hooks with the purpose of including all arguments / table variables for each game-event to make it easily known which values can be accessed and when: entity_killed. entity_killed is triggered when the player or entity dies. 
     */
    function Listen(eventName: string): void;
}

/**
 * The gamemode library provides functions relating to the gamemode system in Garry's Mod. 
 */
declare namespace gamemode {
    /**
     * Called by the engine to call a hook within the loaded gamemode.
     * 
     * The supplied event 'name' must be defined in the active gamemode. Otherwise, nothing will happen - not even hooks added with {{LibraryFunction|hook|Add}} will be called.
     * 
     * This is similar to {{LibraryFunction|hook|Run}} and {{LibraryFunction|hook|Call}}, except the hook library will call hooks created with hook.Add even if there is no corresponding gamemode function. 
     * @param name  The name of the hook to call. 
     * @param args  The arguments 
     * @returns The result of the hook function - can be up to 6 values. Returns false if the gamemode function doesn't exist (i.e. nothing happened), but remember - a hook can also return false. 
     * @example
     * 
     * local ply = Entity(1)
     * gamemode.Call( "AddDeathNotice", ply:GetName(), ply:Team(), nil, ply:GetName(), ply:Team() )
     * 
     * // Shows a suicide death notice in Sandbox. 
     */
    function Call(name: string, ...args: (any)[]): any;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  This returns the internally stored gamemode table. 
     * @param name  The name of the gamemode you want to get 
     * @returns The gamemode's table 
     */
    function Get(name: string): table;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called by the engine when a gamemode is being loaded. 
     * @param gm  Your GM table 
     * @param name  Name of your gamemode, lowercase, no spaces. 
     * @param derived  The gamemode name that your gamemode is derived from 
     */
    function Register(gm: table, name: string, derived: string): void;
}

/**
 * Hooks that are available for all gamemodes based on base gamemode.
 * 
 * See also: {{Struct|GM}} 
 */
declare class Gamemode {
    /**
     * Called when a map I/O event occurs. 
     * @param ent  Entity that receives the input 
     * @param input  The input name 
     * @param activator  Activator of the input 
     * @param caller  Caller of the input 
     * @param value  Data provided with the input 
     * @returns Return true to prevent this input from being processed. 
     * @example
     * 
     * hook.Add( "AcceptInput", "BlockLuaRun", function( ent, name, activator, caller, data )
     *     if ( ent:GetClass() == "lua_run" ) then
     *         return true
     *     end
     * end )
     * 
     * // This would block any input that the lua_run entity would receive. 
     */
    public AcceptInput(ent: Entity, input: string, activator: Entity, caller: Entity, value: any): boolean;
    
    /**
     * Adds a death notice entry.
     * 
     * **Bug [#2611](https://github.com/Facepunch/garrysmod-issues/issues/2611):**
     * >Issue=2611 
     * @param attacker  The name of the attacker 
     * @param attackerTeam  The team of the attacker 
     * @param inflictor  Class name of the entity inflicting the damage 
     * @param victim  Name of the victim 
     * @param victimTeam  Team of the victim 
     * @example
     * 
     * local ply = Entity(1)
     * GAMEMODE:AddDeathNotice( ply:GetName(), ply:Team(), nil, ply:GetName(), ply:Team() )
     * 
     * // Shows a suicide death notice in Sandbox. 
     */
    public AddDeathNotice(attacker: string, attackerTeam: number, inflictor: string, victim: string, victimTeam: number): void;
    
    /**
     * Allows you to adjust the mouse sensitivity. 
     * @param defaultSensitivity  The old sensitivity
     * 
     * In general it will be 0, which is equivalent to a sensitivity of 1. 
     * @returns A fraction of the normal sensitivity (0.5 would be half as sensitive), return -1 to not override. 
     */
    public AdjustMouseSensitivity(defaultSensitivity: number): number;
    
    /**
     * Called when a player tries to pick up something using the "use" key, return to override.
     * 
     * See {{HookFunction|GM|GravGunPickupAllowed}} for the Gravity Gun pickup variant. 
     * @param ply  The player trying to pick up something. 
     * @param ent  The Entity the player attempted to pick up. 
     * @returns Allow the player to pick up the entity or not. 
     * @example
     * 
     * local function up( ply, ent )
     *     return ply:IsAdmin()
     * end
     * hook.Add( "AllowPlayerPickup", "some_unique_name", up )
     * 
     * // Allows only admins to pick up things 
     */
    public AllowPlayerPickup(ply: Player, ent: Entity): boolean;
    
    /**
     * This hook is used to calculate animations for a player.
     * 
     * {{Warning|This hook must return the same values at the same time on both, client '''and''' server. On client for players to see the animations, on server for hit detection to work properly.}}
     * **Bug [#3322](https://github.com/Facepunch/garrysmod-issues/issues/3322):**
     * >This can return the incorrect velocity when on a moving object. 
     * @param ply  The player to apply the animation. 
     * @param vel  The velocity of the player. 
     * @returns [{{Enum|ACT}} for the activity the player should use. A nil return will be treated as ACT_INVALID., Sequence for the player to use. This takes precedence over the activity (the activity is still used for layering). Return -1 or nil to let the activity determine the sequence.] 
     * !TupleReturn
     */
    public CalcMainActivity(ply: Player, vel: Vector): [ACT, number];
    
    /**
     * Called from {{HookFunction|GM|CalcView}} when player is in driving a vehicle.
     * 
     * This hook may not be called in gamemodes that override {{HookFunction|GM|CalcView}}. 
     * @param veh  The vehicle the player is driving 
     * @param ply  The vehicle driver 
     * @param view  The view data containing players FOV, view position and angles, see {{Struct|CamData}} 
     * @returns The modified view table containing new values, see {{Struct|CamData}} 
     */
    public CalcVehicleView(veh: Vehicle, ply: Player, view: CamData): CamData;
    
    /**
     * Allows override of the default view. 
     * @param ply  The local player. 
     * @param origin  The player's view position. 
     * @param angles  The player's view angles. 
     * @param fov  Field of view. 
     * @param znear  Distance to near clipping plane. 
     * @param zfar  Distance to far clipping plane. 
     * @returns View data table. See {{Struct|CamData}} 
     * @example
     * 
     * local function MyCalcView(ply, pos, angles, fov)
     *     local view = {}
     *     view.origin = pos-(angles:Forward()*100)
     *     view.angles = angles
     *     view.fov = fov
     *     view.drawviewer = true
     *  
     *     return view
     * end
     *  
     * hook.Add( "CalcView", "MyCalcView", MyCalcView )
     * 
     * // Draws the LocalPlayer and sets the view behind. 
     */
    public CalcView(ply: Player, origin: Vector, angles: Angle, fov: number, znear: number, zfar: number): CamData;
    
    /**
     * Allows overriding the position and angle of the viewmodel. 
     * @param wep  The weapon entity 
     * @param vm  The viewmodel entity 
     * @param oldPos  Original position (before viewmodel bobbing and swaying) 
     * @param oldAng  Original angle (before viewmodel bobbing and swaying) 
     * @param pos  Current position 
     * @param ang  Current angle 
     * @returns [New position, New angle] 
     * !TupleReturn
     */
    public CalcViewModelView(wep: Weapon, vm: Entity, oldPos: Vector, oldAng: Angle, pos: Vector, ang: Angle): [Vector, Angle];
    
    /**
     * Called when a variable is edited on an Entity (called by Edit Properties... menu), to determine if the edit should be permitted.
     * 
     * See [[Editable_Entities|Editable entities]] for more details about the system. 
     * @param ent  The entity being edited 
     * @param ply  The player doing the editing 
     * @param key  The name of the variable 
     * @param val  The new value, as a string which will later be converted to its appropriate type 
     * @param editor  The edit table defined in {{ClassFunction|Entity|NetworkVar}} 
     * @returns Return true to allow editing 
     * @example
     * 
     * function GM:CanEditVariable( ent, ply, key, val, editor )
     *     return ply:IsAdmin()
     * end
     * 
     * // From base/gamemode/variable_edit.lua
     * 
     * Makes "Edit Properties..." right click property admin only 
     */
    public CanEditVariable(ent: Entity, ply: Player, key: string, val: string, editor: table): boolean;
    
    /**
     * Determines if the player can exit the vehicle. 
     * @param veh  The vehicle entity 
     * @param ply  The player 
     * @returns True if the player can exit the vehicle. 
     * @example
     * 
     * function GM:CanExitVehicle(veh, ply)
     *     return (veh:GetVelocity() == Vector(0,0,0))
     * end
     * 
     * // Only lets player exit vehicle if it is not in motion. 
     */
    public CanExitVehicle(veh: Vehicle, ply: Player): boolean;
    
    /**
     * Determines whether or not the player can enter the vehicle.
     * 
     * Called just before {{HookFunction|GM|PlayerEnteredVehicle}}. 
     * @param player  The player 
     * @param vehicle  The vehicle 
     * @param role 
     * @returns False if the player is not allowed to enter the vehicle. 
     */
    public CanPlayerEnterVehicle(player: Player, vehicle: Vehicle, role: number): boolean;
    
    /**
     * Determines if the player can kill themselves using the concommands "kill" or "explode". 
     * @param player  The player 
     * @returns True if they can suicide. 
     * @example
     * 
     * function GM:CanPlayerSuicide( ply )
     * 	return ply:IsSuperAdmin()
     * end
     * 
     * // Makes suiciding only accessible for super admins. 
     */
    public CanPlayerSuicide(player: Player): boolean;
    
    /**
     * Determines if the player can unfreeze the entity. 
     * @param player  The player 
     * @param entity  The entity 
     * @param phys  The physics object of the entity 
     * @returns True if they can unfreeze. 
     */
    public CanPlayerUnfreeze(player: Player, entity: Entity, phys: PhysObj): boolean;
    
    /**
     * Called each frame to record demos to video using {{Type|IVideoWriter}}. 
     * 
     * **Note:**
     * >This hook is called every frame regardless of whether or not a demo is being recorded 
     */
    public CaptureVideo(): void;
    
    /**
     * Called when a message is printed to the chat box. Note, that this isn't working with player messages even though there are arguments for it.
     * 
     * For player messages see {{HookFunction|GM|PlayerSay}} and {{HookFunction|GM|OnPlayerChat}} 
     * @param index  The index of the player. 
     * @param name  The name of the player. 
     * @param text  The text that is being sent. 
     * @param type  Chat filter type. Possible values are:
     * * joinleave - Player join and leave messages
     * * namechange - Player name change messages
     * * servermsg - Server messages such as convar changes
     * * teamchange - Team changes?
     * * chat - (Obsolete?) Player chat?
     * * none - A fallback value 
     * @returns Return true to suppress the chat message 
     * @example
     * 
     * hook.Add( "ChatText", "hide_joinleave", function( index, name, text, typ )
     * 	if ( typ == "joinleave" ) then return true end
     * end )
     * 
     * // Hides default join and leave messages in chat. 
     */
    public ChatText(index: number, name: string, text: string, type: string): boolean;
    
    /**
     * Called whenever the content of the user's chat input box is changed. 
     * @param text  The new contents of the input box 
     */
    public ChatTextChanged(text: string): void;
    
    /**
     * Called when a non local player connects to allow the Lua system to check the password.
     * 
     * The default behaviour in the base gamemodes emulates what would normally happen. If sv_password is set and its value matches the password passed in by the client - then they are allowed to join. If it isn't set it lets them in too. 
     * @param steamID64  The 64bit Steam ID of the joining player, use {{LibraryFunction|util|SteamIDFrom64}} to convert it to a "STEAM_0:" one. 
     * @param ipAddress  The IP of the connecting client 
     * @param svPassword  The current value of sv_password (the password set by the server) 
     * @param clPassword  The password provided by the client 
     * @param name  The name of the joining player 
     * @returns [If the hook returns false then the player is disconnected, If returning false in the first argument, then this should be the disconnect message. This will default to "#GameUI_ServerRejectBadPassword", which is "Bad Password." translated to the client's language.] 
     * @example
     * 
     * local allowed = {
     * 	["76561198012345678"] = true, // Me
     * 	["76561198123456789"] = true, // Friend #1
     * 	["76561198234567890"] = true, // Friend #2
     * }
     * 
     * hook.Add( "CheckPassword", "access_whitelist", function( steamID64 )
     * 	if not allowed[steamID64] then
     * 		return false, "#GameUI_ServerRejectLANRestrict"
     * 	end
     * end )
     * 
     * // A user access whitelist to the server
     * 
     * Available pre-defined messages can be found in ''../sourceengine/resource/gameui_english.txt'' files.
     * 
     * Suggested messages are ''#GameUI_ConnectionFailed'' and ''#GameUI_ServerRejectLANRestrict'' 
     * !TupleReturn
     */
    public CheckPassword(steamID64: string, ipAddress: string, svPassword: string, clPassword: string, name: string): [boolean, string];
    
    /**
     * Called when derma menus are closed with {{GlobalFunction|CloseDermaMenus}}. 
     */
    public CloseDermaMenus(): void;
    
    /**
     * Called whenever an entity becomes a clientside ragdoll.
     * 
     * See {{HookFunction|GM|CreateEntityRagdoll}} for serverside ragdolls. 
     * @param entity  The Entity that created the ragdoll 
     * @param ragdoll  The ragdoll being created. 
     * @example
     * 
     * hook.Add( "CreateClientsideRagdoll", "fade_out_corpses", function( entity, ragdoll )
     * 
     * 	ragdoll:SetSaveValue( "m_bFadingOut", true ) // Set the magic internal variable that will cause the ragdoll to immediately start fading out
     * 
     * end )
     * 
     * // A way of fade out a ragdoll easily. Idea from [https://github.com/ValveSoftware/source-sdk-2013/blob/0d8dceea4310fde5706b3ce1c70609d72a38efdf/mp/src/game/client/c_baseanimating.cpp#L533 here]. 
     */
    public CreateClientsideRagdoll(entity: Entity, ragdoll: Entity): void;
    
    /**
     * Called when a serverside ragdoll of an entity has been created.
     * 
     * See {{HookFunction|GM|CreateClientsideRagdoll}} for clientside ragdolls. 
     * @param owner  Entity that owns the ragdoll 
     * @param ragdoll  The ragdoll entity 
     */
    public CreateEntityRagdoll(owner: Entity, ragdoll: Entity): void;
    
    /**
     * Allows you to change the players movements before they're sent to the server.
     * 
     * **Note:**
     * >Due to this hook being clientside only, it could be overridden by the user allowing them to completely skip your logic, it is recommended to use {{HookFunction|GM|StartCommand}} in a shared file instead. 
     * @param cmd  The User Command data 
     * @returns Return true to:
     * * Disable Sandbox C menu "screen clicking"
     * * Disable Teammate nocollide (verification required)
     * * Prevent calling of C_BaseHLPlayer::CreateMove & subsequently C_BasePlayer::CreateMove 
     */
    public CreateMove(cmd: CUserCmd): boolean;
    
    /**
     * Teams are created within this hook using {{LibraryFunction|team|SetUp}}.
     * 
     * **Note:**
     * >This hook is called before {{HookFunction|GM|PreGamemodeLoaded}}. 
     */
    public CreateTeams(): void;
    
    /**
     * Called upon an animation event, this is the ideal place to call player animation functions such as {{ClassFunction|Player|AddVCDSequenceToGestureSlot}}, {{ClassFunction|Player|AnimRestartGesture}} and so on. 
     * @param ply  Player who is being animated 
     * @param event  Animation event. See {{Enum|PLAYERANIMEVENT}} 
     * @param data [=0] The data for the event. This is interpreted as an {{Enum|ACT}} by PLAYERANIMEVENT_CUSTOM and PLAYERANIMEVENT_CUSTOM_GESTURE, or a sequence by PLAYERANIMEVENT_CUSTOM_SEQUENCE. 
     * @returns The translated activity to send to the weapon. See {{Enum|ACT}}. Return ACT_INVALID if you don't want to send an activity. 
     * @example
     * 
     * function SWEP:PrimaryAttack()
     * 	self.Owner:DoCustomAnimEvent( PLAYERANIMEVENT_ATTACK_GRENADE , 123 )
     * 	self:SetNextPrimaryFire(CurTime() + 0.5 )
     * 	self:SetNextSecondaryFire(CurTime() + 0.5 )
     * end
     * 
     * function SWEP:SecondaryAttack()
     * 	self.Owner:DoCustomAnimEvent( PLAYERANIMEVENT_ATTACK_GRENADE , 321 )
     * 	self:SetNextPrimaryFire(CurTime() + 0.5 )
     * 	self:SetNextSecondaryFire(CurTime() + 0.5 )
     * end
     * 
     * hook.Add("DoAnimationEvent" , "AnimEventTest" , function( ply , event , data )
     * 	if event == PLAYERANIMEVENT_ATTACK_GRENADE then
     * 		if data == 123 then
     * 			ply:AnimRestartGesture( GESTURE_SLOT_GRENADE, ACT_GMOD_GESTURE_ITEM_THROW, true )
     * 			return ACT_INVALID
     * 		end
     * 		
     * 		if data == 321 then
     * 			ply:AnimRestartGesture( GESTURE_SLOT_GRENADE, ACT_GMOD_GESTURE_ITEM_DROP, true )
     * 			return ACT_INVALID
     * 		end
     * 	end
     * end)
     * 
     * // Fires a custom animation event with PLAYERANIMEVENT_ATTACK_GRENADE as the event, and 123 as the extra data on primary attack, and 321 as the secondary attack.
     * The player will play the item throw gesture on the primary attack, and the drop one on secondary. 
     */
    public DoAnimationEvent(ply: Player, event: PLAYERANIMEVENT, data?: ACT): ACT;
    
    /**
     * Handles the player's death.
     * 
     * {{ClassFunction|Player|Alive}} returns true when this is called and the player will be considered dead right after this hook.
     * 
     * See {{HookFunction|GM|PostPlayerDeath}} for a hook in which the player is 100% dead. See also {{HookFunction|GM|PlayerDeath}}. 
     * @param ply  The player 
     * @param attacker  The entity that killed the player 
     * @param dmg  Damage info 
     */
    public DoPlayerDeath(ply: Player, attacker: Entity, dmg: CTakeDamageInfo): void;
    
    /**
     * This hook is called every frame to draw all of the current death notices. 
     * @param x  X position to draw death notices as a ratio 
     * @param y  Y position to draw death notices as a ratio 
     */
    public DrawDeathNotice(x: number, y: number): void;
    
    /**
     * Called every frame before drawing the in-game monitors ( Breencast, in-game TVs, etc ), but doesn't seem to be doing anything, trying to render 2D or 3D elements fail.
     * [[Category:Render Hooks]] 
     */
    public DrawMonitors(): void;
    
    /**
     * Called after all other 2D draw hooks are called. Draws over all VGUI Panels and HUDs.
     * 
     * Unlike {{HookFunction|GM|HUDPaint}}, this hook is called with the game paused and while the Camera SWEP is equipped.
     * 
     * **Note:**
     * >Only be called when r_drawvgui is enabled
     * 
     * {{RenderingContext|Hook|2D}} 
     */
    public DrawOverlay(): void;
    
    /**
     * Allows you to override physgun beam drawing.
     * 
     * **Bug [#3294](https://github.com/Facepunch/garrysmod-issues/issues/3294):**
     * >This is still called when physgun_drawbeams is disabled. 
     * @param ply  Physgun owner 
     * @param physgun  The physgun 
     * @param enabled  Is the beam enabled 
     * @param target  Entity we are grabbing. This will be NULL if nothing is being held 
     * @param physBone  ID of the physics bone ({{Type|PhysObj}}) we are grabbing at. Use {{ClassFunction|Entity|TranslatePhysBoneToBone}} to translate to an actual bone. 
     * @param hitPos  Beam hit position relative to the physics bone ({{Type|PhysObj}}) we are grabbing. 
     * @returns Return false to hide default beam 
     * @example
     * 
     * hook.Add( "DrawPhysgunBeam", "test", function( ply, wep, enabled, target, bone, deltaPos )
     * 
     * 	// Draw any physgun effects here that are not the beam.
     * 
     * 	// Not "firing" the physgun? Don't draw anything.
     * 	if ( !enabled ) then return false end
     * 
     * 	local clr = Color( 255, 0, 0 )
     * 
     * 	// White when not "firing" physgun, this will not work with the "if" above
     * 	if ( !enabled ) then clr = Color( 255, 255, 255, 255 ) end
     * 
     * 	local hitpos = ply:GetEyeTrace().HitPos
     * 	if ( IsValid( target ) ) then
     * 		local mt = target:GetBoneMatrix( bone )
     * 		if ( target:TranslatePhysBoneToBone( bone ) >= 0 ) then
     * 			mt = target:GetBoneMatrix( target:TranslatePhysBoneToBone( bone ) )
     * 		end
     * 
     * 		hitpos = LocalToWorld( deltaPos, Angle( 0, 0, 0 ), mt:GetTranslation(), mt:GetAngles() )
     * 	end
     * 
     * 	local srcPos = wep:GetAttachment( 1 ).Pos
     * 	if ( !ply:ShouldDrawLocalPlayer() ) then
     * 		srcPos = ply:GetViewModel():GetAttachment( 1 ).Pos
     * 	end
     * 
     * 	render.DrawLine( srcPos, hitpos, clr )
     * 
     * 	return false // Hide original physics gun beam
     * 
     * end )
     * 
     * // Example code that will draw a direct line from the physgun to the target. 
     */
    public DrawPhysgunBeam(ply: Player, physgun: Weapon, enabled: boolean, target: Entity, physBone: number, hitPos: PhysObj): boolean;
    
    /**
     * Called right before an entity stops driving. Overriding this hook will cause it to not call {{LibraryFunction|drive|End}} and the player will not stop driving. 
     * @param ent  The entity being driven 
     * @param ply  The player driving the entity 
     */
    public EndEntityDriving(ent: Entity, ply: Player): void;
    
    /**
     * Called whenever a sound has been played. This will not be called clientside if the server played the sound without the client also calling {{ClassFunction|Entity|EmitSound}}.
     * 
     * **Bug [#1021](https://github.com/Facepunch/garrysmod-issues/issues/1021):**
     * >This is not called for scripted sequences. 
     * @param data  Information about the played sound. Changes done to this table can be applied by returning true from this hook.
     * See {{Struct|EmitSoundInfo}}. 
     * @returns Return true to apply all changes done to the data table.
     * Return false to prevent the sound from playing.
     * Return nil or nothing to play the sound without altering it. 
     * @example
     * 
     * hook.Add( "EntityEmitSound", "TimeWarpSounds", function( t )
     * 	
     * 	local p = t.Pitch
     * 	
     * 	if ( game.GetTimeScale() != 1 ) then
     * 		p = p * game.GetTimeScale()
     * 	end
     * 	
     * 	if ( GetConVarNumber( "host_timescale" ) != 1 && GetConVarNumber( "sv_cheats" ) >= 1 ) then
     * 		p = p * GetConVarNumber( "host_timescale" )
     * 	end
     * 	
     * 	if ( p != t.Pitch ) then
     * 		t.Pitch = math.Clamp( p, 0, 255 )
     * 		return true
     * 	end
     * 	
     * 	if ( CLIENT && engine.GetDemoPlaybackTimeScale() != 1 ) then
     * 		t.Pitch = math.Clamp( t.Pitch * engine.GetDemoPlaybackTimeScale(), 0, 255 )
     * 		return true
     * 	end
     * 	
     * end )
     * 
     * // Slows down all sounds to reflect {{LibraryFunction|game|SetTimeScale}}. 
     */
    public EntityEmitSound(data: EmitSoundInfo): boolean;
    
    /**
     * Called every time a bullet is fired from an entity.
     * 
     * {{Warning|This hook is called directly from {{ClassFunction|Entity|FireBullets}}. Due to this, you cannot call {{ClassFunction|Entity|FireBullets}} inside this hook or an infinite loop will occur crashing the game.}} 
     * @param ent  The entity that fired the bullet 
     * @param data  The bullet data. See {{Struct|Bullet}} 
     * @returns Return true to apply all changes done to the bullet table.
     * Return false to suppress the bullet. 
     */
    public EntityFireBullets(ent: Entity, data: Bullet): boolean;
    
    /**
     * Called when a key-value pair is set on an entity, either by the engine (for example when map spawns) or {{ClassFunction|Entity|SetKeyValue}}.
     * 
     * See {{HookFunction|ENTITY|KeyValue}} for a hook that works for scripted entities.
     * 
     * See {{HookFunction|WEAPON|KeyValue}} for a hook that works for scripted weapons. 
     * @param ent  Entity that the keyvalue is being set on 
     * @param key  Key of the key/value pair 
     * @param value  Value of the key/value pair 
     * @returns If set, the value of the key-value pair will be overridden by this string. 
     */
    public EntityKeyValue(ent: Entity, key: string, value: string): string;
    
    /**
     * Called when an NWVar is changed.
     * 
     * **Note:**
     * >Currently this hook only works for the NW2Var system (accessed by adding a 2 in between NW and Var for most NWVar functions), which will replace the original one at some point in the future
     * 
     * **Note:**
     * >This hook is fired before the client value is actually changed. Calling the GetNW function for the specified variable name within this hook will return the old value, not the current/updated one. 
     * @param ent  The owner entity of changed NWVar 
     * @param name  The name if changed NWVar 
     * @param oldval  The old value of the NWVar 
     * @param newval  The new value of the NWVar 
     * @example
     * 
     * hook.Add("EntityNetworkedVarChanged","printchange", print )
     * 
     * // Trigger a change!
     * Entity(1):SetNWString( "UserGroup", "owner" )
     * 
     * // Example usage of the hook. Prints out all NWVar changes. 
     */
    public EntityNetworkedVarChanged(ent: Entity, name: string, oldval: any, newval: any): void;
    
    /**
     * Called right before the removal of an entity. 
     * @param ent  Entity being removed 
     */
    public EntityRemoved(ent: Entity): void;
    
    /**
     * Called when an entity takes damage. You can modify all parts of the damage info in this hook. 
     * @param target  The entity taking damage 
     * @param dmg  Damage info 
     * @returns Return true to completely block the damage event 
     * @example
     * 
     * function GM:EntityTakeDamage( target, dmginfo )
     * 
     *     if ( target:IsPlayer() and dmginfo:IsExplosionDamage() ) then
     *  
     *         dmginfo:ScaleDamage( 0.5 ) // Damage is now half of what you would normally take.
     * 
     *     end
     * 
     * end
     * 
     * // Explosion damage is reduced to players only.@example
     * 
     * function GM:EntityTakeDamage( target, dmginfo )
     * 
     *     if ( target:IsVehicle() ) then
     *  
     *         local ply = target:GetDriver()
     *         if ( IsValid(ply) && dmginfo:GetDamage() > 1 ) then
     *             dmginfo:SetDamage(dmginfo:GetDamage() / 2)
     *             ply:TakeDamageInfo(dmginfo)
     *             dmginfo:SetDamage(0)
     *         
     *         end
     * 
     *     end
     * 
     * end
     * 
     * // Players in vehicles takes halved damage. 
     */
    public EntityTakeDamage(target: Entity, dmg: CTakeDamageInfo): boolean;
    
    /**
     * This hook polls the entity the player use action should be applied to. The default behavior of this hook is on [https://github.com/ValveSoftware/source-sdk-2013/blob/0d8dceea4310fde5706b3ce1c70609d72a38efdf/mp/src/game/shared/baseplayer_shared.cpp#L1068-L1270 CBasePlayer::FindUseEntity()]. 
     * @param ply  The player who initiated the use action. 
     * @param defaultEnt  The entity that was chosen by the engine. 
     * @returns The entity to use instead of default entity 
     */
    public FindUseEntity(ply: Player, defaultEnt: Entity): Entity;
    
    /**
     * Runs when user cancels/finishes typing. 
     * @example
     * 
     * hook.Add( "FinishChat", "ClientFinishTyping", function()
     * 	print( "User has closed the chatbox." )
     * end)
     * 
     * // Prints "User has closed the chatbox." when player closes their chat or sends the message. 
     */
    public FinishChat(): void;
    
    /**
     * Called after {{HookFunction|GM|Move}} , applies all the changes from the {{Type|CMoveData}} to the player. 
     * @param ply  Player 
     * @param mv  Movement data 
     * @returns Return true to suppress default engine behavior, i.e. declare that you have already moved the player according to the move data in a custom way. 
     */
    public FinishMove(ply: Player, mv: CMoveData): boolean;
    
    /**
     * Called to allow override of the default Derma skin for all panels.
     * 
     * **Note:**
     * >This hook is only called on Lua start up, changing its value (or adding new hooks) after it has been already called will not have any effect. 
     * @returns A '''case sensitive''' Derma skin name to be used as default, registered previously via {{LibraryFunction|derma|DefineSkin}}.
     * 
     * Returning nothing, nil or invalid name will make it fallback to the "Default" skin. 
     * @example
     * 
     * hook.Add( "ForceDermaSkin", "my_new_skin", function()
     * 	return "some_skin"
     * end )
     * 
     * // Example on how to use this hook. This will make that all panels 
     */
    public ForceDermaSkin(): string;
    
    /**
     * Called to refresh menu content once it has initialized or something has been mounted. 
     */
    public GameContentChanged(): void;
    
    /**
     * Called when a player takes damage from falling, allows to override the damage. 
     * @param ply  The player 
     * @param speed  The fall speed 
     * @returns New fall damage 
     * @example
     * 
     * function GM:GetFallDamage( ply, speed )
     *     return ( speed / 8 )
     * end
     * 
     * // The player takes a realistic amount of damage when they fall. Fall damage becomes the fall speed divided by 8.@example
     * 
     * function GM:GetFallDamage( ply, speed )
     * 	return math.max( 0, math.ceil( 0.2418*speed - 141.75 ) )
     * end
     * 
     * // Closely approximates the Counter-Strike: Source fall damage. 
     */
    public GetFallDamage(ply: Player, speed: number): number;
    
    /**
     * Called when the game(server) needs to update the text shown in the server browser as the gamemode. 
     * @returns The text to be shown in the server browser as the gamemode 
     */
    public GetGameDescription(): string;
    
    /**
     * Allows you to modify the Source Engine's motion blur shaders. 
     * @param horizontal  The amount of horizontal blur. 
     * @param vertical  The amount of vertical  blur. 
     * @param forward  The amount of forward/radial blur. 
     * @param rotational  The amount of rotational blur. 
     * @returns [New amount of horizontal blur., New amount of vertical blur., New amount of forward/radial blur., New amount of rotational blur.] 
     * @example
     * 
     * local function GetNewMotionBlurValues( h, v, f, r )
     *     f = f * math.sin( CurTime() * 5 )
     *     return h, v, f, r
     * end
     * hook.Add( "GetMotionBlurValues", "GetNewMotionBlurValues", GetNewMotionBlurValues )
     * 
     * // Makes your forward/radial blur pulse. 
     * !TupleReturn
     */
    public GetMotionBlurValues(horizontal: number, vertical: number, forward: number, rotational: number): [number, number, number, number];
    
    /**
     * Called to determine preferred carry angles for the entity. It works for both, +use pickup and gravity gun pickup.
     * 
     * {{Warning|Due to nature of the gravity gun coding in multiplayer, this hook '''MAY''' seem to not work ( but rest assured it does ), due to clientside prediction not knowing the carry angles. The +use pickup doesn't present this issue as it doesn't predict the player carrying the object clientside ( as you may notice by the prop lagging behind in multiplayer )}}
     * 
     * **Note:**
     * >This hook can '''not''' override preferred carry angles of props such as the sawblade and the harpoon. 
     * @param ent  The entity to generate carry angles for 
     * @returns The preferred carry angles for the entity. 
     * @example
     * 
     * hook.Add( "GetPreferredCarryAngles", "MyPreferredCarryAngles", function( ent )
     * 	return Angle( 0, 0, 0 )
     * end )
     * 
     * // Makes all pickupable entities default to Angle( 0, 0, 0 ) relatively to players aim direction. 
     */
    public GetPreferredCarryAngles(ent: Entity): Angle;
    
    /**
     * Returns the color for the given entity's team. This is used in chat and deathnotice text. 
     * @param ent  Entity 
     * @returns Team {{GlobalFunction|Color}} 
     */
    public GetTeamColor(ent: Entity): table;
    
    /**
     * Returns the team color for the given team index. 
     * @param team  Team index 
     * @returns Team {{GlobalFunction|Color}} 
     */
    public GetTeamNumColor(team: number): table;
    
    /**
     * Override this hook to disable/change ear-grabbing in your gamemode. 
     * @param ply  Player 
     */
    public GrabEarAnimation(ply: Player): void;
    
    /**
     * Called when an entity is released by a gravity gun. 
     * @param ply  Player who is wielding the gravity gun 
     * @param ent  The entity that has been dropped 
     */
    public GravGunOnDropped(ply: Player, ent: Entity): void;
    
    /**
     * Called when an entity is picked up by a gravity gun. 
     * @param ply  The player wielding the gravity gun 
     * @param ent  The entity that has been picked up by the gravity gun 
     */
    public GravGunOnPickedUp(ply: Player, ent: Entity): void;
    
    /**
     * Called every tick to poll whether a player is allowed to pick up an entity with the gravity gun or not.
     * 
     * See {{HookFunction|GM|AllowPlayerPickup}} for the +USE pickup variant.
     * 
     * Calls {{HookFunction|ENTITY|GravGunPickupAllowed}} on the entity being hovered every frame in Sandbox-derived gamemodes. 
     * @param ply  The player wielding the gravity gun 
     * @param ent  The entity the player is attempting to pick up 
     * @returns Return true to allow entity pick up 
     */
    public GravGunPickupAllowed(ply: Player, ent: Entity): boolean;
    
    /**
     * Called when an entity is about to be punted with the gravity gun (primary fire).
     * 
     * By default this function makes {{HookFunction|ENTITY|GravGunPunt}} work in Sandbox derived gamemmodes. 
     * @param ply  The player wielding the gravity gun 
     * @param ent  The entity the player is attempting to punt 
     * @returns Return true to allow and false to disallow. 
     */
    public GravGunPunt(ply: Player, ent: Entity): boolean;
    
    /**
     * Called when the mouse has been double clicked on any panel derived from CGModBase, such as the panel used by {{LibraryFunction|gui|EnableScreenClicker}} and the panel used by {{ClassFunction|Panel|ParentToHUD}}.
     * 
     * By default this hook calls {{HookFunction|GM|GUIMousePressed}}. 
     * @param mouseCode  The code of the mouse button pressed, see {{Enum|MOUSE}} 
     * @param aimVector  A normalized vector pointing in the direction the client has clicked 
     */
    public GUIMouseDoublePressed(mouseCode: MOUSE, aimVector: Vector): void;
    
    /**
     * Called whenever a players presses a mouse key on the context menu in Sandbox or on any panel derived from CGModBase, such as the panel used by {{LibraryFunction|gui|EnableScreenClicker}} and the panel used by {{ClassFunction|Panel|ParentToHUD}}.
     * 
     * See {{HookFunction|GM|VGUIMousePressed}} for a hook that is called on all VGUI elements. 
     * @param mouseCode  The key that the player pressed using {{Enum|MOUSE}}. 
     * @param aimVector  A normalized direction vector local to the camera. Internally, this is  {{LibraryFunction|gui|ScreenToVector}}( {{LibraryFunction|gui|MousePos}}() ). 
     */
    public GUIMousePressed(mouseCode: MOUSE, aimVector: Vector): void;
    
    /**
     * Called whenever a players releases a mouse key on the context menu in Sandbox or on any panel derived from CGModBase, such as the panel used by {{LibraryFunction|gui|EnableScreenClicker}} and the panel used by {{ClassFunction|Panel|ParentToHUD}}. 
     * @param mouseCode  The key the player released, see {{Enum|MOUSE}} 
     * @param aimVector  A normalized direction vector local to the camera. Internally this is  {{LibraryFunction|gui|ScreenToVector}}( {{LibraryFunction|gui|MousePos}}() ). 
     */
    public GUIMouseReleased(mouseCode: MOUSE, aimVector: Vector): void;
    
    /**
     * Allows to override player driving animations. 
     * @param ply  Player to process 
     * @returns Return true if we've changed/set the animation, false otherwise 
     */
    public HandlePlayerDriving(ply: Player): boolean;
    
    /**
     * Allows to override player crouch animations. 
     * @param ply  The player 
     * @param velocity  Players velocity 
     * @returns Return true if we've changed/set the animation, false otherwise 
     */
    public HandlePlayerDucking(ply: Player, velocity: number): boolean;
    
    /**
     * Allows to override player jumping animations. 
     * @param ply  The player 
     * @param velocity  Players velocity 
     * @returns Return true if we've changed/set the animation, false otherwise 
     */
    public HandlePlayerJumping(ply: Player, velocity: number): boolean;
    
    /**
     * Allows to override player landing animations. 
     * @param ply  The player 
     * @param velocity  Players velocity 
     * @param onGround  Was the player on ground? 
     * @returns Return true if we've changed/set the animation, false otherwise 
     */
    public HandlePlayerLanding(ply: Player, velocity: number, onGround: boolean): boolean;
    
    /**
     * Allows to override player noclip animations. 
     * @param ply  The player 
     * @param velocity  Players velocity 
     * @returns Return true if we've changed/set the animation, false otherwise 
     */
    public HandlePlayerNoClipping(ply: Player, velocity: number): boolean;
    
    /**
     * Allows to override player swimming animations. 
     * @param ply  The player 
     * @param velocity  Players velocity 
     * @returns Return true if we've changed/set the animation, false otherwise 
     */
    public HandlePlayerSwimming(ply: Player, velocity: number): boolean;
    
    /**
     * Allows to override player flying ( in mid-air, not noclipping ) animations. 
     * @param ply  The player 
     * @param velocity  Players velocity 
     * @returns Return true if we've changed/set the animation, false otherwise 
     */
    public HandlePlayerVaulting(ply: Player, velocity: number): boolean;
    
    /**
     * Hides the team selection panel. 
     */
    public HideTeam(): void;
    
    /**
     * Called when the client has picked up ammo. Override to disable default HUD notification. 
     * @param itemName  Name of the item (ammo) picked up 
     * @param amount  Amount of the item (ammo) picked up 
     */
    public HUDAmmoPickedUp(itemName: string, amount: number): void;
    
    /**
     * Renders the HUD pick-up history. Override to hide default or draw your own HUD. 
     */
    public HUDDrawPickupHistory(): void;
    
    /**
     * Called every frame to render the scoreboard.
     * 
     * It is recommended to use Derma and VGUI for this job instead of this hook. Called right after {{HookFunction|GM|HUDPaint}}.
     * 
     * {{RenderingContext|Hook|2D}} 
     */
    public HUDDrawScoreBoard(): void;
    
    /**
     * Called from {{HookFunction|GM|HUDPaint}} to draw player info when you hover over a player with your crosshair or mouse. 
     * @example
     * 
     * function GM:HUDDrawTargetID()
     * end
     * 
     * // This code will turn off the player and health appearing when you look at them. 
     */
    public HUDDrawTargetID(): void;
    
    /**
     * Called when an item has been picked up. Override to disable the default HUD notification. 
     * @param itemName  Name of the picked up item 
     */
    public HUDItemPickedUp(itemName: string): void;
    
    /**
     * Called whenever the HUD should be drawn. Called right before {{HookFunction|GM|HUDDrawScoreBoard}} and after {{HookFunction|GM|HUDPaintBackground}}.
     * 
     * Not called when the Camera SWEP is equipped. See also {{HookFunction|GM|DrawOverlay}}.
     * 
     * **Note:**
     * >Only be called when r_drawvgui is enabled and the game is not paused
     * 
     * {{RenderingContext|Hook|2D}} 
     * @example
     * 
     * hook.Add("HUDPaint", "HUDPaint_DrawABox", function()
     * 	surface.SetDrawColor( 0, 0, 0, 128 )
     * 	surface.DrawRect( 0, 0, 128, 128 )
     * end )
     * 
     * // Draws a transparent black box in the top left corner of the screen. 
     */
    public HUDPaint(): void;
    
    /**
     * Called after {{HookFunction|GM|HUDPaint}} when the HUD background is being drawn.
     * 
     * Things rendered in this hook will '''always''' appear behind things rendered in {{HookFunction|GM|HUDPaint}}.
     * 
     * {{RenderingContext|Hook|2D}} 
     */
    public HUDPaintBackground(): void;
    
    /**
     * Called when the Gamemode is about to draw a given element on the client's HUD (heads-up display).
     * 
     * **Note:**
     * >This hook is called HUNDREDS of times per second (more than 5 times per frame on average). You shouldn't be performing any computationally intensive operations. 
     * @param name  The name of the HUD element. You can find a full list of HUD elements for this hook [[HUD_Element_List|here]]. 
     * @returns Return false to prevent the given element from being drawn on the client's screen. 
     * @example
     * 
     * local hide = {
     * 	["CHudHealth"] = true,
     * 	["CHudBattery"] = true
     * }
     * 
     * hook.Add( "HUDShouldDraw", "HideHUD", function( name )
     * 	if ( hide[ name ] ) then return false end
     * 
     * 	// Don't return anything here, it may break other addons that rely on this hook.
     * end )
     * 
     * // Hides the default health and battery (armor) HUD elements, while still allowing the display of other elements to be controlled by other addons. 
     */
    public HUDShouldDraw(name: string): boolean;
    
    /**
     * Called when a weapon has been picked up. Override to disable the default HUD notification. 
     * @param weapon  The picked up weapon 
     */
    public HUDWeaponPickedUp(weapon: Weapon): void;
    
    /**
     * Called after the gamemode loads and starts. 
     * @example
     * 
     * function GM:Initialize()
     * 	print("hi" )
     * end
     * 
     * // That way you are overriding the default hook
     * // you can use hook.Add to make more functions get called on initialization
     * local function init()
     * 	print("Initialization hook called")
     * end
     * hook.Add( "Initialize", "some_unique_name", init )
     * 
     * // "hi" will be printed to the console when the gamemode initializes. 
     */
    public Initialize(): void;
    
    /**
     * Called after all the entities are initialized.
     * 
     * **Note:**
     * >At this point the client only knows about the entities that are within the spawnpoints' [https://en.wikipedia.org/wiki/Potentially_visible_set PVS]. For instance, if the server sends an entity that is not within this PVS, the client will receive it as NULL entity. 
     * @example
     * 
     * function GM:InitPostEntity()
     * 	print("All Entities have initialized" )
     * end
     * 
     * // That way you are overriding the default hook
     * // you can use hook.Add to make more functions get called when this event occurs
     * 
     * hook.Add( "InitPostEntity", "some_unique_name", function()
     * 	print("Initialization hook called")
     * end )
     * 
     * // Some message will be printed in the console when the entities initialize. 
     */
    public InitPostEntity(): void;
    
    /**
     * Allows you to modify the supplied User Command with mouse input. This could be used to make moving the mouse do funky things to view angles. 
     * @param cmd  User command 
     * @param x  The amount of mouse movement across the X axis this frame 
     * @param y  The amount of mouse movement across the Y axis this frame 
     * @param ang  The current view angle 
     * @returns Return true if we modified something 
     * @example
     * 
     * hook.Add("InputMouseApply", "FreezeTurning", function( cmd )
     * 	cmd:SetMouseX(0)
     * 	cmd:SetMouseY(0)
     * 	
     * 	return true
     * end)
     * 
     * // Prevents all players from turning with the mouse. 
     */
    public InputMouseApply(cmd: CUserCmd, x: number, y: number, ang: Angle): boolean;
    
    /**
     * Check if a player can spawn at a certain spawnpoint. 
     * @param ply  The player who is spawned 
     * @param spawnpoint  The spawnpoint entity (on the map) 
     * @param makeSuitable  If this is true, it'll kill any players blocking the spawnpoint 
     * @returns Return true to indicate that the spawnpoint is suitable (Allow for the player to spawn here), false to prevent spawning 
     * @example
     * 
     * function GM:IsSpawnpointSuitable( ply, spawnpointent, bMakeSuitable )
     * 
     * 	local Pos = spawnpointent:GetPos()
     * 
     * 	// Note that we're searching the default hull size here for a player in the way of our spawning.
     * 	// This seems pretty rough, seeing as our player's hull could be different.. but it should do the job
     * 	// (HL2DM kills everything within a 128 unit radius)
     * 	local Ents = ents.FindInBox( Pos + Vector( -16, -16, 0 ), Pos + Vector( 16, 16, 72 ) )
     * 
     * 	if ( ply:Team() == TEAM_SPECTATOR or ply:Team() == TEAM_UNASSIGNED ) then return true end
     * 
     * 	local Blockers = 0
     * 
     * 	for k, v in pairs( Ents ) do
     * 		if ( IsValid( v ) && v:GetClass() == "player" && v:Alive() ) then
     * 
     * 			Blockers = Blockers + 1
     * 
     * 			if ( bMakeSuitable ) then
     * 				v:Kill()
     * 			end
     * 
     * 		end
     * 	end
     * 
     * 	if ( bMakeSuitable ) then return true end
     * 	if ( Blockers > 0 ) then return false end
     * 	return true
     * 
     * end
     * 
     * // This will check if anyone is blocking the spawnpoint. If someone is, then it'll, depending on the bMakeSuitable value, kill the player, or return false. 
     */
    public IsSpawnpointSuitable(ply: Player, spawnpoint: Entity, makeSuitable: boolean): boolean;
    
    /**
     * Called whenever a player pressed a key included within the IN keys.
     * 
     * For a more general purpose function that handles all kinds of input, see {{HookFunction|GM|PlayerButtonDown}}
     * 
     * {{Warning|Due to this being a predicted hook, {{GlobalFunction|ParticleEffect}}s created only serverside from this hook will not be networked to the client, so make sure to do that on both realms}} 
     * @param ply  The player pressing the key. If running client-side, this will always be {{GlobalFunction|LocalPlayer}} 
     * @param key  The key that the player pressed using {{Enum|IN}}. 
     * @example
     * 
     * hook.Add( "KeyPress", "keypress_use_hi", function( ply, key )
     * 	if ( key == IN_USE ) then
     * 		print( "hi" )
     * 	end
     * end )
     * 
     * // "hi" will be printed to the console when the player presses the IN_USE (E) key.@example
     * 
     * hook.Add( "KeyPress", "keypress_jump_super", function( ply, key )
     *     if ( key == IN_JUMP ) then
     *         ply:SetVelocity( ply:GetVelocity() + Vector( 0, 0, 1000 ) )
     *     end
     * end )
     * 
     * // When a player tries to jump, they will be shot straight up in the air. 
     */
    public KeyPress(ply: Player, key: IN): void;
    
    /**
     * Runs when a IN key was released by a player.
     * 
     * For a more general purpose function that handles all kinds of input, see {{HookFunction|GM|PlayerButtonUp}} 
     * @param ply  The player releasing the key. If running client-side, this will always be {{GlobalFunction|LocalPlayer}} 
     * @param key  The key that the player released using {{Enum|IN}}. 
     * @example
     * 
     * function GM:KeyRelease( player, key )
     *     if ( key == IN_USE ) then
     *         print( "hi" )
     *     end
     * end
     * 
     * // "hi" will be printed to the console when the player releases the IN_USE (E) key. 
     */
    public KeyRelease(ply: Player, key: IN): void;
    
    /**
     * Called from gm_load when the game should load a map. 
     * @param data 
     * @param map 
     * @param timestamp 
     */
    public LoadGModSave(data: string, map: string, timestamp: number): void;
    
    /**
     * Called when ''menu.lua'' has finished loading. 
     */
    public MenuStart(): void;
    
    /**
     * Override this gamemode function to disable mouth movement when talking on voice chat. 
     * @param ply  Player in question 
     */
    public MouthMoveAnimation(ply: Player): void;
    
    /**
     * The Move hook is called for you to manipulate the player's MoveData. 
     * 
     * You shouldn't adjust the player's position in any way in the move hook. This is because due to prediction errors, the netcode might run the move hook multiple times as packets arrive late. Therefore you should only adjust the movedata construct in this hook.
     * 
     * Generally you shouldn't have to use this hook - if you want to make a custom move type you should look at the drive system.
     * 
     * This hook is called after {{HookFunction|GM|PlayerTick}}. 
     * @param ply  Player 
     * @param mv  Movement information 
     * @returns Return true to suppress default engine action 
     * @example
     * 
     * function GM:Move( ply, mv )
     * 
     * 	//
     * 	// Set up a speed, go faster if shift is held down
     * 	//
     * 	local speed = 0.0005 * FrameTime()
     * 	if ( mv:KeyDown( IN_SPEED ) ) then speed = 0.005 * FrameTime() end
     * 
     * 	//
     * 	// Get information from the movedata
     * 	//
     * 	local ang = mv:GetMoveAngles()
     * 	local pos = mv:GetOrigin()
     * 	local vel = mv:GetVelocity()
     * 
     * 	//
     * 	// Add velocities. This can seem complicated. On the first line
     * 	// we're basically saying get the forward vector, then multiply it
     * 	// by our forward speed (which will be > 0 if we're holding W, < 0 if we're
     * 	// holding S and 0 if we're holding neither) - and add that to velocity.
     * 	// We do that for right and up too, which gives us our free movement.
     * 	//
     * 	vel = vel + ang:Forward() * mv:GetForwardSpeed() * speed
     * 	vel = vel + ang:Right() * mv:GetSideSpeed() * speed
     * 	vel = vel + ang:Up() * mv:GetUpSpeed() * speed
     * 
     * 	//
     * 	// We don't want our velocity to get out of hand so we apply
     * 	// a little bit of air resistance. If no keys are down we apply
     * 	// more resistance so we slow down more.
     * 	//
     * 	if ( math.abs(mv:GetForwardSpeed()) + math.abs(mv:GetSideSpeed()) + math.abs(mv:GetUpSpeed()) < 0.1 ) then
     * 	vel = vel * 0.90
     * 	else
     * 	vel = vel * 0.99
     * 	end
     * 
     * 	//
     * 	// Add the velocity to the position (this is the movement)
     * 	//
     * 	pos = pos + vel
     * 
     * 	//
     * 	// We don't set the newly calculated values on the entity itself
     * 	// we instead store them in the movedata. They should get applied
     * 	// in the FinishMove hook.
     * 	//
     * 	mv:SetVelocity( vel )
     * 	mv:SetOrigin( pos )
     * 
     * 	//
     * 	// Return true to not use the default behavior
     * 	//
     * 	return true
     * 
     * end
     * 
     * // A noclip move type 
     */
    public Move(ply: Player, mv: CMoveData): boolean;
    
    /**
     * Returning true in this hook will cause it to render depth buffers defined with {{LibraryFunction|render|GetResolvedFullFrameDepth}}. 
     * @returns Render depth buffer 
     */
    public NeedsDepthPass(): boolean;
    
    /**
     * Called when an entity has been created over the network. 
     * @param ent  Created entity 
     */
    public NetworkEntityCreated(ent: Entity): void;
    
    /**
     * Called when a player has been validated by Steam. 
     * @param name  Player name 
     * @param steamID  Player SteamID 
     */
    public NetworkIDValidated(name: string, steamID: string): void;
    
    /**
     * Called whenever this entity changes its transmission state for this {{GlobalFunction|LocalPlayer}}, such as exiting or re entering the PVS.
     * 
     * **Note:**
     * >This is the best place to handle the reset of {{ClassFunction|Entity|SetPredictable}}, as this would be usually called when the player lags and requests a full packet update
     * 
     * **Note:**
     * >When the entity stops transmitting, {{ClassFunction|Entity|IsDormant}} will only return true '''after''' this hook 
     * @param ent  The entity that changed its transmission state. 
     * @param shouldtransmit  True if we started transmitting to this client and false if we stopped. 
     */
    public NotifyShouldTransmit(ent: Entity, shouldtransmit: boolean): void;
    
    /**
     * Called when a player has achieved an achievement. You can get the name and other information from an achievement ID with the {{Type|achievements}} library. 
     * @param ply  The player that earned the achievement 
     * @param achievement  The index of the achievement 
     */
    public OnAchievementAchieved(ply: Player, achievement: number): void;
    
    /**
     * Called when the local player presses TAB while having their chatbox opened. 
     * @param text  The currently typed into chatbox text 
     * @returns What should be placed into the chatbox instead of what currently is when player presses tab 
     */
    public OnChatTab(text: string): string;
    
    /**
     * Called when the context menu was closed. 
     */
    public OnContextMenuClose(): void;
    
    /**
     * Called when the context menu is opened. 
     */
    public OnContextMenuOpen(): void;
    
    /**
     * Called when a player has been hurt by an explosion. Override to disable default sound effect. 
     * @param ply  Player who has been hurt 
     * @param dmginfo  Damage info from explsion 
     * @example
     * 
     * hook.Add( "OnDamagedByExplosion", "DisableSound", function()
     * 	return true
     * end )
     * 
     * // Disables the high pitched ringing sound effect.
     * 
     * Note that this hook does not have a return value, and instead by default it calls {{ClassFunction|Player|SetDSP}}( 35, false ) in the base gamemode. 
     */
    public OnDamagedByExplosion(ply: Player, dmginfo: CTakeDamageInfo): void;
    
    /**
     * Called right after the Entity has been made visible to Lua.
     * 
     * Invalid NPCs passed through this hook are used by the engine to precache things like models and sounds, so always check their validity with {{GlobalFunction|IsValid}}.
     * 
     * {{Warning|Removing the created entity during this event can lead to unexpected problems. Use {{LibraryFunction|timer|Simple}}( 0, .... ) to safely remove the entity.}} 
     * @param entity  The entity 
     * @example
     * 
     * function GM:OnEntityCreated( ent )
     * 	if ( ent:GetClass() == "prop_physics" ) then
     * 		ent:EmitSound( "vo/npc/male01/no02.wav" )
     * 	end
     * end
     * 
     * // When a prop spawns it yells.@example
     * 
     * local TrackedEnts =
     * {
     * 	[ "prop_physics" ] = true,
     * 	[ "prop_ragdoll" ] = true
     * }
     * 
     * local EntList = {}
     * 
     * hook.Add( "OnEntityCreated", "SoftEntList", function( ent )
     * 	if ( not ( ent:IsValid() and TrackedEnts[ ent:GetClass() ] ) ) then return end
     * 	
     * 	EntList[ ent:EntIndex() ] = ent
     * end )
     * 
     * // Adds all props and ragdolls into a list. More efficient alternative to looping over ents.GetAll(). 
     */
    public OnEntityCreated(entity: Entity): void;
    
    /**
     * Called when the gamemode is loaded.
     * 
     * {{GlobalFunction|LocalPlayer}}() returns NULL at the time this is run. 
     */
    public OnGamemodeLoaded(): void;
    
    /**
     * Called when a Lua error occurs, only works in the Menu realm.
     * 
     * {{Warning|Modify menu state Lua code at your own risk!}} 
     * @param error  The error that occurred. 
     * @param realm  Where the Lua error took place 
     * @param name  Title of the addon that is creating the Lua errors 
     * @param id  Steam Workshop ID of the addon creating Lua errors, if it is an addon. 
     * @example
     * 
     * hook.Add( "OnLuaError", "MenuErrorHandler", function( str, realm, addontitle, addonid )
     * 
     * 	local text = "Something is creating script errors"
     * 
     * 	//
     * 	// This error is caused by a specific addon
     * 	//
     * 	if ( isstring( addonid ) ) then
     * 
     * 		//
     * 		// Down Vote
     * 		//
     * 		// steamworks.Vote( addonid, false )
     * 
     * 		//
     * 		// Disable Naughty Addon
     * 		//
     * 		//timer.Simple( 5, function()
     * 		//	MsgN( "Disabling addon '", addontitle, "' due to lua errors" )
     * 		//	steamworks.SetShouldMountAddon( addonid, false )
     * 		//	steamworks.ApplyAddons()
     * 		//end )
     * 
     * 		text = "The addon \"" .. addontitle .. "\" is creating errors, check the console for details"
     * 
     * 	end
     * 
     * 	if  ( addonid == nil ) then addonid = 0 end
     * 
     * 	if ( Errors[ addonid ] ) then
     * 
     * 		Errors[ addonid ].times	= Errors[ addonid ].times + 1
     * 		Errors[ addonid ].last	= SysTime()
     * 
     * 		return
     * 	end
     * 
     * 	local error =
     * 	{
     * 		first	= SysTime(),
     * 		last	= SysTime(),
     * 		times	= 1,
     * 		title	= addontitle,
     * 		x		= 32,
     * 		text	= text
     * 	}
     * 
     * 	Errors[ addonid ] = error
     * 
     * end )
     * 
     * // Code from garrysmod/lua/menu/errors.lua 
     */
    public OnLuaError(error: string, realm: number, name: string, id: number): void;
    
    /**
     * Called whenever an NPC is killed. 
     * @param npc  The killed NPC 
     * @param attacker  The NPCs attacker, the entity that gets the kill credit, for example a player or an NPC. 
     * @param inflictor  Death inflictor. The entity that did the killing. Not necessarily a weapon. 
     */
    public OnNPCKilled(npc: NPC, attacker: Entity, inflictor: Entity): void;
    
    /**
     * Called when a player freezes an entity with the physgun.
     * 
     * **Bug [#723](https://github.com/Facepunch/garrysmod-issues/issues/723):**
     * >This is not called for players or NPCs being held with the physgun. 
     * @param weapon  The weapon that was used to freeze the entity. 
     * @param physobj  Physics object of the entity. 
     * @param ent  The target entity. 
     * @param ply  The player who tried to freeze the entity. 
     * @returns Allows you to override whether the player can freeze the entity 
     * @example
     * 
     * hook.Add( "OnPhysgunFreeze", "PhysFreeze", function( weapon, phys, ent, ply )
     * 
     *   	if ( !ply:IsAdmin() ) then
     * 
     * 		return false
     * 
     * 	end
     * 
     * end )
     * 
     * // Only allows admins to freeze things. 
     */
    public OnPhysgunFreeze(weapon: Entity, physobj: PhysObj, ent: Entity, ply: Player): boolean;
    
    /**
     * Called when a player reloads with the physgun. Override this to disable default unfreezing behavior. 
     * @param physgun  The physgun in question 
     * @param ply  The player wielding the physgun 
     * @returns Whether the player can reload with the physgun or not 
     */
    public OnPhysgunReload(physgun: Weapon, ply: Player): boolean;
    
    /**
     * Called when a player has changed team using {{HookFunction|GM|PlayerJoinTeam}}.
     * 
     * {{Warning|This hook will not work with {{LibraryFunction|hook|Add}} and it is only called manually from {{HookFunction|GM|PlayerJoinTeam}} by the base gamemode}} 
     * @param ply  Player who has changed team 
     * @param oldTeam  Index of the team the player was originally in 
     * @param newTeam  Index of the team the player has changed to 
     */
    public OnPlayerChangedTeam(ply: Player, oldTeam: number, newTeam: number): void;
    
    /**
     * Called whenever a player sends a chat message. For the serverside equivalent, see {{HookFunction|GM|PlayerSay}}. 
     * @param ply  The player 
     * @param text  The message's text 
     * @param teamChat  Is the player typing in team chat? 
     * @param isDead  Is the player dead? 
     * @returns Should the message be suppressed? 
     * @example
     * 
     * function GM:OnPlayerChat( player, strText, bTeamOnly, bPlayerIsDead )
     *  
     * 	//
     * 	// I've made this all look more complicated than it is. Here's the easy version
     * 	//
     * 	// chat.AddText( player, Color( 255, 255, 255 ), ": ", strText )
     * 	//
     * 
     * 	local tab = {}
     * 
     * 	if ( bPlayerIsDead ) then
     * 		table.insert( tab, Color( 255, 30, 40 ) )
     * 		table.insert( tab, "*DEAD* " )
     * 	end
     * 
     * 	if ( bTeamOnly ) then
     * 		table.insert( tab, Color( 30, 160, 40 ) )
     * 		table.insert( tab, "(TEAM) " )
     * 	end
     * 
     * 	if ( IsValid( player ) ) then
     * 		table.insert( tab, player )
     * 	else
     * 		table.insert( tab, "Console" )
     * 	end
     * 
     * 	table.insert( tab, Color( 255, 255, 255 ) )
     * 	table.insert( tab, ": "..strText )
     * 
     * 	chat.AddText( unpack(tab) )
     * 
     * 	return true
     *  
     * end
     * 
     * // Code from base gamemode. See garrysmod/gamemodes/base/gamemode/cl_init.lua#L139@example
     * 
     * hook.Add( "OnPlayerChat", "HelloCommand", function( ply, strText, bTeam, bDead ) 
     *     if ( ply != LocalPlayer() ) then return end
     * 
     * 	strText = string.lower( strText ) // make the string lower case
     * 
     * 	if (strText == "/hello") then // if the player typed /hello then
     * 		print("Hello world!") // print Hello world to the console
     * 		return true // this suppresses the message from being shown
     * 	end
     * 
     * end )
     * 
     * // How you could create a clientside only chat command. 
     */
    public OnPlayerChat(ply: Player, text: string, teamChat: boolean, isDead: boolean): boolean;
    
    /**
     * Called when a player makes contact with the ground. 
     * @param player  Player 
     * @param inWater  Did the player land in water? 
     * @param onFloater  Did the player land on an object floating in the water? 
     * @param speed  The speed at which the player hit the ground 
     * @returns Return true to suppress default action 
     * @example
     * 
     * function GM:OnPlayerHitGround( ply, inWater, onFloater, speed )
     *     if speed > 1000 && !inWater then
     *         local exp = ents.Create("env_explosion")
     *         exp:SetPos(ply:GetPos())
     *         exp:Spawn()
     *         exp:SetKeyValue("iMagnitude", "0")
     *         exp:Fire("Explode", 0, 0)
     *  
     *         ply:Kill()
     *     end
     * end
     * 
     * // Explode players when they hit the ground too hard. 
     */
    public OnPlayerHitGround(player: Entity, inWater: boolean, onFloater: boolean, speed: number): boolean;
    
    /**
     * Called when gamemode has been reloaded by auto refresh.
     * 
     * **Note:**
     * >It seems that this event can be triggered more than once for a single refresh event. 
     */
    public OnReloaded(): void;
    
    /**
     * Called when a player releases the "+menu" bind on their keyboard, which is bound to Q by default. 
     */
    public OnSpawnMenuClose(): void;
    
    /**
     * Called when a player presses the "+menu" bind on their keyboard, which is bound to Q by default. 
     * @returns Allow the player to open the spawn menu or not. 
     * @example
     * 
     * local allowed = {
     * 	["STEAM_0:0:00000000"] = true,
     * 	["STEAM_0:0:10000000"] = true
     * }
     * 
     * hook.Add( "OnSpawnMenuOpen", "SpawnMenuWhitelist", function()
     * 	if ( !allowed[ LocalPlayer():SteamID() ] ) then
     * 		return false
     * 	end
     * end )
     * 
     * // Only allow the people you want to open the spawn menu. 
     */
    public OnSpawnMenuOpen(): boolean;
    
    /**
     * Called when a {{Type|DTextEntry}} gets focus.
     * 
     * This hook is run from {{ClassFunction|DTextEntry|OnGetFocus}} and {{HookFunction|PANEL|OnMousePressed}} of {{Type|DTextEntry}}. 
     * @param panel  The panel that got focus 
     */
    public OnTextEntryGetFocus(panel: Panel): void;
    
    /**
     * Called when DTextEntry loses focus. 
     * @param panel  The panel that lost focus 
     */
    public OnTextEntryLoseFocus(panel: Panel): void;
    
    /**
     * Called when the player undoes something. 
     * @param name  The name of the undo action 
     * @param customText  The custom text for the undo, set by {{LibraryFunction|undo|SetCustomUndoText}} 
     * @example
     * 
     * function GM:OnUndo( name, customText )
     *      if customText != nil then
     *           MsgN( "Undone " .. customText )
     *      else
     *           MsgN( "Undone " .. name )
     *      end
     * end
     * 
     * // Print a message when the player undoes something. 
     */
    public OnUndo(name: string, customText: string): void;
    
    /**
     * Called when the player changes their weapon to another one - and their viewmodel model changes.
     * 
     * **Bug [#2473](https://github.com/Facepunch/garrysmod-issues/issues/2473):**
     * >This is not always called clientside. 
     * @param viewmodel  The viewmodel that is changing 
     * @param oldModel  The old model 
     * @param newModel  The new model 
     */
    public OnViewModelChanged(viewmodel: Entity, oldModel: string, newModel: string): void;
    
    /**
     * Called when a player drops an entity with the Physgun. 
     * @param ply  The player who dropped an entitiy 
     * @param ent  The dropped entity 
     */
    public PhysgunDrop(ply: Player, ent: Entity): void;
    
    /**
     * Called whenever a player picks up an entity with the Physgun. 
     * @param player  The player that is picking up using the phys gun. 
     * @param entity  The entity that is being picked up. 
     * @returns Returns whether the player can pick up the entity or not. 
     * @example
     * 
     * local function PlayerPickup(ply, ent)
     * 	if ( ply:IsAdmin() and ent:GetClass():lower() == "player" ) then
     * 		return true
     * 	end
     * end
     * hook.Add("PhysgunPickup", "Allow Player Pickup", PlayerPickup)
     * 
     * // Allows Admins to pick up players. 
     */
    public PhysgunPickup(player: Player, entity: Entity): boolean;
    
    /**
     * Called once when the player is authenticated.
     * 
     * **Bug [#3026](https://github.com/Facepunch/garrysmod-issues/issues/3026):**
     * >{{GlobalFunction|CurTime}} returns 0 in this hook. 
     * @param ply  The player 
     * @param steamid  The player's SteamID 
     * @param uniqueid  The player's UniqueID 
     * @example
     * 
     * function GM:PlayerAuthed( ply, steamid, uniqueid )
     *     print( ply:Name() .. " has been authenticated as " .. steamid .. "." )
     * end
     * 
     * // 
     */
    public PlayerAuthed(ply: Player, steamid: string, uniqueid: string): void;
    
    /**
     * Runs when a bind has been pressed. Allows to block commands.
     * 
     * **Note:**
     * >By using the "alias" console command, this hook can be effectively circumvented
     * 
     * **Note:**
     * >To stop the user from using +attack, +left and any other movement commands of the sort, please look into using {{HookFunction|GM|StartCommand}} instead
     * 
     * **Bug [#1176](https://github.com/Facepunch/garrysmod-issues/issues/1176):**
     * >This is not called when the key is released (the third argument will always be true).
     * 
     * **Bug [#2888](https://github.com/Facepunch/garrysmod-issues/issues/2888):**
     * >This does not run for function keys binds (F1-F12). 
     * @param ply  The player who used the command; this will always be equal to {{GlobalFunction|LocalPlayer}} 
     * @param bind  The bind command 
     * @param pressed  If the bind was activated or deactivated 
     * @returns Return true to prevent the bind 
     * @example
     * 
     * function GM:PlayerBindPress( ply, bind, pressed )
     * 	//To block more commands, you could add another line similar to
     * 	//the one below, just replace the command
     * 	if ( string.find( bind, "impulse 100" ) ) then return true end
     * end
     * 
     * // Prevents players from using flashlight. 
     */
    public PlayerBindPress(ply: Player, bind: string, pressed: boolean): boolean;
    
    /**
     * Called when a player presses a button. 
     * @param ply  Player who pressed the button 
     * @param button  The button, see {{Enum|BUTTON_CODE}} 
     */
    public PlayerButtonDown(ply: Player, button: BUTTON_CODE): void;
    
    /**
     * Called when a player releases a button. 
     * @param ply  Player who released the button 
     * @param button  The button, see {{Enum|BUTTON_CODE}} 
     */
    public PlayerButtonUp(ply: Player, button: BUTTON_CODE): void;
    
    /**
     * Decides whether a player can hear another player using voice chat. 
     * @param listener  The listening player. 
     * @param talker  The talking player. 
     * @returns [Return true if the listener should hear the talker, false if they shouldn't., 3D sound. If set to true, will fade out the sound the further away listener is from the  talker, the voice will also be in stereo, and not mono.] 
     * @example
     * 
     * hook.Add("PlayerCanHearPlayersVoice", "Maximum Range", function(listener, talker)
     *     if listener:GetPos():Distance(talker:GetPos()) > 500 then return false end
     * end)
     * 
     * // Players can only hear each other if they are within 500 units. 
     * !TupleReturn
     */
    public PlayerCanHearPlayersVoice(listener: Player, talker: Player): [boolean, boolean];
    
    /**
     * Returns whether or not a player is allowed to join a team 
     * @param ply  Player attempting to switch teams 
     * @param team  Index of the team 
     * @returns Allowed to switch 
     */
    public PlayerCanJoinTeam(ply: Player, team: number): boolean;
    
    /**
     * Returns whether or not a player is allowed to pick an item up. 
     * @param ply  Player attempting to pick up 
     * @param item  The item the player is attempting to pick up 
     * @returns Allow pick up 
     */
    public PlayerCanPickupItem(ply: Player, item: Entity): boolean;
    
    /**
     * Returns whether or not a player is allowed to pick up a weapon. 
     * @param ply  The player attempting to pick up the weapon 
     * @param wep  The weapon entity in question 
     * @returns Allowed pick up or not 
     * @example
     * 
     * hook.Add( "PlayerCanPickupWeapon", "noDoublePickup", function( ply, wep )
     *     if ( ply:HasWeapon( wep:GetClass() ) ) then return false end
     * end )
     * 
     * // Disallows picking up a weapon if player already has this weapon.
     * ( Prevents ammo pickups from lying guns )@example
     * 
     * function GM:PlayerCanPickupWeapon(ply, wep)
     *     return (wep:GetClass() == "weapon_pistol")
     * end
     * 
     * // Players can only pick up the HL2 Pistol.@example
     * 
     * hook.Add( "PlayerCanPickupWeapon", "NoPistolGiveFists", function( ply, wep )
     * 	if wep:GetClass() == "weapon_pistol" then // if the weapon they are trying to pick up is a pistol
     * 		ply:Give( "weapon_rpg" ) // give them an RPG
     * 		wep:Remove() // remove the one they were trying to pick up
     * 		return false // don't give them a pistol
     * 	end
     * end )
     * 
     * // How you could give a player an alternate weapon to the one they picked up (such as an RPG Launcher rather than a pistol) 
     */
    public PlayerCanPickupWeapon(ply: Player, wep: Weapon): boolean;
    
    /**
     * Returns whether or not the player can see the other player's chat. 
     * @param text  The chat text 
     * @param teamOnly  If the message is team-only 
     * @param listener  The player receiving the message 
     * @param speaker  The player sending the message 
     * @returns Can see other player's chat 
     */
    public PlayerCanSeePlayersChat(text: string, teamOnly: boolean, listener: Player, speaker: Player): boolean;
    
    /**
     * Executes when a player connects to the server. Called before the player has been assigned a [[Player/UserID|UserID]] and entity. See the [[Game_Events|player_connect gameevent]] for a version of this hook called after the player entity has been created.
     * 
     * **Note:**
     * >This is only called clientside for listen server hosts.
     * 
     * **Note:**
     * >This is not called clientside for the local player. 
     * @param name  The player's name. 
     * @param ip  The player's IP address. Will be "none" for bots.
     * 
     * **Note:**
     * >This argument will only be passed serverside. 
     * @example
     * 
     * function GM:PlayerConnect( name, ip )
     * 	PrintMessage( HUD_PRINTTALK, name .. " has joined the game." )
     * end
     * 
     * // prints a message to the chatbox when a player joins the game 
     */
    public PlayerConnect(name: string, ip: string): void;
    
    /**
     * Called when a player is killed by {{ClassFunction|Player|Kill}} or any other normal means, except for when the player is killed with {{ClassFunction|Player|KillSilent}}.
     * 
     * See {{HookFunction|GM|PostPlayerDeath}} for a hook in which the player is 100% dead.
     * 
     * See {{HookFunction|GM|PlayerSilentDeath}} for a hook that handles player deaths caused by {{ClassFunction|Player|KillSilent}}.
     * 
     * See {{HookFunction|GM|DoPlayerDeath}} for a hook where player is still considered alive and is about to die.
     * 
     * See {{ClassFunction|Player|LastHitGroup}} if you need to get the last hit hitgroup of the player.
     * 
     * **Note:**
     * >{{ClassFunction|Player|Alive}} will return true in this hook. This behaviour is [https://github.com/Facepunch/garrysmod-issues/issues/3275 not defined]. 
     * @param victim  The player who died 
     * @param inflictor  Item used to kill the person 
     * @param attacker  Player or entity that killed the victim 
     * @example
     * 
     * function GM:PlayerDeath( victim, inflictor, attacker )
     *     if ( victim == attacker ) then
     *         PrintMessage( HUD_PRINTTALK, victim:Name() .. " committed suicide." )
     *     else
     *         PrintMessage( HUD_PRINTTALK, victim:Name() .. " was killed by " .. attacker:Name() .. ".")
     *     end
     * end
     * 
     * // If the player suicides (he is the killer and the victim (ply)), then it will print a message to console. If someone else kills him, it will print a different message to console. 
     */
    public PlayerDeath(victim: Player, inflictor: Entity, attacker: Entity): void;
    
    /**
     * Returns whether or not the default death sound should be muted. 
     * @returns Mute death sound 
     */
    public PlayerDeathSound(): boolean;
    
    /**
     * Called every think while the player is dead. The return value will determine if the player respawns.
     * 
     * Overwriting this function will prevent players from respawning by pressing space or clicking.
     * 
     * **Bug [#1577](https://github.com/Facepunch/garrysmod-issues/issues/1577):**
     * >This hook is not called for players with the [[Enums/FL|FL_FROZEN]] flag applied. 
     * @param ply  The player affected in the hook. 
     * @returns Allow spawn 
     */
    public PlayerDeathThink(ply: Player): boolean;
    
    /**
     * Called when a player leaves the server. See the [[Game_Events|player_disconnect gameevent]] for a shared version of this hook.
     * 
     * **Bug [#3523](https://github.com/Facepunch/garrysmod-issues/issues/3523):**
     * >This is not called in single-player or listen servers for the host. 
     * @param ply  the player 
     * @example
     * 
     * function GM:PlayerDisconnected( ply )
     *      PrintMessage( HUD_PRINTTALK, ply:Name().. " has left the server." )
     * end
     * 
     * // Print a message to the chatbox upon player disconnect 
     */
    public PlayerDisconnected(ply: Player): void;
    
    /**
     * Called to update the player's animation during a drive. 
     * @param ply  The driving player 
     */
    public PlayerDriveAnimate(ply: Player): void;
    
    /**
     * Called when a weapon is dropped by a player via {{ClassFunction|Player|DropWeapon}}.
     * 
     * The weapon's {{ClassFunction|Entity|GetOwner}} will be NULL at the time this hook is called.
     * 
     * {{HookFunction|WEAPON|OnDrop}} will be called before this hook is. 
     * @param owner  The player who owned this weapon before it was dropped 
     * @param wep  The weapon that was dropped 
     */
    public PlayerDroppedWeapon(owner: Player, wep: Weapon): void;
    
    /**
     * Called when player stops using voice chat. 
     * @param ply  Player who stopped talking 
     */
    public PlayerEndVoice(ply: Player): void;
    
    /**
     * Called when a player enters a vehicle.
     * 
     * Called just after {{HookFunction|GM|CanPlayerEnterVehicle}}.
     * 
     * See also {{HookFunction|GM|PlayerLeaveVehicle}}. 
     * @param ply  Player who entered vehicle 
     * @param veh  Vehicle the player entered 
     * @param role 
     */
    public PlayerEnteredVehicle(ply: Player, veh: Vehicle, role: number): void;
    
    /**
     * Called whenever a player steps. Return true to mute the normal sound. 
     * @param ply  The stepping player 
     * @param pos  The position of the step 
     * @param foot  Foot that is stepped. 0 for left, 1 for right 
     * @param sound  Sound that is going to play 
     * @param volume  Volume of the footstep 
     * @param filter  The Recipient filter of players who can hear the footstep 
     * @returns Prevent default step sound 
     * @example
     * 
     * function GM:PlayerFootstep( ply, pos, foot, sound, volume, rf ) 
     * 	ply:EmitSound("NPC_Hunter.Footstep") // Play the footsteps hunter is using
     * 	return true // Don't allow default footsteps
     * end
     * 
     * // Disables default player footsteps and plays custom ones. 
     */
    public PlayerFootstep(ply: Player, pos: Vector, foot: number, sound: string, volume: number, filter: CRecipientFilter): boolean;
    
    /**
     * Called when a player freezes an object. 
     * @param ply  Player who has frozen an object 
     * @param ent  The frozen object 
     * @param physobj  The frozen physics object of the frozen entity ( For ragdolls ) 
     */
    public PlayerFrozeObject(ply: Player, ent: Entity, physobj: PhysObj): void;
    
    /**
     * Called when a player gets hurt. 
     * @param victim  Victim 
     * @param attacker  Attacker Entity 
     * @param healthRemaining  Remaining Health 
     * @param damageTaken  Damage Taken 
     * @example
     * 
     * function GM:PlayerHurt(victim, attacker)
     *     if ( attacker:IsPlayer() ) then
     *         victim:ChatPrint("You were attacked by : " .. attacker:Nick())
     *     end
     * end
     * 
     * // Show players attacker in Chat. 
     */
    public PlayerHurt(victim: Player, attacker: Entity, healthRemaining: number, damageTaken: number): void;
    
    /**
     * Called when the player spawns for the first time.
     * 
     * **Note:**
     * >This hook is called before the player has fully loaded, when the player is still in seeing the "Sending Client Info" screen. For example, trying to use the {{ClassFunction|Entity|GetModel}} function will return the default model ("player/default.mdl") 
     * @param player  The player who spawned. 
     * @example
     * 
     * function GM:PlayerInitialSpawn(ply)
     * 	print( ply:GetName().." joined the server.\n" )
     * end
     * 
     * // That way you are overriding the default hook
     * // you can use hook.Add to make more functions get called when this event occurs
     * local function spawn(ply)
     * 	print( ply:GetName().." joined the game.\n")
     * end
     * hook.Add( "PlayerInitialSpawn", "some_unique_name", spawn )
     * 
     * // Prints the name of the player joining. 
     */
    public PlayerInitialSpawn(player: Player): void;
    
    /**
     * Makes the player join a specified team. This is a convenience function that calls {{ClassFunction|Player|SetTeam}} and runs the {{HookFunction|GM|OnPlayerChangedTeam}} hook. 
     * @param ply  Player to force 
     * @param team  The team to put player into 
     */
    public PlayerJoinTeam(ply: Player, team: number): void;
    
    /**
     * Called when a player leaves a vehicle.
     * 
     * **Bug [#2619](https://github.com/Facepunch/garrysmod-issues/issues/2619):**
     * >This is not called when a different vehicle is immediately entered with {{ClassFunction|Player|EnterVehicle}}. 
     * @param ply  Player who left a vehicle. 
     * @param veh  Vehicle the player left. 
     */
    public PlayerLeaveVehicle(ply: Player, veh: Vehicle): void;
    
    /**
     * Called to give players the default set of weapons.
     * 
     * **Note:**
     * >This function may not work in your custom gamemode if you have overridden your {{HookFunction|GM|PlayerSpawn}} and you do not use self.BaseClass.PlayerSpawn or {{LibraryFunction|hook|Call}}. 
     * @param ply  Player to give weapons to. 
     * @example
     * 
     * function GM:PlayerLoadout( ply )
     * 	ply:Give( "weapon_pistol" )
     * 
     * 	// Prevent default Loadout.
     * 	return true
     * end
     * 
     * // Gives the player only a pistol. 
     */
    public PlayerLoadout(ply: Player): void;
    
    /**
     * Called when a player tries to switch noclip mode. 
     * @param ply  The person who entered/exited noclip 
     * @param desiredState  Represents the noclip state (on/off) the user will enter if this hook allows them to. 
     * @returns Return false to disallow the switch. 
     * @example
     * 
     * local function DisableNoclip( ply )
     * 	return ply:IsAdmin()
     * end
     * hook.Add( "PlayerNoClip", "DisableNoclip", DisableNoclip )
     * 
     * // Disable Noclip for all but admins.@example
     * 
     * hook.Add( "PlayerNoClip", "isInNoClip", function( ply, desiredNoClipState )
     * 	if ( desiredNoClipState ) then
     * 		print( ply:Name() .. " wants to enter noclip." )
     * 	else
     * 		print( ply:Name() .. " wants to leave noclip." )
     * 	end
     * end )
     * 
     * // Get the player when they enter/exit no clip and display their status@example
     * 
     * hook.Add( "PlayerNoClip", "FeelFreeToTurnItOff", function( ply, desiredState )
     * 	if ( desiredState == false ) then // the player wants to turn noclip off
     * 		return true // always allow
     * 	elseif ( ply:IsAdmin() ) then
     * 		return true // allow administrators to enter noclip
     * 	end
     * end )
     * 
     * // While keeping the default behaviour of admin-only noclip, the following example will also allow anyone to turn it off (if it's set on by a third-party administration addon, for example). 
     */
    public PlayerNoClip(ply: Player, desiredState: boolean): boolean;
    
    /**
     * Called after the player's think. 
     * @param ply  The player 
     */
    public PlayerPostThink(ply: Player): void;
    
    /**
     * Request a player to join the team. This function will check if the team is available to join or not.
     * 
     * This hook is called when the player runs "changeteam" in the console.
     * 
     * To prevent the player from changing teams, see {{HookFunction|GM|PlayerCanJoinTeam}} 
     * @param ply  The player to try to put into a team 
     * @param team  Team to put the player into if the checks succeeded 
     */
    public PlayerRequestTeam(ply: Player, team: number): void;
    
    /**
     * Called when a player dispatched a chat message. For the clientside equivalent, see {{HookFunction|GM|OnPlayerChat}}. 
     * @param sender  The player which sent the message. 
     * @param text  The message's content 
     * @param teamChat  Is team chat? 
     * @returns What to show instead of original text.
     * 
     * Set to "" to stop the message from displaying. 
     * @example
     * 
     * hook.Add("PlayerSay", "PlayerSayExample", function( ply, text, team )
     * 	// Make the chat message entirely lowercase
     * 	if ( string.lower( text ) == "/all" ) then
     * 		return "[Global] " .. string.sub( text, 5 ) // add [Global] in front of the players text then display
     * 	end
     * end)
     * 
     * // Will put "[Global]" in front of the players message if they type "/all".@example
     * 
     * hook.Add( "PlayerSay", "Killurself", function(ply, text, public)
     * 	if ( string.lower( text ) == "!kill" ) then
     * 		ply:Kill()
     * 		return ""
     * 	end
     * end)
     * 
     * // Create a chat command to kill the player who said it 
     */
    public PlayerSay(sender: Player, text: string, teamChat: boolean): string;
    
    /**
     * Called to determine a spawn point for a player to spawn at. 
     * @param ply  The player who needs a spawn point 
     * @returns The spawnpoint entity to spawn the player at 
     * @example
     * 
     * function GM:PlayerSelectSpawn( pl )
     *     
     *     local spawns = ents.FindByClass( "info_player_start" )
     *     local random_entry = math.random( #spawns )
     *     
     *     return spawns[ random_entry ]
     * 	
     * end
     * 
     * // Find a random spawn point 
     */
    public PlayerSelectSpawn(ply: Player): Entity;
    
    /**
     * Find a team spawn point entity for this player. 
     * @param team  Players team 
     * @param ply  The player 
     * @returns The entity to use as a spawn point. 
     */
    public PlayerSelectTeamSpawn(team: number, ply: Player): Entity;
    
    /**
     * Called whenever view model hands needs setting a model. By default this calls {{HookFunction|PLAYER|GetHandsModel}} and if that fails, sets the hands model according to his player model. 
     * @param ply  The player whose hands needs a model set 
     * @param ent  The hands to set model of 
     * @example
     * 
     * function GM:PlayerSetHandsModel( ply, ent )
     *    local simplemodel = player_manager.TranslateToPlayerModelName(ply:GetModel())
     *    local info = player_manager.TranslatePlayerHands(simplemodel)
     *    if info then
     *       ent:SetModel(info.model)
     *       ent:SetSkin(info.skin)
     *       ent:SetBodyGroups(info.body)
     *    end
     * end
     * 
     * // Sets the players hands to the model's hands. 
     */
    public PlayerSetHandsModel(ply: Player, ent: Entity): void;
    
    /**
     * Called whenever a player spawns and must choose a model. A good place to assign a model to a player.
     * **Note:**
     * >This function may not work in your custom gamemode if you have overridden your {{HookFunction|GM|PlayerSpawn}} and you do not use self.BaseClass.PlayerSpawn or {{LibraryFunction|hook|Call}}. 
     * @param ply  The player being chosen 
     * @example
     * 
     * function GM:PlayerSetModel( ply )
     *    ply:SetModel( "models/player/odessa.mdl" )
     * end
     * 
     * // Sets the player's model to Odessa 
     */
    public PlayerSetModel(ply: Player): void;
    
    /**
     * Returns true if the player should take damage from the given attacker. 
     * @param ply  The player 
     * @param attacker  The attacker 
     * @returns Allow damage 
     */
    public PlayerShouldTakeDamage(ply: Player, attacker: Entity): boolean;
    
    /**
     * Allows to suppress player taunts. 
     * @param ply  Player who tried to taunt 
     * @param act  Act ID of the taunt player tries to do, see {{Enum|ACT}} 
     * @returns Return false to disallow player taunting 
     */
    public PlayerShouldTaunt(ply: Player, act: ACT): boolean;
    
    /**
     * Called when the player is killed by {{ClassFunction|Player|KillSilent}}.
     * 
     * The player is already considered dead when this hook is called.
     * 
     * See {{HookFunction|GM|PlayerDeath}} for a hook which handles all other death causes.
     * 
     * **Note:**
     * >{{ClassFunction|Player|Alive}} will return false in this hook. 
     * @param ply  The player 
     */
    public PlayerSilentDeath(ply: Player): void;
    
    /**
     * Called whenever a player spawns, including respawns. See the [[Game_Events|player_spawn gameevent]] for a shared version of this hook.
     * 
     * {{Warning|By default, in "base" derived gamemodes, this hook will also call {{HookFunction|GM|PlayerLoadout}} and {{HookFunction|GM|PlayerSetModel}}, which may override your {{ClassFunction|Entity|SetModel}} and {{ClassFunction|Player|Give}} calls. Consider using the other hooks or a 0-second timer.}} 
     * @param player  The player who spawned. 
     * @example
     * 
     * function GM:PlayerSpawn( ply )
     *     MsgN( ply:Nick() .. " has spawned!" )
     * end
     * 
     * // Prints a message when a player spawns.@example
     * 
     * local function spawn( ply )
     * 	print( ply:Nick().. " has spawned!.")
     * end
     * hook.Add( "PlayerSpawn", "some_unique_name", spawn )
     * 
     * // Prints a message when a player spawns using a hook. 
     */
    public PlayerSpawn(player: Player): void;
    
    /**
     * Called to spawn the player as a spectator. 
     * @param ply  The player to spawn as a spectator 
     * @example
     * 
     * function GM:PlayerSpawn( ply )
     *  
     * 	GAMEMODE:PlayerSpawnAsSpectator( ply )
     *  
     * end
     * 
     * // Makes all players spawn as spectators. 
     */
    public PlayerSpawnAsSpectator(ply: Player): void;
    
    /**
     * Determines if the player can spray using the "impulse 201" console command. 
     * @param sprayer  The player 
     * @returns Return false to allow spraying, return true to prevent spraying. 
     * @example
     * 
     * hook.Add( "PlayerSpray", "DisablePlayerSpray", function( ply )
     * 	return !ply:IsAdmin()
     * end )
     * 
     * // Makes so that only Admins can spray. 
     */
    public PlayerSpray(sprayer: Player): boolean;
    
    /**
     * Called when player starts taunting. 
     * @param ply  The player who is taunting 
     * @param act  The sequence ID of the taunt 
     * @param length  Length of the taunt 
     */
    public PlayerStartTaunt(ply: Player, act: number, length: number): void;
    
    /**
     * Called when a player starts using voice chat. 
     * @param ply  Player who started using voice chat 
     */
    public PlayerStartVoice(ply: Player): void;
    
    /**
     * Allows you to override the time between footsteps. 
     * @param ply  Player who is walking 
     * @param type  The type of footsteps, see {{Enum|STEPSOUNDTIME}} 
     * @param walking  Is the player walking or not ( +walk? ) 
     * @returns Time between footsteps, in ms 
     */
    public PlayerStepSoundTime(ply: Player, type: STEPSOUNDTIME, walking: boolean): number;
    
    /**
     * Called whenever a player attempts to either turn on or off their flashlight, returning false will deny the change. 
     * @param ply  The player who attempts to change their flashlight state. 
     * @param enabled  The new state the player requested, true for on, false for off. 
     * @returns Can toggle the flashlight or not 
     */
    public PlayerSwitchFlashlight(ply: Player, enabled: boolean): boolean;
    
    /**
     * Called when a player switches their weapon. 
     * @param player  The player switching weapons. 
     * @param oldWeapon  The previous weapon. Will be NULL if the previous weapon was removed or the player is switching from nothing. 
     * @param newWeapon  The weapon the player switched to. Will be NULL if the player is switching to nothing.
     * 
     * **Bug [#2922](https://github.com/Facepunch/garrysmod-issues/issues/2922):**
     * >This can be NULL on the client if the weapon hasn't been created over the network yet. 
     * @returns Return true to prevent weapon switch 
     * @example
     * 
     * function GM:PlayerSwitchWeapon(ply, oldWeapon, newWeapon)
     * 	//GetClass() will return the weapons class as a string.
     * 	MsgN("You switched weapons! Your old weapon is " .. oldWeapon:GetClass() ..".")
     * 	MsgN("Your new weapon is " .. newWeapon:GetClass() .. ".");
     * end
     * 
     * // The players weapon information will be printed when the player switched weapons. 
     */
    public PlayerSwitchWeapon(player: Player, oldWeapon: Weapon, newWeapon: Weapon): boolean;
    
    /**
     * The Move hook is called for you to manipulate the player's {{Type|CMoveData}}. This hook is called moments before {{HookFunction|GM|Move}} and {{HookFunction|GM|PlayerNoClip}}.
     * 
     * {{Warning|This hook will not run when inside a vehicle. {{HookFunction|GM|VehicleMove}} will be called instead.}} 
     * @param player  The player 
     * @param mv  The current movedata for the player. 
     */
    public PlayerTick(player: Player, mv: CMoveData): void;
    
    /**
     * Called when a player has been hit by a trace and damaged (such as from a bullet). Returning true overrides the damage handling and prevents {{HookFunction|GM|ScalePlayerDamage}} from being called. 
     * @param ply  The player that has been hit 
     * @param dmginfo  The damage info of the bullet 
     * @param dir  Normalized vector direction of the bullet's path 
     * @param trace  The trace of the bullet's path, see {{Struct|TraceResult}} 
     * @returns Override engine handling 
     */
    public PlayerTraceAttack(ply: Player, dmginfo: CTakeDamageInfo, dir: Vector, trace: TraceResult): boolean;
    
    /**
     * Called when a player unfreezes an object. 
     * @param ply  Player who has unfrozen an object 
     * @param ent  The unfrozen object 
     * @param physobj  The frozen physics object of the unfrozen entity ( For ragdolls ) 
     */
    public PlayerUnfrozeObject(ply: Player, ent: Entity, physobj: PhysObj): void;
    
    /**
     * Triggered when the player presses use on an object. Continuously runs until USE is released but will not activate other Entities until the USE key is released; dependent on activation type of the Entity. 
     * @param ply  The player pressing the "use" key. 
     * @param ent  The entity which the player is looking at / activating USE on. 
     * @returns Return false if the player is not allowed to USE the entity. 
     * @example
     * 
     * hook.Add( "PlayerUse", "some_unique_name2", function( ply, ent )
     * 	print( ply, ent )
     * end )
     * 
     * // The arguments will continue to be output as long as the user holds their USE key. If the user activates one object, say a door, and looks at a different object, say a different door, then the print statement will reflect the new Entity, however even when true is returned the new Entity will not be activated until the user lets go of USE and depresses it once again; this is dependent on the USE TYPE of the Entity.@example
     * 
     * hook.Add( "PlayerUse", "some_unique_name", function( ply, ent )
     * 	if ( !IsValid( ent ) or !ent:IsVehicle() ) then return end
     * 	
     * 	if ( ply:GetEyeTrace().HitGroup == 5 ) then
     * 		return false
     * 	end
     * end )
     * 
     * // Prevent users from using the ammo cache on the back of a Jeep. 
     */
    public PlayerUse(ply: Player, ent: Entity): boolean;
    
    /**
     * Called when it's time to populate the context menu menu bar at the top. 
     * @param menubar  The {{Type|DMenuBar}} itself. 
     * @example
     * 
     * hook.Add( "PopulateMenuBar", "My_MenuBar", function( menubar )
     * 
     * 	local m = menubar:AddOrGetMenu( "Test" )
     * 
     * 	m:AddCVar( "Item 1", "console_var1", "1", "0" )
     * 
     * 	m:AddSpacer()
     * 
     * 	m:AddCVar( "Item 2", "console_var2", "0", "100" )
     * 
     * 	m:AddCVar( "Check console", "console_var3", "1", "0", function() print("I was clicked!") end )
     * 
     * 	local submenu = m:AddSubMenu( "Submenu" )
     * 
     * 	submenu:SetDeleteSelf( false )
     * 	submenu:AddCVar( "No password", "password", "" )
     * 	submenu:AddSpacer()
     * 
     * 	submenu:AddCVar( "Password: test1", "password", "test1" )
     * 	submenu:AddCVar( "Password: lolno", "password", "lolno" )
     * 
     * end )
     * 
     * // Example usage of the hook 
     */
    public PopulateMenuBar(menubar: DMenuBar): void;
    
    /**
     * Called right after the map has cleaned up (usually because {{LibraryFunction|game|CleanUpMap}} was called)
     * 
     * See also {{HookFunction|GM|PreCleanupMap}}. 
     */
    public PostCleanupMap(): void;
    
    /**
     * Called right after the 2D skybox has been drawn - allowing you to draw over it.
     * 
     * {{RenderingContext|Hook|3D}} 
     * @example
     * 
     * local Mat = Material( "dev/graygrid" )
     * 
     * hook.Add("PostDraw2DSkyBox", "ExampleHook", function()
     *     
     *     render.OverrideDepthEnable( true, false ) // ignore Z to prevent drawing over 3D skybox
     * 
     *     // Start 3D cam centered at the origin
     *     cam.Start3D( Vector( 0, 0, 0 ), EyeAngles() )
     *         render.SetMaterial( Mat )
     *         render.DrawQuadEasy( Vector(1,0,0) * 200, Vector(-1,0,0), 64, 64, Color(255,255,255), 0 )
     *     cam.End3D()
     * 
     *     render.OverrideDepthEnable( false, false )
     * 
     * end)
     * 
     * // Draw a textured quad on the horizon, behind the 3D skybox. 
     */
    public PostDraw2DSkyBox(): void;
    
    /**
     * Called after rendering effects. This is where halos are drawn. Called just before {{HookFunction|GM|PreDrawHUD}}.
     * 
     * {{RenderingContext|Hook|2D}} 
     */
    public PostDrawEffects(): void;
    
    /**
     * Called after {{HookFunction|GM|PreDrawHUD}},  {{HookFunction|GM|HUDPaintBackground}} and {{HookFunction|GM|HUDPaint}} but before  {{HookFunction|GM|DrawOverlay}}.
     * 
     * {{RenderingContext|Hook|2D}} 
     */
    public PostDrawHUD(): void;
    
    /**
     * Called after drawing opaque entities.
     * 
     * See also {{HookFunction|GM|PostDrawTranslucentRenderables}} and  {{HookFunction|GM|PreDrawOpaqueRenderables}}.
     * 
     * {{RenderingContext|Hook|3D}} 
     * @param bDrawingDepth  Whether the current draw is writing depth. 
     * @param bDrawingSkybox  Whether the current draw is drawing the skybox. 
     */
    public PostDrawOpaqueRenderables(bDrawingDepth: boolean, bDrawingSkybox: boolean): void;
    
    /**
     * Called after the player hands are drawn. 
     * @param hands  This is the gmod_hands entity. 
     * @param vm  This is the view model entity. 
     * @param ply  The the owner of the view model. 
     * @param weapon  This is the weapon that is from the view model. 
     */
    public PostDrawPlayerHands(hands: Entity, vm: Entity, ply: Player, weapon: Weapon): void;
    
    /**
     * Called after drawing the skybox.
     * 
     * {{RenderingContext|Hook|3D}} 
     */
    public PostDrawSkyBox(): void;
    
    /**
     * Called after all translucent entities are drawn.
     * 
     * See also {{HookFunction|GM|PostDrawOpaqueRenderables}} and  {{HookFunction|GM|PreDrawTranslucentRenderables}}.
     * 
     * {{RenderingContext|Hook|3D}}
     * 
     * **Bug [#3295](https://github.com/Facepunch/garrysmod-issues/issues/3295):**
     * >This is still called when r_drawentities or r_drawopaquerenderables is disabled.
     * 
     * **Bug [#3296](https://github.com/Facepunch/garrysmod-issues/issues/3296):**
     * >This is not called when r_drawtranslucentworld is disabled. 
     * @param bDrawingDepth  Whether the current call is writing depth. 
     * @param bDrawingSkybox  Whether the current call is drawing skybox. 
     * @example
     * 
     * hook.Add( "PostDrawTranslucentRenderables", "test", function( bDepth, bSkybox )
     * 
     * 	// If we are drawing in the skybox, bail
     * 	if ( bSkybox ) then return end
     * 
     * 	// Set the draw material to solid white
     * 	render.SetColorMaterial()
     * 
     * 	// The position to render the sphere at, in this case, the looking position of the local player
     * 	local pos = LocalPlayer():GetEyeTrace().HitPos
     * 
     * 	// Draw the sphere!
     * 	render.DrawSphere( pos, 500, 30, 30, Color( 0, 0, 0 ) )
     * 
     * end )
     * 
     * // Draws a solid black sphere at where the player is looking at, but not when the skybox is being drawn.
     * 
     * You can see why this is needed if you disable the skybox check and look into the sky on gm_flatgrass (or any other map where the 3d skybox is below the map) and you will notice 2 spheres and not 1. 
     */
    public PostDrawTranslucentRenderables(bDrawingDepth: boolean, bDrawingSkybox: boolean): void;
    
    /**
     * Called after view model is drawn.
     * 
     * {{RenderingContext|Hook|3D}}
     * 
     * **Note:**
     * >The 3D rendering context in this event is different from the main view. Every render operation will only be accurate with the view model entity. 
     * @param viewmodel  Players view model 
     * @param player  The owner of the weapon/view model 
     * @param weapon  The weapon the player is currently holding 
     */
    public PostDrawViewModel(viewmodel: Entity, player: Player, weapon: Weapon): void;
    
    /**
     * Called after the gamemode has loaded. 
     */
    public PostGamemodeLoaded(): void;
    
    /**
     * Called right after {{HookFunction|GM|DoPlayerDeath}} and {{HookFunction|GM|PlayerSilentDeath}}.
     * 
     * The player is considered dead when this is hook is called, {{ClassFunction|Player|Alive}} will return false. 
     * @param ply  The player 
     */
    public PostPlayerDeath(ply: Player): void;
    
    /**
     * Called after the player was drawn.
     * 
     * {{RenderingContext|Hook|3D}} 
     * @param ply  The player that was drawn. 
     * @example
     * 
     * local function DrawName( ply )
     * 	if ( !IsValid( ply ) ) then return end 
     * 	if ( ply == LocalPlayer() ) then return end // Don't draw a name when the player is you
     * 	if ( !ply:Alive() ) then return end // Check if the player is alive 
     *  
     * 	local Distance = LocalPlayer():GetPos():Distance( ply:GetPos() ) //Get the distance between you and the player
     * 	
     * 	if ( Distance < 1000 ) then //If the distance is less than 1000 units, it will draw the name
     *  
     * 		local offset = Vector( 0, 0, 85 )
     * 		local ang = LocalPlayer():EyeAngles()
     * 		local pos = ply:GetPos() + offset + ang:Up()
     * 	 
     * 		ang:RotateAroundAxis( ang:Forward(), 90 )
     * 		ang:RotateAroundAxis( ang:Right(), 90 )
     * 	 
     * 		
     * 		cam.Start3D2D( pos, Angle( 0, ang.y, 90 ), 0.25 )
     * 			draw.DrawText( ply:GetName(), "HudSelectionText", 2, 2, team.GetColor(ply:Team()), TEXT_ALIGN_CENTER )
     * 		cam.End3D2D()
     * 	end
     * end
     * hook.Add( "PostPlayerDraw", "DrawName", DrawName )
     * 
     * // Show each player's name above their model.@example
     * 
     * local model = ClientsideModel( "models/headcrabclassic.mdl" )
     * model:SetNoDraw( true )
     * 
     * hook.Add( "PostPlayerDraw" , "manual_model_draw_example" , function( ply )
     * 	if not IsValid(ply) or not ply:Alive() then return end
     * 
     * 	local attach_id = ply:LookupAttachment('eyes')
     * 	if not attach_id then return end
     * 			
     * 	local attach = ply:GetAttachment(attach_id)
     * 			
     * 	if not attach then return end
     * 			
     * 	local pos = attach.Pos
     * 	local ang = attach.Ang
     * 		
     * 	model:SetModelScale(1.1, 0)
     * 	pos = pos + (ang:Forward() * 2.5)
     * 	ang:RotateAroundAxis(ang:Right(), 20)
     * 		
     * 	model:SetPos(pos)
     * 	model:SetAngles(ang)
     * 
     * 	model:SetRenderOrigin(pos)
     * 	model:SetRenderAngles(ang)
     * 	model:SetupBones()
     * 	model:DrawModel()
     * 	model:SetRenderOrigin()
     * 	model:SetRenderAngles()
     * 
     * end )
     * 
     * // Draw a headcrab hat on all players.<!-- TODO: screenshot in output --> 
     */
    public PostPlayerDraw(ply: Player): void;
    
    /**
     * Allows you to suppress post processing effect drawing. 
     * @param ppeffect  The classname of Post Processing effect 
     * @returns Return true/false depending on whether this post process should be allowed 
     */
    public PostProcessPermitted(ppeffect: string): boolean;
    
    /**
     * Called after the frame has been rendered.
     * [[Category:Render Hooks]] 
     */
    public PostRender(): void;
    
    /**
     * Called after the VGUI has been drawn.
     * 
     * {{RenderingContext|Hook|2D}} 
     */
    public PostRenderVGUI(): void;
    
    /**
     * Called right before the map cleans up (usually because {{LibraryFunction|game|CleanUpMap}} was called)
     * 
     * See also {{HookFunction|GM|PostCleanupMap}}. 
     */
    public PreCleanupMap(): void;
    
    /**
     * Called just after {{HookFunction|GM|PreDrawViewModel}} and can technically be considered "PostDrawAllViewModels".
     * 
     * {{RenderingContext|Hook|3D}} 
     */
    public PreDrawEffects(): void;
    
    /**
     * Called before rendering the halos. This is the place to call {{LibraryFunction|halo|Add}}. This hook is actually running inside of {{HookFunction|GM|PostDrawEffects}}.
     * 
     * {{RenderingContext|Hook|3D}} 
     */
    public PreDrawHalos(): void;
    
    /**
     * Called before any of 2D drawing functions. Drawing anything in it seems to work incorrectly.<!--
     * 
     * {{RenderingContext|Hook|2D}}--> 
     * @example
     * 
     * local clr = Color(20, 20, 20, 200)
     * hook.Add("PreDrawHUD", "PreDrawExample", function()
     * 	cam.Start2D() // If you don't call this the drawing will not work properly.
     * 	
     * 	surface.SetDrawColor(clr)
     * 	surface.DrawRect(0, 0, ScrW(), ScrH())
     * 	
     * 	cam.End2D()
     * end)
     * 
     * // Allows you to draw something before any other HUD elements. 
     */
    public PreDrawHUD(): void;
    
    /**
     * Called before all opaque entities are drawn.
     * 
     * See also {{HookFunction|GM|PreDrawTranslucentRenderables}} and  {{HookFunction|GM|PostDrawOpaqueRenderables}}.
     * 
     * {{RenderingContext|Hook|3D}} 
     * @param isDrawingDepth  Whether the current draw is writing depth. 
     * @param isDrawSkybox  Whether the current draw is drawing the skybox. 
     * @returns Return true to prevent opaque renderables from drawing. 
     */
    public PreDrawOpaqueRenderables(isDrawingDepth: boolean, isDrawSkybox: boolean): boolean;
    
    /**
     * Called before the player hands are drawn. 
     * @param hands  This is the gmod_hands entity before it is drawn. 
     * @param vm  This is the view model entity before it is drawn. 
     * @param ply  The the owner of the view model. 
     * @param weapon  This is the weapon that is from the view model. 
     * @returns Return true to prevent the viewmodel hands from rendering 
     */
    public PreDrawPlayerHands(hands: Entity, vm: Entity, ply: Player, weapon: Weapon): boolean;
    
    /**
     * Called before the sky box is drawn.
     * 
     * {{RenderingContext|Hook|3D}} 
     */
    public PreDrawSkyBox(): void;
    
    /**
     * Called before all the translucent entities are drawn.
     * 
     * See also {{HookFunction|GM|PreDrawOpaqueRenderables}} and  {{HookFunction|GM|PostDrawTranslucentRenderables}}.
     * 
     * {{RenderingContext|Hook|3D}}
     * 
     * **Bug [#3295](https://github.com/Facepunch/garrysmod-issues/issues/3295):**
     * >This is still called when r_drawentities or r_drawopaquerenderables is disabled.
     * 
     * **Bug [#3296](https://github.com/Facepunch/garrysmod-issues/issues/3296):**
     * >This is not called when r_drawtranslucentworld is disabled. 
     * @param isDrawingDepth  Whether the current draw is writing depth. 
     * @param isDrawSkybox  Whether the current draw is drawing the skybox. 
     * @returns Return true to prevent translucent renderables from drawing. 
     */
    public PreDrawTranslucentRenderables(isDrawingDepth: boolean, isDrawSkybox: boolean): boolean;
    
    /**
     * Called before the view model has been drawn. This hook by default also calls this on weapons, so you can use {{HookFunction|WEAPON|PreDrawViewModel}}.
     * 
     * {{RenderingContext|Hook|3D}}
     * 
     * **Bug [#3024](https://github.com/Facepunch/garrysmod-issues/issues/3024):**
     * >This is also called once a frame with no arguments. 
     * @param vm  This is the view model entity before it is drawn. On server-side, this entity is the predicted view model. 
     * @param ply  The the owner of the view model. 
     * @param weapon  This is the weapon that is from the view model. 
     * @returns Return true to prevent the default view model rendering. This also affects {{HookFunction|GM|PostDrawViewModel}}. 
     */
    public PreDrawViewModel(vm: Entity, ply: Player, weapon: Weapon): boolean;
    
    /**
     * Called before the gamemode is loaded. 
     */
    public PreGamemodeLoaded(): void;
    
    /**
     * Called before the player is drawn. 
     * @param player  The player that is about to be drawn. 
     * @returns Prevent default player rendering. Return true to hide the player. 
     */
    public PrePlayerDraw(player: Player): boolean;
    
    /**
     * Called before the renderer is about to start rendering the next frame.
     * [[Category:Render Hooks]] 
     * @returns Return true to prevent all rendering. This can make the whole game stop rendering anything. 
     * @example
     * 
     * hook.Add("PreRender", "ResetBuffer", function()
     * 	cam.Start2D()
     * 		surface.SetDrawColor(0, 0, 0, 255)
     * 		surface.DrawRect(0, 0, ScrW(), ScrH())
     * 	cam.End2D()
     * end)
     * 
     * // Fills the draw buffer with black pixels, removing tearing when looking at a world leak. Achieves the same effect as using gl_clear. 
     */
    public PreRender(): boolean;
    
    /**
     * This will prevent IN_ATTACK from sending to server when player tries to shoot from C menu. 
     * @returns Return true to prevent screen clicks 
     */
    public PreventScreenClicks(): boolean;
    
    /**
     * Called when a prop has been destroyed. 
     * @param attacker  The person who broke the prop. 
     * @param prop  The entity that has been broken by the attacker. 
     * @example
     * 
     * hook.Add("PropBreak", "PropVengeance", function(client, prop)
     * 	client:Kill()
     * end)
     * 
     * // This kills a player when a person breaks a prop (i.e. a wooden crate). 
     */
    public PropBreak(attacker: Player, prop: Entity): void;
    
    /**
     * Render the scene. Used by the "Stereoscopy" Post-processing effect.
     * [[Category:Render Hooks]] 
     * @param origin  View origin 
     * @param angles  View angles 
     * @param fov  View FOV 
     * @returns Return true to override drawing the scene 
     */
    public RenderScene(origin: Vector, angles: Angle, fov: number): boolean;
    
    /**
     * Used to render post processing effects.
     * 
     * {{RenderingContext|Hook|2D}} 
     * @example
     * 
     * local tab = {
     * 	["$pp_colour_addr"] = 0,
     * 	["$pp_colour_addg"] = 0,
     * 	["$pp_colour_addb"] = 0,
     * 	["$pp_colour_brightness"] = -0.04,
     * 	["$pp_colour_contrast"] = 1.35,
     * 	["$pp_colour_colour"] = 5,
     * 	["$pp_colour_mulr"] = 0,
     * 	["$pp_colour_mulg"] = 0,
     * 	["$pp_colour_mulb"] = 0
     * }
     * function GM:RenderScreenspaceEffects()
     * 	DrawColorModify( tab ) //Draws Color Modify effect
     * 	DrawSobel( 0.5 ) //Draws Sobel effect
     * end
     * 
     * // Renders color modify and sobel effects to create a cartoon effect. 
     */
    public RenderScreenspaceEffects(): void;
    
    /**
     * Called when the game is reloaded from a Source Engine save system ( not the Sandbox saves or dupes ).
     * 
     * See {{HookFunction|GM|Saved}} for a hook that is called when such a save file is created. 
     */
    public Restored(): void;
    
    /**
     * Called when the game is saved using the Source Engine save system (not the Sandbox saves or dupes).
     * 
     * See {{HookFunction|GM|Restored}} for a hook that is called when such a save file is loaded.
     * 
     * See also the {{Lib|saverestore}} for relevant functions. 
     */
    public Saved(): void;
    
    /**
     * Called when an NPC takes damage.
     * 
     * **Note:**
     * >This hook is called only when a specific hit group of the NPC is hit. In cases where the hitgroup doesn't matter, you should use {{HookFunction|GM|EntityTakeDamage}} instead! 
     * @param npc  The NPC that takes damage 
     * @param hitgroup  The hitgroup (hitbox) enum where the player took damage. See {{Enum|HITGROUP}} 
     * @param dmginfo  Damage info 
     * @example
     * 
     * function GM:ScaleNPCDamage( npc, hitgroup, dmginfo )
     * 	dmginfo:ScaleDamage( 2 )
     * end
     * 
     * // Double the damage whenever a NPC is hurt. 
     */
    public ScaleNPCDamage(npc: NPC, hitgroup: HITGROUP, dmginfo: CTakeDamageInfo): void;
    
    /**
     * This hook allows you to change how much damage a player receives when one takes damage to a specific body part.
     * 
     * **Note:**
     * >This is not called for all damage a player receives ( For example fall damage or NPC melee damage ), so you should use {{HookFunction|GM|EntityTakeDamage}} instead if you need to detect ALL damage. 
     * @param ply  The player taking damage. 
     * @param hitgroup  The hitgroup where the player took damage. See {{Enum|HITGROUP}} 
     * @param dmginfo  The damage info. 
     * @returns Return true to prevent damage that this hook is called for, stop blood particle effects and blood decals.
     * 
     * It is possible to return true only on client ( This will work '''only in multiplayer''' ) to stop the effects but still take damage. 
     * @example
     * 
     * function GM:ScalePlayerDamage( ply, hitgroup, dmginfo )
     * 	 if ( hitgroup == HITGROUP_HEAD ) then
     * 		dmginfo:ScaleDamage( 2 ) // More damage when we're shot in the head
     *  	 else
     * 		dmginfo:ScaleDamage( 0.50 )  // Less damage when shot anywhere else
     * 	 end
     * end
     * 
     * // Makes the player take twice as much damage when shot in the head, and only half damage when shot in the limbs. 
     */
    public ScalePlayerDamage(ply: Player, hitgroup: HITGROUP, dmginfo: CTakeDamageInfo): boolean;
    
    /**
     * Called when player released the scoreboard button. ( TAB by default ) 
     */
    public ScoreboardHide(): void;
    
    /**
     * Called when player presses the scoreboard button. ( TAB by default )
     * <!--NOTE: DO NOT ADD A RETURN VALUE TO THIS FUNCTION! IT DOES NOT HAVE A RETURN VALUE.
     * RETURNING ANYTHING TO HIDE THE DEFAULT SCOREBOARD IS A SIDE EFFECT OF HOW THE HOOK LIBRARY WORKS.
     * THAT EFFECT WILL NOT BE CONSISTENT BETWEEN GAMEMODES/ADDON COMBINATIONS--> 
     */
    public ScoreboardShow(): void;
    
    /**
     * Sets player run and sprint speeds.
     * 
     * {{Warning|This is not a hook. Treat this as a utility function to set the player's speed.}} 
     * @param ply  The player to set the speed of. 
     * @param walkSpeed  The walk speed. 
     * @param runSpeed  The run speed. 
     */
    public SetPlayerSpeed(ply: Player, walkSpeed: number, runSpeed: number): void;
    
    /**
     * SetupMove is called before the engine process movements. This allows us to override the players movement. 
     * @param ply  The player whose movement we are about to process 
     * @param mv  The move data to override/use 
     * @param cmd  The command data 
     * @example
     * 
     * hook.Add( "SetupMove", "Drowning:HandleWaterInLungs", function( ply, mv, cmd )
     * 	if ( ply:WaterLevel() > 2 ) then
     * 		mv:SetUpSpeed( -100 )
     * 		cmd:SetUpMove( -100 )
     * 	end
     * end )
     * 
     * // Make drowning even more entertaining:@example
     * 
     * local CMoveData = FindMetaTable("CMoveData")
     * 
     * function CMoveData:RemoveKeys(keys)
     * 	// Using bitwise operations to clear the key bits.
     * 	local newbuttons = bit.band(self:GetButtons(), bit.bnot(keys))
     * 	self:SetButtons(newbuttons)
     * end
     * 
     * hook.Add("SetupMove", "Disable Jumping", function(ply, mvd, cmd)
     * 	if mvd:KeyDown(IN_JUMP) then
     * 		mvd:RemoveKeys(IN_JUMP)
     * 	end
     * end)
     * 
     * // Disable the player's ability to jump by removing a key from CMoveData: 
     */
    public SetupMove(ply: Player, mv: CMoveData, cmd: CUserCmd): void;
    
    /**
     * Allows you to add extra positions to the player's PVS. This is the place to call {{GlobalFunction|AddOriginToPVS}}. 
     * @param ply  The player 
     * @param viewEntity  Players {{ClassFunction|Player|GetViewEntity}} 
     */
    public SetupPlayerVisibility(ply: Player, viewEntity: Entity): void;
    
    /**
     * Allows you to use render.Fog* functions to manipulate skybox fog. 
     * @param scale  The scale of 3D skybox 
     * @returns Return true to tell the engine that fog is set up 
     */
    public SetupSkyboxFog(scale: number): boolean;
    
    /**
     * Allows you to use render.Fog* functions to manipulate world fog. 
     * @returns Return true to tell the engine that fog is set up 
     */
    public SetupWorldFog(): boolean;
    
    /**
     * Called to decide whether a pair of entities should collide with each other. This is only called if {{ClassFunction|Entity|SetCustomCollisionCheck}} was used on one or both entities.
     * 
     * Where applicable, consider using {{LibraryFunction|constraint|NoCollide}} instead - it is considerably easier to use.
     * 
     * {{Warning|This hook '''must''' return the same value consistently for the same pair of entities. If an entity changed in such a way that its collision rules change, you '''must''' call {{ClassFunction|Entity|CollisionRulesChanged}} on that entity immediately - '''not in this hook.'''}}
     * 
     * **Bug [#642](https://github.com/Facepunch/garrysmod-issues/issues/642):**
     * >This hook can cause all physics to break under certain conditions. 
     * @param ent1  The first entity in the collision poll. 
     * @param ent2  The second entity in the collision poll. 
     * @returns Whether the entities should collide. 
     * @example
     * 
     * function GM:ShouldCollide( ent1, ent2 )
     * 
     *     // If players are about to collide with each other, then they won't collide.
     *     if ( IsValid( ent1 ) and IsValid( ent2 ) and ent1:IsPlayer() and ent2:IsPlayer() ) then return false end 
     * 
     *     // We must call this because anything else should return true.
     *     return true
     * 
     * end
     * 
     * // This should always return true unless you have a good reason for it not to. 
     */
    public ShouldCollide(ent1: Entity, ent2: Entity): boolean;
    
    /**
     * Called to determine if the {{GlobalFunction|LocalPlayer}} should be drawn.
     * 
     * Due to an [https://garry.tv/2012/10/30/optimising-gmod/ optimization], this hook is only called once per frame ([https://github.com/Facepunch/garrysmod-issues/issues/3092 github issue]). This is problematic if you need to have the player drawn only in certain contexts, such as within {{LibraryFunction|render|RenderView}} or based on the render target. As a workaround, you can call <kbd>{{LibraryFunction|cam|Start3D}}()&nbsp;{{LibraryFunction|cam|End3D}}()</kbd> within this hook to force the engine to call it every time.
     * 
     * **Note:**
     * >If you're using this hook to draw a player for a {{HookFunction|GM|CalcView}} hook, then you may want to consider using the drawviewer variable you can use in your {{Struct|CamData}} table instead. 
     * @param ply  The player 
     * @returns True to draw the player, false to hide. 
     */
    public ShouldDrawLocalPlayer(ply: Player): boolean;
    
    /**
     * Called when a player executes gm_showhelp console command. ( Default bind is F1 ) 
     * @param ply  Player who executed the command 
     */
    public ShowHelp(ply: Player): void;
    
    /**
     * Called when a player executes gm_showspare1 console command. ( Default bind is F3 ) 
     * @param ply  Player who executed the command 
     */
    public ShowSpare1(ply: Player): void;
    
    /**
     * Called when a player executes gm_showspare2 console command. ( Default bind is F4 ) 
     * @param ply  Player who executed the command 
     */
    public ShowSpare2(ply: Player): void;
    
    /**
     * Called when a player executes gm_showteam console command. ( Default bind is F2 ) 
     * @param ply  Player who executed the command 
     */
    public ShowTeam(ply: Player): void;
    
    /**
     * Called whenever the lua environment is about to be shut down. (for example on map change, or when the server is going to shut down because of the "exit"-ConCommand) 
     */
    public ShutDown(): void;
    
    /**
     * Called when spawn icon is generated. 
     * @param lastmodel  File path of previously generated model. 
     * @param imagename  File path of the generated icon. 
     * @param modelsleft  Amount of models left to generate. 
     * @example
     * 
     * local g_Progress = nil
     * 
     * hook.Add( "SpawniconGenerated", "SpawniconGenerated", function( lastmodel, imagename, modelsleft )
     * 
     * 	if ( !IsValid( g_Progress ) ) then
     * 	
     * 		g_Progress = vgui.Create( "DPanel" )
     * 		g_Progress:SetSize( 64+10, 64+10+20 )
     * 		g_Progress:SetBackgroundColor( Color( 0, 0, 0, 100 ) )
     * 		g_Progress:SetDrawOnTop( true )
     * 		g_Progress:DockPadding( 5, 0, 5, 5 )
     * 		g_Progress.Think = function()
     * 		
     * 			if ( SysTime() - g_Progress.LastTouch < 3 ) then return end
     * 			
     * 			g_Progress:Remove()
     * 			g_Progress.LastTouch = SysTime()
     * 		
     * 		end
     * 		
     * 
     * 		
     * 		local label = g_Progress:Add( "DLabel" )
     * 		label:Dock( BOTTOM )
     * 		label:SetText( "remaining" )
     * 		label:SetTextColor( Color( 255, 255, 255, 255 ) )
     * 		label:SetExpensiveShadow( 1, Color( 0, 0, 0, 200 ) )
     * 		label:SetContentAlignment( 5 )
     * 		label:SetHeight( 14 )
     * 		label:SetFont( "DefaultSmall" )
     * 		
     * 		g_Progress.Label = g_Progress:Add( "DLabel" )
     * 		g_Progress.Label:Dock( BOTTOM )
     * 		g_Progress.Label:SetTextColor( Color( 255, 255, 255, 255 ) )
     * 		g_Progress.Label:SetExpensiveShadow( 1, Color( 0, 0, 0, 200 ) )
     * 		g_Progress.Label:SetContentAlignment( 5 )
     * 		g_Progress.Label:SetFont( "DermaDefaultBold" )
     * 		g_Progress.Label:SetHeight( 14 )
     * 		
     * 		g_Progress.icon = vgui.Create( "DImage", g_Progress )
     * 		g_Progress.icon:SetSize( 64, 64 )
     * 		g_Progress.icon:Dock( TOP )
     * 	
     * 	end
     * 	
     * 	g_Progress.LastTouch = SysTime()
     * 	
     * 	imagename = imagename:Replace( "materials\\", "" )
     * 	imagename = imagename:Replace( "materials/", "" )
     * 		
     * 	g_Progress.icon:SetImage( imagename )
     * 		
     * 	g_Progress:AlignRight( 10 )
     * 	g_Progress:AlignBottom( 10 )
     * 	
     * 	g_Progress.Label:SetText( modelsleft )
     * 
     * end )
     * 
     * // That's how it is used in '''garrysmod/lua/includes/gui/icon_progress.lua''' for show progress of generating icons 
     */
    public SpawniconGenerated(lastmodel: string, imagename: string, modelsleft: number): void;
    
    /**
     * Runs when the user tries to open the chat box.
     * 
     * **Bug [#855](https://github.com/Facepunch/garrysmod-issues/issues/855):**
     * >Returning true won't stop the chatbox from taking VGUI focus. 
     * @param isTeamChat  Whether the message was sent through team chat. 
     * @returns Return true to hide the default chat box. 
     * @example
     * 
     * hook.Add( "StartChat", "HasStartedTyping", function( isTeamChat )
     * 	if ( isTeamChat ) then
     * 		print( "Player started typing a message in teamchat." )
     * 	else
     * 		print( "Player started typing a message." )
     * 	end
     * end )
     * 
     * // 
     */
    public StartChat(isTeamChat: boolean): boolean;
    
    /**
     * Allows you to change the players inputs before they are processed by the server.
     * 
     * This is basically a shared version of {{HookFunction|GM|CreateMove}}.
     * 
     * **Note:**
     * >This function is also called for bots, making it the best solution to control them so far
     * 
     * **Note:**
     * >This hook is predicted, but not by usual means, this hook is called when a {{Type|CUserCmd}} is generated on the client, and on the server when it is received, so it is necessary for this hook to be called clientside even on singleplayer 
     * @param ply  The player 
     * @param ucmd  The usercommand 
     */
    public StartCommand(ply: Player, ucmd: CUserCmd): void;
    
    /**
     * Called right before an entity starts driving. Overriding this hook will cause it to not call {{LibraryFunction|drive|Start}} and the player will not begin driving the entity. 
     * @param ent  The entity that is going to be driven 
     * @param ply  The player that is going to drive the entity 
     */
    public StartEntityDriving(ent: Entity, ply: Player): void;
    
    /**
     * Called when you start a new game via the menu. 
     */
    public StartGame(): void;
    
    /**
     * Called every frame on client and every tick on server.
     * 
     * See {{HookFunction|GM|Tick}} for a hook that runs every tick on both the client and server.
     * 
     * **Note:**
     * >This hook '''WILL NOT''' run if the server is empty, unless you set the {{Type|ConVar}} ''sv_hibernate_think'' to 1 
     */
    public Think(): void;
    
    /**
     * Called every server tick. Serverside, this is similar to {{HookFunction|GM|Think}}. 
     */
    public Tick(): void;
    
    /**
     * Allows you to translate player activities. 
     * @param ply  The player 
     * @param act  The activity. See {{Enum|ACT}} 
     * @returns The new, translated activity 
     */
    public TranslateActivity(ply: Player, act: ACT): number;
    
    /**
     * Animation updates (pose params etc) should be done here. 
     * @param ply  The player 
     * @param velocity  Players velocity 
     * @param maxSeqGroundSpeed  Velocity, at which animation will play at normal speed ( Playback Rate = 1 ) 
     */
    public UpdateAnimation(ply: Player, velocity: number, maxSeqGroundSpeed: number): void;
    
    /**
     * Called when a variable is edited on an Entity (called by Edit Properties... menu) 
     * @param ent  The entity being edited 
     * @param ply  The player doing the editing 
     * @param key  The name of the variable 
     * @param val  The new value, as a string which will later be converted to its appropriate type 
     * @param editor  The edit table defined in {{ClassFunction|Entity|NetworkVar}} 
     * @example
     * 
     * function GM:VariableEdited( ent, ply, key, val, editor )
     *     if ( !IsValid( ent ) ) then return end
     *     if ( !IsValid( ply ) ) then return end
     *     local CanEdit = hook.Run( "CanEditVariable", ent, ply, key, val, editor )
     *     if ( !CanEdit ) then return end
     *     ent:EditValue( key, val )
     * end
     * 
     * // From base/gamemode/variable_edit.lua 
     */
    public VariableEdited(ent: Entity, ply: Player, key: string, val: string, editor: table): void;
    
    /**
     * Called when you are driving a vehicle. This hook works just like {{HookFunction|GM|Move}}.
     * 
     * This hook is called before {{HookFunction|GM|Move}} and will be called when {{HookFunction|GM|PlayerTick}} is not. 
     * @param ply  Player who is driving the vehicle 
     * @param veh  The vehicle being driven 
     * @param mv  Move data 
     */
    public VehicleMove(ply: Player, veh: Vehicle, mv: CMoveData): void;
    
    /**
     * [[Category:Menu_Hooks]] Called when user clicks on a VGUI panel. 
     * @param button  The button that was pressed, see {{Enum|MOUSE}} 
     * @returns Return true if the mouse click should be ignored or not. 
     */
    public VGUIMousePressAllowed(button: MOUSE): boolean;
    
    /**
     * [[Category:Menu_Hooks]] Called when a mouse button is pressed on a VGUI element or menu. 
     * @param pnl  Panel that currently has focus. 
     * @param mouseCode  The key that the player pressed using {{Enum|MOUSE}}. 
     */
    public VGUIMousePressed(pnl: Panel, mouseCode: MOUSE): void;
    
    /**
     * Called as a weapon entity is picked up by a player.
     * 
     * **Note:**
     * >At the time when this hook is called {{ClassFunction|Entity|GetOwner}} will return NULL. The owner is set on the next frame
     * 
     * **Note:**
     * >This will not be called when picking up a weapon you already have as the weapon will be removed and {{HookFunction|WEAPON|EquipAmmo}} will be called instead 
     * @param weapon  The equipped weapon. 
     * @param owner  The player that is picking up the weapon. 
     */
    public WeaponEquip(weapon: Weapon, owner: Player): void;
    
    /**
     * Called when an addon from the Steam workshop finishes downloading. Used by default to update details on the workshop downloading panel. 
     * @param id  Workshop ID of addon. 
     * @param title  Name of addon. 
     */
    public WorkshopDownloadedFile(id: number, title: string): void;
    
    /**
     * Called when an addon from the Steam workshop begins downloading. Used by default to place details on the workshop downloading panel. 
     * @param id  Workshop ID of addon. 
     * @param imageID  ID of addon's preview image.
     * 
     * For example, for '''Extended Spawnmenu''' addon, the image URL is
     * <samp><nowiki>http://cloud-4.steamusercontent.com/ugc/702859018846106764/9E7E1946296240314751192DA0AD15B6567FF92D/</nowiki></samp>
     * So, the value of this argument would be '''702859018846106764'''. 
     * @param title  Name of addon. 
     * @param size  File size of addon in bytes. 
     */
    public WorkshopDownloadFile(id: number, imageID: number, title: string, size: number): void;
    
    /**
     * Called while an addon from the Steam workshop is downloading. Used by default to update details on the fancy workshop download panel. 
     * @param id  Workshop ID of addon. 
     * @param imageID  ID of addon's preview image.
     * 
     * For example, for '''Extended Spawnmenu''' addon, the image URL is
     * <samp><nowiki>http://cloud-4.steamusercontent.com/ugc/702859018846106764/9E7E1946296240314751192DA0AD15B6567FF92D/</nowiki></samp>
     * So, the value of this argument would be '''702859018846106764'''. 
     * @param title  Name of addon. 
     * @param downloaded  Current bytes of addon downloaded. 
     * @param expected  Expected file size of addon in bytes. 
     */
    public WorkshopDownloadProgress(id: number, imageID: number, title: string, downloaded: number, expected: number): void;
    
    /**
     * Called after {{HookFunction|GM|WorkshopStart}}. 
     * @param remain  Remaining addons to download 
     * @param total  Total addons needing to be downloaded 
     */
    public WorkshopDownloadTotals(remain: number, total: number): void;
    
    /**
     * Called when downloading content from Steam workshop ends. Used by default to hide fancy workshop downloading panel. 
     */
    public WorkshopEnd(): void;
    
    /**
     * Called when downloading content from Steam workshop begins. Used by default to show fancy workshop downloading panel.
     * 
     * The order of Workshop hooks is this:
     * * WorkshopStart
     * * WorkshopDownloadTotals
     * ** These are called for each new item:
     * *** WorkshopDownloadFile
     * *** WorkshopDownloadProgress - This is called until the file is finished
     * *** WorkshopDownloadedFile
     * * WorkshopEnd 
     */
    public WorkshopStart(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called by the engine when the game initially fetches subscriptions to be displayed on the bottom of the main menu screen. 
     * @param num  Amount of subscribed addons that have info retrieved. 
     * @param max  Total amount of subscribed addons that need their info retrieved. 
     */
    public WorkshopSubscriptionsProgress(num: number, max: number): void;
}

/**
 * This is the list of global functions. 
 */
/**
 * Adds simple Get/Set accessor functions on the specified table.
 * 
 * Can also force the value to be set to a number, bool or string. 
 * @param tab  The table to add the accessor functions too. 
 * @param key  The key of the table to be get/set. 
 * @param name  The name of the functions (will be prefixed with Get and Set). 
 * @param force [=nil] The type the setter should force to (uses {{Enum|FORCE}}). 
 * @example
 * 
 * local meta = FindMetaTable("Player")
 * AccessorFunc(meta, "foo_bar", "FooBar", FORCE_BOOL)
 * 
 * local ply = player.GetByID(1)
 * ply:SetFooBar(true)
 * 
 * print(not ply:GetFooBar())
 * 
 * // Adds the GetFooBar and SetFooBar functions to the Player metatable and then uses them. 
 */
declare function AccessorFunc(tab: table, key: any, name: string, force?: FORCE): void;

/**
 * Defines a global entity class variable with an automatic value in order to prevent collisions with other {{Enum|CLASS}}. You should prefix your variable with CLASS_ for consistency. 
 * @param name  The name of the new enum/global variable. 
 * @example
 * 
 * Add_NPC_Class( "CLASS_TESTER" )
 * print( CLASS_TESTER )
 * 
 * // Creates a global variable named CLASS_TESTER and prints its value. 
 */
declare function Add_NPC_Class(name: string): void;

/**
 * Adds the specified image path to the main menu background pool. Image can be png or jpeg. 
 * @param path  Path to the image. 
 */
declare function AddBackgroundImage(path: string): void;

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * Tells the engine to register a console command. If the command was ran, the engine calls {{LibraryFunction|concommand|Run}}. 
 * @param name  The name of the console command to add. 
 * @param helpText  The help text. 
 * @param flags  Concommand flags using {{Enum|FCVAR}} 
 */
declare function AddConsoleCommand(name: string, helpText: string, flags: FCVAR): void;

/**
 * Marks a Lua file to be sent to clients when they join the server. Doesn't do anything on the client - this means you can use it in a shared file without problems.
 * 
 * {{Warning|If the file trying to be added is empty, an error will occur, and the file will not be sent to the client.}}
 * 
 * **Note:**
 * >This function is not needed for scripts located in '''lua/autorun/''' and '''lua/autorun/client/''': they are automatically sent to clients. 
 * @param file [=current file] The name/path to the Lua file that should be sent, relative to the garrysmod/lua folder. If no parameter is specified, it sends the current file.
 * 
 * The file path can be relative to the script it is ran from. For example, if your script is in lua/myfolder/stuff.lua, calling {{GlobalFunction|AddCSLuaFile}}("otherstuff.lua") and {{GlobalFunction|AddCSLuaFile}}("myfolder/otherstuff.lua") is the same thing. 
 * @example
 * 
 * AddCSLuaFile( "cl_init.lua" )
 * 
 * // Adds the cl_init.lua file in the "lua" folder to be downloaded by connecting clients. This is required, and is normally done in init.lua.@example
 * 
 * AddCSLuaFile()
 * 
 * // Adds the current file to the list of files to be downloaded by clients. This is usually done at the top of a shared file. 
 */
declare function AddCSLuaFile(file?: string): void;

/**
 * Loads the specified image from the /cache folder, used in combination {{LibraryFunction|steamworks|Download}}.
 * 
 * Most addons will provide a 512x512 png image. 
 * @param name  The name of the file. 
 * @returns The material, returns nil if the cached file is not an image. 
 */
declare function AddonMaterial(name: string): IMaterial;

/**
 * Adds the specified vector to the PVS which is currently building. This allows all objects in visleafs visible from that vector to be drawn. 
 * @param position  The origin to add. 
 * @example
 * 
 * hook.Add("SetupPlayerVisibility", "AddRTCamera", function(pPlayer, pViewEntity)
 * 	// Adds any view entity
 * 	if (pViewEntity:IsValid()) then
 * 		AddOriginToPVS(pViewEntity:GetPos())
 * 	end
 * end)
 * 
 * // Adds an RTCamera's current position to all player's PVS, causing props near it to always render on an rtscreen 
 */
declare function AddOriginToPVS(position: Vector): void;

/**
 * This function creates a World Tip, similar to the one shown when aiming at a Thruster where it shows you its force.
 * 
 * This function will make a World Tip that will only last 50 milliseconds (1/20th of a second), so you must call it continuously as long as you want the World Tip to be shown. It is common to call it inside a Think hook.
 * 
 * Contrary to what the function's name implies, it is impossible to create more than one World Tip at the same time. A new World Tip will overwrite the old one, so only use this function when you know nothing else will also be using it.
 * 
 * See {{HookFunction|SANDBOX|PaintWorldTips}} for more information.
 * 
 * **Note:**
 * >This function is only available in Sandbox and its derivatives 
 * @param entindex [=nil] '''This argument is no longer used'''; it has no effect on anything. You can use nil in this argument. 
 * @param text [=] The text for the world tip to display. 
 * @param dieTime [=SysTime() + 0.05] '''This argument is no longer used'''; when you add a World Tip it will always last only 0.05 seconds. You can use nil in this argument. 
 * @param pos [=ent:GetPos()] Where in the world you want the World Tip to be drawn. If you add a valid Entity in the next argument, this argument will have no effect on the actual World Tip. 
 * @param ent [=nil] Which entity you want to associate with the World Tip. This argument is optional. If set to a valid entity, this will override the position set in ''pos'' with the Entity's position. 
 * @example
 * 
 * hook.Add( "Think", "draw World Tip", function()
 * 	local ply = Entity( 1 )
 * 	local tr = ply:GetEyeTrace()
 * 	
 * 	local pos = tr.HitPos // will be unused if ent is valid
 * 	local ent = tr.Entity
 * 	
 * 	AddWorldTip( nil, "Hello world!", nil, pos, ent )
 * end )
 * 
 * // Creates a World Tip where the player is looking. If the player is looking at an entity, the World Tip is positioned on the entity. 
 */
declare function AddWorldTip(entindex?: number, text?: string, dieTime?: number, pos?: Vector, ent?: Entity): void;

/**
 * Returns an angle with a randomized pitch, yaw and roll. The pitch is between -90 and 90 degrees, while yaw and roll are between -180 and 180 degrees. 
 * @returns The randomly generated angle. 
 * @example
 * 
 * print( AngleRand() )
 * 
 * // Prints out a random angle. 
 */
declare function AngleRand(): Angle;

/**
 * If the result of the first argument is false or nil, an error is thrown with the second argument as the message. 
 * @param expression  The expression to assert. 
 * @param errorMessage [="assertion failed!"] The error message to throw when assertion fails. 
 * @returns If successful, returns the result of the first argument. 
 * @example
 * 
 * local ABC = assert(print)
 * print(ABC)
 * 
 * // The assertion is successful, and the result of the first argument is returned.@example
 * 
 * assert(print == 1, "print is not equal to 1!")
 * 
 * // Since the first argument evaluates to false, an error is thrown. 
 */
declare function assert(expression: any, errorMessage?: string): any;

/**
 * Sends the specified Lua code to all connected clients and executes it. 
 * @param code  The code to be executed. Capped at length of 254 characters. 
 * @example
 * 
 * BroadcastLua( [[print( "Hello World!" )]] )
 * 
 * // Print "Hello World!" in the clients' console 
 */
declare function BroadcastLua(code: string): void;

/**
 * Dumps the networked variables of all entities into one table and returns it. 
 * @returns Format:
 * * key = {{Type|Entity}} for NWVars or {{Type|number}} (always 0) for global vars
 * * value = {{Type|table}} formatted as:
 * ** key = {{Type|string}} var name
 * ** value = any type var value 
 */
declare function BuildNetworkedVarsTable(): table;

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * Used internally to check if the current server the player is on can be added to favorites or not. Does not check if the server is ALREADY in the favorites. 
 * @returns 
 */
declare function CanAddServerToFavorites(): boolean;

/**
 * Aborts joining of the server you are currently joining. 
 */
declare function CancelLoading(): void;

/**
 * Sets the active main menu background image to a random entry from the background images pool. Images are added with {{GlobalFunction|AddBackgroundImage}}. 
 * @param currentgm  Apparently does nothing. 
 */
declare function ChangeBackground(currentgm: string): void;

/**
 * Automatically called by the engine when a panel is hovered over with the mouse 
 * @param panel  Panel that has been hovered over 
 */
declare function ChangeTooltip(panel: Panel): void;

/**
 * Empties the pool of main menu background images. 
 */
declare function ClearBackgroundImages(): void;

/**
 * Creates a non physical entity that only exists on the client. See also {{LibraryFunction|ents|CreateClientProp}}.
 * 
 * **Bug [#861](https://github.com/Facepunch/garrysmod-issues/issues/861):**
 * >Parented clientside models will become detached if the parent entity leaves the PVS.
 * 
 * **Bug [#1387](https://github.com/Facepunch/garrysmod-issues/issues/1387):**
 * >Clientside entities are not garbage-collected, thus you must store a reference to the object and call {{ClassFunction|CSEnt|Remove}} manually.
 * 
 * **Bug [#3184](https://github.com/Facepunch/garrysmod-issues/issues/3184):**
 * >Clientside models will occasionally delete themselves during high server lag. 
 * @param model  The file path to the model.
 * 
 * {{Warning|Model must be precached with {{LibraryFunction|util|PrecacheModel}} on the server before usage.}} 
 * @param renderGroup [=RENDERGROUP_OTHER] The rendergroup of the entity, see {{Enum|RENDERGROUP}}. 
 * @returns Created client-side model. ( C_BaseFlex ) 
 */
declare function ClientsideModel(model: string, renderGroup?: RENDERGROUP): CSEnt;

/**
 * Creates a fully clientside ragdoll.
 * 
 * **Note:**
 * >The ragdoll initially starts as hidden and with shadows disabled, see the example for how to enable it.
 * There's no need to call {{ClassFunction|Entity|Spawn}} on this entity.
 * The physics won't initialize at all if the model hasn't been precached serverside first.
 * 
 * **Bug [#1387](https://github.com/Facepunch/garrysmod-issues/issues/1387):**
 * >Clientside entities are not garbage-collected, thus you must store a reference to the object and call {{ClassFunction|CSEnt|Remove}} manually. 
 * @param model  The file path to the model.
 * 
 * {{Warning|Model must be precached with {{LibraryFunction|util|PrecacheModel}} on the server before usage.}} 
 * @param renderGroup [=RENDER_GROUP_OPAQUE] The {{Enum|RENDERGROUP}} to assign. 
 * @returns The newly created client-side ragdoll. ( C_ClientRagdoll ) 
 * @example
 * 
 * local ragdoll = ClientsideRagdoll( "models/player/breen.mdl" )
 * ragdoll:SetNoDraw( false )
 * ragdoll:DrawShadow( true )
 * 
 * // Creates a new ragdoll with the player model of breen and enables rendering and shadows. 
 */
declare function ClientsideRagdoll(model: string, renderGroup?: RENDERGROUP): CSEnt;

/**
 * Creates a scene entity based on the scene name and the entity. 
 * @param name  The name of the scene. 
 * @param targetEnt  The entity to play the scene on. 
 * @returns C_SceneEntity 
 * @example
 * 
 * ClientsideScene( "scenes/eli_lab/mo_gowithalyx01.vcd", LocalPlayer() )
 * 
 * // Plays "I guess you should go with Alyx" line from HL2. 
 */
declare function ClientsideScene(name: string, targetEnt: Entity): CSEnt;

/**
 * Closes all Derma menus that have been passed to {{GlobalFunction|RegisterDermaMenuForClose}} and calls {{HookFunction|GM|CloseDermaMenus}} 
 */
declare function CloseDermaMenus(): void;

/**
 * Executes the specified action on the garbage collector. 
 * @param action [="collect"] The action to run.
 * 
 * Valid actions are "collect", "stop", "restart", "count", "step", "setpause" and "setstepmul". 
 * @param arg [=] The argument of the specified action, only applicable for "step", "setpause" and "setstepmul". 
 * @returns If the action is count this is the number of kilobytes of memory used by Lua.
 * If the action is step this is true if a garbage collection cycle was finished.
 * 
 * If the action is setpause this is the previous value for the GC's pause.
 * If the action is setstepmul this is the previous value for the GC's step. 
 * @example
 * 
 * print( collectgarbage( "count" ) )
 * 
 * // The current floored dynamic memory usage of Lua, in kilobytes. 
 */
declare function collectgarbage(action?: string, arg?: number): any;

/**
 * Creates a {{Struct|Color}}. 
 * @param r  An integer from 0-255 describing the red value of the color. 
 * @param g  An integer from 0-255 describing the green value of the color. 
 * @param b  An integer from 0-255 describing the blue value of the color. 
 * @param a [=255] An integer from 0-255 describing the alpha (transparency) of the color. 
 * @returns The created {{Struct|Color}}. 
 * @example
 * 
 * PrintTable(Color(1, 2, 3, 4))
 * 
 * // Creates a color and prints the components to the console.@example
 * 
 * local col = Color( 0, 255, 0, 255)
 * 
 * col.r = 255
 * 
 * PrintTable(col)
 * 
 * // Color variables can have individual channels set using the arguments@example
 * 
 * local str = tostring( Color( 255, 0, 0 ) )
 * print( str )
 * 
 * // Transforms a color object to a string, then prints it.@example
 * 
 * if Color( 255, 0, 0 ) == Color( 255, 0, 0 ) then
 * 	print( "equal" )
 * else
 * 	print( "unequal" )
 * end
 * 
 * // Prints "equal" if both colors are equal, otherwise "unequal" will be printed. 
 */
declare function Color(r: number, g: number, b: number, a?: number): Color;

/**
 * Returns a new {{Struct|Color}} with the RGB components of the given {{Struct|Color}} and the alpha value specified. 
 * @param color  The {{Struct|Color}} from which to take RGB values. This color will not be modified. 
 * @param alpha  The new alpha value, a number between 0 and 255. Values above 255 will be clamped. 
 * @returns The new {{Struct|Color}} with the modified alpha value 
 * @example
 * 
 * local red = Color( 255, 0, 0, 255 )
 * local red2 = ColorAlpha( red, 125 )
 * print( red.r, red.g, red.b, red.a )
 * print( red2.r, red2.g, red2.b, red2.a )
 * 
 * // 
 */
declare function ColorAlpha(color: Color, alpha: number): Color;

/**
 * Creates a {{Struct|Color}} with randomized red, green, and blue components. If the alpha argument is true, alpha will also be randomized. 
 * @param a [=false] Should alpha be randomized. 
 * @returns The created {{Struct|Color}}. 
 */
declare function ColorRand(a?: boolean): Color;

/**
 * Converts a {{Struct|Color}} into HSV color space. 
 * @param color  The {{Struct|Color}}. 
 * @returns [The hue in degrees., The saturation in the range 0-1., The value in the range 0-1.] 
 * @example
 * 
 * print(ColorToHSV(Color(255, 255, 0)))
 * 
 * // Creates a color and prints the HSV values to the console. 
 * !TupleReturn
 */
declare function ColorToHSV(color: Color): [number, number, number];

/**
 * Attempts to compile the given file. If successful, returns a function that can be called to perform the actual execution of the script. 
 * @param path  Path to the file, relative to the garrysmod/lua/ directory. 
 * @returns The function which executes the script. 
 * @example
 * 
 * local example = CompileFile("example.lua")
 * example()
 * 
 * // Assuming our file is named example.lua and located in the garrysmod/lua/ directory, the following code would execute the script. 
 */
declare function CompileFile(path: string): Function;

/**
 * This function will compile the code argument as lua code and return a function that will execute that code. 
 * 
 * Please note that this function will not automatically execute the given code after compiling it. 
 * @param code  The code to compile. 
 * @param identifier  An identifier in case an error is thrown. (The same identifier can be used multiple times) 
 * @param HandleError [=true] If false this function will return an error string instead of throwing an error. 
 * @returns [A function that, when called, will execute the given code. Returns nil if there was an error., The error string. Will be nil if there were no errors or the function handles errors (third argument is true).] 
 * @example
 * 
 * local code = "MsgN('Hi)"
 * local func = CompileString(code, "TestCode", false)
 * MsgN(func)
 * 
 * // Code that will not compile, with ErrorHandling set to false.@example
 * 
 * local code = "MsgN('Hi')"
 * local func = CompileString(code, "TestCode")
 * 
 * if func then // Compile String returns nil if 3rd argument is true and code has errors.
 *    func()
 * end
 * 
 * // Code that will compile. 
 * !TupleReturn
 */
declare function CompileString(code: string, identifier: string, HandleError?: boolean): [Function, string];

/**
 * Returns a table of console command names beginning with the given text. 
 * @param text  Text that the console commands must begin with. 
 * @returns Table of console command names. 
 */
declare function ConsoleAutoComplete(text: string): table;

/**
 * Returns whether a {{Type|ConVar}} with the given name exists or not 
 * @param name  Name of the {{Type|ConVar}}. 
 * @returns True if the {{Type|ConVar}} exists, false otherwise. 
 */
declare function ConVarExists(name: string): ConVar;

/**
 * Makes a clientside-only console variable
 * 
 * **Note:**
 * >This function is a wrapper of {{GlobalFunction|CreateConVar}}, with the difference being that FCVAR_ARCHIVE and FCVAR_USERINFO are added automatically when '''shouldsave''' and '''userdata''' are true, respectively.
 * 
 * Although this function is shared, it should only be used clientside. 
 * @param name  Name of the ConVar to be created and able to be accessed.
 * 
 * This cannot be a name of existing console command or console variable. It will silently fail if it is. 
 * @param defaultVal  Default value of the ConVar. 
 * @param shouldsave [=true] Should the ConVar be saved across sessions 
 * @param userdata [=false] Should the ConVar and its containing data be sent to the server when it has changed. This make the convar accessible from server using {{ClassFunction|Player|GetInfoNum}} and similar functions. 
 * @param helptext [=""] Help text to display in the console. 
 * @returns Created convar. 
 * @example
 * 
 * CreateClientConVar("superspeed_enabled", "0", true, false)
 * 
 * // Creates a ConVar that does nothing and saves. 
 */
declare function CreateClientConVar(name: string, defaultVal: string, shouldsave?: boolean, userdata?: boolean, helptext?: string): ConVar;

/**
 * Creates a console variable ({{Type|ConVar}}), in general these are for things like gamemode/server settings. 
 * @param name  Name of the convar.
 * 
 * This cannot be a name of an engine console command or console variable. It will silently fail if it is. If it is the same name as another lua ConVar, it will return that ConVar object. 
 * @param value  Default value of the convar. Can also be a number. 
 * @param flags [=FCVAR_NONE] Flags of the convar, see {{Enum|FCVAR}}, either as bitflag or as table. 
 * @param helptext [=""] The help text to show in the console. 
 * @returns The convar created. 
 */
declare function CreateConVar(name: string, value: string, flags?: FCVAR, helptext?: string): ConVar;

/**
 * Creates a new material with the specified name and shader.
 * 
 * **Note:**
 * >Materials created with this function can be used in {{ClassFunction|Entity|SetMaterial}} and {{ClassFunction|Entity|SetSubMaterial}} by prepending a "!" to their material name argument.
 * 
 * **Bug [#1531](https://github.com/Facepunch/garrysmod-issues/issues/1531):**
 * >.pngs must be loaded with {{GlobalFunction|Material}} before being used with this function.
 * 
 * **Bug [#2511](https://github.com/Facepunch/garrysmod-issues/issues/2511):**
 * >This does not work with [https://developer.valvesoftware.com/wiki/Patch patch materials].
 * 
 * **Bug [#3103](https://github.com/Facepunch/garrysmod-issues/issues/3103):**
 * >This will not create a new material if another material object with the same name already exists. 
 * @param name  The material name. Must be unique. 
 * @param shaderName  The shader name. See [[:Category: Shaders]]. 
 * @param materialData  Key-value table that contains shader parameters and proxies.
 * 
 * *See: [https://developer.valvesoftware.com/wiki/Category:List_of_Shader_Parameters List of Shader Parameters on Valve Developers Wiki] and each shader's page from [[:Category: Shaders]].
 * 
 * **Note:**
 * >Unlike {{ClassFunction|IMaterial|SetTexture}}, this table will not accept {{Type|ITexture}} values. Instead, use the texture's name (see {{ClassFunction|ITexture|GetName}}). 
 * @returns Created material 
 * @example
 * 
 * CreateMaterial( "colortexshp", "VertexLitGeneric", {
 *   ["$basetexture"] = "color/white",
 *   ["$model"] = 1,
 *   ["$translucent"] = 1,
 *   ["$vertexalpha"] = 1,
 *   ["$vertexcolor"] = 1
 * } )
 * 
 * // Alternative to {{LibraryFunction|render|SetColorMaterial}}, mainly for use with {{ClassFunction|Entity|SetMaterial}} 
 */
declare function CreateMaterial(name: string, shaderName: string, materialData: ITexture[]): IMaterial;

/**
 * Creates {{Type|PhysCollide}} objects for every physics object the model has. The model must be precached with {{LibraryFunction|util|PrecacheModel}} before being used with this function. 
 * @param modelName  Model path to get the collision objects of. 
 * @returns Table of {{Type|PhysCollide}} objects. The number of entries will match the model's physics object count. See also {{ClassFunction|Entity|GetPhysicsObjectCount}}. Returns no value if the model doesn't exist, or has not been precached. 
 */
declare function CreatePhysCollidesFromModel(modelName: string): PhysCollide[];

/**
 * Returns the uptime of the server in seconds (to at least 4 decimal places)
 * 
 * This is a synchronised value and affected by various factors such as host_timescale (or {{LibraryFunction|game|GetTimeScale}}) and the server being paused - either by sv_pausable or all players disconnecting.
 * 
 * You should use this function for timing in-game events but not for real-world events.
 * 
 * See also: {{GlobalFunction|RealTime}}, {{GlobalFunction|SysTime}}
 * 
 * **Note:**
 * >This is internally defined as a float, and as such it will be affected by precision loss if your server uptime is more than 6 hours, which will cause jittery movement of players and props and inaccuracy of timers, it is highly encouraged to refresh or change the map when that happens (a server restart is not necessary).
 * 
 * This is '''NOT''' easy as it sounds to fix in the engine, so please refrain from posting issues about this
 * 
 * **Bug [#3026](https://github.com/Facepunch/garrysmod-issues/issues/3026):**
 * >This returns 0 in {{HookFunction|GM|PlayerAuthed}}. 
 * @returns Time synced with the game server. 
 * @example
 * 
 * local delay = 0
 * hook.Add( "Think", "CurTimeDelay", function()
 *  if CurTime() < delay then return end
 * 	print( "This message will repeat every 5 seconds." )
 * 	 delay = CurTime() + 5
 *  end)
 * 
 * // Simple delay timer. 
 */
declare function CurTime(): number;

/**
 * Returns an {{Type|CTakeDamageInfo}} object.
 * 
 * **Bug [#2771](https://github.com/Facepunch/garrysmod-issues/issues/2771):**
 * >This does not create a unique object, but instead returns a shared reference. That means you cannot use two or more of these objects at once. 
 * @returns The {{Type|CTakeDamageInfo}} object. 
 */
declare function DamageInfo(): CTakeDamageInfo;

/**
 * Writes text to the right hand side of the screen, like the old error system. Messages disappear after a couple of seconds. 
 * @param slot  The location on the right hand screen to write the debug info to. Starts at 0, no upper limit 
 * @param info  The debugging information to be written to the screen 
 */
declare function DebugInfo(slot: number, info: string): void;

/**
 * Gets the base class of an an object.
 * 
 * This is used not just by entities, but also by widgets, panels, drive modes, weapons and gamemodes (with "gamemode_" prefix).
 * 
 * The keyword '''DEFINE_BASECLASS''' translates into a call to this function. In the engine, it is replaced with:
 * ```local BaseClass = baseclass.Get``` 
 * @param name  The child class. 
 * @returns The base class's meta table. 
 * @example
 * 
 * AddCSLuaFile()
 * DEFINE_BASECLASS( "weapon_csbasegun" ) //this is equivalent to local BaseClass = baseclass.Get( "weapon_csbasegun" )
 * 
 * //omitted generic swep definitions
 * 
 * function SWEP:Initialize()
 * 	BaseClass.Initialize( self ) //calls SWEP:Initialize() from weapon_csbasegun
 * 	self:SetHoldType( "pistol" )
 * end
 * 
 * function SWEP:Deploy()
 * 	self:SetAccuracy( 0.9 )
 * 	return BaseClass.Deploy( self ) //calls SWEP:Deploy() from weapon_csbasegun and returns its result
 * end
 * 
 * function SWEP:SetupDataTables()
 * 	BaseClass.SetupDataTables( self ) //calls SWEP:SetupDataTables() from weapon_csbasegun and inits its dtvars
 * end
 * 
 * // Inherits the weapon from weapon_csbasegun and calls its base functions 
 */
declare function DEFINE_BASECLASS(name: string): table;

/**
 * Retrieves data from a gamemode to use in yours. This also sets a BaseClass field on your GM table to the gamemode you are deriving from. It appears that this function works by running the init and cl_init Lua files of the target gamemode, then overriding functions that appear in both the target and your gamemode with your gamemode's functions. 
 * @param base  Gamemode name to derive from. 
 * @example
 * 
 * DeriveGamemode("sandbox")
 * 
 * // Retrieves data from sandbox. 
 */
declare function DeriveGamemode(base: string): void;

/**
 * Creates a new derma animation. 
 * @param name  Name of the animation to create 
 * @param panel  Panel to run the animation on 
 * @param func  Function to call to process the animation
 * 
 * Arguments:
 * * {{FuncArg|Panel|pnl|the panel passed to Derma_Anim}}
 * * {{FuncArg|table|anim|the anim table}}
 * * {{FuncArg|number|delta|the fraction of the progress through the animation}}
 * * {{FuncArg|any|data|optional data passed to the run metatable method}} 
 * @returns A lua metatable containing four methods:
 * * Run() - Should be called each frame you want the animation to be ran.
 * * Active() - Returns if the animation is currently active (has not finished and stop has not been called)
 * * Stop() - Halts the animation at its current progress.
 * * Start( Length, Data ) - Prepares the animation to be ran for Length seconds. Must be called once before calling Run(). The data parameter will be passed to the func function. 
 * @example
 * 
 * local function inQuad(fraction, beginning, change)
 * 	return change * (fraction ^ 2) + beginning
 * end
 * 
 * local main = vgui.Create("DFrame")
 * main:SetTitle("Derma_Anim Example")
 * main:SetSize(250, 200)
 * main:SetPos(200)
 * main:MakePopup()
 * local anim = Derma_Anim("EaseInQuad", main, function(pnl, anim, delta, data)
 * 	pnl:SetPos(inQuad(delta, 200, 600), 300) // Change the X coordinate from 200 to 200+600
 * end)
 * anim:Start(2) // Animate for two seconds
 * main.Think = function(self)
 * 	if anim:Active() then
 * 		anim:Run()
 * 	end
 * end
 * 
 * // Applies an [http://easings.net/#easeInQuad easeInQuad] easing to the panel to make it glide naturally across the screen. 
 */
declare function Derma_Anim(name: string, panel: Panel, func: Function): table;

/**
 * Draws background blur around the given panel. 
 * @param panel  Panel to draw the background blur around 
 * @param startTime  Time that the blur began being painted 
 * @example
 * 
 * function PANEL:Init()
 *     self.startTime = SysTime()
 * end
 * 
 * function PANEL:Paint()
 *     Derma_DrawBackgroundBlur(self, self.startTime)
 * end
 * 
 * // Blur being drawn around a panel 
 */
declare function Derma_DrawBackgroundBlur(panel: Panel, startTime: number): void;

/**
 * Creates panel method that calls the supplied Derma skin hook via {{LibraryFunction|derma|SkinHook}} 
 * @param panel  Panel to add the hook to 
 * @param functionName  Name of panel function to create 
 * @param hookName  Name of Derma skin hook to call within the function 
 * @param typeName  Type of element to call Derma skin hook for 
 * @example
 * 
 * Derma_Hook( PANEL, "Paint", "Paint", "Panel" )
 * 
 * // Creates PANEL.Paint function to call Derma skin hook 'Paint' with type 'Panel' 
 */
declare function Derma_Hook(panel: Panel, functionName: string, hookName: string, typeName: string): void;

/**
 * Makes the panel (usually an input of sorts) respond to changes in console variables by adding next functions to the panel:
 * * {{ClassFunction|Panel|SetConVar}}
 * * {{ClassFunction|Panel|ConVarChanged}}
 * * {{ClassFunction|Panel|ConVarStringThink}}
 * * {{ClassFunction|Panel|ConVarNumberThink}}
 * 
 * The console variable value is saved in the ''m_strConVar'' property of the panel.
 * 
 * The panel should call
 * {{ClassFunction|Panel|ConVarStringThink}} or 
 * {{ClassFunction|Panel|ConVarNumberThink}} 
 * in its {{HookFunction|PANEL|Think}} hook and should call {{ClassFunction|Panel|ConVarChanged}} when the panel's value has changed. 
 * @param target  The panel the functions should be added to. 
 * @example
 * 
 * local PANEL = {}
 * 
 * Derma_Install_Convar_Functions( PANEL )
 * 
 * function PANEL:Init()
 * 	// Init function here
 * end
 * function PANEL:Think()
 * 	self:ConVarStringThink()
 * end
 * 
 * // Adds the functions to a panel (snippet of vgui/dcheckbox.lua) 
 */
declare function Derma_Install_Convar_Functions(target: Panel): void;

/**
 * Creates a derma window to display information 
 * @param Text  The text within the created panel. 
 * @param Title  The title of the created panel. 
 * @param Button  The text of the button to close the panel. 
 */
declare function Derma_Message(Text: string, Title: string, Button: string): void;

/**
 * Shows a message box in the middle of the screen, with up to 4 buttons they can press. 
 * @param btn1text  The text to display on the first button. 
 * @returns The Panel object of the created window. 
 */
declare function Derma_Query(btn1text: string): Panel;

/**
 * Shows a message box in the middle of the screen, with up to 4 buttons they can press. 
 * @param text [="Message Text (Second Parameter)"] The message to display. 
 * @param title [="Message Title (First Parameter)"] The title to give the message box. 
 * @param btn1text [=] The text to display on the first button. 
 * @param btn1func [=nil] The function to run if the user clicks the first button. 
 * @param btn2text [=nil] The text to display on the second button. 
 * @param btn2func [=nil] The function to run if the user clicks the second button. 
 * @param btn3text [=nil] The text to display on the third button 
 * @param btn3func [=nil] The function to run if the user clicks the third button. 
 * @param btn4text [=nil] The text to display on the third button 
 * @param btn4func [=nil] The function to run if the user clicks the fourth button. 
 * @returns The Panel object of the created window. 
 */
declare function Derma_Query(text?: string, title?: string, btn1text?: string, btn1func?: Function, btn2text?: string, btn2func?: Function, btn3text?: string, btn3func?: Function, btn4text?: string, btn4func?: Function): Panel;

/**
 * Creates a derma window asking players to input a string. 
 * @param title  The title of the created panel. 
 * @param subtitle  The text above the input box 
 * @param defaultVal  The default text for the input box. 
 * @param confirm  The function to be called once the user has confirmed their input. 
 * @param cancel [=nil] The function to be called once the user has cancelled their input 
 * @param confirmText [="OK"] Allows you to override text of the "OK" button 
 * @param cancelText [="Cancel"] Allows you to override text of the "Cancel" button 
 * @returns The created {{Type|DFrame}} 
 * @example
 * 
 * Derma_StringRequest(
 * 	"Console Print", 
 * 	"Input the string to print to console",
 * 	"",
 * 	function(text) print(text) end,
 * 	function(text) print("Cancelled input") end
 * )
 * 
 * // Asks the user to input a string which is then printed to their console 
 */
declare function Derma_StringRequest(title: string, subtitle: string, defaultVal: string, confirm: Function, cancel?: Function, confirmText?: string, cancelText?: string): DFrame;

/**
 * Creates a {{Type|DMenu}} and closes any current menus. 
 * @param parent  The panel to parent the created menu to. 
 * @returns The created {{Type|DMenu}} 
 * @example
 * 
 * local menu = DermaMenu() 
 * menu:AddOption("Die", function() RunConsoleCommand("kill") end)
 * menu:AddOption("Close", function() print("Close pressed") end) // The menu will remove itself, we don't have to do anything.
 * menu:Open()
 * 
 * // Creates a DMenu with buttons to commit suicide or close it. 
 */
declare function DermaMenu(parent: Panel): DMenu;

/**
 * Sets whether rendering should be limited to being inside a panel or not.
 * 
 * See also {{LibraryFunction|surface|DisableClipping}} and {{ClassFunction|Panel|NoClipping}}. 
 * @param disable  Whether or not clipping should be disabled 
 * @example
 * 
 * function PANEL:Paint()
 *     DisableClipping(true)
 *     draw.RoundedBox(0, -50, -50, 25, 25, color_white)
 *     DisableClipping(false)
 * end
 * 
 * // Renders a white box outside of the panel 
 */
declare function DisableClipping(disable: boolean): void;

/**
 * Cancels current DOF post-process effect started with {{GlobalFunction|DOF_Start}} 
 */
declare function DOF_Kill(): void;

/**
 * Cancels any existing DOF post-process effects.
 * Begins the DOF post-process effect. 
 */
declare function DOF_Start(): void;

/**
 * A hacky method used to fix some bugs regarding DoF.
 * 
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * {{Stub}} 
 * @param enable  Enables or disables depth-of-field mode 
 */
declare function DOFModeHack(enable: boolean): void;

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 *  Draws the currently active main menu background image and handles transitioning between background images.
 * 
 * This is called by default in the menu panel's Paint hook. 
 */
declare function DrawBackground(): void;

/**
 * Draws the bloom shader, which creates a glowing effect from bright objects. 
 * @param Darken  Determines how much to darken the effect. A lower number will make the glow come from lower light levels. A value of 1 will make the bloom effect unnoticeable. Negative values will make even pitch black areas glow. 
 * @param Multiply  Will affect how bright the glowing spots are. A value of 0 will make the bloom effect unnoticeable. 
 * @param SizeX  The size of the bloom effect along the horizontal axis. 
 * @param SizeY  The size of the bloom effect along the vertical axis. 
 * @param Passes  Determines how much to exaggerate the effect. 
 * @param ColorMultiply  Will multiply the colors of the glowing spots, making them more vivid. 
 * @param Red  How much red to multiply with the glowing color. Should be between 0 and 1 
 * @param Green  How much green to multiply with the glowing color. Should be between 0 and 1 
 * @param Blue  How much blue to multiply with the glowing color. Should be between 0 and 1 
 * @example
 * 
 * function GM:RenderScreenspaceEffects()
 * 	DrawBloom( 0.65, 2, 9, 9, 1, 1, 1, 1, 1 )
 * end
 * 
 * // Draws bloom effect with default settings. 
 */
declare function DrawBloom(Darken: number, Multiply: number, SizeX: number, SizeY: number, Passes: number, ColorMultiply: number, Red: number, Green: number, Blue: number): void;

/**
 * Draws the Color Modify shader, which can be used to adjust colors on screen. 
 * @param modifyParameters  Color modification parameters. See {{ShaderLink|g_colourmodify}} and the example below. Note that if you leave out a field, it will retain its last value which may have changed if another caller uses this function. 
 * @example
 * 
 * local tab = {
 * 	[ "$pp_colour_addr" ] = 0.02,
 * 	[ "$pp_colour_addg" ] = 0.02,
 * 	[ "$pp_colour_addb" ] = 0,
 * 	[ "$pp_colour_brightness" ] = 0,
 * 	[ "$pp_colour_contrast" ] = 1,
 * 	[ "$pp_colour_colour" ] = 3,
 * 	[ "$pp_colour_mulr" ] = 0,
 * 	[ "$pp_colour_mulg" ] = 0.02,
 * 	[ "$pp_colour_mulb" ] = 0
 * }
 * 
 * function GM:RenderScreenspaceEffects()
 * 
 * 	DrawColorModify( tab )
 * 
 * end
 * 
 * // Draws color modify with bright yellow and green colors. 
 */
declare function DrawColorModify(modifyParameters: table): void;

/**
 * Draws a material overlay on the screen. 
 * @param Material  This will be the material that is drawn onto the screen. 
 * @param RefractAmount  This will adjust how much the material will refract your screen. 
 * @example
 * 
 * function GM:RenderScreenspaceEffects()
 * 
 * 	DrawMaterialOverlay("models/props_c17/fisheyelens", -0.06)
 * 
 * end
 * 
 * // Creates a fisheye effect on your screen. 
 */
declare function DrawMaterialOverlay(Material: string, RefractAmount: number): void;

/**
 * Creates a motion blur effect by drawing your screen multiple times. 
 * @param AddAlpha  How much alpha to change per frame. 
 * @param DrawAlpha  How much alpha the frames will have. A value of 0 will not render the motion blur effect. 
 * @param Delay  Determines the amount of time between frames to capture. 
 * @example
 * 
 * function GM:RenderScreenspaceEffects()
 * 
 *  DrawMotionBlur(0.4, 0.8, 0.01)
 * 
 * end
 * 
 * // Creates a motion blur effect. 
 */
declare function DrawMotionBlur(AddAlpha: number, DrawAlpha: number, Delay: number): void;

/**
 * Draws the sharpen shader, which creates more contrast. 
 * @param Contrast  How much contrast to create. 
 * @param Distance  How large the contrast effect will be. 
 */
declare function DrawSharpen(Contrast: number, Distance: number): void;

/**
 * Draws the sobel shader, which detects edges and draws a black border. 
 * @param Threshold  Determines the threshold of edges. A value of 0 will make your screen completely black. 
 */
declare function DrawSobel(Threshold: number): void;

/**
 * Renders the post-processing effect of beams of light originating from the map's sun. Utilises the "pp/sunbeams" material 
 * @param darken  $darken property for sunbeams material 
 * @param multiplier  $multiply property for sunbeams material 
 * @param sunSize  $sunsize property for sunbeams material 
 * @param sunX  $sunx property for sunbeams material 
 * @param sunY  $suny property for sunbeams material 
 */
declare function DrawSunbeams(darken: number, multiplier: number, sunSize: number, sunX: number, sunY: number): void;

/**
 * Draws the texturize shader, which replaces each pixel on your screen with a different part of the texture depending on its brightness. See [[Shaders/g_texturize|g_texturize]] for information on making the texture. 
 * @param Scale  Scale of the texture. A smaller number creates a larger texture. 
 * @param BaseTexture  This will be the texture to use in the effect. Make sure you use {{GlobalFunction|Material}} to get the texture number 
 */
declare function DrawTexturize(Scale: number, BaseTexture: number): void;

/**
 * Draws the toy town shader, which blurs the top and bottom of your screen. This can make very large objects look like toys, hence the name. 
 * @param Passes  An integer determining how many times to draw the effect. A higher number creates more blur. 
 * @param Height  The amount of screen which should be blurred on the top and bottom. 
 * @example
 * 
 * function GM:RenderScreenspaceEffects()
 * 
 *  DrawToyTown(2, ScrH()/2)
 * 
 * end
 * 
 * // Draws toy town effect. 
 */
declare function DrawToyTown(Passes: number, Height: number): void;

/**
 * Drops the specified entity if it is being held by any player with Gravity Gun or +use pickup. 
 * @param ent  The entity to drop. 
 */
declare function DropEntityIfHeld(ent: Entity): void;

/**
 * Creates or replaces a dynamic light with the given id. 
 * @param index  Usually an entity index is used here. 
 * @returns A DynamicLight structured table. See {{Struct|DynamicLight}} 
 * @example
 * 
 * hook.Add( "Think", "Think_Lights!", function()
 * 	local dlight = DynamicLight( LocalPlayer():EntIndex() )
 * 	if ( dlight ) then
 * 		dlight.pos = LocalPlayer():GetShootPos()
 * 		dlight.r = 255
 * 		dlight.g = 255
 * 		dlight.b = 255
 * 		dlight.brightness = 2
 * 		dlight.Decay = 1000
 * 		dlight.Size = 256
 * 		dlight.DieTime = CurTime() + 1
 * 	end
 * end )
 * 
 * // Emits a bright white light from local players eyes. 
 */
declare function DynamicLight(index: number): DynamicLight;

/**
 * Returns a {{Type|CEffectData}} object to be used with {{LibraryFunction|util|Effect}}.
 * 
 * **Bug [#2771](https://github.com/Facepunch/garrysmod-issues/issues/2771):**
 * >This does not create a unique object, but instead returns a shared reference. That means you cannot use two or more of these objects at once. 
 * @returns The {{Type|CEffectData}} object. 
 */
declare function EffectData(): CEffectData;

/**
 * An 'if then else'. This is ''almost'' equivalent to (''condition'' and ''truevar'' or ''falsevar'') in Lua. The difference is that if ''truevar'' evaluates to false, the plain Lua method stated would return ''falsevar'' regardless of ''condition'' whilst this function would take ''condition'' into account. 
 * @param condition  The condition to check if true or false. 
 * @param truevar  If the condition isn't nil/false, returns this value. 
 * @param falsevar  If the condition is nil/false, returns this value. 
 * @returns The result. 
 * @example
 * 
 * local ply = Entity( 1 )
 * print( "Player " .. Either( ply:IsAdmin(), "is", "is not" ) .. " an admin" )
 * 
 * print( "Player " .. ( ply:IsAdmin() and "is" or "is not" ) .. " an admin" )
 * 
 * // The following two ''print'' statements have identical results.@example
 * 
 * print("You are: "..( LocalPlayer():Alive() and "alive" or "dead" ))
 * 
 * // conditional:
 * 
 * print( "Halflife? "..( (LocalPlayer():Health()==50) and "halflife" or "not halflife") )
 * 
 * // Plain Lua alias version. 
 */
declare function Either(condition: any, truevar: any, falsevar: any): any;

/**
 * Plays a sentence from scripts/sentences.txt
 * 
 * Seems to work only on serverside. 
 * @param soundName  The sound to play 
 * @param position  The position to play at 
 * @param entity  The entity to emit the sound from. Must be {{ClassFunction|Entity|EntIndex}} 
 * @param channel [=CHAN_AUTO] The sound channel, see {{Enum|CHAN}}. 
 * @param volume [=1] The volume of the sound, from 0 to 1 
 * @param soundLevel [=75] The sound level of the sound, see {{Enum|SNDLVL}} 
 * @param soundFlags [=0] The flags of the sound, see {{Enum|SND}} 
 * @param pitch [=100] The pitch of the sound, 0-255 
 * @example
 * 
 * EmitSentence( "COMBINE_DIE" .. math.random( 0, 3 ), Entity(1):GetPos(), 1, CHAN_AUTO, 1, 75, 0, 100 )
 * 
 * // Plays random combine death sound on first player. 
 */
declare function EmitSentence(soundName: string, position: Vector, entity: number, channel?: CHAN, volume?: number, soundLevel?: SNDLVL, soundFlags?: SND, pitch?: number): void;

/**
 * Emits the specified sound at the specified position.
 * 
 * **Bug:**
 * >This only works clientside.
 * 
 * **Bug:**
 * >This does not work with soundscripts. 
 * @param soundName  The sound to play 
 * @param position  The position to play at 
 * @param entity  The entity to emit the sound from. Must be {{ClassFunction|Entity|EntIndex}} 
 * @param channel [=CHAN_AUTO] The sound channel, see {{Enum|CHAN}}. 
 * @param volume [=1] The volume of the sound, from 0 to 1 
 * @param soundLevel [=75] The sound level of the sound, see {{Enum|SNDLVL}} 
 * @param soundFlags [=0] The flags of the sound, see {{Enum|SND}} 
 * @param pitch [=100] The pitch of the sound, 0-255 
 * @example
 * 
 * EmitSound( Sound("garrysmod/save_load1.wav"), Entity(1):GetPos(), 1, CHAN_AUTO, 1, 75, 0, 100 )
 * 
 * // Plays magical sound on first player. 
 */
declare function EmitSound(soundName: string, position: Vector, entity: number, channel?: CHAN, volume?: number, soundLevel?: SNDLVL, soundFlags?: SND, pitch?: number): void;

/**
 * Removes the currently active tool tip from the screen. 
 * @param panel  This is the panel that has a tool tip. 
 */
declare function EndTooltip(panel: Panel): void;

/**
 * Throws a Lua error and breaks out of the current call stack. 
 * @param message  The error message to throw. 
 * @param errorLevel [=1] The level to throw the error at. 
 * @example
 * 
 * error("garry")
 * 
 * // 
 */
declare function error(message: string, errorLevel?: number): void;

/**
 * Throws a Lua error but does not break out of the current call stack.
 * 
 * **Bug [#1810](https://github.com/Facepunch/garrysmod-issues/issues/1810):**
 * >Using this function in the menu state exits the menu.
 * 
 * **Bug [#2247](https://github.com/Facepunch/garrysmod-issues/issues/2247):**
 * >This function has a character limit of 511. 
 * @param arguments  Converts all arguments to strings and prints them with no spacing. 
 * @example
 * 
 * local num = 11
 * if ( num <= 10 and num >= 0 ) then
 * 	print( "The number is", num )
 * else
 * 	ErrorNoHalt( "Number out of range!\n" )
 * 	print("This line will be printed")
 * end
 * 
 * // An example of the use of this function 
 */
declare function ErrorNoHalt(...arguments: (any)[]): void;

/**
 * Returns the angles of the current render context as calculated by {{HookFunction|GM|CalcView}}.
 * 
 * **Bug [#2516](https://github.com/Facepunch/garrysmod-issues/issues/2516):**
 * >This function is only reliable inside rendering hooks. 
 * @returns The angle of the currently rendered scene. 
 * @example
 * 
 * print(EyeAngles())
 * 
 * // Print the view angles@example
 * 
 * print(EyeAngles():Forward())
 * 
 * // Identical to {{GlobalFunction|EyeVector}} 
 */
declare function EyeAngles(): Angle;

/**
 * Returns the origin of the current render context as calculated by {{HookFunction|GM|CalcView}}.
 * 
 * **Bug [#2516](https://github.com/Facepunch/garrysmod-issues/issues/2516):**
 * >This function is only reliable inside rendering hooks. 
 * @returns Camera position. 
 * @example
 * 
 * print(EyePos())
 * 
 * // Print the view position@example
 * 
 * hook.Add("PreDrawTranslucentRenderables", "FixEyePos", function() EyePos() end)
 * hook.Add( "Think", "Use Eyepos outside of render function", function()
 * 	local start = EyePos()
 * 	local dir = gui.ScreenToVector(gui.MousePos())
 * 	local trace = util.TraceLine{
 * 		start = start,
 * 		endpos = start + ( dir * 10000 ),
 * 		filter = { ply },
 * 	}
 * 	debugoverlay.Box( trace.HitPos, Vector( -5, -5, -5 ), Vector( 5, 5, 5 ) )
 * end )
 * 
 * // Ensuring EyePos returns the correct value outside of render hooks. 
 */
declare function EyePos(): Vector;

/**
 * Returns the normal vector of the current render context as calculated by {{HookFunction|GM|CalcView}}, similar to {{GlobalFunction|EyeAngles}}.
 * 
 * **Bug [#2516](https://github.com/Facepunch/garrysmod-issues/issues/2516):**
 * >This function is only reliable inside rendering hooks. 
 * @returns View direction of the currently rendered scene. 
 * @example
 * 
 * print( EyeVector() )
 * 
 * // Print the view angles 
 */
declare function EyeVector(): Vector;

/**
 * Returns the meta table for the class with the matching name.
 * 
 * Internally returns {{LibraryFunction|debug|getregistry}}()[metaName]
 * 
 * You can learn more about meta tables on the [[Meta Tables]] page.
 * 
 * You can find a list of meta tables that can be retrieved with this function on {{Enum|TYPE}}. The name in the description is the string to use with this function. 
 * @param metaName  The object type to retrieve the meta table of. 
 * @returns The corresponding meta table. 
 * @example
 * 
 * local meta = FindMetaTable("Player")
 * 
 * function meta:IsSick()
 * 	return true
 * end
 * 
 * // Sometime later...
 * local ply = Entity(1)
 * if ( ply:IsSick() ) then
 * 	ply:ChatPrint( "Get well soon, " .. ply:Nick() .. "!" )
 * 	ply:ChatPrint( "I just don't understand how you're always sick..." )
 * end
 * 
 * // Adds a very simple function for checking if a player is sick to the player metatable. 
 */
declare function FindMetaTable(metaName: string): table;

/**
 * Returns the tool-tip text and tool-tip-panel (if any) of the given panel as well as itself 
 * @param panel  Panel to find tool-tip of 
 * @returns [tool-tip text, tool-tip panel, panel that the function was called with] 
 * !TupleReturn
 */
declare function FindTooltip(panel: Panel): [string, Panel, Panel];

/**
 * Formats the specified values into the string given. Same as {{LibraryFunction|string|format}}. 
 * @param format  The string to be formatted.
 * 
 * Follows this format: http://www.cplusplus.com/reference/cstdio/printf/ 
 * @param formatParameters  Values to be formatted into the string. 
 * @returns The formatted string 
 */
declare function Format(format: string, ...formatParameters: (any)[]): string;

/**
 * Returns the number of frames rendered since the game was launched. 
 */
declare function FrameNumber(): void;

/**
 * Returns the {{GlobalFunction|CurTime}}-based time in seconds it took to render the last frame.
 * 
 * This should be used for frame/tick based timing, such as movement prediction or animations.
 * 
 * For real-time-based frame time that isn't affected by host_timescale, use {{GlobalFunction|RealFrameTime}}. RealFrameTime is more suited for things like GUIs or HUDs. 
 * @returns time (in seconds) 
 * @example
 * 
 * print(FrameTime())
 * 
 * // Print the frame time@example
 * 
 * print("Tick: "..(1/FrameTime()))
 * 
 * // Get the servers/clients tickrate/fps 
 */
declare function FrameTime(): number;

/**
 * Callback function for when the client has joined a server. This function shows the server's loading URL by default. 
 * @param servername  Server's name. 
 * @param serverurl  Server's loading screen URL, or "" if the URL is not set. 
 * @param mapname  Server's current map's name. 
 * @param maxplayers  Max player count of server. 
 * @param steamid  The local player's {{ClassFunction|Player|SteamID64}}. 
 * @param gamemode  Server's current gamemode's folder name. 
 * @example
 * 
 * local OldGameDetails = GameDetails
 * function GameDetails( servername, serverurl, mapname, maxplayers, steamid, gamemode )
 * 	print( 1, servername )
 * 	print( 2, serverurl )
 * 	print( 3, mapname )
 * 	print( 4, maxplayers )
 * 	print( 5, steamid )
 * 	print( 6, gamemode )
 * 	OldGameDetails( servername, serverurl, mapname, maxplayers, steamid, gamemode )
 * end
 * 
 * // Prints GameDetails of the server you join to console, and preserves default behavior. 
 */
declare function GameDetails(servername: string, serverurl: string, mapname: string, maxplayers: number, steamid: string, gamemode: string): void;

/**
 * **Deprecated:**
 * >This function was deprecated in Lua 5.1 and is removed in Lua 5.2. Use {{GlobalFunction|collectgarbage}}( "count" ) instead.
 * 
 *  Returns the current floored dynamic memory usage of Lua in kilobytes. 
 * @returns The current floored dynamic memory usage of Lua, in kilobytes. 
 */
declare function gcinfo(): number;

/**
 * Gets the ConVar with the specified name. This function caches the ConVar object internally. 
 * @param name  Name of the ConVar to get 
 * @returns The ConVar object 
 */
declare function GetConVar(name: string): ConVar;

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * Gets the ConVar with the specified name. This function doesn't cache the convar. 
 * @param name  Name of the ConVar to get 
 * @returns The ConVar object 
 */
declare function GetConVar_Internal(name: string): ConVar;

/**
 * **Deprecated:**
 * >Store the {{Type|ConVar}} object retrieved with {{GlobalFunction|GetConVar}} and call {{ClassFunction|ConVar|GetInt}} or {{ClassFunction|ConVar|GetFloat}} on it.
 * 
 * Gets the numeric value ConVar with the specified name. 
 * @param name  Name of the ConVar to get. 
 * @returns The ConVar's value. 
 */
declare function GetConVarNumber(name: string): number;

/**
 * **Deprecated:**
 * >Store the {{Type|ConVar}} object retrieved with {{GlobalFunction|GetConVar}} and call {{ClassFunction|ConVar|GetString}} on it.
 * 
 * Gets the string value ConVar with the specified name. 
 * @param name  Name of the ConVar to get. 
 * @returns The ConVar's value. 
 */
declare function GetConVarString(name: string): string;

/**
 * Returns the default loading screen URL (asset://garrysmod/html/loading.html) 
 * @returns Default loading url (asset://garrysmod/html/loading.html) 
 */
declare function GetDefaultLoadingHTML(): string;

/**
 * Retrieves data about the demo with the specified filename. Similar to {{GlobalFunction|GetSaveFileDetails}}. 
 * @param filename  The file name of the demo. 
 * @returns Demo data. 
 */
declare function GetDemoFileDetails(filename: string): table;

/**
 * Returns a table with the names of files needed from the server you are currently joining. 
 * @returns table of file names 
 * @example
 * 
 * PrintTable( GetDownloadables() )
 * 
 * // Returns a table with the file names. 
 */
declare function GetDownloadables(): table;

/**
 * Returns the environment table of either the stack level or the function specified. 
 * @param location [=1] The object to get the enviroment from. Can also be a number that specifies the function at that stack level: Level 1 is the function calling getfenv. 
 * @returns The environment. 
 */
declare function getfenv(location?: Function): table;

/**
 * Returns an angle that is shared between the server and all clients. 
 * @param index  The unique index to identify the global value with. 
 * @param defaultVal [=Angle( 0, 0, 0 )] The value to return if the global value is not set. 
 * @returns The global value, or default if the global is not set. 
 */
declare function GetGlobalAngle(index: string, defaultVal?: Angle): Angle;

/**
 * Returns a boolean that is shared between the server and all clients. 
 * @param index  The unique index to identify the global value with. 
 * @param defaultVal [=false] The value to return if the global value is not set. 
 * @returns The global value, or the default if the global value is not set. 
 */
declare function GetGlobalBool(index: string, defaultVal?: boolean): boolean;

/**
 * Returns an entity that is shared between the server and all clients. 
 * @param index  The unique index to identify the global value with. 
 * @param defaultVal [=NULL] The value to return if the global value is not set. 
 * @returns The global value, or the default if the global value is not set. 
 */
declare function GetGlobalEntity(index: string, defaultVal?: Entity): Entity;

/**
 * Returns a float that is shared between the server and all clients. 
 * @param index  The unique index to identify the global value with. 
 * @param defaultVal [=0] The value to return if the global value is not set. 
 * @returns The global value, or the default if the global value is not set. 
 */
declare function GetGlobalFloat(index: string, defaultVal?: number): number;

/**
 * Returns an integer that is shared between the server and all clients.
 * 
 * **Bug [#3374](https://github.com/Facepunch/garrysmod-issues/issues/3374):**
 * >This function will not round decimal values as it actually networks a float internally. 
 * @param index  The unique index to identify the global value with. 
 * @param defaultVal [=0] The value to return if the global value is not set. 
 * @returns The global value, or the default if the global value is not set. 
 * @example
 * 
 * print(GetGlobalInt("RoundNumber", 0))
 * 
 * // Prints the current round number if set, otherwise 0. 
 */
declare function GetGlobalInt(index: string, defaultVal?: number): number;

/**
 * Returns a string that is shared between the server and all clients. 
 * @param index  The unique index to identify the global value with. 
 * @param defaultVal [=""] The value to return if the global value is not set. 
 * @returns The global value, or the default if the global value is not set. 
 * @example
 * 
 * print( GetGlobalString("ServerName", "Garry's Mod 13") )
 * 
 * // Prints the current server name if set, otherwise "Garry's Mod 13". 
 */
declare function GetGlobalString(index: string, defaultVal?: string): string;

/**
 * Returns a vector that is shared between the server and all clients. 
 * @param Index  The unique index to identify the global value with. 
 * @param Default  The value to return if the global value is not set. 
 * @returns The global value, or the default if the global value is not set. 
 */
declare function GetGlobalVector(Index: string, Default: Vector): Vector;

/**
 * Returns the name of the current server. 
 */
declare function GetHostName(): void;

/**
 * Returns the panel that is used as a wrapper for the HUD.
 * 
 * See also {{LibraryFunction|vgui|GetWorldPanel}} 
 * @returns The HUD panel 
 */
declare function GetHUDPanel(): Panel;

/**
 * Returns the loading screen panel and creates it if it doesn't exist. 
 * @returns The loading screen panel 
 */
declare function GetLoadPanel(): Panel;

/**
 * Returns the current status of the server join progress. 
 * @returns The current status 
 */
declare function GetLoadStatus(): string;

/**
 * Returns a table with the names of all maps and categories that you have on your client. 
 * @returns table of map names and categories 
 */
declare function GetMapList(): table;

/**
 * Returns the metatable of an object. This function obeys the metatable's __metatable field, and will return that field if the metatable has it set.
 * 
 * Use {{LibraryFunction|debug|getmetatable}} if you want the true metatable of the object. 
 * @param object  The value to return the metatable of. 
 * @returns The metatable of the value. This is not always a table. 
 * @example
 * 
 * print(getmetatable(Pupil).__index.GetName(Pupil))
 * // getmetatable(Pupil) will return Pupil_meta.
 * // Same as print(Pupil:GetName())
 * // This is what the Lua interpreter basically does. (When __index is a table.)
 * 
 * getmetatable(Pupil).SetName = function(self, newName)
 *  self.name = newName
 * end
 * // We're adding a new method to Pupil's metatable
 * 
 * print(getmetatable(Pupil).GetName(Pupil))
 * // Still the same, because Pupil_meta.__index is Pupil_meta.
 * 
 * // Use a table's metatable and alter it. 
 */
declare function getmetatable(object: any): any;

/**
 * Returns the menu overlay panel, a container for panels like the error panel created in {{HookFunction|GM|OnLuaError}}. 
 * @returns The overlay panel 
 */
declare function GetOverlayPanel(): Panel;

/**
 * Creates or gets the rendertarget with the given name.
 * 
 * See {{GlobalFunction|GetRenderTargetEx}} for an advanced version of this function with more options.
 * 
 * **Bug [#2885](https://github.com/Facepunch/garrysmod-issues/issues/2885):**
 * >This crashes when used on a cubemap texture. 
 * @param name  The internal name of the render target. 
 * @param width  The width of the render target, must be power of 2. If not set to PO2, the size will be automatically converted to the nearest PO2 size. 
 * @param height  The height of the render target, must be power of 2. If not set to PO2, the size will be automatically converted to the nearest PO2 size. 
 * @param additive [=false] Sets whenever the rt should be additive. 
 * @returns The render target 
 */
declare function GetRenderTarget(name: string, width: number, height: number, additive?: boolean): ITexture;

/**
 * Creates (or gets if it already exsits) the rendertarget with the given name, this function allows to adjust the creation of a rendertarget more than {{GlobalFunction|GetRenderTarget}}.
 * 
 * See also {{LibraryFunction|render|PushRenderTarget}} and {{LibraryFunction|render|SetRenderTarget}}. 
 * @param name  The internal name of the render target.
 * 
 * {{Warning|The name is treated like a path and gets its extension discarded.
 * "name.1" and "name.2" are considered the same name and will result in the same render target being reused.}} 
 * @param width  The width of the render target, must be power of 2. 
 * @param height  The height of the render target, must be power of 2. 
 * @param sizeMode  Bitflag that influences the sizing of the render target, see {{Enum|RT_SIZE}}. 
 * @param depthMode  Bitflag that determines the depth buffer usage of the render target {{Enum|MATERIAL_RT_DEPTH}}. 
 * @param textureFlags  Bitflag that configurates the texture, see {{Enum|TEXTUREFLAGS}}.
 * 
 * List of flags can also be found on the Valve's Developer Wiki:
 * https://developer.valvesoftware.com/wiki/Valve_Texture_Format 
 * @param rtFlags  Flags that controll the HDR behaviour of the render target, see {{Enum|CREATERENDERTARGETFLAGS}}. 
 * @param imageFormat  Image format, see {{Enum|IMAGE_FORMAT}}. 
 * @returns The new render target. 
 */
declare function GetRenderTargetEx(name: string, width: number, height: number, sizeMode: RT_SIZE, depthMode: MATERIAL_RT_DEPTH, textureFlags: TEXTUREFLAGS, rtFlags: CREATERENDERTARGETFLAGS, imageFormat: IMAGE_FORMAT): ITexture;

/**
 * Retrieves data about the save with the specified filename. Similar to {{GlobalFunction|GetDemoFileDetails}}. 
 * @param filename  The file name of the save. 
 * @returns Save data. 
 */
declare function GetSaveFileDetails(filename: string): table;

/**
 * Returns the entity the client is using to see from (such as the player itself, the camera, or another entity). 
 * @returns The view entity. 
 */
declare function GetViewEntity(): Entity;

/**
 * Converts a color from HSV color space into RGB color space and returns a {{Struct|Color}}.
 * 
 * **Bug [#2407](https://github.com/Facepunch/garrysmod-issues/issues/2407):**
 * >The returned color will not have the color metatable. 
 * @param hue  Hue in degrees. 
 * @param saturation  Saturation from 0 - 1. 
 * @param value  Value from 0 - 1. 
 * @returns The {{Struct|Color}} created from the HSV color space. 
 * @example
 * 
 * local function DrawRainbowText( frequency, str, font, x, y )
 * 	
 * 	surface.SetFont( font )
 * 	
 * 	for i = 1, #str do
 * 		surface.SetTextColor( HSVToColor( i * frequency % 360, 1, 1 ) )
 * 		local w = surface.GetTextSize( string.sub( str, 1, i - 1 ) )
 * 		surface.SetTextPos( x + w, y )
 * 		surface.DrawText( string.sub( str, i, i ) )
 * 	end
 * 	
 * end
 * 
 * // A helper function for drawing rainbow text.@example
 * 
 * local function ChatPrintRainbow( frequency, str )
 * 	
 * 	local text = {}
 * 	
 * 	for i = 1, #str do
 * 		table.insert( text, HSVToColor( i * frequency % 360, 1, 1 ) )
 * 		table.insert( text, string.sub( str, i, i ) )
 * 	end
 * 
 * 	chat.AddText( unpack( text ) )
 * 	
 * end
 * 
 * // A helper function for printing rainbow text in the chat.@example
 * 
 * local function ConsolePrintRainbow( frequency, str )
 * 	
 * 	local text = {}
 * 	
 * 	for i = 1, #str do
 * 		table.insert( text, HSVToColor( i * frequency % 360, 1, 1 ) )
 * 		table.insert( text, string.sub( str, i, i ) )
 * 	end
 * 	
 * 	table.insert( text, "\n" )
 * 	
 * 	MsgC( unpack( text ) )
 * 	
 * end
 * 
 * // A helper function for printing rainbow text in the console. 
 */
declare function HSVToColor(hue: number, saturation: number, value: number): Color;

/**
 * Launches an asynchronous http request with the given parameters.
 * 
 * **Bug [#2232](https://github.com/Facepunch/garrysmod-issues/issues/2232):**
 * >This cannot send or receive multiple headers at once.
 * 
 * **Bug [#3190](https://github.com/Facepunch/garrysmod-issues/issues/3190):**
 * >This can crash on Linux. 
 * @param parameters  The request parameters. See {{Struct|HTTPRequest}}. 
 * @returns true if we made a request, nil if we failed. 
 */
declare function HTTP(parameters: HTTPRequest): boolean;

/**
 * Executes a Lua script either relative to the current file, or absolute(relative to the /lua/ folder).
 * 
 * **Note:**
 * >Addon files (.gma files) do not support relative parent folders (''..'' notation).
 * 
 * {{Warning|Files over a certain size may fail to be included.}}
 * 
 * {{Warning|The file you are attempting to include MUST NOT be empty or the include will fail.}}
 * 
 * {{Warning|If the file you are including is clientside or shared, it '''must''' be {{GlobalFunction|AddCSLuaFile}}'d or this function will error saying the file doesn't exist.}}
 * 
 * **Bug [#1976](https://github.com/Facepunch/garrysmod-issues/issues/1976):**
 * >{{GlobalFunction|pcall}}ing this function will break autorefresh. 
 * @param fileName  The name of the script to be executed. 
 * @returns Anything that the executed Lua script returns. 
 */
declare function include(fileName: string): any;

/**
 * **Deprecated:**
 * >To send the target file to the client simply call AddCSLuaFile() in the target file itself.
 * 
 * This function works exactly the same as {{GlobalFunction|include}} both clientside and serverside.
 * 
 * The only difference is that on the serverside it also calls {{GlobalFunction|AddCSLuaFile}} on the filename, so that it gets sent to the client. 
 * @param filename  The filename of the Lua file you want to include. 
 */
declare function IncludeCS(filename: string): void;

/**
 * Returns an iterator function for a for loop, to return ordered key-value pairs from a table.
 * 
 * This will only iterate though '''numerical''' keys, and these must also be '''sequential'''; starting at 1 with no gaps.
 * 
 * For unordered pairs, see {{GlobalFunction|pairs}}.
 * 
 * For pairs sorted by key in alphabetical order, see {{GlobalFunction|SortedPairs}}. 
 * @param tab  The table to iterate over. 
 * @returns [The iterator function., The table being iterated over, The origin index '''=0'''] 
 * @example
 * 
 * local tbl = { two = 2, one = 1, "alpha", "bravo", [3] = "charlie", [5] = "echo", [6] = "foxtrot" }
 * 
 * print( "pairs:" )
 * for k, v in pairs( tbl ) do
 * 	print( k, v )
 * end
 * print( "\nipairs:" )
 * for k, v in ipairs( tbl ) do
 * 	print( k, v )
 * end
 * 
 * // Demonstrates how this differs from {{GlobalFunction|pairs}}.@example
 * 
 * local NUM = 32
 * local Count = 0
 * for k, v in ipairs( ClientUndos ) do
 * 	local Item = ComboBox:AddItem( tostring( v.Name ) )
 * 	Item.DoClick = function() RunConsoleCommand( "gmod_undonum", tostring( v.Key ) ) end
 * 
 * 	Count = Count + 1
 * 	if ( Count > NUM ) then break end
 * end
 * 
 * // From ''UpdateUI'' in [https://github.com/garrynewman/garrysmod/blob/master/garrysmod/lua/includes/modules/undo.lua#L43 undo.lua], this adds the first 32 undo entries to the ''Undo'' panel in the spawnmenu. 
 * !TupleReturn
 */
declare function ipairs(tab: table): [Function, table, number];

/**
 * Returns if the passed object is an {{Type|Angle}}. 
 * @param variable  The variable to perform the type check for. 
 * @returns True if the variable is an {{Type|Angle}}. 
 */
declare function isangle(variable: any): Angle;

/**
 * Returns if the passed object is a {{Type|boolean}}. 
 * @param variable  The variable to perform the type check for. 
 * @returns True if the variable is a {{Type|boolean}}. 
 */
declare function isbool(variable: any): boolean;

/**
 * Returns whether the given object does or doesn't have a ''metatable'' of a color.
 * 
 * '''Important:''' Engine functions (i.e. those not written in plain Lua) that return color objects do not currently set the color metatable and this function will return false if you use it on them. 
 * @param Object  The object to be tested 
 * @returns Whether the given object is a color or not 
 */
declare function IsColor(Object: any): boolean;

/**
 * Returns if the given NPC class name is an enemy.
 * 
 * Returns true if the entity name is one of the following:
 * * "npc_combine_s"
 * * "npc_cscanner"
 * * "npc_manhack"
 * * "npc_hunter"
 * * "npc_antlion"
 * * "npc_antlionguard"
 * * "npc_antlion_worker"
 * * "npc_fastzombie_torso"
 * * "npc_fastzombie"
 * * "npc_headcrab"
 * * "npc_headcrab_fast"
 * * "npc_poisonzombie"
 * * "npc_headcrab_poison"
 * * "npc_zombie"
 * * "npc_zombie_torso"
 * * "npc_zombine"
 * * "npc_gman"
 * * "npc_breen" 
 * @param className  Class name of the entity to check 
 * @returns Is an enemy 
 */
declare function IsEnemyEntityName(className: string): boolean;

/**
 * Returns if the passed object is an {{Type|Entity}}. 
 * @param variable  The variable to perform the type check for. 
 * @returns True if the variable is an {{Type|Entity}}. 
 */
declare function isentity(variable: any): Entity;

/**
 * Returns if the passed object is an {{Type|Entity}}. Alias of {{GlobalFunction|isentity}}. 
 * @param variable  The variable to check. 
 * @returns True if the variable is an {{Type|Entity}}. 
 */
declare function IsEntity(variable: any): Entity;

/**
 * Returns if this is the first time this hook was predicted.
 * 
 * This is useful for one-time logic in your SWEPs PrimaryAttack, SecondaryAttack and Reload and other [[:Category:Predicted_Hooks|predicted hooks]] (to prevent those hooks from being called rapidly in succession). It's also useful in a Move hook for when the client predicts movement.
 * 
 * Visit [[Prediction]] for more information about this behavior.
 * 
 * **Note:**
 * >This is already used internally for {{ClassFunction|Entity|EmitSound}}, {{ClassFunction|Weapon|SendWeaponAnim}} and {{ClassFunction|Entity|FireBullets}}, but NOT in  {{LibraryFunction|util|Effect}}. 
 * @returns Whether or not this is the first time being predicted. 
 * @example
 * 
 * // Note that for some reason KeyPress and KeyRelease are called multiple times
 * // for the same key event in multiplayer.
 * function GM:KeyPress(ply, key)
 *    if not IsFirstTimePredicted() then return end
 *    if not IsValid(ply) or ply != LocalPlayer() then return end
 * 
 *    if key == IN_SPEED and ply:IsActiveTraitor() then
 *       timer.Simple(0.05, function() RunConsoleCommand("+voicerecord") end)
 *    end
 * end
 * 
 * // An override for {{HookFunction|GM|KeyPress}} in the gamemode Trouble in Terrorist Town, to work around the hook being called multiple times. 
 */
declare function IsFirstTimePredicted(): boolean;

/**
 * Returns if the given NPC class name is a friend.
 * 
 * Returns true if the entity name is one of the following:
 * * "npc_monk"
 * * "npc_alyx"
 * * "npc_barney"
 * * "npc_citizen"
 * * "npc_kleiner"
 * * "npc_magnusson"
 * * "npc_eli"
 * * "npc_mossman"
 * * "npc_vortigaunt" 
 * @param className  Class name of the entity to check 
 * @returns Is a friend 
 */
declare function IsFriendEntityName(className: string): boolean;

/**
 * Returns if the passed object is a {{Type|function}}. 
 * @param variable  The variable to perform the type check for. 
 * @returns True if the variable is a {{Type|function}}. 
 */
declare function isfunction(variable: any): Function;

/**
 * Returns true if the client is currently playing either a singleplayer or multiplayer game. 
 * @returns True if we are in a game. 
 */
declare function IsInGame(): boolean;

/**
 * Returns whether the passed object is a {{Type|VMatrix}}. 
 * @param variable  The variable to perform the type check for. 
 * @returns True if the variable is a {{Type|VMatrix}}. 
 */
declare function ismatrix(variable: any): VMatrix;

/**
 * Checks whether or not a game is currently mounted. Uses data given by {{LibraryFunction|engine|GetGames}}. Currently does not work correctly serverside on dedicated servers. 
 * @param game  The game string/app ID to check. 
 * @returns True if the game is mounted. 
 * @example
 * 
 * IsMounted('cstrike')
 * 
 * // Check if Counter-Strike: Source is mounted. 
 */
declare function IsMounted(game: string): boolean;

/**
 * Returns if the passed object is a {{Type|number}}. 
 * @param variable  The variable to perform the type check for. 
 * @returns True if the variable is a {{Type|number}}. 
 */
declare function isnumber(variable: any): number;

/**
 * Returns if the passed object is a {{Type|Panel}}. 
 * @param variable  The variable to perform the type check for. 
 * @returns True if the variable is a {{Type|Panel}}. 
 */
declare function ispanel(variable: any): Panel;

/**
 * Returns if the passed object is a {{Type|string}}. 
 * @param variable  The variable to perform the type check for. 
 * @returns True if the variable is a {{Type|string}}. 
 */
declare function isstring(variable: any): string;

/**
 * Returns if the passed object is a {{Type|table}}. 
 * @param variable  The variable to perform the type check for. 
 * @returns True if the variable is a {{Type|table}}. 
 */
declare function istable(variable: any): table;

/**
 * Returns whether or not every element within a table is a valid entity 
 * @param table  Table containing entities to check 
 * @returns All entities valid 
 */
declare function IsTableOfEntitiesValid(table: table): boolean;

/**
 * Returns whether or not a model is useless by checking that the file path is that of a proper model.
 * 
 * If the string ".mdl" is not found in the model name, the function will return true.
 * 
 * The function will also return true if any of the following strings are found in the given model name:
 * * "_gesture"
 * * "_anim"
 * * "_gst"
 * * "_pst"
 * * "_shd"
 * * "_ss"
 * * "_posture"
 * * "_anm"
 * * "ghostanim"
 * * "_paths"
 * * "_shared"
 * * "anim_"
 * * "gestures_"
 * * "shared_ragdoll_" 
 * @param modelName  The model name to be checked 
 * @returns Whether or not the model is useless 
 */
declare function IsUselessModel(modelName: string): boolean;

/**
 * Returns whether an object is valid or not. (Such as {{Type|Entity}}s, {{Type|Panel}}s, custom {{Type|table}} objects and more)
 * Checks that an object is not nil, has an IsValid method and if this method returns true.
 * 
 * **Note:**
 * >Due to vehicles being technically valid the moment they're spawned, also use {{ClassFunction|Vehicle|IsValidVehicle}} to make sure they're fully initialized 
 * @param toBeValidated  The table or object to be validated. 
 * @returns True if the object is valid. 
 */
declare function IsValid(toBeValidated: any): boolean;

/**
 * Returns if the passed object is a {{Type|Vector}}. 
 * @param variable  The variable to perform the type check for. 
 * @returns True if the variable is a {{Type|Vector}}. 
 */
declare function isvector(variable: any): Vector;

/**
 * Joins the server with the specified IP. 
 * @param IP  The IP of the server to join 
 */
declare function JoinServer(IP: string): void;

/**
 * Adds javascript function 'language.Update' to an HTML panel as a method to call Lua's {{LibraryFunction|language|GetPhrase}} function. 
 * @param htmlPanel  Panel to add javascript function 'language.Update' to. 
 */
declare function JS_Language(htmlPanel: Panel): void;

/**
 * Adds javascript function 'util.MotionSensorAvailable' to an HTML panel as a method to call Lua's {{LibraryFunction|motionsensor|IsAvailable}} function. 
 * @param htmlPanel  Panel to add javascript function 'util.MotionSensorAvailable' to. 
 */
declare function JS_Utility(htmlPanel: Panel): void;

/**
 * Adds workshop related javascript functions to an HTML panel, used by the "Dupes" and "Saves" tabs in the spawnmenu. 
 * @param htmlPanel  Panel to add javascript functions to. 
 */
declare function JS_Workshop(htmlPanel: Panel): void;

/**
 * Callback function for when the client's language changes. Called by the engine. 
 * @param lang  The new language code. 
 * @example
 * 
 * local OldLanguageChanged = LanguageChanged
 * function LanguageChanged( lang )
 * 	print( "New language: " .. lang )
 * 	OldLanguageChanged( lang )
 * end
 * 
 * // Prints the new language code whenever the language changes. 
 */
declare function LanguageChanged(lang: string): void;

/**
 * Performs a linear interpolation from the start number to the end number.
 * 
 * This function provides a very efficient and easy way to smooth out movements. 
 * @param t  The fraction for finding the result. This number is clamped between 0 and 1. 
 * @param from  The starting number. The result will be equal to this if delta is 0. 
 * @param to  The ending number. The result will be equal to this if delta is 1. 
 * @returns The result of the linear interpolation, (1 - t) * from + t * to. 
 */
declare function Lerp(t: number, from: number, to: number): number;

/**
 * Returns point between first and second angle using given fraction and linear interpolation 
 * @param ratio  Ratio of progress through values 
 * @param angleStart  Angle to begin from 
 * @param angleEnd  Angle to end at 
 * @returns angle 
 * @example
 * 
 * local startAngle = Angle(0, 0, 0)
 * local endAngle = Angle(0, 180, 0)
 * local ratio = 0
 * 
 * timer.Create("Turn", 0.1, 10, function()
 *     ratio = ratio + 0.1
 *     entity:SetAngles(Lerp(ratio, startAngle, endAngle))
 * end)
 * 
 * // Turns an entity 180 degrees uses lerp over ten seconds 
 */
declare function LerpAngle(ratio: number, angleStart: Angle, angleEnd: Angle): Angle;

/**
 * Linear interpolation between two vectors. It is commonly used to smooth movement between two vectors. 
 * @param fraction  Fraction ranging from 0 to 1 
 * @param from  The initial Vector 
 * @param to  The desired Vector 
 * @returns The lerped vector. 
 * @example
 * 
 * local output = LerpVector( 0.5, Vector( 0, 0, 100 ), Vector( 0, 0, 200 ) )
 * 
 * // Get the middle point (50%) between two vectors. 
 */
declare function LerpVector(fraction: number, from: Vector, to: Vector): Vector;

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * This function is used to get the last map and category to which the map belongs from the cookie saved with {{GlobalFunction|SaveLastMap}}. 
 */
declare function LoadLastMap(): void;

/**
 * Loads all preset settings for the {{Lib|presets}} and returns them in a table 
 * @returns Preset data 
 * @example
 * 
 * PrintTable(LoadPresets())
 * 
 * // Prints all of the presets in to the console 
 */
declare function LoadPresets(): table;

/**
 * Returns a localisation for the given token, if none is found it will return the default(second) parameter. 
 * @param localisationToken  The token to find a translation for. 
 * @param defaultVal  The default value to be returned if no translation was found. 
 */
declare function Localize(localisationToken: string, defaultVal: string): void;

/**
 * Returns the player object of the current client.
 * 
 * LocalPlayer() will return NULL until all entities have been initialized. See {{HookFunction|GM|InitPostEntity}}. 
 * @returns The player object representing the client. 
 * @example
 * 
 * print( LocalPlayer() )
 * 
 * // Demonstrates the use of this function. 
 */
declare function LocalPlayer(): Player;

/**
 * Translates the specified position and angle from the specified local coordinate system into worldspace coordinates.
 * 
 * If you're working with an entity's local vectors, use {{ClassFunction|Entity|LocalToWorld}} and/or {{ClassFunction|Entity|LocalToWorldAngles}} instead.
 * 
 * See also: {{GlobalFunction|WorldToLocal}}, the reverse of this function. 
 * @param localPos  The position vector in the source coordinate system, that should be translated to world coordinates 
 * @param localAng  The angle in the source coordinate system, that should be converted to a world angle. If you don't need to convert an angle, you can supply an arbitrary valid angle (e.g. <kbd>{{GlobalFunction|Angle}}()</kbd>). 
 * @param originPos  The origin point of the source coordinate system, in world coordinates 
 * @param originAngle  The angles of the source coordinate system, as a world angle 
 * @returns [The world position of the supplied local position., The world angles of the supplied local angle.] 
 * !TupleReturn
 */
declare function LocalToWorld(localPos: Vector, localAng: Angle, originPos: Vector, originAngle: Angle): [Vector, Angle];

/**
 * Runs {{LibraryFunction|util|PrecacheModel}} and returns the string 
 * @param model  The model to precache 
 * @returns The same string entered as an argument 
 * @example
 * 
 * local CAMERA_MODEL = Model( "models/dav0r/camera.mdl" )
 * function ENT:Initialize()
 *  self:SetModel( CAMERA_MODEL )
 *  ...
 * 
 * // From entities/gmod_cameraprop.lua 
 */
declare function Model(model: string): string;

/**
 * Creates a table with the specified module name and sets the function environment for said table.
 * 
 * Any passed loaders are called with the table as an argument. An example of this is {{LibraryFunction|package|seeall}}. 
 * @param name  The name of the module. This will be used to access the module table in the runtime environment. 
 * @param loaders  Calls each function passed with the new table as an argument. 
 */
declare function module(name: string, ...loaders: (any)[]): void;

/**
 * Writes every given argument to the console.
 * 
 * Automatically attempts to convert each argument to a string. (See {{GlobalFunction|tostring}})
 * 
 * Unlike {{GlobalFunction|print}}, arguments are not separated by anything. They are simply concatenated.
 * 
 * Additionally, a newline isn't added automatically to the end, so subsequent Msg or print operations will continue the same line of text in the console. See {{GlobalFunction|MsgN}} for a version that does add a newline.
 * 
 * The text is blue on the server, orange on the client, and green on the menu: [[File:msg server client colors.png]] 
 * @param args  List of values to print. 
 * @example
 * 
 * Msg("Hello", " World!")
 * 
 * // Prints "Hello World!" to the console. 
 */
declare function Msg(...args: (any)[]): void;

/**
 * Works exactly like {{GlobalFunction|Msg}} except that, if called on the server, will print to all players consoles plus the server console. 
 * @param args  List of values to print. 
 */
declare function MsgAll(...args: (any)[]): void;

/**
 * Just like {{GlobalFunction|Msg}}, except it can also print colored text, just like {{LibraryFunction|chat|AddText}}. 
 * @param args  Values to print. If you put in a color, all text after that color will be printed in that color. 
 * @example
 * 
 * MsgC( Color( 255, 0, 0 ), "Hello World!" )
 * 
 * // Prints "Hello World!" in red to the console.@example
 * 
 * MsgC( Color( 137, 222, 255 ), "Default server color" )
 * MsgC( Color( 255, 222, 102 ), "Default client color" )
 * 
 * // Shows the built in colors for server and client 
 */
declare function MsgC(...args: (any)[]): void;

/**
 * Same as {{GlobalFunction|print}}, except it concatinates the arguments without inserting any whitespace in between them.
 * 
 * See also {{GlobalFunction|Msg}}, which doesn't add a newline (''"\n"'') at the end. 
 * @param args  List of values to print. They can be of any type and will be converted to strings with {{GlobalFunction|tostring}}. 
 * @example
 * 
 * MsgN("Hello,")
 * MsgN("World!")
 * 
 * // Prints "Hello, World!" in two lines to the console. 
 */
declare function MsgN(...args: (any)[]): void;

/**
 * Returns named color defined in resource/ClientScheme.res. 
 * @param name  Name of color 
 * @returns A {{Struct|Color}} or nil 
 */
declare function NamedColor(name: string): Color;

/**
 * Returns a new userdata object. 
 * @param addMetatable [=false] If true, the userdata will get its own metatable automatically. 
 * @returns The newly created userdata. 
 */
declare function newproxy(addMetatable?: boolean): userdata;

/**
 * Returns the next key and value pair in a table.
 * 
 * **Note:**
 * >Table keys in Lua have no specific order, and will be returned in whatever order they exist in memory. This may not always be in ascending order or alphabetical order. If you need to iterate over an array in order, use {{GlobalFunction|ipairs}}. 
 * @param tab  The table 
 * @param prevKey [=nil] The previous key in the table. 
 * @returns [The next key for the table. If the previous key was nil, this will be the first key in the table. If the previous key was the last key in the table, this will be nil., The value associated with that key. If the previous key was the last key in the table, this will be nil.] 
 * @example
 * 
 * local function IsEmptyTable( t )
 * 	return next( t ) == nil
 * end
 * 
 * local mytable = {}
 * print( "mytable is empty:", IsEmptyTable( mytable ) )
 * mytable["hello"]=true
 * print( "mytable is empty:", IsEmptyTable( mytable ) )
 * 
 * // Returns whether the table is empty or not 
 * !TupleReturn
 */
declare function next(tab: table, prevKey?: any): [any, any];

/**
 * Returns the number of files needed from the server you are currently joining. 
 * @returns The number of downloadables 
 */
declare function NumDownloadables(): number;

/**
 * Returns the amount of skins the specified model has 
 * @param modelName  Model to return amount of skins of 
 * @returns Amount of skins 
 */
declare function NumModelSkins(modelName: string): number;

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 *  Called by the engine when a model has been loaded. Caches model information with the {{Lib|sql}}. 
 * @param modelName  Name of the model. 
 * @param numPostParams  Number of pose parameters the model has. 
 * @param numSeq  Number of sequences the model has. 
 * @param numAttachments  Number of attachments the model has. 
 * @param numBoneControllers  Number of bone controllers the model has. 
 * @param numSkins  Number of skins that the model has. 
 * @param size  Size of the model. 
 */
declare function OnModelLoaded(modelName: string, numPostParams: number, numSeq: number, numAttachments: number, numBoneControllers: number, numSkins: number, size: number): void;

/**
 * Opens a folder with the given name in the garrysmod folder using the operating system's file browser. Currently broken on OS X and Linux. 
 * @param folder  The subdirectory to open in the garrysmod folder. 
 * @example
 * 
 * OpenFolder( "saves" )
 * 
 * // Opens the "saves" folder. 
 */
declare function OpenFolder(folder: string): void;

/**
 * Modifies the given vectors so that all of vector2's axis are larger than vector1's by switching them around. Also known as ordering vectors.
 * 
 * **Note:**
 * >This function will irreversibly modify the given vectors 
 * @param vector1  Bounding box min resultant 
 * @param vector2  Bounding box max resultant 
 */
declare function OrderVectors(vector1: Vector, vector2: Vector): void;

/**
 * Returns an iterator function({{GlobalFunction|next}}) for a for loop that will return the values of the specified table in an arbitrary order.
 * 
 * For alphabetical '''key''' order use {{GlobalFunction|SortedPairs}}.
 * 
 * For alphabetical '''value''' order use {{GlobalFunction|SortedPairsByValue}}. 
 * @param tab  The table to iterate over 
 * @returns [The iterator ({{GlobalFunction|next}}), The table being iterated over, '''nil''' (for the constructor)] 
 * @example
 * 
 * for k, v in pairs( player.GetAll() ) do
 * 	print( v:Nick() )
 * end
 * 
 * // Iterates through all players on the server and prints their names. 
 * !TupleReturn
 */
declare function pairs(tab: table): [Function, table, any];

/**
 * Calls {{LibraryFunction|game|AddParticles}} and returns given string. 
 * @param file  The particle file. 
 * @returns The particle file. 
 */
declare function Particle(file: string): string;

/**
 * Creates a particle effect.
 * 
 * **Note:**
 * >The particle effect must be precached with {{GlobalFunction|PrecacheParticleSystem}} and the file its from must be added via {{LibraryFunction|game|AddParticles}} before it can be used! 
 * @param particleName  The name of the particle effect. 
 * @param position  The start position of the effect. 
 * @param angles  The orientation of the effect. 
 * @param parent [=NULL] If set, the particle will be parented to the entity. 
 */
declare function ParticleEffect(particleName: string, position: Vector, angles: Angle, parent?: Entity): void;

/**
 * Creates a particle effect with specialized parameters.
 * 
 * **Note:**
 * >The particle effect must be precached with {{GlobalFunction|PrecacheParticleSystem}} and the file its from must be added via {{LibraryFunction|game|AddParticles}} before it can be used! 
 * @param particleName  The name of the particle effect. 
 * @param attachType  Attachment type using {{Enum|PATTACH}}. 
 * @param entity  The entity to be used in the way specified by the attachType. 
 * @param attachmentID  The id of the attachment to be used in the way specified by the attachType. 
 */
declare function ParticleEffectAttach(particleName: string, attachType: PATTACH, entity: Entity, attachmentID: number): void;

/**
 * Creates a new {{Type|CLuaEmitter}}.
 * 
 * **Note:**
 * >Do not forget to delete the emitter with {{ClassFunction|CLuaEmitter|Finish}} once you are done with it 
 * @param position  The start position of the emitter.
 * 
 * This is only used to determine particle drawing order for translucent particles. 
 * @param use3D  Whenever to render the particles in 2D or 3D mode. 
 * @returns The new particle emitter. 
 * @example
 * 
 * local tr =  LocalPlayer():GetEyeTrace()
 * local pos = tr.HitPos + tr.HitNormal * 100 // The origin position of the effect
 * 
 * local emitter = ParticleEmitter( pos ) // Particle emitter in this position
 * 
 * for i = 0, 100 do // Do 100 particles
 * 	local part = emitter:Add( "effects/spark", pos ) // Create a new particle at pos
 * 	if ( part ) then
 * 		part:SetDieTime( 1 ) // How long the particle should "live"
 * 
 * 		part:SetStartAlpha( 255 ) // Starting alpha of the particle
 * 		part:SetEndAlpha( 0 ) // Particle size at the end if its lifetime
 * 
 * 		part:SetStartSize( 5 ) // Starting size
 * 		part:SetEndSize( 0 ) // Size when removed
 * 
 * 		part:SetGravity( Vector( 0, 0, -250 ) ) // Gravity of the particle
 * 		part:SetVelocity( VectorRand() * 50 ) // Initial velocity of the particle
 * 	end
 * end
 * 
 * emitter:Finish()
 * 
 * // Creates a simple spark particle effect 100 units above where the local player is looking at. 
 */
declare function ParticleEmitter(position: Vector, use3D: boolean): CLuaEmitter;

/**
 * Creates a path for the bot to follow 
 * @param type  The name of the path to create.
 * This is going to be "Follow" or "Chase" right now. 
 * @returns The path 
 */
declare function Path(type: string): PathFollower;

/**
 * Calls a function and catches an error that can be thrown while the execution of the call.
 * 
 * **Bug [#1976](https://github.com/Facepunch/garrysmod-issues/issues/1976):**
 * >Using this function with {{GlobalFunction|include}} will break autorefresh.
 * 
 * **Bug [#2498](https://github.com/Facepunch/garrysmod-issues/issues/2498):**
 * >This does not stop {{GlobalFunction|Error}} and {{GlobalFunction|ErrorNoHalt}} from sending error messages to the server (if called clientside) or calling the {{HookFunction|GM|OnLuaError}} hook. The success boolean returned will always return true and thus you will not get the error message returned. {{GlobalFunction|error}} does not exhibit these behaviours.
 * 
 * **Bug [#3112](https://github.com/Facepunch/garrysmod-issues/issues/3112):**
 * >This does not stop errors incurred by {{GlobalFunction|include}}. 
 * @param func  Function to be executed and of which the errors should be caught of 
 * @param arguments  Arguments to call the function with. 
 * @returns [If the function had no errors occur within it., If an error occurred, this will be a string containing the error message. Otherwise, this will be the return values of the function passed in.] 
 * @example
 * 
 * local succ, err = pcall(function() aisj() end)
 * print(succ, err)
 * 
 * // Catch an error. 
 * !TupleReturn
 */
declare function pcall(func: Function, ...arguments: (any)[]): [boolean, any];

/**
 * Moves the given model to the given position and returns view information based on its properties 
 * @param model  Model that is being rendered to the spawn icon 
 * @param position  Position that the model is being rendered at 
 * @returns Table of information of the view which can be used for rendering 
 */
declare function PositionSpawnIcon(model: Entity, position: Vector): table;

/**
 * Precaches the particle with the specified name. 
 * @param particleSystemName  The name of the particle system. 
 */
declare function PrecacheParticleSystem(particleSystemName: string): void;

/**
 * Precaches a scene file. 
 * @param scene  Path to the scene file to precache. 
 */
declare function PrecacheScene(scene: string): void;

/**
 * Load and precache a custom sentence file. 
 * @param filename  The path to the custom sentences.txt. 
 * @example
 * 
 * PrecacheSentenceFile( "data/customsentences.txt" )
 * 
 * // Precache a file named "customsentences.txt" in the data directory. 
 */
declare function PrecacheSentenceFile(filename: string): void;

/**
 * Precache a sentence group in a sentences.txt definition file. 
 * @param group  The group to precache. 
 * @example
 * 
 * PrecacheSentenceGroup( "METROPOLICE" )
 * 
 * // Precache all metropolice sentences. 
 */
declare function PrecacheSentenceGroup(group: string): void;

/**
 * Writes every given argument to the console.
 * 
 * Automatically attempts to convert each argument to a string. (See {{GlobalFunction|tostring}})
 * 
 * Separates arguments with a tab character (''"\t"''). 
 * @param args  List of values to print. 
 * @example
 * 
 * print("Hello World!", "Yay!")
 * 
 * // Prints "Hello World! Yay!" to the console. 
 */
declare function print(...args: (any)[]): void;

/**
 * Displays a message in the chat, console, or center of screen of every player.
 * 
 * This uses the archaic user message system ({{Lib|umsg}}) and hence is limited to &asymp;250 characters. 
 * @param type  Which type of message should be sent to the players (see {{Enum|HUD}}) 
 * @param message  Message to be sent to the players 
 * @example
 * 
 * PrintMessage(HUD_PRINTTALK, "I'm new here.")
 * 
 * // Prints into the every player's chat: "I'm new here." 
 */
declare function PrintMessage(type: HUD, message: string): void;

/**
 * Recursively prints the contents of a table to the console. 
 * @param tableToPrint  The table to be printed 
 * @param indent [=0] Number of tabs to start indenting at. Increases by 2 when entering another table. 
 * @param done [={}] Internal argument, you shouldn't normally change this. Used to check if a nested table has already been printed so it doesn't get caught in a loop. 
 * @example
 * 
 * local tbl = {
 *  "test",
 *  3829.4,
 *  {"foo", "baah", 20/5},
 *  true
 * }
 * PrintTable(tbl)
 * 
 * // Prints the table we created. 
 */
declare function PrintTable(tableToPrint: table, indent?: number, done?: table): void;

/**
 * Runs a function without stopping the whole script on error.
 * 
 * This function is similar to {{GlobalFunction|pcall}} and {{GlobalFunction|xpcall}} except the errors are still printed and sent to the error handler (i.e. sent to server console if clientside and {{HookFunction|GM|OnLuaError}} called). 
 * @param func  Function to run 
 * @returns Were there any errors or not 
 */
declare function ProtectedCall(func: Function): boolean;

/**
 * Returns an iterator function that can be used to loop through a table in random order 
 * @param table  Table to create iterator for 
 * @param descending  Whether the iterator should iterate descending or not 
 * @returns Iterator function 
 * @example
 * 
 * local tab = {"a", "b", "c", "d", "e", "f"}
 * 
 * for k, v in RandomPairs(tab) do
 *     print(v)
 * end
 * 
 * // Creates a table and prints its contents in random order 
 */
declare function RandomPairs(table: table, descending: boolean): Function;

/**
 * Compares the two values without calling their __eq operator. 
 * @param value1  The first value to compare. 
 * @param value2  The second value to compare. 
 * @returns Whether or not the two values are equal. 
 */
declare function rawequal(value1: any, value2: any): boolean;

/**
 * Gets the value with the specified key from the table without calling the __index method. 
 * @param table  Table to get the value from. 
 * @param index  The index to get the value from. 
 * @returns The value. 
 */
declare function rawget(table: table, index: any): any;

/**
 * Sets the value with the specified key from the table without calling the __newindex method. 
 * @param table  Table to get the value from. 
 * @param index  The index to get the value from. 
 * @param value  The value to set for the specified key. 
 */
declare function rawset(table: table, index: any, value: any): void;

/**
 * Returns the real frame-time which is unaffected by host_timescale. To be used for GUI effects (for example) 
 * @returns Real frame time 
 */
declare function RealFrameTime(): number;

/**
 * Returns the uptime of the game/server in seconds (to at least 4 decimal places)
 * 
 * **Note:**
 * >This is '''not''' synchronised or affected by the game.
 * 
 * You should use this function (or SysTime) for timing real-world events such as user interaction, but not for timing game events such as animations.
 * 
 * See also: {{GlobalFunction|CurTime}}, {{GlobalFunction|SysTime}} 
 * @returns Uptime of the server. 
 */
declare function RealTime(): number;

/**
 * Creates a new {{Type|CRecipientFilter}}. 
 * @returns The new created recipient filter. 
 * @example
 * 
 * local rf = RecipientFilter()
 * rf:AddAllPlayers()
 * print( rf:GetCount() )
 * PrintTable( rf:GetPlayers() )
 * 
 * // Example usage of the function 
 */
declare function RecipientFilter(): CRecipientFilter;

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * Adds a frame to the currently recording demo. 
 */
declare function RecordDemoFrame(): void;

/**
 * Registers a Derma element to be closed the next time {{GlobalFunction|CloseDermaMenus}} is called 
 * @param menu  Menu to be registered for closure 
 */
declare function RegisterDermaMenuForClose(menu: Panel): void;

/**
 * Saves position of your cursor on screen. You can restore it by using {{GlobalFunction|RestoreCursorPosition}}.
 * 
 * Despite this function being available on server, it will not do anything on server. 
 */
declare function RememberCursorPosition(): void;

/**
 * Does the removing of the tooltip panel. Called by {{GlobalFunction|EndTooltip}}. 
 */
declare function RemoveTooltip(): void;

/**
 * Returns the angle that the clients view is being rendered at 
 * @returns Render Angles 
 */
declare function RenderAngles(): Angle;

/**
 * Renders a Depth of Field effect 
 * @param origin  Origin to render the effect at 
 * @param angle  Angle to render the effect at 
 * @param usableFocusPoint  Point to focus the effect at 
 * @param angleSize  Angle size of the effect 
 * @param radialSteps  Amount of radial steps to render the effect with 
 * @param passes  Amount of render passes 
 * @param spin  Whether to cycle the frame or not 
 * @param inView  Table of view data 
 * @param fov  FOV to render the effect with 
 */
declare function RenderDoF(origin: Vector, angle: Angle, usableFocusPoint: Vector, angleSize: number, radialSteps: number, passes: number, spin: boolean, inView: table, fov: number): void;

/**
 * Renders the stereoscopic post-process effect 
 * @param viewOrigin  Origin to render the effect at 
 * @param viewAngles  Angles to render the effect at 
 */
declare function RenderStereoscopy(viewOrigin: Vector, viewAngles: Angle): void;

/**
 * Renders the Super Depth of Field post-process effect 
 * @param viewOrigin  Origin to render the effect at 
 * @param viewAngles  Angles to render the effect at 
 * @param viewFOV  Field of View to render the effect at 
 */
declare function RenderSuperDoF(viewOrigin: Vector, viewAngles: Angle, viewFOV: number): void;

/**
 * First tries to load a binary module with the given name, if unsuccessful, it tries to load a Lua module with the given name.
 * 
 * **Bug [#1041](https://github.com/Facepunch/garrysmod-issues/issues/1041):**
 * >Request=813 
 * @param name  The name of the module to be loaded. 
 */
declare function require(name: string): void;

/**
 * Restores position of your cursor on screen. You can save it by using {{GlobalFunction|RememberCursorPosition}}.
 * 
 * Despite this function being available on server, it will not do anything on server. 
 */
declare function RestoreCursorPosition(): void;

/**
 * Executes the given console command with the parameters.
 * 
 * **Note:**
 * >Some commands/convars are blocked from being ran/changed using this function, usually to prevent harm/annoyance to clients. For a list of blocked commands, see [[Blocked ConCommands]]. 
 * @param command  The command to be executed. 
 * @param arguments  The arguments. Note, that unlike {{ClassFunction|Player|ConCommand}}, you must pass each argument as a new string, not separating them with a space. 
 * @example
 * 
 * RunConsoleCommand("sv_gravity", "400")
 * 
 * // Changes the gravity to 400 (default 600). 
 */
declare function RunConsoleCommand(command: string, ...arguments: (any)[]): void;

/**
 * Runs a menu command. Equivalent to {{GlobalFunction|RunConsoleCommand}}( "gamemenucommand", command ) unless the command starts with the "engine" keyword in which case it is equivalent to {{GlobalFunction|RunConsoleCommand}}( command ). 
 * @param command  The menu command to run
 * 
 * Should be one of the following:
 * * Disconnect - Disconnects from the current server.
 * * OpenBenchmarkDialog - Opens the "Video Hardware Stress Test" dialog.
 * * OpenChangeGameDialog - Does not work in GMod.
 * * OpenCreateMultiplayerGameDialog - Opens the Source dialog for creating a listen server.
 * * OpenCustomMapsDialog - Does nothing.
 * * OpenFriendsDialog - Does nothing.
 * * OpenGameMenu - Does not work in GMod.
 * * OpenLoadCommentaryDialog - Opens the "Developer Commentary" selection dialog. Useless in GMod.
 * * OpenLoadDemoDialog - Does nothing.
 * * OpenLoadGameDialog - Opens the Source "Load Game" dialog.
 * * OpenNewGameDialog - Opens the "New Game" dialog. Useless in GMod.
 * * OpenOptionsDialog - Opens the options dialog.
 * * OpenPlayerListDialog - Opens the "Mute Players" dialog that shows all players connected to the server and allows to mute them.
 * * OpenSaveGameDialog - Opens the Source "Save Game" dialog.
 * * OpenServerBrowser - Opens the legacy server browser.
 * * Quit - Quits the game ''without'' confirmation (unlike other Source games).
 * * QuitNoConfirm - Quits the game without confirmation (like other Source games).
 * * ResumeGame - Closes the menu and returns to the game.
 * * engine <concommand> - Runs a console command. Equivalent to {{GlobalFunction|RunConsoleCommand}}( <concommand> ). 
 * @example
 * 
 * RunGameUICommand( "OpenOptionsDialog" )
 * 
 * // Opens the options dialog.@example
 * 
 * RunGameUICommand( "engine gameui_hide" )
 * 
 * // Hides the game UI (menu). Equivalent to {{GlobalFunction|RunConsoleCommand}}( "gameui_hide" ) 
 */
declare function RunGameUICommand(command: string): void;

/**
 * Evaluates and executes the given code, will throw an error on failure.
 * **Note:**
 * >Local variables are not passed to the given code. 
 * @param code  The code to execute. 
 * @param identifier [="RunString"] The name that should appear in any error messages caused by this code. 
 * @param handleError [=true] If false, this function will return a string containing any error messages instead of throwing an error. 
 * @returns If handleError is false, the error message (if any). 
 */
declare function RunString(code: string, identifier?: string, handleError?: boolean): string;

/**
 * Alias of {{GlobalFunction|RunString}}.
 * 
 * **Deprecated:**
 * >Use {{GlobalFunction|RunString}} instead. 
 */
declare function RunStringEx(): void;

/**
 * Removes the given entity unless it is a player or the world entity 
 * @param ent  Entity to safely remove. 
 */
declare function SafeRemoveEntity(ent: Entity): void;

/**
 * Removes entity after delay using {{GlobalFunction|SafeRemoveEntity}} 
 * @param entity  Entity to be removed 
 * @param delay  Delay for entity removal in seconds 
 */
declare function SafeRemoveEntityDelayed(entity: Entity, delay: number): void;

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * This function is used to save the last map and category to which the map belongs as a [[:Category:cookie|cookie]]. 
 * @param map  The name of the map. 
 * @param category  The name of the category to which this map belongs. 
 */
declare function SaveLastMap(map: string, category: string): void;

/**
 * Overwrites all presets with the supplied table. Used by the {{Lib|presets}} for preset saving 
 * @param presets  Presets to be saved 
 */
declare function SavePresets(presets: table): void;

/**
 * Returns a number based on the Size argument and your screen's width. The screen's width is always equal to size 640. This function is primarily used for scaling font sizes. 
 * @param Size  The number you want to scale. 
 * @example
 * 
 * print( ScreenScale(96) )
 * print( ScreenScale(400) )
 * print( ScreenScale(640) )
 * 
 * // Prints a scaled number based on the number 96, 400 and 640. 
 */
declare function ScreenScale(Size: number): void;

/**
 * Gets the height of the game's window (in pixels). 
 * @returns The height of the game's window in pixels 
 * @example
 * 
 * print(ScrH())
 * 
 * // Prints the Height of the window.@example
 * 
 * hook.Add("HUDPaint", "WhiteBox", function()
 *     surface.SetDrawColor(Color(255,255,255,255))
 *     surface.DrawRect(0, 0, ScrW() / 2, ScrH() / 2)
 * end)
 * 
 * // Draws a white box on the top left corner of your screen 
 */
declare function ScrH(): number;

/**
 * Gets the width of the game's window (in pixels). 
 * @returns The width of the game's window in pixels 
 * @example
 * 
 * print( ScrW() )
 * 
 * // Prints the width of the screen 
 */
declare function ScrW(): number;

/**
 * Used to select single values from a vararg or get the count of values in it. 
 * @param parameter  Can be a {{Type|number}} or {{Type|string}}.
 * * If it's a string and starts with "#", the function will return the amount of values in the vararg (ignoring the rest of the string).
 * * If it's a positive number, the function will return all values starting from the given index.
 * * If the number is negative, it will return the amount specified from the end instead of the beginning. 
 * @param vararg  The vararg. These are the values from which you want to select. 
 * @returns Returns a {{Type|number}} or {{Type|vararg}}, depending on the select method. 
 * @example
 * 
 * print( select( '#', 'a', true, false, {}, 1 ) )
 * 
 * // This code shows how it works with the "#" modifier:@example
 * 
 * print( select( 2, 1, 2, 3, 4, 5 ) )
 * 
 * // This prints from the 2nd vararg passed to the last@example
 * 
 * print( select( -2, 1, 2, 3, 4, 5 ) )
 * 
 * // This prints the last 2 arguments passed 
 */
declare function select(parameter: number | string, ...vararg: (any)[]): number | any;

/**
 * Send a usermessage 
 * @param name  The name of the usermessage 
 * @param recipients  Can be a {{Type|CRecipientFilter}}, {{Type|table}} or {{Type|Player}} object. 
 * @param args  Data to send in the usermessage 
 */
declare function SendUserMessage(name: string, recipients: CRecipientFilter | table | Player, ...args: (any)[]): void;

/**
 * Prints "ServerLog: PARAM" without a newline, to the server log and console. 
 * @param parameter  The value to be printed to console. 
 */
declare function ServerLog(parameter: string): void;

/**
 * Adds the given string to the computers clipboard, which can then be pasted in or outside of GMod with Ctrl + V. 
 * @param text  The text to add to the clipboard. 
 */
declare function SetClipboardText(text: string): void;

/**
 * Sets the enviroment for a function or a stack level, if a function is passed, the return value will be the function, otherwise nil. 
 * @param location  The function to set the enviroment for or a number representing stack level. 
 * @param enviroment  Table to be used as enviroment. 
 */
declare function setfenv(location: Function, enviroment: table): void;

/**
 * Defines an angle to be automatically networked to clients
 * 
 * **Note:**
 * >Running this function clientside will only set it clientside for the client it is called on! 
 * @param index  Index to identify the global angle with 
 * @param angle  Angle to be networked 
 */
declare function SetGlobalAngle(index: any, angle: Angle): void;

/**
 * Defined a boolean to be automatically networked to clients
 * 
 * **Note:**
 * >Running this function clientside will only set it clientside for the client it is called on! 
 * @param index  Index to identify the global boolean with 
 * @param bool  Boolean to be networked 
 */
declare function SetGlobalBool(index: any, bool: boolean): void;

/**
 * Defines an entity to be automatically networked to clients
 * 
 * **Note:**
 * >Running this function clientside will only set it clientside for the client it is called on! 
 * @param index  Index to identify the global entity with 
 * @param ent  Entity to be networked 
 */
declare function SetGlobalEntity(index: any, ent: Entity): void;

/**
 * Defines a floating point number to be automatically networked to clients
 * 
 * **Note:**
 * >Running this function clientside will only set it clientside for the client it is called on! 
 * @param index  Index to identify the global float with 
 * @param float  Float to be networked 
 */
declare function SetGlobalFloat(index: any, float: number): void;

/**
 * Sets an integer that is shared between the server and all clients.
 * 
 * **Note:**
 * >Running this function clientside will only set it clientside for the client it is called on!
 * 
 * **Bug [#3374](https://github.com/Facepunch/garrysmod-issues/issues/3374):**
 * >This function will not round decimal values as it actually networks a float internally. 
 * @param index  The unique index to identify the global value with. 
 * @param value  The value to set the global value to 
 * @example
 * 
 * SetGlobalInt("RoundNumber", 4)
 * 
 * // Sets the current round number. 
 */
declare function SetGlobalInt(index: string, value: number): void;

/**
 * Defines a string with a maximum of 199 characters to be automatically networked to clients
 * 
 * **Note:**
 * >Running this function clientside will only set it clientside for the client it is called on! 
 * @param index  Index to identify the global string with 
 * @param str  String to be networked 
 */
declare function SetGlobalString(index: any, str: string): void;

/**
 * Defines a vector to be automatically networked to clients
 * 
 * **Note:**
 * >Running this function clientside will only set it clientside for the client it is called on! 
 * @param index  Index to identify the global vector with 
 * @param vec  Vector to be networked 
 */
declare function SetGlobalVector(index: any, vec: Vector): void;

/**
 * Sets, changes or removes a table's metatable. Returns Tab (the first argument). 
 * @param Tab  The table who's metatable to change. 
 * @param Metatable  The metatable to assign.
 * If it's nil, the metatable will be removed. 
 * @returns The first argument. 
 * @example
 * 
 * local Pupil_meta = {
 * 	GetName = function(self)
 * 		return self.name
 * 	end
 * }
 * Pupil_meta.__index = Pupil_meta
 * // If a key cannot be found in an object, it will look in it's metatable's __index metamethod.
 * 
 * local Pupil = {
 * 	name = "John Doe"
 * }
 * 
 * setmetatable(Pupil, Pupil_meta)
 * 
 * print( Pupil:GetName() )
 * // This will look for the "GetName" key in Pupil, but it doesn't have one. So it will look in it's metatable (Pupil_meta) __index key instead.
 * 
 * // Creates a metatable and assigns it to a table. 
 */
declare function setmetatable(Tab: table, Metatable: table): table;

/**
 * Called by the engine to set which constraint system [https://developer.valvesoftware.com/wiki/Phys_constraintsystem] the next created constraints should use 
 * @param constraintSystem  Constraint system to use 
 */
declare function SetPhysConstraintSystem(constraintSystem: Entity): void;

/**
 * This function can be used in a for loop instead of {{GlobalFunction|pairs}}. It sorts all '''keys''' alphabetically.
 * 
 * For sorting by specific '''value member''', use {{GlobalFunction|SortedPairsByMemberValue}}.
 * 
 * For sorting by '''value''', use {{GlobalFunction|SortedPairsByValue}}. 
 * @param table  The table to sort 
 * @param desc [=false] Reverse the sorting order 
 * @returns [Iterator function, The table being iterated over] 
 * @example
 * 
 * for id, text in SortedPairs( { "e", "b", "d", "c", "a" } ) do
 *     print(id, text)
 * end
 * 
 * print( "//-" )
 * 
 * for id, text in SortedPairs( { e = 1, b = 2, d = 3, c = 4, a = 5 } ) do
 *     print(id, text)
 * end
 * 
 * // Example of usage. 
 * !TupleReturn
 */
declare function SortedPairs(table: table, desc?: boolean): [Function, table];

/**
 * Returns an iterator function that can be used to loop through a table in order of member values, when the values of the table are also tables and contain that member.
 * 
 * To sort by '''value''', use {{GlobalFunction|SortedPairsByValue}}.
 * 
 * To sort by '''keys''', use {{GlobalFunction|SortedPairs}}. 
 * @param table  Table to create iterator for. 
 * @param memberKey  Key of the value member to sort by. 
 * @param descending [=false] Whether the iterator should iterate in descending order or not. 
 * @returns [Iterator function, The table the iterator was created for.] 
 * @example
 * 
 * local tab = {
 * 	{
 * 		Name = "Adam",
 * 		Age = 16
 * 	},
 * 	{
 * 		Name = "Charles",
 * 		Age = 18
 * 	}
 * }
 * 
 * for k, v in SortedPairsByMemberValue(tab, "Age", true) do
 * 	print(v.Name)
 * end
 * 
 * // Creates a table and prints its contents in order of the age member descending 
 * !TupleReturn
 */
declare function SortedPairsByMemberValue(table: table, memberKey: any, descending?: boolean): [Function, table];

/**
 * Returns an iterator function that can be used to loop through a table in order of its '''values'''.
 * 
 * To sort by specific '''value member''', use {{GlobalFunction|SortedPairsByMemberValue}}.
 * 
 * To sort by '''keys''', use {{GlobalFunction|SortedPairs}}. 
 * @param table  Table to create iterator for 
 * @param descending [=false] Whether the iterator should iterate in descending order or not 
 * @returns [Iterator function, The table which will be iterated over] 
 * !TupleReturn
 */
declare function SortedPairsByValue(table: table, descending?: boolean): [Function, table];

/**
 * Runs {{LibraryFunction|util|PrecacheSound}} and returns the string 
 * @param soundPath  The soundpath to precache 
 * @returns The string passed as the first argument 
 * @example
 * 
 * local BounceSound = Sound( "garrysmod/balloon_pop_cute.wav" )
 * function ENT:PhysicsCollide( data, physobj )
 *  // Play sound on bounce
 *  if ( data.Speed > 60 && data.DeltaTime > 0.2 ) then
 *  sound.Play( BounceSound, self:GetPos(), 75, math.random( 90, 120 ), math.Clamp( data.Speed / 150, 0, 1 ) )
 *  ...
 * 
 * // From entities/sent_ball.lua 
 */
declare function Sound(soundPath: string): string;

/**
 * Returns the duration of the sound specified in seconds.
 * 
 * **Bug [#936](https://github.com/Facepunch/garrysmod-issues/issues/936):**
 * >This only works properly for .wav files serverside. 
 * @param soundName  The sound file path. 
 * @returns Sound duration in seconds. 
 */
declare function SoundDuration(soundName: string): number;

/**
 * Returns the input value in an escaped form so that it can safely be used inside of queries. The returned value is surrounded by quotes unless noQuotes is true. Alias of {{LibraryFunction|sql|SQLStr}} 
 * @param input  String to be escaped 
 * @param noQuotes [=false] Whether the returned value should be surrounded in quotes or not 
 * @returns Escaped input 
 */
declare function SQLStr(input: string, noQuotes?: boolean): string;

/**
 * **Deprecated:**
 * >You should be using {{GlobalFunction|ScreenScale}} instead.
 * 
 * Returns a number based on the Size argument and your screen's width. Alias of {{GlobalFunction|ScreenScale}}. 
 * @param Size  The number you want to scale. 
 * @example
 * 
 * print( SScale(40) )
 * 
 * // Prints a scaled number based on the number 40. 
 */
declare function SScale(Size: number): void;

/**
 * Returns the ordinal suffix of a given number. 
 * @param number  The number to find the ordinal suffix of. 
 * @returns suffix 
 * @example
 * 
 * print( 72 .. STNDRD(72) )
 * 
 * // Returns the ordinal suffix of 72. 
 */
declare function STNDRD(number: number): string;

/**
 * Suppress any networking from the server to the specified player. This is automatically called by the engine before/after a player fires their weapon, reloads, or causes any other similar shared-predicted event to occur. 
 * @param suppressPlayer  The player to suppress any networking to. 
 */
declare function SuppressHostEvents(suppressPlayer: Player): void;

/**
 * Returns a highly accurate time in seconds since the start up, ideal for benchmarking. 
 * @returns Uptime of the server. 
 * @example
 * 
 * print(SysTime())
 * 
 * // Prints the runtime@example
 * 
 * local SysTime = SysTime
 * local Distance = FindMetaTable("Vector").Distance
 * 
 * local vec1 = Vector(1, 2, 3)
 * local vec2 = Vector(13, 26, -10)
 * 
 * local count = 10000
 * 
 * local StartTime = SysTime()
 * 
 * for i = 1, count do
 * 	// Repeat an action 10,000 times to check how long it takes on average
 * 	// Example action:
 * 	Distance(vec1 , vec2)
 * end
 * 
 * local EndTime = SysTime()
 * local TotalTime = EndTime - StartTime
 * local AverageTime = TotalTime / count
 * 
 * print("Total: " .. TotalTime .. " seconds. Average: " .. AverageTime .. " seconds.")
 * 
 * // Typical usage of this function for benchmarking 
 */
declare function SysTime(): number;

/**
 * Returns a TauntCamera object 
 * @returns TauntCamera 
 */
declare function TauntCamera(): table;

/**
 * Clears focus from any text entries player may have focused. 
 */
declare function TextEntryLoseFocus(): void;

/**
 * Returns a cosine value that fluctuates based on the current time 
 * @param frequency  The frequency of fluctuation 
 * @param min  Minimum value 
 * @param max  Maxmimum value 
 * @param offset  Offset variable that doesn't affect the rate of change, but causes the returned value to be offset by time 
 * @returns Cosine value 
 */
declare function TimedCos(frequency: number, min: number, max: number, offset: number): number;

/**
 * Returns a sine value that fluctuates based on {{GlobalFunction|CurTime}}. The value returned will be between the start value plus/minus the range value.
 * 
 * Due to a bug, the range arguments don't work as intended. The existing (bugged) behavior is documented below. 
 * @param frequency  The frequency of fluctuation, in [[wikipedia:hertz|hertz]] 
 * @param origin  The center value of the sine wave. 
 * @param max  This argument's distance from origin defines the size of the full range of the sine wave. For example, if origin is 3 and max is 5, then the full range of the sine wave is 5-3 = 2. 3 is the center point of the sine wave, so the sine wave will range between 2 and 4. 
 * @param offset  Offset variable that doesn't affect the rate of change, but causes the returned value to be offset by time 
 * @returns Sine value 
 */
declare function TimedSin(frequency: number, origin: number, max: number, offset: number): number;

/**
 * Attempts to return an appropriate boolean for the given value 
 * @param val  The object to be converted to a boolean 
 * @returns '''false''' for the boolean false.
 * '''false''' for "false".
 * '''false''' for "0".
 * '''false''' for numeric 0.
 * '''false''' for nil.
 * 
 * '''true''' otherwise. 
 * @example
 * 
 * print("boolean true:", tobool(true))
 * print("boolean false:", tobool(false))
 * print("string true:", tobool("true"))
 * print("string false:", tobool("false"))
 * print("numeric 0:", tobool(0))
 * print("string 0:", tobool("0"))
 * print("string 1:", tobool("1"))
 * print("nil:", tobool(nil))
 * print("text string:", tobool("not a boolean"))
 * print("empty string:", tobool(""))
 * 
 * // Demonstrate the output of this function with various values. 
 */
declare function tobool(val: any): boolean;

/**
 * Toggles whether or not the named map is favorited in the new game list. 
 * @param map  Map to toggle favorite. 
 */
declare function ToggleFavourite(map: string): void;

/**
 * Attempts to convert the value to a number.
 * 
 * Returns nil on failure. 
 * @param value  The value to convert. Can be a number or string. 
 * @param base [=10] The [[wikipedia:Radix|numeric base]] used in the string. Can be any integer between 2 and 36, inclusive. 
 * @returns The numeric representation of the value with the given base, or nil if the conversion failed. 
 */
declare function tonumber(value: any, base?: number): number;

/**
 * Attempts to convert the value to a string. If the value is an object and its metatable has defined the __tostring metamethod, this will call that function.
 * 
 * {{GlobalFunction|print}} also uses this functionality. 
 * @param value  The object to be converted to a string. 
 * @returns The string representation of the value. 
 * @example
 * 
 * print(tostring(0x16))
 * 
 * // Convert a number to a string. 
 */
declare function tostring(value: any): string;

/**
 * **Deprecated!**
 * 
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * Returns "Lua Cache File" if the given file name is in a certain string table, nothing otherwise. 
 * @param filename  File name to test 
 * @returns "Lua Cache File" if the given file name is in a certain string table, nothing otherwise. 
 */
declare function TranslateDownloadableName(filename: string): string;

/**
 * Returns a string representing the name of the type of the passed object. 
 * @param variable  The object to get the type of. 
 * @returns The name of the object's type. 
 * @example
 * 
 * print( type(2) )
 * print( type("hai") )
 * print( type({}) )
 * 
 * // Print the name of a few types.@example
 * 
 * print( type() )
 * 
 * // Returns "no value" if called with 0 arguments/parameters. 
 */
declare function type(variable: any): string;

/**
 * Gets the associated type ID of the variable.
 * 
 * **Bug [#1120](https://github.com/Facepunch/garrysmod-issues/issues/1120):**
 * >This does not work properly with _LOADLIB objects. 
 * @param variable  The variable to get the type ID of. 
 * @returns The type ID of the variable. See the {{Enum|TYPE}}. 
 */
declare function TypeID(variable: any): TYPE;

/**
 * This function takes a numeric indexed table and return all the members as a vararg. If specified, it will start at the given index and end at end index. 
 * @param tbl  The table to generate the vararg from. 
 * @param startIndex [=1] Which index to start from. Optional. 
 * @param endIndex [=#tbl] Which index to end at. Optional, even if you set StartIndex. 
 * @returns Output values 
 * @example
 * 
 * print( unpack{"a", "b", "c"} )
 * 
 * // Prints a vararg 
 */
declare function unpack(tbl: table, startIndex?: number, endIndex?: number): any;

/**
 * Returns the current asynchronous in-game time. 
 * @returns The asynchronous in-game time. 
 */
declare function UnPredictedCurTime(): number;

/**
 * Runs JavaScript on the loading screen panel ({{GlobalFunction|GetLoadPanel}}). 
 * @param javascript  JavaScript to run on the loading panel. 
 */
declare function UpdateLoadPanel(javascript: string): void;

/**
 * **Deprecated:**
 * >You should use {{GlobalFunction|IsUselessModel}} instead.
 * 
 * Returns whether or not a model is useless by checking that the file path is that of a proper model.
 * 
 * If the string ".mdl" is not found in the model name, the function will return true.
 * 
 * The function will also return true if any of the following strings are found in the given model name:
 * * "_gesture"
 * * "_anim"
 * * "_gst"
 * * "_pst"
 * * "_shd"
 * * "_ss"
 * * "_posture"
 * * "_anm"
 * * "ghostanim"
 * * "_paths"
 * * "_shared"
 * * "anim_"
 * * "gestures_"
 * * "shared_ragdoll_" 
 * @param modelName  The model name to be checked 
 * @returns Whether or not the model is useless 
 */
declare function UTIL_IsUselessModel(modelName: string): boolean;

/**
 * **Deprecated:**
 * >You should use {{GlobalFunction|IsValid}} instead
 * 
 * Returns if a panel is safe to use. 
 * @param panel  The panel to validate. 
 */
declare function ValidPanel(panel: Panel): void;

/**
 * Returns a random vector whose components are each between -1 and 1 
 * @returns The random direction vector 
 */
declare function VectorRand(): Vector;

/**
 * Returns the time in seconds it took to render the VGUI. 
 */
declare function VGUIFrameTime(): void;

/**
 * Creates and returns a {{Type|DShape}} rectangle GUI element with the given dimensions. 
 * @param x  X position of the created element 
 * @param y  Y position of the created element 
 * @param w  Width of the created element 
 * @param h  Height of the created element 
 * @returns {{Type|DShape}} element 
 */
declare function VGUIRect(x: number, y: number, w: number, h: number): DShape;

/**
 * Briefly displays layout details of the given panel on-screen 
 * @param panel  Panel to display layout details of 
 */
declare function VisualizeLayout(panel: Panel): void;

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * Returns a new WorkshopFileBase element 
 * @param namespace  Namespace for the file base 
 * @param requiredTags  Tags required for a Workshop submission to be interacted with by the filebase 
 * @returns WorkshopFileBase element 
 */
declare function WorkshopFileBase(namespace: string, requiredTags: table): table;

/**
 * Translates the specified position and angle into the specified coordinate system. 
 * @param position  The position that should be translated from the current to the new system. 
 * @param angle  The angles that should be translated from the current to the new system. 
 * @param newSystemOrigin  The origin of the system to translate to. 
 * @param newSystemAngles  The angles of the system to translate to. 
 * @returns [Local position, Local angles] 
 * !TupleReturn
 */
declare function WorldToLocal(position: Vector, angle: Angle, newSystemOrigin: Vector, newSystemAngles: Angle): [Vector, Angle];

/**
 * Attempts to call the first function. If the execution succeeds, this returns ''true'' followed by the returns of the function. If execution fails, this returns ''false'' and the second function is called with the error message. 
 * 
 * Unlike in {{GlobalFunction|pcall}}, the stack is not unwound and can therefore be used for stack analyses with the {{Lib|debug}}.
 * 
 * **Bug [#1976](https://github.com/Facepunch/garrysmod-issues/issues/1976):**
 * >Using this function with {{GlobalFunction|include}} will break autorefresh.
 * 
 * **Bug [#2498](https://github.com/Facepunch/garrysmod-issues/issues/2498):**
 * >This does not stop {{GlobalFunction|Error}} and {{GlobalFunction|ErrorNoHalt}} from sending error messages to the server (if called clientside) or calling the {{HookFunction|GM|OnLuaError}} hook. The success boolean returned will always return true and thus you will not get the error message returned. {{GlobalFunction|error}} does not exhibit these behaviours.
 * 
 * **Bug [#3112](https://github.com/Facepunch/garrysmod-issues/issues/3112):**
 * >This does not stop errors incurred by {{GlobalFunction|include}}. 
 * @param func  The function to call initially. 
 * @param errorCallback  The function to be called if execution of the first fails; the error message is passed as a string.
 * 
 * You cannot throw an {{GlobalFunction|error}}() from this callback: it will have no effect (not even stopping the callback). 
 * @param arguments  Arguments to pass to the initial function. 
 * @returns [Status of the execution; ''true'' for success, ''false'' for failure., The returns of the first function if execution succeeded, otherwise the '''first''' return value of the error callback.] 
 * @example
 * 
 * local function test()
 * 	aisj()
 * end
 * 
 * local function catch( err )
 * 	print( "ERROR: ", err )
 * end
 * 
 * print( "Output: ", xpcall( test, catch ) )
 * 
 * // Using xpcall to catch an error. 
 * !TupleReturn
 */
declare function xpcall(func: Function, errorCallback: Function, ...arguments: (any)[]): [boolean, any];

/**
 * This is the list of global functions. 
 */
declare namespace Global {
    /**
     * Adds simple Get/Set accessor functions on the specified table.
     * 
     * Can also force the value to be set to a number, bool or string. 
     * @param tab  The table to add the accessor functions too. 
     * @param key  The key of the table to be get/set. 
     * @param name  The name of the functions (will be prefixed with Get and Set). 
     * @param force [=nil] The type the setter should force to (uses {{Enum|FORCE}}). 
     * @example
     * 
     * local meta = FindMetaTable("Player")
     * AccessorFunc(meta, "foo_bar", "FooBar", FORCE_BOOL)
     * 
     * local ply = player.GetByID(1)
     * ply:SetFooBar(true)
     * 
     * print(not ply:GetFooBar())
     * 
     * // Adds the GetFooBar and SetFooBar functions to the Player metatable and then uses them. 
     */
    function AccessorFunc(tab: table, key: any, name: string, force?: FORCE): void;
    
    /**
     * Defines a global entity class variable with an automatic value in order to prevent collisions with other {{Enum|CLASS}}. You should prefix your variable with CLASS_ for consistency. 
     * @param name  The name of the new enum/global variable. 
     * @example
     * 
     * Add_NPC_Class( "CLASS_TESTER" )
     * print( CLASS_TESTER )
     * 
     * // Creates a global variable named CLASS_TESTER and prints its value. 
     */
    function Add_NPC_Class(name: string): void;
    
    /**
     * Adds the specified image path to the main menu background pool. Image can be png or jpeg. 
     * @param path  Path to the image. 
     */
    function AddBackgroundImage(path: string): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Tells the engine to register a console command. If the command was ran, the engine calls {{LibraryFunction|concommand|Run}}. 
     * @param name  The name of the console command to add. 
     * @param helpText  The help text. 
     * @param flags  Concommand flags using {{Enum|FCVAR}} 
     */
    function AddConsoleCommand(name: string, helpText: string, flags: FCVAR): void;
    
    /**
     * Marks a Lua file to be sent to clients when they join the server. Doesn't do anything on the client - this means you can use it in a shared file without problems.
     * 
     * {{Warning|If the file trying to be added is empty, an error will occur, and the file will not be sent to the client.}}
     * 
     * **Note:**
     * >This function is not needed for scripts located in '''lua/autorun/''' and '''lua/autorun/client/''': they are automatically sent to clients. 
     * @param file [=current file] The name/path to the Lua file that should be sent, relative to the garrysmod/lua folder. If no parameter is specified, it sends the current file.
     * 
     * The file path can be relative to the script it is ran from. For example, if your script is in lua/myfolder/stuff.lua, calling {{GlobalFunction|AddCSLuaFile}}("otherstuff.lua") and {{GlobalFunction|AddCSLuaFile}}("myfolder/otherstuff.lua") is the same thing. 
     * @example
     * 
     * AddCSLuaFile( "cl_init.lua" )
     * 
     * // Adds the cl_init.lua file in the "lua" folder to be downloaded by connecting clients. This is required, and is normally done in init.lua.@example
     * 
     * AddCSLuaFile()
     * 
     * // Adds the current file to the list of files to be downloaded by clients. This is usually done at the top of a shared file. 
     */
    function AddCSLuaFile(file?: string): void;
    
    /**
     * Loads the specified image from the /cache folder, used in combination {{LibraryFunction|steamworks|Download}}.
     * 
     * Most addons will provide a 512x512 png image. 
     * @param name  The name of the file. 
     * @returns The material, returns nil if the cached file is not an image. 
     */
    function AddonMaterial(name: string): IMaterial;
    
    /**
     * Adds the specified vector to the PVS which is currently building. This allows all objects in visleafs visible from that vector to be drawn. 
     * @param position  The origin to add. 
     * @example
     * 
     * hook.Add("SetupPlayerVisibility", "AddRTCamera", function(pPlayer, pViewEntity)
     * 	// Adds any view entity
     * 	if (pViewEntity:IsValid()) then
     * 		AddOriginToPVS(pViewEntity:GetPos())
     * 	end
     * end)
     * 
     * // Adds an RTCamera's current position to all player's PVS, causing props near it to always render on an rtscreen 
     */
    function AddOriginToPVS(position: Vector): void;
    
    /**
     * This function creates a World Tip, similar to the one shown when aiming at a Thruster where it shows you its force.
     * 
     * This function will make a World Tip that will only last 50 milliseconds (1/20th of a second), so you must call it continuously as long as you want the World Tip to be shown. It is common to call it inside a Think hook.
     * 
     * Contrary to what the function's name implies, it is impossible to create more than one World Tip at the same time. A new World Tip will overwrite the old one, so only use this function when you know nothing else will also be using it.
     * 
     * See {{HookFunction|SANDBOX|PaintWorldTips}} for more information.
     * 
     * **Note:**
     * >This function is only available in Sandbox and its derivatives 
     * @param entindex [=nil] '''This argument is no longer used'''; it has no effect on anything. You can use nil in this argument. 
     * @param text [=] The text for the world tip to display. 
     * @param dieTime [=SysTime() + 0.05] '''This argument is no longer used'''; when you add a World Tip it will always last only 0.05 seconds. You can use nil in this argument. 
     * @param pos [=ent:GetPos()] Where in the world you want the World Tip to be drawn. If you add a valid Entity in the next argument, this argument will have no effect on the actual World Tip. 
     * @param ent [=nil] Which entity you want to associate with the World Tip. This argument is optional. If set to a valid entity, this will override the position set in ''pos'' with the Entity's position. 
     * @example
     * 
     * hook.Add( "Think", "draw World Tip", function()
     * 	local ply = Entity( 1 )
     * 	local tr = ply:GetEyeTrace()
     * 	
     * 	local pos = tr.HitPos // will be unused if ent is valid
     * 	local ent = tr.Entity
     * 	
     * 	AddWorldTip( nil, "Hello world!", nil, pos, ent )
     * end )
     * 
     * // Creates a World Tip where the player is looking. If the player is looking at an entity, the World Tip is positioned on the entity. 
     */
    function AddWorldTip(entindex?: number, text?: string, dieTime?: number, pos?: Vector, ent?: Entity): void;
    
    /**
     * Creates an {{Type|Angle}} object. 
     * @param pitch [=0] The pitch value of the angle.
     * 
     * If this is an {{Type|Angle}}, this function will return a copy of the given angle.
     * 
     * If this is a {{Type|string}}, this function will try to parse the string as a angle. If it fails, it returns a 0 angle.
     * (See examples) 
     * @param yaw [=0] The yaw value of the angle. 
     * @param roll [=0] The roll value of the angle. 
     * @returns Created angle 
     * @example
     * 
     * print( Angle( 1, 2, 3 ) )
     * print( Angle( "4 5 6" ) )
     * local test = Angle( 7, 8, 9 )
     * print( Angle( test ) )
     * 
     * print( Angle( "4 5 test" ) )
     * print( Angle() )
     * 
     * // Creates an angle and prints the value to the console. 
     */
    function Angle(pitch?: number, yaw?: number, roll?: number): Angle;
    
    /**
     * Returns an angle with a randomized pitch, yaw and roll. The pitch is between -90 and 90 degrees, while yaw and roll are between -180 and 180 degrees. 
     * @returns The randomly generated angle. 
     * @example
     * 
     * print( AngleRand() )
     * 
     * // Prints out a random angle. 
     */
    function AngleRand(): Angle;
    
    /**
     * If the result of the first argument is false or nil, an error is thrown with the second argument as the message. 
     * @param expression  The expression to assert. 
     * @param errorMessage [="assertion failed!"] The error message to throw when assertion fails. 
     * @returns If successful, returns the result of the first argument. 
     * @example
     * 
     * local ABC = assert(print)
     * print(ABC)
     * 
     * // The assertion is successful, and the result of the first argument is returned.@example
     * 
     * assert(print == 1, "print is not equal to 1!")
     * 
     * // Since the first argument evaluates to false, an error is thrown. 
     */
    function assert(expression: any, errorMessage?: string): any;
    
    /**
     * Sends the specified Lua code to all connected clients and executes it. 
     * @param code  The code to be executed. Capped at length of 254 characters. 
     * @example
     * 
     * BroadcastLua( [[print( "Hello World!" )]] )
     * 
     * // Print "Hello World!" in the clients' console 
     */
    function BroadcastLua(code: string): void;
    
    /**
     * Dumps the networked variables of all entities into one table and returns it. 
     * @returns Format:
     * * key = {{Type|Entity}} for NWVars or {{Type|number}} (always 0) for global vars
     * * value = {{Type|table}} formatted as:
     * ** key = {{Type|string}} var name
     * ** value = any type var value 
     */
    function BuildNetworkedVarsTable(): table;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Used internally to check if the current server the player is on can be added to favorites or not. Does not check if the server is ALREADY in the favorites. 
     * @returns 
     */
    function CanAddServerToFavorites(): boolean;
    
    /**
     * Aborts joining of the server you are currently joining. 
     */
    function CancelLoading(): void;
    
    /**
     * Sets the active main menu background image to a random entry from the background images pool. Images are added with {{GlobalFunction|AddBackgroundImage}}. 
     * @param currentgm  Apparently does nothing. 
     */
    function ChangeBackground(currentgm: string): void;
    
    /**
     * Automatically called by the engine when a panel is hovered over with the mouse 
     * @param panel  Panel that has been hovered over 
     */
    function ChangeTooltip(panel: Panel): void;
    
    /**
     * Empties the pool of main menu background images. 
     */
    function ClearBackgroundImages(): void;
    
    /**
     * Creates a non physical entity that only exists on the client. See also {{LibraryFunction|ents|CreateClientProp}}.
     * 
     * **Bug [#861](https://github.com/Facepunch/garrysmod-issues/issues/861):**
     * >Parented clientside models will become detached if the parent entity leaves the PVS.
     * 
     * **Bug [#1387](https://github.com/Facepunch/garrysmod-issues/issues/1387):**
     * >Clientside entities are not garbage-collected, thus you must store a reference to the object and call {{ClassFunction|CSEnt|Remove}} manually.
     * 
     * **Bug [#3184](https://github.com/Facepunch/garrysmod-issues/issues/3184):**
     * >Clientside models will occasionally delete themselves during high server lag. 
     * @param model  The file path to the model.
     * 
     * {{Warning|Model must be precached with {{LibraryFunction|util|PrecacheModel}} on the server before usage.}} 
     * @param renderGroup [=RENDERGROUP_OTHER] The rendergroup of the entity, see {{Enum|RENDERGROUP}}. 
     * @returns Created client-side model. ( C_BaseFlex ) 
     */
    function ClientsideModel(model: string, renderGroup?: RENDERGROUP): CSEnt;
    
    /**
     * Creates a fully clientside ragdoll.
     * 
     * **Note:**
     * >The ragdoll initially starts as hidden and with shadows disabled, see the example for how to enable it.
     * There's no need to call {{ClassFunction|Entity|Spawn}} on this entity.
     * The physics won't initialize at all if the model hasn't been precached serverside first.
     * 
     * **Bug [#1387](https://github.com/Facepunch/garrysmod-issues/issues/1387):**
     * >Clientside entities are not garbage-collected, thus you must store a reference to the object and call {{ClassFunction|CSEnt|Remove}} manually. 
     * @param model  The file path to the model.
     * 
     * {{Warning|Model must be precached with {{LibraryFunction|util|PrecacheModel}} on the server before usage.}} 
     * @param renderGroup [=RENDER_GROUP_OPAQUE] The {{Enum|RENDERGROUP}} to assign. 
     * @returns The newly created client-side ragdoll. ( C_ClientRagdoll ) 
     * @example
     * 
     * local ragdoll = ClientsideRagdoll( "models/player/breen.mdl" )
     * ragdoll:SetNoDraw( false )
     * ragdoll:DrawShadow( true )
     * 
     * // Creates a new ragdoll with the player model of breen and enables rendering and shadows. 
     */
    function ClientsideRagdoll(model: string, renderGroup?: RENDERGROUP): CSEnt;
    
    /**
     * Creates a scene entity based on the scene name and the entity. 
     * @param name  The name of the scene. 
     * @param targetEnt  The entity to play the scene on. 
     * @returns C_SceneEntity 
     * @example
     * 
     * ClientsideScene( "scenes/eli_lab/mo_gowithalyx01.vcd", LocalPlayer() )
     * 
     * // Plays "I guess you should go with Alyx" line from HL2. 
     */
    function ClientsideScene(name: string, targetEnt: Entity): CSEnt;
    
    /**
     * Closes all Derma menus that have been passed to {{GlobalFunction|RegisterDermaMenuForClose}} and calls {{HookFunction|GM|CloseDermaMenus}} 
     */
    function CloseDermaMenus(): void;
    
    /**
     * Executes the specified action on the garbage collector. 
     * @param action [="collect"] The action to run.
     * 
     * Valid actions are "collect", "stop", "restart", "count", "step", "setpause" and "setstepmul". 
     * @param arg [=] The argument of the specified action, only applicable for "step", "setpause" and "setstepmul". 
     * @returns If the action is count this is the number of kilobytes of memory used by Lua.
     * If the action is step this is true if a garbage collection cycle was finished.
     * 
     * If the action is setpause this is the previous value for the GC's pause.
     * If the action is setstepmul this is the previous value for the GC's step. 
     * @example
     * 
     * print( collectgarbage( "count" ) )
     * 
     * // The current floored dynamic memory usage of Lua, in kilobytes. 
     */
    function collectgarbage(action?: string, arg?: number): any;
    
    /**
     * Creates a {{Struct|Color}}. 
     * @param r  An integer from 0-255 describing the red value of the color. 
     * @param g  An integer from 0-255 describing the green value of the color. 
     * @param b  An integer from 0-255 describing the blue value of the color. 
     * @param a [=255] An integer from 0-255 describing the alpha (transparency) of the color. 
     * @returns The created {{Struct|Color}}. 
     * @example
     * 
     * PrintTable(Color(1, 2, 3, 4))
     * 
     * // Creates a color and prints the components to the console.@example
     * 
     * local col = Color( 0, 255, 0, 255)
     * 
     * col.r = 255
     * 
     * PrintTable(col)
     * 
     * // Color variables can have individual channels set using the arguments@example
     * 
     * local str = tostring( Color( 255, 0, 0 ) )
     * print( str )
     * 
     * // Transforms a color object to a string, then prints it.@example
     * 
     * if Color( 255, 0, 0 ) == Color( 255, 0, 0 ) then
     * 	print( "equal" )
     * else
     * 	print( "unequal" )
     * end
     * 
     * // Prints "equal" if both colors are equal, otherwise "unequal" will be printed. 
     */
    function Color(r: number, g: number, b: number, a?: number): Color;
    
    /**
     * Returns a new {{Struct|Color}} with the RGB components of the given {{Struct|Color}} and the alpha value specified. 
     * @param color  The {{Struct|Color}} from which to take RGB values. This color will not be modified. 
     * @param alpha  The new alpha value, a number between 0 and 255. Values above 255 will be clamped. 
     * @returns The new {{Struct|Color}} with the modified alpha value 
     * @example
     * 
     * local red = Color( 255, 0, 0, 255 )
     * local red2 = ColorAlpha( red, 125 )
     * print( red.r, red.g, red.b, red.a )
     * print( red2.r, red2.g, red2.b, red2.a )
     * 
     * // 
     */
    function ColorAlpha(color: Color, alpha: number): Color;
    
    /**
     * Creates a {{Struct|Color}} with randomized red, green, and blue components. If the alpha argument is true, alpha will also be randomized. 
     * @param a [=false] Should alpha be randomized. 
     * @returns The created {{Struct|Color}}. 
     */
    function ColorRand(a?: boolean): Color;
    
    /**
     * Converts a {{Struct|Color}} into HSV color space. 
     * @param color  The {{Struct|Color}}. 
     * @returns [The hue in degrees., The saturation in the range 0-1., The value in the range 0-1.] 
     * @example
     * 
     * print(ColorToHSV(Color(255, 255, 0)))
     * 
     * // Creates a color and prints the HSV values to the console. 
     * !TupleReturn
     */
    function ColorToHSV(color: Color): [number, number, number];
    
    /**
     * Attempts to compile the given file. If successful, returns a function that can be called to perform the actual execution of the script. 
     * @param path  Path to the file, relative to the garrysmod/lua/ directory. 
     * @returns The function which executes the script. 
     * @example
     * 
     * local example = CompileFile("example.lua")
     * example()
     * 
     * // Assuming our file is named example.lua and located in the garrysmod/lua/ directory, the following code would execute the script. 
     */
    function CompileFile(path: string): Function;
    
    /**
     * This function will compile the code argument as lua code and return a function that will execute that code. 
     * 
     * Please note that this function will not automatically execute the given code after compiling it. 
     * @param code  The code to compile. 
     * @param identifier  An identifier in case an error is thrown. (The same identifier can be used multiple times) 
     * @param HandleError [=true] If false this function will return an error string instead of throwing an error. 
     * @returns [A function that, when called, will execute the given code. Returns nil if there was an error., The error string. Will be nil if there were no errors or the function handles errors (third argument is true).] 
     * @example
     * 
     * local code = "MsgN('Hi)"
     * local func = CompileString(code, "TestCode", false)
     * MsgN(func)
     * 
     * // Code that will not compile, with ErrorHandling set to false.@example
     * 
     * local code = "MsgN('Hi')"
     * local func = CompileString(code, "TestCode")
     * 
     * if func then // Compile String returns nil if 3rd argument is true and code has errors.
     *    func()
     * end
     * 
     * // Code that will compile. 
     * !TupleReturn
     */
    function CompileString(code: string, identifier: string, HandleError?: boolean): [Function, string];
    
    /**
     * Returns a table of console command names beginning with the given text. 
     * @param text  Text that the console commands must begin with. 
     * @returns Table of console command names. 
     */
    function ConsoleAutoComplete(text: string): table;
    
    /**
     * Returns whether a {{Type|ConVar}} with the given name exists or not 
     * @param name  Name of the {{Type|ConVar}}. 
     * @returns True if the {{Type|ConVar}} exists, false otherwise. 
     */
    function ConVarExists(name: string): ConVar;
    
    /**
     * Makes a clientside-only console variable
     * 
     * **Note:**
     * >This function is a wrapper of {{GlobalFunction|CreateConVar}}, with the difference being that FCVAR_ARCHIVE and FCVAR_USERINFO are added automatically when '''shouldsave''' and '''userdata''' are true, respectively.
     * 
     * Although this function is shared, it should only be used clientside. 
     * @param name  Name of the ConVar to be created and able to be accessed.
     * 
     * This cannot be a name of existing console command or console variable. It will silently fail if it is. 
     * @param defaultVal  Default value of the ConVar. 
     * @param shouldsave [=true] Should the ConVar be saved across sessions 
     * @param userdata [=false] Should the ConVar and its containing data be sent to the server when it has changed. This make the convar accessible from server using {{ClassFunction|Player|GetInfoNum}} and similar functions. 
     * @param helptext [=""] Help text to display in the console. 
     * @returns Created convar. 
     * @example
     * 
     * CreateClientConVar("superspeed_enabled", "0", true, false)
     * 
     * // Creates a ConVar that does nothing and saves. 
     */
    function CreateClientConVar(name: string, defaultVal: string, shouldsave?: boolean, userdata?: boolean, helptext?: string): ConVar;
    
    /**
     * Creates a console variable ({{Type|ConVar}}), in general these are for things like gamemode/server settings. 
     * @param name  Name of the convar.
     * 
     * This cannot be a name of an engine console command or console variable. It will silently fail if it is. If it is the same name as another lua ConVar, it will return that ConVar object. 
     * @param value  Default value of the convar. Can also be a number. 
     * @param flags [=FCVAR_NONE] Flags of the convar, see {{Enum|FCVAR}}, either as bitflag or as table. 
     * @param helptext [=""] The help text to show in the console. 
     * @returns The convar created. 
     */
    function CreateConVar(name: string, value: string, flags?: FCVAR, helptext?: string): ConVar;
    
    /**
     * Creates a new material with the specified name and shader.
     * 
     * **Note:**
     * >Materials created with this function can be used in {{ClassFunction|Entity|SetMaterial}} and {{ClassFunction|Entity|SetSubMaterial}} by prepending a "!" to their material name argument.
     * 
     * **Bug [#1531](https://github.com/Facepunch/garrysmod-issues/issues/1531):**
     * >.pngs must be loaded with {{GlobalFunction|Material}} before being used with this function.
     * 
     * **Bug [#2511](https://github.com/Facepunch/garrysmod-issues/issues/2511):**
     * >This does not work with [https://developer.valvesoftware.com/wiki/Patch patch materials].
     * 
     * **Bug [#3103](https://github.com/Facepunch/garrysmod-issues/issues/3103):**
     * >This will not create a new material if another material object with the same name already exists. 
     * @param name  The material name. Must be unique. 
     * @param shaderName  The shader name. See [[:Category: Shaders]]. 
     * @param materialData  Key-value table that contains shader parameters and proxies.
     * 
     * *See: [https://developer.valvesoftware.com/wiki/Category:List_of_Shader_Parameters List of Shader Parameters on Valve Developers Wiki] and each shader's page from [[:Category: Shaders]].
     * 
     * **Note:**
     * >Unlike {{ClassFunction|IMaterial|SetTexture}}, this table will not accept {{Type|ITexture}} values. Instead, use the texture's name (see {{ClassFunction|ITexture|GetName}}). 
     * @returns Created material 
     * @example
     * 
     * CreateMaterial( "colortexshp", "VertexLitGeneric", {
     *   ["$basetexture"] = "color/white",
     *   ["$model"] = 1,
     *   ["$translucent"] = 1,
     *   ["$vertexalpha"] = 1,
     *   ["$vertexcolor"] = 1
     * } )
     * 
     * // Alternative to {{LibraryFunction|render|SetColorMaterial}}, mainly for use with {{ClassFunction|Entity|SetMaterial}} 
     */
    function CreateMaterial(name: string, shaderName: string, materialData: ITexture[]): IMaterial;
    
    /**
     * Creates a new particle system.
     * 
     * **Note:**
     * >The particle effect must be precached with {{GlobalFunction|PrecacheParticleSystem}} and the file its from must be added via {{LibraryFunction|game|AddParticles}} before it can be used! 
     * @param ent  The entity to attach the control point to. 
     * @param effect  The name of the effect to create. It must be precached. 
     * @param partAttachment  See {{Enum|PATTACH}}. 
     * @param entAttachment [=0] The attachment ID on the entity to attach the particle system to 
     * @param offset [=Vector( 0, 0, 0 )] The offset from the {{ClassFunction|Entity|GetPos}} of the entity we are attaching this CP to. 
     * @returns The created particle system. 
     */
    function CreateParticleSystem(ent: Entity, effect: string, partAttachment: PATTACH, entAttachment?: number, offset?: Vector): CNewParticleEffect;
    
    /**
     * Creates a new {{Type|PhysCollide}} from the given bounds.
     * 
     * **Bug [#3568](https://github.com/Facepunch/garrysmod-issues/issues/3568):**
     * >This fails to create planes or points - no components of the mins or maxs can be the same. 
     * @param mins  Min corner of the box. This is not automatically ordered with the maxs and must contain the smallest vector components. See {{GlobalFunction|OrderVectors}}. 
     * @param maxs  Max corner of the box. This is not automatically ordered with the mins and must contain the largest vector components. 
     * @returns The new PhysCollide. This will be a NULL PhysCollide ({{ClassFunction|PhysCollide|IsValid}} returns false) if given bad vectors or no more PhysCollides can be created in the physics engine. 
     * @example
     * 
     * AddCSLuaFile()
     * 
     * DEFINE_BASECLASS( "base_anim" )
     * 
     * ENT.PrintName = "Cube"
     * ENT.Spawnable = true
     * 
     * ENT.Mins = Vector( -16, -16, -16 )
     * ENT.Maxs = Vector(  16,  16,  16 )
     * 
     * function ENT:Initialize()
     *     self.PhysCollide = CreatePhysCollideBox( self.Mins, self.Maxs )
     *     self:SetCollisionBounds( self.Mins, self.Maxs )
     * 
     *     if SERVER then
     *         self:PhysicsInitBox( self.Mins, self.Maxs )
     *         self:SetSolid( SOLID_VPHYSICS )
     *         self:PhysWake()
     *     end
     * 
     *     if CLIENT then
     *         self:SetRenderBounds( self.Mins, self.Maxs )
     *     end
     * 
     *     self:EnableCustomCollisions( true )
     *     self:DrawShadow( false )
     * end
     * 
     * // Handles collisions against traces. This includes player movement.
     * function ENT:TestCollision( startpos, delta, isbox, extents )
     *     if not IsValid( self.PhysCollide ) then
     *         return
     *     end
     * 
     *     // TraceBox expects the trace to begin at the center of the box, but TestCollision is bad
     *     local max = extents
     *     local min = -extents
     *     max.z = max.z - min.z
     *     min.z = 0
     * 
     *     local hit, norm, frac = self.PhysCollide:TraceBox( self:GetPos(), self:GetAngles(), startpos, startpos + delta, min, max )
     * 
     *     if not hit then
     *         return
     *     end
     * 
     *     return { 
     *         HitPos = hit,
     *         Normal  = norm,
     *         Fraction = frac,
     *     }
     * end
     * 
     * function ENT:Draw()
     *     render.DrawWireframeBox( self:GetPos(), self:GetAngles(), self.Mins, self.Maxs, Color( 255, 0, 0 ), true )
     * end
     * 
     * // A box that interacts correctly with VPhysics objects and player movement. 
     */
    function CreatePhysCollideBox(mins: Vector, maxs: Vector): PhysCollide;
    
    /**
     * Creates {{Type|PhysCollide}} objects for every physics object the model has. The model must be precached with {{LibraryFunction|util|PrecacheModel}} before being used with this function. 
     * @param modelName  Model path to get the collision objects of. 
     * @returns Table of {{Type|PhysCollide}} objects. The number of entries will match the model's physics object count. See also {{ClassFunction|Entity|GetPhysicsObjectCount}}. Returns no value if the model doesn't exist, or has not been precached. 
     */
    function CreatePhysCollidesFromModel(modelName: string): PhysCollide[];
    
    /**
     * Returns a sound parented to the specified entity.
     * 
     * **Note:**
     * >You can only create one CSoundPatch per audio file, per entity at the same time. 
     * @param targetEnt  The target entity. 
     * @param soundName  The sound to play. 
     * @param filter [=[https://developer.valvesoftware.com/wiki/CRecipientFilter#Derived_classes CPASAttenuationFilter]] A {{Type|CRecipientFilter}} of the players that will have this sound networked to them.
     * 
     * **Note:**
     * >This argument only works serverside. 
     * @returns The sound object 
     * @example
     * 
     * local LoadedSounds
     * if CLIENT then
     * 	LoadedSounds = {} // this table caches existing CSoundPatches
     * end
     * 
     * local function ReadSound( FileName )
     * 	local sound
     * 	local filter
     * 	if SERVER then
     * 		filter = RecipientFilter()
     * 		filter:AddAllPlayers()
     * 	end
     * 	if SERVER or !LoadedSounds[FileName] then
     * 		// The sound is always re-created serverside because of the RecipientFilter.
     * 		sound = CreateSound( game.GetWorld(), FileName, filter ) // create the new sound, parented to the worldspawn (which always exists)
     * 		if sound then
     * 			sound:SetSoundLevel( 0 ) // play everywhere
     * 			if CLIENT then
     * 				LoadedSounds[FileName] = { sound, filter } // cache the CSoundPatch
     * 			end
     * 		end
     * 	else
     * 		sound = LoadedSounds[FileName][1]
     * 		filter = LoadedSounds[FileName][2]
     * 	end
     * 	if sound then
     * 		if CLIENT then
     * 			sound:Stop() // it won't play again otherwise
     * 		end
     * 		sound:Play()
     * 	end
     * 	return sound // useful if you want to stop the sound yourself
     * end
     * 
     * // When we are ready, we play the sound:
     * ReadSound( "phx/hmetal1.wav" )
     * 
     * // Play a sound everywhere, similar to {{LibraryFunction|surface|PlaySound}} but available clientside and serverside. 
     */
    function CreateSound(targetEnt: Entity, soundName: string, filter?: CRecipientFilter): CSoundPatch;
    
    /**
     * Creates and returns a new {{Type|DSprite}} element with the supplied material. 
     * @param material  Material the sprite should draw. 
     * @returns The new {{Type|DSprite}} element. 
     */
    function CreateSprite(material: IMaterial): DSprite;
    
    /**
     * Returns the uptime of the server in seconds (to at least 4 decimal places)
     * 
     * This is a synchronised value and affected by various factors such as host_timescale (or {{LibraryFunction|game|GetTimeScale}}) and the server being paused - either by sv_pausable or all players disconnecting.
     * 
     * You should use this function for timing in-game events but not for real-world events.
     * 
     * See also: {{GlobalFunction|RealTime}}, {{GlobalFunction|SysTime}}
     * 
     * **Note:**
     * >This is internally defined as a float, and as such it will be affected by precision loss if your server uptime is more than 6 hours, which will cause jittery movement of players and props and inaccuracy of timers, it is highly encouraged to refresh or change the map when that happens (a server restart is not necessary).
     * 
     * This is '''NOT''' easy as it sounds to fix in the engine, so please refrain from posting issues about this
     * 
     * **Bug [#3026](https://github.com/Facepunch/garrysmod-issues/issues/3026):**
     * >This returns 0 in {{HookFunction|GM|PlayerAuthed}}. 
     * @returns Time synced with the game server. 
     * @example
     * 
     * local delay = 0
     * hook.Add( "Think", "CurTimeDelay", function()
     *  if CurTime() < delay then return end
     * 	print( "This message will repeat every 5 seconds." )
     * 	 delay = CurTime() + 5
     *  end)
     * 
     * // Simple delay timer. 
     */
    function CurTime(): number;
    
    /**
     * Returns an {{Type|CTakeDamageInfo}} object.
     * 
     * **Bug [#2771](https://github.com/Facepunch/garrysmod-issues/issues/2771):**
     * >This does not create a unique object, but instead returns a shared reference. That means you cannot use two or more of these objects at once. 
     * @returns The {{Type|CTakeDamageInfo}} object. 
     */
    function DamageInfo(): CTakeDamageInfo;
    
    /**
     * Writes text to the right hand side of the screen, like the old error system. Messages disappear after a couple of seconds. 
     * @param slot  The location on the right hand screen to write the debug info to. Starts at 0, no upper limit 
     * @param info  The debugging information to be written to the screen 
     */
    function DebugInfo(slot: number, info: string): void;
    
    /**
     * Gets the base class of an an object.
     * 
     * This is used not just by entities, but also by widgets, panels, drive modes, weapons and gamemodes (with "gamemode_" prefix).
     * 
     * The keyword '''DEFINE_BASECLASS''' translates into a call to this function. In the engine, it is replaced with:
     * ```local BaseClass = baseclass.Get``` 
     * @param name  The child class. 
     * @returns The base class's meta table. 
     * @example
     * 
     * AddCSLuaFile()
     * DEFINE_BASECLASS( "weapon_csbasegun" ) //this is equivalent to local BaseClass = baseclass.Get( "weapon_csbasegun" )
     * 
     * //omitted generic swep definitions
     * 
     * function SWEP:Initialize()
     * 	BaseClass.Initialize( self ) //calls SWEP:Initialize() from weapon_csbasegun
     * 	self:SetHoldType( "pistol" )
     * end
     * 
     * function SWEP:Deploy()
     * 	self:SetAccuracy( 0.9 )
     * 	return BaseClass.Deploy( self ) //calls SWEP:Deploy() from weapon_csbasegun and returns its result
     * end
     * 
     * function SWEP:SetupDataTables()
     * 	BaseClass.SetupDataTables( self ) //calls SWEP:SetupDataTables() from weapon_csbasegun and inits its dtvars
     * end
     * 
     * // Inherits the weapon from weapon_csbasegun and calls its base functions 
     */
    function DEFINE_BASECLASS(name: string): table;
    
    /**
     * Retrieves data from a gamemode to use in yours. This also sets a BaseClass field on your GM table to the gamemode you are deriving from. It appears that this function works by running the init and cl_init Lua files of the target gamemode, then overriding functions that appear in both the target and your gamemode with your gamemode's functions. 
     * @param base  Gamemode name to derive from. 
     * @example
     * 
     * DeriveGamemode("sandbox")
     * 
     * // Retrieves data from sandbox. 
     */
    function DeriveGamemode(base: string): void;
    
    /**
     * Creates a new derma animation. 
     * @param name  Name of the animation to create 
     * @param panel  Panel to run the animation on 
     * @param func  Function to call to process the animation
     * 
     * Arguments:
     * * {{FuncArg|Panel|pnl|the panel passed to Derma_Anim}}
     * * {{FuncArg|table|anim|the anim table}}
     * * {{FuncArg|number|delta|the fraction of the progress through the animation}}
     * * {{FuncArg|any|data|optional data passed to the run metatable method}} 
     * @returns A lua metatable containing four methods:
     * * Run() - Should be called each frame you want the animation to be ran.
     * * Active() - Returns if the animation is currently active (has not finished and stop has not been called)
     * * Stop() - Halts the animation at its current progress.
     * * Start( Length, Data ) - Prepares the animation to be ran for Length seconds. Must be called once before calling Run(). The data parameter will be passed to the func function. 
     * @example
     * 
     * local function inQuad(fraction, beginning, change)
     * 	return change * (fraction ^ 2) + beginning
     * end
     * 
     * local main = vgui.Create("DFrame")
     * main:SetTitle("Derma_Anim Example")
     * main:SetSize(250, 200)
     * main:SetPos(200)
     * main:MakePopup()
     * local anim = Derma_Anim("EaseInQuad", main, function(pnl, anim, delta, data)
     * 	pnl:SetPos(inQuad(delta, 200, 600), 300) // Change the X coordinate from 200 to 200+600
     * end)
     * anim:Start(2) // Animate for two seconds
     * main.Think = function(self)
     * 	if anim:Active() then
     * 		anim:Run()
     * 	end
     * end
     * 
     * // Applies an [http://easings.net/#easeInQuad easeInQuad] easing to the panel to make it glide naturally across the screen. 
     */
    function Derma_Anim(name: string, panel: Panel, func: Function): table;
    
    /**
     * Draws background blur around the given panel. 
     * @param panel  Panel to draw the background blur around 
     * @param startTime  Time that the blur began being painted 
     * @example
     * 
     * function PANEL:Init()
     *     self.startTime = SysTime()
     * end
     * 
     * function PANEL:Paint()
     *     Derma_DrawBackgroundBlur(self, self.startTime)
     * end
     * 
     * // Blur being drawn around a panel 
     */
    function Derma_DrawBackgroundBlur(panel: Panel, startTime: number): void;
    
    /**
     * Creates panel method that calls the supplied Derma skin hook via {{LibraryFunction|derma|SkinHook}} 
     * @param panel  Panel to add the hook to 
     * @param functionName  Name of panel function to create 
     * @param hookName  Name of Derma skin hook to call within the function 
     * @param typeName  Type of element to call Derma skin hook for 
     * @example
     * 
     * Derma_Hook( PANEL, "Paint", "Paint", "Panel" )
     * 
     * // Creates PANEL.Paint function to call Derma skin hook 'Paint' with type 'Panel' 
     */
    function Derma_Hook(panel: Panel, functionName: string, hookName: string, typeName: string): void;
    
    /**
     * Makes the panel (usually an input of sorts) respond to changes in console variables by adding next functions to the panel:
     * * {{ClassFunction|Panel|SetConVar}}
     * * {{ClassFunction|Panel|ConVarChanged}}
     * * {{ClassFunction|Panel|ConVarStringThink}}
     * * {{ClassFunction|Panel|ConVarNumberThink}}
     * 
     * The console variable value is saved in the ''m_strConVar'' property of the panel.
     * 
     * The panel should call
     * {{ClassFunction|Panel|ConVarStringThink}} or 
     * {{ClassFunction|Panel|ConVarNumberThink}} 
     * in its {{HookFunction|PANEL|Think}} hook and should call {{ClassFunction|Panel|ConVarChanged}} when the panel's value has changed. 
     * @param target  The panel the functions should be added to. 
     * @example
     * 
     * local PANEL = {}
     * 
     * Derma_Install_Convar_Functions( PANEL )
     * 
     * function PANEL:Init()
     * 	// Init function here
     * end
     * function PANEL:Think()
     * 	self:ConVarStringThink()
     * end
     * 
     * // Adds the functions to a panel (snippet of vgui/dcheckbox.lua) 
     */
    function Derma_Install_Convar_Functions(target: Panel): void;
    
    /**
     * Creates a derma window to display information 
     * @param Text  The text within the created panel. 
     * @param Title  The title of the created panel. 
     * @param Button  The text of the button to close the panel. 
     */
    function Derma_Message(Text: string, Title: string, Button: string): void;
    
    /**
     * Shows a message box in the middle of the screen, with up to 4 buttons they can press. 
     * @param btn1text  The text to display on the first button. 
     * @returns The Panel object of the created window. 
     */
    function Derma_Query(btn1text: string): Panel;
    
    /**
     * Shows a message box in the middle of the screen, with up to 4 buttons they can press. 
     * @param text [="Message Text (Second Parameter)"] The message to display. 
     * @param title [="Message Title (First Parameter)"] The title to give the message box. 
     * @param btn1text [=] The text to display on the first button. 
     * @param btn1func [=nil] The function to run if the user clicks the first button. 
     * @param btn2text [=nil] The text to display on the second button. 
     * @param btn2func [=nil] The function to run if the user clicks the second button. 
     * @param btn3text [=nil] The text to display on the third button 
     * @param btn3func [=nil] The function to run if the user clicks the third button. 
     * @param btn4text [=nil] The text to display on the third button 
     * @param btn4func [=nil] The function to run if the user clicks the fourth button. 
     * @returns The Panel object of the created window. 
     */
    function Derma_Query(text?: string, title?: string, btn1text?: string, btn1func?: Function, btn2text?: string, btn2func?: Function, btn3text?: string, btn3func?: Function, btn4text?: string, btn4func?: Function): Panel;
    
    /**
     * Creates a derma window asking players to input a string. 
     * @param title  The title of the created panel. 
     * @param subtitle  The text above the input box 
     * @param defaultVal  The default text for the input box. 
     * @param confirm  The function to be called once the user has confirmed their input. 
     * @param cancel [=nil] The function to be called once the user has cancelled their input 
     * @param confirmText [="OK"] Allows you to override text of the "OK" button 
     * @param cancelText [="Cancel"] Allows you to override text of the "Cancel" button 
     * @returns The created {{Type|DFrame}} 
     * @example
     * 
     * Derma_StringRequest(
     * 	"Console Print", 
     * 	"Input the string to print to console",
     * 	"",
     * 	function(text) print(text) end,
     * 	function(text) print("Cancelled input") end
     * )
     * 
     * // Asks the user to input a string which is then printed to their console 
     */
    function Derma_StringRequest(title: string, subtitle: string, defaultVal: string, confirm: Function, cancel?: Function, confirmText?: string, cancelText?: string): DFrame;
    
    /**
     * Creates a {{Type|DMenu}} and closes any current menus. 
     * @param parent  The panel to parent the created menu to. 
     * @returns The created {{Type|DMenu}} 
     * @example
     * 
     * local menu = DermaMenu() 
     * menu:AddOption("Die", function() RunConsoleCommand("kill") end)
     * menu:AddOption("Close", function() print("Close pressed") end) // The menu will remove itself, we don't have to do anything.
     * menu:Open()
     * 
     * // Creates a DMenu with buttons to commit suicide or close it. 
     */
    function DermaMenu(parent: Panel): DMenu;
    
    /**
     * Sets whether rendering should be limited to being inside a panel or not.
     * 
     * See also {{LibraryFunction|surface|DisableClipping}} and {{ClassFunction|Panel|NoClipping}}. 
     * @param disable  Whether or not clipping should be disabled 
     * @example
     * 
     * function PANEL:Paint()
     *     DisableClipping(true)
     *     draw.RoundedBox(0, -50, -50, 25, 25, color_white)
     *     DisableClipping(false)
     * end
     * 
     * // Renders a white box outside of the panel 
     */
    function DisableClipping(disable: boolean): void;
    
    /**
     * Cancels current DOF post-process effect started with {{GlobalFunction|DOF_Start}} 
     */
    function DOF_Kill(): void;
    
    /**
     * Cancels any existing DOF post-process effects.
     * Begins the DOF post-process effect. 
     */
    function DOF_Start(): void;
    
    /**
     * A hacky method used to fix some bugs regarding DoF.
     * 
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * {{Stub}} 
     * @param enable  Enables or disables depth-of-field mode 
     */
    function DOFModeHack(enable: boolean): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Draws the currently active main menu background image and handles transitioning between background images.
     * 
     * This is called by default in the menu panel's Paint hook. 
     */
    function DrawBackground(): void;
    
    /**
     * Draws the bloom shader, which creates a glowing effect from bright objects. 
     * @param Darken  Determines how much to darken the effect. A lower number will make the glow come from lower light levels. A value of 1 will make the bloom effect unnoticeable. Negative values will make even pitch black areas glow. 
     * @param Multiply  Will affect how bright the glowing spots are. A value of 0 will make the bloom effect unnoticeable. 
     * @param SizeX  The size of the bloom effect along the horizontal axis. 
     * @param SizeY  The size of the bloom effect along the vertical axis. 
     * @param Passes  Determines how much to exaggerate the effect. 
     * @param ColorMultiply  Will multiply the colors of the glowing spots, making them more vivid. 
     * @param Red  How much red to multiply with the glowing color. Should be between 0 and 1 
     * @param Green  How much green to multiply with the glowing color. Should be between 0 and 1 
     * @param Blue  How much blue to multiply with the glowing color. Should be between 0 and 1 
     * @example
     * 
     * function GM:RenderScreenspaceEffects()
     * 	DrawBloom( 0.65, 2, 9, 9, 1, 1, 1, 1, 1 )
     * end
     * 
     * // Draws bloom effect with default settings. 
     */
    function DrawBloom(Darken: number, Multiply: number, SizeX: number, SizeY: number, Passes: number, ColorMultiply: number, Red: number, Green: number, Blue: number): void;
    
    /**
     * Draws the Color Modify shader, which can be used to adjust colors on screen. 
     * @param modifyParameters  Color modification parameters. See {{ShaderLink|g_colourmodify}} and the example below. Note that if you leave out a field, it will retain its last value which may have changed if another caller uses this function. 
     * @example
     * 
     * local tab = {
     * 	[ "$pp_colour_addr" ] = 0.02,
     * 	[ "$pp_colour_addg" ] = 0.02,
     * 	[ "$pp_colour_addb" ] = 0,
     * 	[ "$pp_colour_brightness" ] = 0,
     * 	[ "$pp_colour_contrast" ] = 1,
     * 	[ "$pp_colour_colour" ] = 3,
     * 	[ "$pp_colour_mulr" ] = 0,
     * 	[ "$pp_colour_mulg" ] = 0.02,
     * 	[ "$pp_colour_mulb" ] = 0
     * }
     * 
     * function GM:RenderScreenspaceEffects()
     * 
     * 	DrawColorModify( tab )
     * 
     * end
     * 
     * // Draws color modify with bright yellow and green colors. 
     */
    function DrawColorModify(modifyParameters: table): void;
    
    /**
     * Draws a material overlay on the screen. 
     * @param Material  This will be the material that is drawn onto the screen. 
     * @param RefractAmount  This will adjust how much the material will refract your screen. 
     * @example
     * 
     * function GM:RenderScreenspaceEffects()
     * 
     * 	DrawMaterialOverlay("models/props_c17/fisheyelens", -0.06)
     * 
     * end
     * 
     * // Creates a fisheye effect on your screen. 
     */
    function DrawMaterialOverlay(Material: string, RefractAmount: number): void;
    
    /**
     * Creates a motion blur effect by drawing your screen multiple times. 
     * @param AddAlpha  How much alpha to change per frame. 
     * @param DrawAlpha  How much alpha the frames will have. A value of 0 will not render the motion blur effect. 
     * @param Delay  Determines the amount of time between frames to capture. 
     * @example
     * 
     * function GM:RenderScreenspaceEffects()
     * 
     *  DrawMotionBlur(0.4, 0.8, 0.01)
     * 
     * end
     * 
     * // Creates a motion blur effect. 
     */
    function DrawMotionBlur(AddAlpha: number, DrawAlpha: number, Delay: number): void;
    
    /**
     * Draws the sharpen shader, which creates more contrast. 
     * @param Contrast  How much contrast to create. 
     * @param Distance  How large the contrast effect will be. 
     */
    function DrawSharpen(Contrast: number, Distance: number): void;
    
    /**
     * Draws the sobel shader, which detects edges and draws a black border. 
     * @param Threshold  Determines the threshold of edges. A value of 0 will make your screen completely black. 
     */
    function DrawSobel(Threshold: number): void;
    
    /**
     * Renders the post-processing effect of beams of light originating from the map's sun. Utilises the "pp/sunbeams" material 
     * @param darken  $darken property for sunbeams material 
     * @param multiplier  $multiply property for sunbeams material 
     * @param sunSize  $sunsize property for sunbeams material 
     * @param sunX  $sunx property for sunbeams material 
     * @param sunY  $suny property for sunbeams material 
     */
    function DrawSunbeams(darken: number, multiplier: number, sunSize: number, sunX: number, sunY: number): void;
    
    /**
     * Draws the texturize shader, which replaces each pixel on your screen with a different part of the texture depending on its brightness. See [[Shaders/g_texturize|g_texturize]] for information on making the texture. 
     * @param Scale  Scale of the texture. A smaller number creates a larger texture. 
     * @param BaseTexture  This will be the texture to use in the effect. Make sure you use {{GlobalFunction|Material}} to get the texture number 
     */
    function DrawTexturize(Scale: number, BaseTexture: number): void;
    
    /**
     * Draws the toy town shader, which blurs the top and bottom of your screen. This can make very large objects look like toys, hence the name. 
     * @param Passes  An integer determining how many times to draw the effect. A higher number creates more blur. 
     * @param Height  The amount of screen which should be blurred on the top and bottom. 
     * @example
     * 
     * function GM:RenderScreenspaceEffects()
     * 
     *  DrawToyTown(2, ScrH()/2)
     * 
     * end
     * 
     * // Draws toy town effect. 
     */
    function DrawToyTown(Passes: number, Height: number): void;
    
    /**
     * Drops the specified entity if it is being held by any player with Gravity Gun or +use pickup. 
     * @param ent  The entity to drop. 
     */
    function DropEntityIfHeld(ent: Entity): void;
    
    /**
     * Creates or replaces a dynamic light with the given id. 
     * @param index  Usually an entity index is used here. 
     * @returns A DynamicLight structured table. See {{Struct|DynamicLight}} 
     * @example
     * 
     * hook.Add( "Think", "Think_Lights!", function()
     * 	local dlight = DynamicLight( LocalPlayer():EntIndex() )
     * 	if ( dlight ) then
     * 		dlight.pos = LocalPlayer():GetShootPos()
     * 		dlight.r = 255
     * 		dlight.g = 255
     * 		dlight.b = 255
     * 		dlight.brightness = 2
     * 		dlight.Decay = 1000
     * 		dlight.Size = 256
     * 		dlight.DieTime = CurTime() + 1
     * 	end
     * end )
     * 
     * // Emits a bright white light from local players eyes. 
     */
    function DynamicLight(index: number): DynamicLight;
    
    /**
     * Returns a {{Type|CEffectData}} object to be used with {{LibraryFunction|util|Effect}}.
     * 
     * **Bug [#2771](https://github.com/Facepunch/garrysmod-issues/issues/2771):**
     * >This does not create a unique object, but instead returns a shared reference. That means you cannot use two or more of these objects at once. 
     * @returns The {{Type|CEffectData}} object. 
     */
    function EffectData(): CEffectData;
    
    /**
     * An 'if then else'. This is ''almost'' equivalent to (''condition'' and ''truevar'' or ''falsevar'') in Lua. The difference is that if ''truevar'' evaluates to false, the plain Lua method stated would return ''falsevar'' regardless of ''condition'' whilst this function would take ''condition'' into account. 
     * @param condition  The condition to check if true or false. 
     * @param truevar  If the condition isn't nil/false, returns this value. 
     * @param falsevar  If the condition is nil/false, returns this value. 
     * @returns The result. 
     * @example
     * 
     * local ply = Entity( 1 )
     * print( "Player " .. Either( ply:IsAdmin(), "is", "is not" ) .. " an admin" )
     * 
     * print( "Player " .. ( ply:IsAdmin() and "is" or "is not" ) .. " an admin" )
     * 
     * // The following two ''print'' statements have identical results.@example
     * 
     * print("You are: "..( LocalPlayer():Alive() and "alive" or "dead" ))
     * 
     * // conditional:
     * 
     * print( "Halflife? "..( (LocalPlayer():Health()==50) and "halflife" or "not halflife") )
     * 
     * // Plain Lua alias version. 
     */
    function Either(condition: any, truevar: any, falsevar: any): any;
    
    /**
     * Plays a sentence from scripts/sentences.txt
     * 
     * Seems to work only on serverside. 
     * @param soundName  The sound to play 
     * @param position  The position to play at 
     * @param entity  The entity to emit the sound from. Must be {{ClassFunction|Entity|EntIndex}} 
     * @param channel [=CHAN_AUTO] The sound channel, see {{Enum|CHAN}}. 
     * @param volume [=1] The volume of the sound, from 0 to 1 
     * @param soundLevel [=75] The sound level of the sound, see {{Enum|SNDLVL}} 
     * @param soundFlags [=0] The flags of the sound, see {{Enum|SND}} 
     * @param pitch [=100] The pitch of the sound, 0-255 
     * @example
     * 
     * EmitSentence( "COMBINE_DIE" .. math.random( 0, 3 ), Entity(1):GetPos(), 1, CHAN_AUTO, 1, 75, 0, 100 )
     * 
     * // Plays random combine death sound on first player. 
     */
    function EmitSentence(soundName: string, position: Vector, entity: number, channel?: CHAN, volume?: number, soundLevel?: SNDLVL, soundFlags?: SND, pitch?: number): void;
    
    /**
     * Emits the specified sound at the specified position.
     * 
     * **Bug:**
     * >This only works clientside.
     * 
     * **Bug:**
     * >This does not work with soundscripts. 
     * @param soundName  The sound to play 
     * @param position  The position to play at 
     * @param entity  The entity to emit the sound from. Must be {{ClassFunction|Entity|EntIndex}} 
     * @param channel [=CHAN_AUTO] The sound channel, see {{Enum|CHAN}}. 
     * @param volume [=1] The volume of the sound, from 0 to 1 
     * @param soundLevel [=75] The sound level of the sound, see {{Enum|SNDLVL}} 
     * @param soundFlags [=0] The flags of the sound, see {{Enum|SND}} 
     * @param pitch [=100] The pitch of the sound, 0-255 
     * @example
     * 
     * EmitSound( Sound("garrysmod/save_load1.wav"), Entity(1):GetPos(), 1, CHAN_AUTO, 1, 75, 0, 100 )
     * 
     * // Plays magical sound on first player. 
     */
    function EmitSound(soundName: string, position: Vector, entity: number, channel?: CHAN, volume?: number, soundLevel?: SNDLVL, soundFlags?: SND, pitch?: number): void;
    
    /**
     * Removes the currently active tool tip from the screen. 
     * @param panel  This is the panel that has a tool tip. 
     */
    function EndTooltip(panel: Panel): void;
    
    /**
     * Returns the entity with the matching {{ClassFunction|Entity|EntIndex}}.
     * 
     * Indices 1 through {{LibraryFunction|game|MaxPlayers}}() are always reserved for players.
     * 
     * **Note:**
     * >In examples on this wiki, '''Entity( 1 )''' is used when a player entity is needed (see [[Help:Editing|wiki editing guide]]). In singleplayer and listen servers, '''Entity( 1 )''' will always be the first player. In dedicated servers, however, '''Entity( 1 )''' won't always be a valid player. 
     * @param entityIndex  The entity index. 
     * @returns The entity if it exists, or NULL if it doesn't. 
     */
    function Entity(entityIndex: number): Entity;
    
    /**
     * Throws a Lua error and breaks out of the current call stack. 
     * @param message  The error message to throw. 
     * @param errorLevel [=1] The level to throw the error at. 
     * @example
     * 
     * error("garry")
     * 
     * // 
     */
    function error(message: string, errorLevel?: number): void;
    
    /**
     * Throws a Lua error but does not break out of the current call stack.
     * 
     * **Bug [#1810](https://github.com/Facepunch/garrysmod-issues/issues/1810):**
     * >Using this function in the menu state exits the menu.
     * 
     * **Bug [#2247](https://github.com/Facepunch/garrysmod-issues/issues/2247):**
     * >This function has a character limit of 511. 
     * @param arguments  Converts all arguments to strings and prints them with no spacing. 
     * @example
     * 
     * local num = 11
     * if ( num <= 10 and num >= 0 ) then
     * 	print( "The number is", num )
     * else
     * 	ErrorNoHalt( "Number out of range!\n" )
     * 	print("This line will be printed")
     * end
     * 
     * // An example of the use of this function 
     */
    function ErrorNoHalt(...arguments: (any)[]): void;
    
    /**
     * Returns the angles of the current render context as calculated by {{HookFunction|GM|CalcView}}.
     * 
     * **Bug [#2516](https://github.com/Facepunch/garrysmod-issues/issues/2516):**
     * >This function is only reliable inside rendering hooks. 
     * @returns The angle of the currently rendered scene. 
     * @example
     * 
     * print(EyeAngles())
     * 
     * // Print the view angles@example
     * 
     * print(EyeAngles():Forward())
     * 
     * // Identical to {{GlobalFunction|EyeVector}} 
     */
    function EyeAngles(): Angle;
    
    /**
     * Returns the origin of the current render context as calculated by {{HookFunction|GM|CalcView}}.
     * 
     * **Bug [#2516](https://github.com/Facepunch/garrysmod-issues/issues/2516):**
     * >This function is only reliable inside rendering hooks. 
     * @returns Camera position. 
     * @example
     * 
     * print(EyePos())
     * 
     * // Print the view position@example
     * 
     * hook.Add("PreDrawTranslucentRenderables", "FixEyePos", function() EyePos() end)
     * hook.Add( "Think", "Use Eyepos outside of render function", function()
     * 	local start = EyePos()
     * 	local dir = gui.ScreenToVector(gui.MousePos())
     * 	local trace = util.TraceLine{
     * 		start = start,
     * 		endpos = start + ( dir * 10000 ),
     * 		filter = { ply },
     * 	}
     * 	debugoverlay.Box( trace.HitPos, Vector( -5, -5, -5 ), Vector( 5, 5, 5 ) )
     * end )
     * 
     * // Ensuring EyePos returns the correct value outside of render hooks. 
     */
    function EyePos(): Vector;
    
    /**
     * Returns the normal vector of the current render context as calculated by {{HookFunction|GM|CalcView}}, similar to {{GlobalFunction|EyeAngles}}.
     * 
     * **Bug [#2516](https://github.com/Facepunch/garrysmod-issues/issues/2516):**
     * >This function is only reliable inside rendering hooks. 
     * @returns View direction of the currently rendered scene. 
     * @example
     * 
     * print( EyeVector() )
     * 
     * // Print the view angles 
     */
    function EyeVector(): Vector;
    
    /**
     * Returns the meta table for the class with the matching name.
     * 
     * Internally returns {{LibraryFunction|debug|getregistry}}()[metaName]
     * 
     * You can learn more about meta tables on the [[Meta Tables]] page.
     * 
     * You can find a list of meta tables that can be retrieved with this function on {{Enum|TYPE}}. The name in the description is the string to use with this function. 
     * @param metaName  The object type to retrieve the meta table of. 
     * @returns The corresponding meta table. 
     * @example
     * 
     * local meta = FindMetaTable("Player")
     * 
     * function meta:IsSick()
     * 	return true
     * end
     * 
     * // Sometime later...
     * local ply = Entity(1)
     * if ( ply:IsSick() ) then
     * 	ply:ChatPrint( "Get well soon, " .. ply:Nick() .. "!" )
     * 	ply:ChatPrint( "I just don't understand how you're always sick..." )
     * end
     * 
     * // Adds a very simple function for checking if a player is sick to the player metatable. 
     */
    function FindMetaTable(metaName: string): table;
    
    /**
     * Returns the tool-tip text and tool-tip-panel (if any) of the given panel as well as itself 
     * @param panel  Panel to find tool-tip of 
     * @returns [tool-tip text, tool-tip panel, panel that the function was called with] 
     * !TupleReturn
     */
    function FindTooltip(panel: Panel): [string, Panel, Panel];
    
    /**
     * Formats the specified values into the string given. Same as {{LibraryFunction|string|format}}. 
     * @param format  The string to be formatted.
     * 
     * Follows this format: http://www.cplusplus.com/reference/cstdio/printf/ 
     * @param formatParameters  Values to be formatted into the string. 
     * @returns The formatted string 
     */
    function Format(format: string, ...formatParameters: (any)[]): string;
    
    /**
     * Returns the number of frames rendered since the game was launched. 
     */
    function FrameNumber(): void;
    
    /**
     * Returns the {{GlobalFunction|CurTime}}-based time in seconds it took to render the last frame.
     * 
     * This should be used for frame/tick based timing, such as movement prediction or animations.
     * 
     * For real-time-based frame time that isn't affected by host_timescale, use {{GlobalFunction|RealFrameTime}}. RealFrameTime is more suited for things like GUIs or HUDs. 
     * @returns time (in seconds) 
     * @example
     * 
     * print(FrameTime())
     * 
     * // Print the frame time@example
     * 
     * print("Tick: "..(1/FrameTime()))
     * 
     * // Get the servers/clients tickrate/fps 
     */
    function FrameTime(): number;
    
    /**
     * Callback function for when the client has joined a server. This function shows the server's loading URL by default. 
     * @param servername  Server's name. 
     * @param serverurl  Server's loading screen URL, or "" if the URL is not set. 
     * @param mapname  Server's current map's name. 
     * @param maxplayers  Max player count of server. 
     * @param steamid  The local player's {{ClassFunction|Player|SteamID64}}. 
     * @param gamemode  Server's current gamemode's folder name. 
     * @example
     * 
     * local OldGameDetails = GameDetails
     * function GameDetails( servername, serverurl, mapname, maxplayers, steamid, gamemode )
     * 	print( 1, servername )
     * 	print( 2, serverurl )
     * 	print( 3, mapname )
     * 	print( 4, maxplayers )
     * 	print( 5, steamid )
     * 	print( 6, gamemode )
     * 	OldGameDetails( servername, serverurl, mapname, maxplayers, steamid, gamemode )
     * end
     * 
     * // Prints GameDetails of the server you join to console, and preserves default behavior. 
     */
    function GameDetails(servername: string, serverurl: string, mapname: string, maxplayers: number, steamid: string, gamemode: string): void;
    
    /**
     * **Deprecated:**
     * >This function was deprecated in Lua 5.1 and is removed in Lua 5.2. Use {{GlobalFunction|collectgarbage}}( "count" ) instead.
     * 
     *  Returns the current floored dynamic memory usage of Lua in kilobytes. 
     * @returns The current floored dynamic memory usage of Lua, in kilobytes. 
     */
    function gcinfo(): number;
    
    /**
     * Gets the ConVar with the specified name. This function caches the ConVar object internally. 
     * @param name  Name of the ConVar to get 
     * @returns The ConVar object 
     */
    function GetConVar(name: string): ConVar;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Gets the ConVar with the specified name. This function doesn't cache the convar. 
     * @param name  Name of the ConVar to get 
     * @returns The ConVar object 
     */
    function GetConVar_Internal(name: string): ConVar;
    
    /**
     * **Deprecated:**
     * >Store the {{Type|ConVar}} object retrieved with {{GlobalFunction|GetConVar}} and call {{ClassFunction|ConVar|GetInt}} or {{ClassFunction|ConVar|GetFloat}} on it.
     * 
     * Gets the numeric value ConVar with the specified name. 
     * @param name  Name of the ConVar to get. 
     * @returns The ConVar's value. 
     */
    function GetConVarNumber(name: string): number;
    
    /**
     * **Deprecated:**
     * >Store the {{Type|ConVar}} object retrieved with {{GlobalFunction|GetConVar}} and call {{ClassFunction|ConVar|GetString}} on it.
     * 
     * Gets the string value ConVar with the specified name. 
     * @param name  Name of the ConVar to get. 
     * @returns The ConVar's value. 
     */
    function GetConVarString(name: string): string;
    
    /**
     * Returns the default loading screen URL (asset://garrysmod/html/loading.html) 
     * @returns Default loading url (asset://garrysmod/html/loading.html) 
     */
    function GetDefaultLoadingHTML(): string;
    
    /**
     * Retrieves data about the demo with the specified filename. Similar to {{GlobalFunction|GetSaveFileDetails}}. 
     * @param filename  The file name of the demo. 
     * @returns Demo data. 
     */
    function GetDemoFileDetails(filename: string): table;
    
    /**
     * Returns a table with the names of files needed from the server you are currently joining. 
     * @returns table of file names 
     * @example
     * 
     * PrintTable( GetDownloadables() )
     * 
     * // Returns a table with the file names. 
     */
    function GetDownloadables(): table;
    
    /**
     * Returns the environment table of either the stack level or the function specified. 
     * @param location [=1] The object to get the enviroment from. Can also be a number that specifies the function at that stack level: Level 1 is the function calling getfenv. 
     * @returns The environment. 
     */
    function getfenv(location?: Function): table;
    
    /**
     * Returns an angle that is shared between the server and all clients. 
     * @param index  The unique index to identify the global value with. 
     * @param defaultVal [=Angle( 0, 0, 0 )] The value to return if the global value is not set. 
     * @returns The global value, or default if the global is not set. 
     */
    function GetGlobalAngle(index: string, defaultVal?: Angle): Angle;
    
    /**
     * Returns a boolean that is shared between the server and all clients. 
     * @param index  The unique index to identify the global value with. 
     * @param defaultVal [=false] The value to return if the global value is not set. 
     * @returns The global value, or the default if the global value is not set. 
     */
    function GetGlobalBool(index: string, defaultVal?: boolean): boolean;
    
    /**
     * Returns an entity that is shared between the server and all clients. 
     * @param index  The unique index to identify the global value with. 
     * @param defaultVal [=NULL] The value to return if the global value is not set. 
     * @returns The global value, or the default if the global value is not set. 
     */
    function GetGlobalEntity(index: string, defaultVal?: Entity): Entity;
    
    /**
     * Returns a float that is shared between the server and all clients. 
     * @param index  The unique index to identify the global value with. 
     * @param defaultVal [=0] The value to return if the global value is not set. 
     * @returns The global value, or the default if the global value is not set. 
     */
    function GetGlobalFloat(index: string, defaultVal?: number): number;
    
    /**
     * Returns an integer that is shared between the server and all clients.
     * 
     * **Bug [#3374](https://github.com/Facepunch/garrysmod-issues/issues/3374):**
     * >This function will not round decimal values as it actually networks a float internally. 
     * @param index  The unique index to identify the global value with. 
     * @param defaultVal [=0] The value to return if the global value is not set. 
     * @returns The global value, or the default if the global value is not set. 
     * @example
     * 
     * print(GetGlobalInt("RoundNumber", 0))
     * 
     * // Prints the current round number if set, otherwise 0. 
     */
    function GetGlobalInt(index: string, defaultVal?: number): number;
    
    /**
     * Returns a string that is shared between the server and all clients. 
     * @param index  The unique index to identify the global value with. 
     * @param defaultVal [=""] The value to return if the global value is not set. 
     * @returns The global value, or the default if the global value is not set. 
     * @example
     * 
     * print( GetGlobalString("ServerName", "Garry's Mod 13") )
     * 
     * // Prints the current server name if set, otherwise "Garry's Mod 13". 
     */
    function GetGlobalString(index: string, defaultVal?: string): string;
    
    /**
     * Returns a vector that is shared between the server and all clients. 
     * @param Index  The unique index to identify the global value with. 
     * @param Default  The value to return if the global value is not set. 
     * @returns The global value, or the default if the global value is not set. 
     */
    function GetGlobalVector(Index: string, Default: Vector): Vector;
    
    /**
     * Returns the name of the current server. 
     */
    function GetHostName(): void;
    
    /**
     * Returns the panel that is used as a wrapper for the HUD.
     * 
     * See also {{LibraryFunction|vgui|GetWorldPanel}} 
     * @returns The HUD panel 
     */
    function GetHUDPanel(): Panel;
    
    /**
     * Returns the loading screen panel and creates it if it doesn't exist. 
     * @returns The loading screen panel 
     */
    function GetLoadPanel(): Panel;
    
    /**
     * Returns the current status of the server join progress. 
     * @returns The current status 
     */
    function GetLoadStatus(): string;
    
    /**
     * Returns a table with the names of all maps and categories that you have on your client. 
     * @returns table of map names and categories 
     */
    function GetMapList(): table;
    
    /**
     * Returns the metatable of an object. This function obeys the metatable's __metatable field, and will return that field if the metatable has it set.
     * 
     * Use {{LibraryFunction|debug|getmetatable}} if you want the true metatable of the object. 
     * @param object  The value to return the metatable of. 
     * @returns The metatable of the value. This is not always a table. 
     * @example
     * 
     * print(getmetatable(Pupil).__index.GetName(Pupil))
     * // getmetatable(Pupil) will return Pupil_meta.
     * // Same as print(Pupil:GetName())
     * // This is what the Lua interpreter basically does. (When __index is a table.)
     * 
     * getmetatable(Pupil).SetName = function(self, newName)
     *  self.name = newName
     * end
     * // We're adding a new method to Pupil's metatable
     * 
     * print(getmetatable(Pupil).GetName(Pupil))
     * // Still the same, because Pupil_meta.__index is Pupil_meta.
     * 
     * // Use a table's metatable and alter it. 
     */
    function getmetatable(object: any): any;
    
    /**
     * Returns the menu overlay panel, a container for panels like the error panel created in {{HookFunction|GM|OnLuaError}}. 
     * @returns The overlay panel 
     */
    function GetOverlayPanel(): Panel;
    
    /**
     * Creates or gets the rendertarget with the given name.
     * 
     * See {{GlobalFunction|GetRenderTargetEx}} for an advanced version of this function with more options.
     * 
     * **Bug [#2885](https://github.com/Facepunch/garrysmod-issues/issues/2885):**
     * >This crashes when used on a cubemap texture. 
     * @param name  The internal name of the render target. 
     * @param width  The width of the render target, must be power of 2. If not set to PO2, the size will be automatically converted to the nearest PO2 size. 
     * @param height  The height of the render target, must be power of 2. If not set to PO2, the size will be automatically converted to the nearest PO2 size. 
     * @param additive [=false] Sets whenever the rt should be additive. 
     * @returns The render target 
     */
    function GetRenderTarget(name: string, width: number, height: number, additive?: boolean): ITexture;
    
    /**
     * Creates (or gets if it already exsits) the rendertarget with the given name, this function allows to adjust the creation of a rendertarget more than {{GlobalFunction|GetRenderTarget}}.
     * 
     * See also {{LibraryFunction|render|PushRenderTarget}} and {{LibraryFunction|render|SetRenderTarget}}. 
     * @param name  The internal name of the render target.
     * 
     * {{Warning|The name is treated like a path and gets its extension discarded.
     * "name.1" and "name.2" are considered the same name and will result in the same render target being reused.}} 
     * @param width  The width of the render target, must be power of 2. 
     * @param height  The height of the render target, must be power of 2. 
     * @param sizeMode  Bitflag that influences the sizing of the render target, see {{Enum|RT_SIZE}}. 
     * @param depthMode  Bitflag that determines the depth buffer usage of the render target {{Enum|MATERIAL_RT_DEPTH}}. 
     * @param textureFlags  Bitflag that configurates the texture, see {{Enum|TEXTUREFLAGS}}.
     * 
     * List of flags can also be found on the Valve's Developer Wiki:
     * https://developer.valvesoftware.com/wiki/Valve_Texture_Format 
     * @param rtFlags  Flags that controll the HDR behaviour of the render target, see {{Enum|CREATERENDERTARGETFLAGS}}. 
     * @param imageFormat  Image format, see {{Enum|IMAGE_FORMAT}}. 
     * @returns The new render target. 
     */
    function GetRenderTargetEx(name: string, width: number, height: number, sizeMode: RT_SIZE, depthMode: MATERIAL_RT_DEPTH, textureFlags: TEXTUREFLAGS, rtFlags: CREATERENDERTARGETFLAGS, imageFormat: IMAGE_FORMAT): ITexture;
    
    /**
     * Retrieves data about the save with the specified filename. Similar to {{GlobalFunction|GetDemoFileDetails}}. 
     * @param filename  The file name of the save. 
     * @returns Save data. 
     */
    function GetSaveFileDetails(filename: string): table;
    
    /**
     * Returns the entity the client is using to see from (such as the player itself, the camera, or another entity). 
     * @returns The view entity. 
     */
    function GetViewEntity(): Entity;
    
    /**
     * Converts a color from HSV color space into RGB color space and returns a {{Struct|Color}}.
     * 
     * **Bug [#2407](https://github.com/Facepunch/garrysmod-issues/issues/2407):**
     * >The returned color will not have the color metatable. 
     * @param hue  Hue in degrees. 
     * @param saturation  Saturation from 0 - 1. 
     * @param value  Value from 0 - 1. 
     * @returns The {{Struct|Color}} created from the HSV color space. 
     * @example
     * 
     * local function DrawRainbowText( frequency, str, font, x, y )
     * 	
     * 	surface.SetFont( font )
     * 	
     * 	for i = 1, #str do
     * 		surface.SetTextColor( HSVToColor( i * frequency % 360, 1, 1 ) )
     * 		local w = surface.GetTextSize( string.sub( str, 1, i - 1 ) )
     * 		surface.SetTextPos( x + w, y )
     * 		surface.DrawText( string.sub( str, i, i ) )
     * 	end
     * 	
     * end
     * 
     * // A helper function for drawing rainbow text.@example
     * 
     * local function ChatPrintRainbow( frequency, str )
     * 	
     * 	local text = {}
     * 	
     * 	for i = 1, #str do
     * 		table.insert( text, HSVToColor( i * frequency % 360, 1, 1 ) )
     * 		table.insert( text, string.sub( str, i, i ) )
     * 	end
     * 
     * 	chat.AddText( unpack( text ) )
     * 	
     * end
     * 
     * // A helper function for printing rainbow text in the chat.@example
     * 
     * local function ConsolePrintRainbow( frequency, str )
     * 	
     * 	local text = {}
     * 	
     * 	for i = 1, #str do
     * 		table.insert( text, HSVToColor( i * frequency % 360, 1, 1 ) )
     * 		table.insert( text, string.sub( str, i, i ) )
     * 	end
     * 	
     * 	table.insert( text, "\n" )
     * 	
     * 	MsgC( unpack( text ) )
     * 	
     * end
     * 
     * // A helper function for printing rainbow text in the console. 
     */
    function HSVToColor(hue: number, saturation: number, value: number): Color;
    
    /**
     * Launches an asynchronous http request with the given parameters.
     * 
     * **Bug [#2232](https://github.com/Facepunch/garrysmod-issues/issues/2232):**
     * >This cannot send or receive multiple headers at once.
     * 
     * **Bug [#3190](https://github.com/Facepunch/garrysmod-issues/issues/3190):**
     * >This can crash on Linux. 
     * @param parameters  The request parameters. See {{Struct|HTTPRequest}}. 
     * @returns true if we made a request, nil if we failed. 
     */
    function HTTP(parameters: HTTPRequest): boolean;
    
    /**
     * Executes a Lua script either relative to the current file, or absolute(relative to the /lua/ folder).
     * 
     * **Note:**
     * >Addon files (.gma files) do not support relative parent folders (''..'' notation).
     * 
     * {{Warning|Files over a certain size may fail to be included.}}
     * 
     * {{Warning|The file you are attempting to include MUST NOT be empty or the include will fail.}}
     * 
     * {{Warning|If the file you are including is clientside or shared, it '''must''' be {{GlobalFunction|AddCSLuaFile}}'d or this function will error saying the file doesn't exist.}}
     * 
     * **Bug [#1976](https://github.com/Facepunch/garrysmod-issues/issues/1976):**
     * >{{GlobalFunction|pcall}}ing this function will break autorefresh. 
     * @param fileName  The name of the script to be executed. 
     * @returns Anything that the executed Lua script returns. 
     */
    function include(fileName: string): any;
    
    /**
     * **Deprecated:**
     * >To send the target file to the client simply call AddCSLuaFile() in the target file itself.
     * 
     * This function works exactly the same as {{GlobalFunction|include}} both clientside and serverside.
     * 
     * The only difference is that on the serverside it also calls {{GlobalFunction|AddCSLuaFile}} on the filename, so that it gets sent to the client. 
     * @param filename  The filename of the Lua file you want to include. 
     */
    function IncludeCS(filename: string): void;
    
    /**
     * Returns an iterator function for a for loop, to return ordered key-value pairs from a table.
     * 
     * This will only iterate though '''numerical''' keys, and these must also be '''sequential'''; starting at 1 with no gaps.
     * 
     * For unordered pairs, see {{GlobalFunction|pairs}}.
     * 
     * For pairs sorted by key in alphabetical order, see {{GlobalFunction|SortedPairs}}. 
     * @param tab  The table to iterate over. 
     * @returns [The iterator function., The table being iterated over, The origin index '''=0'''] 
     * @example
     * 
     * local tbl = { two = 2, one = 1, "alpha", "bravo", [3] = "charlie", [5] = "echo", [6] = "foxtrot" }
     * 
     * print( "pairs:" )
     * for k, v in pairs( tbl ) do
     * 	print( k, v )
     * end
     * print( "\nipairs:" )
     * for k, v in ipairs( tbl ) do
     * 	print( k, v )
     * end
     * 
     * // Demonstrates how this differs from {{GlobalFunction|pairs}}.@example
     * 
     * local NUM = 32
     * local Count = 0
     * for k, v in ipairs( ClientUndos ) do
     * 	local Item = ComboBox:AddItem( tostring( v.Name ) )
     * 	Item.DoClick = function() RunConsoleCommand( "gmod_undonum", tostring( v.Key ) ) end
     * 
     * 	Count = Count + 1
     * 	if ( Count > NUM ) then break end
     * end
     * 
     * // From ''UpdateUI'' in [https://github.com/garrynewman/garrysmod/blob/master/garrysmod/lua/includes/modules/undo.lua#L43 undo.lua], this adds the first 32 undo entries to the ''Undo'' panel in the spawnmenu. 
     * !TupleReturn
     */
    function ipairs(tab: table): [Function, table, number];
    
    /**
     * Returns if the passed object is an {{Type|Angle}}. 
     * @param variable  The variable to perform the type check for. 
     * @returns True if the variable is an {{Type|Angle}}. 
     */
    function isangle(variable: any): Angle;
    
    /**
     * Returns if the passed object is a {{Type|boolean}}. 
     * @param variable  The variable to perform the type check for. 
     * @returns True if the variable is a {{Type|boolean}}. 
     */
    function isbool(variable: any): boolean;
    
    /**
     * Returns whether the given object does or doesn't have a ''metatable'' of a color.
     * 
     * '''Important:''' Engine functions (i.e. those not written in plain Lua) that return color objects do not currently set the color metatable and this function will return false if you use it on them. 
     * @param Object  The object to be tested 
     * @returns Whether the given object is a color or not 
     */
    function IsColor(Object: any): boolean;
    
    /**
     * Returns if the given NPC class name is an enemy.
     * 
     * Returns true if the entity name is one of the following:
     * * "npc_combine_s"
     * * "npc_cscanner"
     * * "npc_manhack"
     * * "npc_hunter"
     * * "npc_antlion"
     * * "npc_antlionguard"
     * * "npc_antlion_worker"
     * * "npc_fastzombie_torso"
     * * "npc_fastzombie"
     * * "npc_headcrab"
     * * "npc_headcrab_fast"
     * * "npc_poisonzombie"
     * * "npc_headcrab_poison"
     * * "npc_zombie"
     * * "npc_zombie_torso"
     * * "npc_zombine"
     * * "npc_gman"
     * * "npc_breen" 
     * @param className  Class name of the entity to check 
     * @returns Is an enemy 
     */
    function IsEnemyEntityName(className: string): boolean;
    
    /**
     * Returns if the passed object is an {{Type|Entity}}. 
     * @param variable  The variable to perform the type check for. 
     * @returns True if the variable is an {{Type|Entity}}. 
     */
    function isentity(variable: any): Entity;
    
    /**
     * Returns if the passed object is an {{Type|Entity}}. Alias of {{GlobalFunction|isentity}}. 
     * @param variable  The variable to check. 
     * @returns True if the variable is an {{Type|Entity}}. 
     */
    function IsEntity(variable: any): Entity;
    
    /**
     * Returns if this is the first time this hook was predicted.
     * 
     * This is useful for one-time logic in your SWEPs PrimaryAttack, SecondaryAttack and Reload and other [[:Category:Predicted_Hooks|predicted hooks]] (to prevent those hooks from being called rapidly in succession). It's also useful in a Move hook for when the client predicts movement.
     * 
     * Visit [[Prediction]] for more information about this behavior.
     * 
     * **Note:**
     * >This is already used internally for {{ClassFunction|Entity|EmitSound}}, {{ClassFunction|Weapon|SendWeaponAnim}} and {{ClassFunction|Entity|FireBullets}}, but NOT in  {{LibraryFunction|util|Effect}}. 
     * @returns Whether or not this is the first time being predicted. 
     * @example
     * 
     * // Note that for some reason KeyPress and KeyRelease are called multiple times
     * // for the same key event in multiplayer.
     * function GM:KeyPress(ply, key)
     *    if not IsFirstTimePredicted() then return end
     *    if not IsValid(ply) or ply != LocalPlayer() then return end
     * 
     *    if key == IN_SPEED and ply:IsActiveTraitor() then
     *       timer.Simple(0.05, function() RunConsoleCommand("+voicerecord") end)
     *    end
     * end
     * 
     * // An override for {{HookFunction|GM|KeyPress}} in the gamemode Trouble in Terrorist Town, to work around the hook being called multiple times. 
     */
    function IsFirstTimePredicted(): boolean;
    
    /**
     * Returns if the given NPC class name is a friend.
     * 
     * Returns true if the entity name is one of the following:
     * * "npc_monk"
     * * "npc_alyx"
     * * "npc_barney"
     * * "npc_citizen"
     * * "npc_kleiner"
     * * "npc_magnusson"
     * * "npc_eli"
     * * "npc_mossman"
     * * "npc_vortigaunt" 
     * @param className  Class name of the entity to check 
     * @returns Is a friend 
     */
    function IsFriendEntityName(className: string): boolean;
    
    /**
     * Returns if the passed object is a {{Type|function}}. 
     * @param variable  The variable to perform the type check for. 
     * @returns True if the variable is a {{Type|function}}. 
     */
    function isfunction(variable: any): Function;
    
    /**
     * Returns true if the client is currently playing either a singleplayer or multiplayer game. 
     * @returns True if we are in a game. 
     */
    function IsInGame(): boolean;
    
    /**
     * Returns whether the passed object is a {{Type|VMatrix}}. 
     * @param variable  The variable to perform the type check for. 
     * @returns True if the variable is a {{Type|VMatrix}}. 
     */
    function ismatrix(variable: any): VMatrix;
    
    /**
     * Checks whether or not a game is currently mounted. Uses data given by {{LibraryFunction|engine|GetGames}}. Currently does not work correctly serverside on dedicated servers. 
     * @param game  The game string/app ID to check. 
     * @returns True if the game is mounted. 
     * @example
     * 
     * IsMounted('cstrike')
     * 
     * // Check if Counter-Strike: Source is mounted. 
     */
    function IsMounted(game: string): boolean;
    
    /**
     * Returns if the passed object is a {{Type|number}}. 
     * @param variable  The variable to perform the type check for. 
     * @returns True if the variable is a {{Type|number}}. 
     */
    function isnumber(variable: any): number;
    
    /**
     * Returns if the passed object is a {{Type|Panel}}. 
     * @param variable  The variable to perform the type check for. 
     * @returns True if the variable is a {{Type|Panel}}. 
     */
    function ispanel(variable: any): Panel;
    
    /**
     * Returns if the passed object is a {{Type|string}}. 
     * @param variable  The variable to perform the type check for. 
     * @returns True if the variable is a {{Type|string}}. 
     */
    function isstring(variable: any): string;
    
    /**
     * Returns if the passed object is a {{Type|table}}. 
     * @param variable  The variable to perform the type check for. 
     * @returns True if the variable is a {{Type|table}}. 
     */
    function istable(variable: any): table;
    
    /**
     * Returns whether or not every element within a table is a valid entity 
     * @param table  Table containing entities to check 
     * @returns All entities valid 
     */
    function IsTableOfEntitiesValid(table: table): boolean;
    
    /**
     * Returns whether or not a model is useless by checking that the file path is that of a proper model.
     * 
     * If the string ".mdl" is not found in the model name, the function will return true.
     * 
     * The function will also return true if any of the following strings are found in the given model name:
     * * "_gesture"
     * * "_anim"
     * * "_gst"
     * * "_pst"
     * * "_shd"
     * * "_ss"
     * * "_posture"
     * * "_anm"
     * * "ghostanim"
     * * "_paths"
     * * "_shared"
     * * "anim_"
     * * "gestures_"
     * * "shared_ragdoll_" 
     * @param modelName  The model name to be checked 
     * @returns Whether or not the model is useless 
     */
    function IsUselessModel(modelName: string): boolean;
    
    /**
     * Returns whether an object is valid or not. (Such as {{Type|Entity}}s, {{Type|Panel}}s, custom {{Type|table}} objects and more)
     * Checks that an object is not nil, has an IsValid method and if this method returns true.
     * 
     * **Note:**
     * >Due to vehicles being technically valid the moment they're spawned, also use {{ClassFunction|Vehicle|IsValidVehicle}} to make sure they're fully initialized 
     * @param toBeValidated  The table or object to be validated. 
     * @returns True if the object is valid. 
     */
    function IsValid(toBeValidated: any): boolean;
    
    /**
     * Returns if the passed object is a {{Type|Vector}}. 
     * @param variable  The variable to perform the type check for. 
     * @returns True if the variable is a {{Type|Vector}}. 
     */
    function isvector(variable: any): Vector;
    
    /**
     * Joins the server with the specified IP. 
     * @param IP  The IP of the server to join 
     */
    function JoinServer(IP: string): void;
    
    /**
     * Adds javascript function 'language.Update' to an HTML panel as a method to call Lua's {{LibraryFunction|language|GetPhrase}} function. 
     * @param htmlPanel  Panel to add javascript function 'language.Update' to. 
     */
    function JS_Language(htmlPanel: Panel): void;
    
    /**
     * Adds javascript function 'util.MotionSensorAvailable' to an HTML panel as a method to call Lua's {{LibraryFunction|motionsensor|IsAvailable}} function. 
     * @param htmlPanel  Panel to add javascript function 'util.MotionSensorAvailable' to. 
     */
    function JS_Utility(htmlPanel: Panel): void;
    
    /**
     * Adds workshop related javascript functions to an HTML panel, used by the "Dupes" and "Saves" tabs in the spawnmenu. 
     * @param htmlPanel  Panel to add javascript functions to. 
     */
    function JS_Workshop(htmlPanel: Panel): void;
    
    /**
     * Convenience function that creates a DLabel, sets the text, and returns it 
     * @param text  The string to set the label's text to 
     * @param parent [=nil] Optional. The panel to parent the DLabel to 
     * @returns The created DLabel 
     * @example
     * 
     * local lbl = Label( "The quick brown fox" )
     * 
     * // Create a label@example
     * 
     * local pnl = vgui.Create("DPanel")
     * local lbl = Label( "The quick brown fox", pnl )
     * 
     * // Create a label and parents it to a DPanel 
     */
    function Label(text: string, parent?: Panel): Panel;
    
    /**
     * Callback function for when the client's language changes. Called by the engine. 
     * @param lang  The new language code. 
     * @example
     * 
     * local OldLanguageChanged = LanguageChanged
     * function LanguageChanged( lang )
     * 	print( "New language: " .. lang )
     * 	OldLanguageChanged( lang )
     * end
     * 
     * // Prints the new language code whenever the language changes. 
     */
    function LanguageChanged(lang: string): void;
    
    /**
     * Performs a linear interpolation from the start number to the end number.
     * 
     * This function provides a very efficient and easy way to smooth out movements. 
     * @param t  The fraction for finding the result. This number is clamped between 0 and 1. 
     * @param from  The starting number. The result will be equal to this if delta is 0. 
     * @param to  The ending number. The result will be equal to this if delta is 1. 
     * @returns The result of the linear interpolation, (1 - t) * from + t * to. 
     */
    function Lerp(t: number, from: number, to: number): number;
    
    /**
     * Returns point between first and second angle using given fraction and linear interpolation 
     * @param ratio  Ratio of progress through values 
     * @param angleStart  Angle to begin from 
     * @param angleEnd  Angle to end at 
     * @returns angle 
     * @example
     * 
     * local startAngle = Angle(0, 0, 0)
     * local endAngle = Angle(0, 180, 0)
     * local ratio = 0
     * 
     * timer.Create("Turn", 0.1, 10, function()
     *     ratio = ratio + 0.1
     *     entity:SetAngles(Lerp(ratio, startAngle, endAngle))
     * end)
     * 
     * // Turns an entity 180 degrees uses lerp over ten seconds 
     */
    function LerpAngle(ratio: number, angleStart: Angle, angleEnd: Angle): Angle;
    
    /**
     * Linear interpolation between two vectors. It is commonly used to smooth movement between two vectors. 
     * @param fraction  Fraction ranging from 0 to 1 
     * @param from  The initial Vector 
     * @param to  The desired Vector 
     * @returns The lerped vector. 
     * @example
     * 
     * local output = LerpVector( 0.5, Vector( 0, 0, 100 ), Vector( 0, 0, 200 ) )
     * 
     * // Get the middle point (50%) between two vectors. 
     */
    function LerpVector(fraction: number, from: Vector, to: Vector): Vector;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * This function is used to get the last map and category to which the map belongs from the cookie saved with {{GlobalFunction|SaveLastMap}}. 
     */
    function LoadLastMap(): void;
    
    /**
     * Loads all preset settings for the {{Lib|presets}} and returns them in a table 
     * @returns Preset data 
     * @example
     * 
     * PrintTable(LoadPresets())
     * 
     * // Prints all of the presets in to the console 
     */
    function LoadPresets(): table;
    
    /**
     * Returns a localisation for the given token, if none is found it will return the default(second) parameter. 
     * @param localisationToken  The token to find a translation for. 
     * @param defaultVal  The default value to be returned if no translation was found. 
     */
    function Localize(localisationToken: string, defaultVal: string): void;
    
    /**
     * Returns the player object of the current client.
     * 
     * LocalPlayer() will return NULL until all entities have been initialized. See {{HookFunction|GM|InitPostEntity}}. 
     * @returns The player object representing the client. 
     * @example
     * 
     * print( LocalPlayer() )
     * 
     * // Demonstrates the use of this function. 
     */
    function LocalPlayer(): Player;
    
    /**
     * Translates the specified position and angle from the specified local coordinate system into worldspace coordinates.
     * 
     * If you're working with an entity's local vectors, use {{ClassFunction|Entity|LocalToWorld}} and/or {{ClassFunction|Entity|LocalToWorldAngles}} instead.
     * 
     * See also: {{GlobalFunction|WorldToLocal}}, the reverse of this function. 
     * @param localPos  The position vector in the source coordinate system, that should be translated to world coordinates 
     * @param localAng  The angle in the source coordinate system, that should be converted to a world angle. If you don't need to convert an angle, you can supply an arbitrary valid angle (e.g. <kbd>{{GlobalFunction|Angle}}()</kbd>). 
     * @param originPos  The origin point of the source coordinate system, in world coordinates 
     * @param originAngle  The angles of the source coordinate system, as a world angle 
     * @returns [The world position of the supplied local position., The world angles of the supplied local angle.] 
     * !TupleReturn
     */
    function LocalToWorld(localPos: Vector, localAng: Angle, originPos: Vector, originAngle: Angle): [Vector, Angle];
    
    /**
     * Either returns the material with the given name, or loads the material interpreting the first argument as the path.
     * 
     * **Note:**
     * >When using .png or .jpg textures, make sure that their sizes are Power Of 2 (1, 2, 4, 8, 16, 32, 64, etc). If they are not, they will be automatically stretched to the nearest PO2 size and cause graphical artifacts. 
     * @param materialName  The material name or path. The path is relative to the '''materials/''' folder. You do not need to add '''materials/''' to your path.
     * 
     * To retrieve a Lua material created with {{GlobalFunction|CreateMaterial}}, just prepend a "!" to the material name. 
     * @param pngParameters [=nil] A string containing space separated keywords which will be used to add material parameters.
     * 
     * See [[Material Parameters]] for more information.
     * 
     * **Note:**
     * >This feature only works when importing .png or .jpeg image files 
     * @returns [Generated material, How long it took for the function to run] 
     * @example
     * 
     * local wave = Material( "vgui/wave.png", "noclamp smooth" )
     * 
     * // Creates a PNG material with noclamp and smooth parameters set.
     * 
     * In this example the .png file is located in '''materials/vgui/wave.png'''@example
     * 
     * local mat_color = Material( "pp/colour" )  // used outside of the hook for performance
     * 
     * hook.Add("RenderScreenspaceEffects", "ColorExample", function()
     * 	render.UpdateScreenEffectTexture()
     * 
     * 	mat_color:SetTexture( "$fbtexture", render.GetScreenEffectTexture() )
     * 
     * 	mat_color:SetFloat( "$pp_colour_addr", 0 )
     * 	mat_color:SetFloat( "$pp_colour_addg", 0 )
     * 	mat_color:SetFloat( "$pp_colour_addb", 0 )
     * 	mat_color:SetFloat( "$pp_colour_mulr", 0 )
     * 	mat_color:SetFloat( "$pp_colour_mulg", 0 )
     * 	mat_color:SetFloat( "$pp_colour_mulb", 0 )
     * 	mat_color:SetFloat( "$pp_colour_brightness", 0 )
     * 	mat_color:SetFloat( "$pp_colour_contrast", 0.5 )
     * 	mat_color:SetFloat( "$pp_colour_colour", 5 )
     * 
     * 	render.SetMaterial( mat_color )
     * 	render.DrawScreenQuad()
     * end )
     * 
     * // Acquires and uses one of the [[Post-Processing Materials]] to make the screen darker and more saturated 
     * !TupleReturn
     */
    function Material(materialName: string, pngParameters?: string): [IMaterial, number];
    
    /**
     * Returns a {{Type|VMatrix}} object. 
     * @param data [={{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}}] Initial data to initialize the matrix with. Leave empty to initialize an identity matrix. See examples for usage. 
     * @returns New matrix. 
     * @example
     * 
     * local M = Matrix()
     * M:Translate( Vector( 4, 5, 6 ) )
     * M:Scale( Vector( 1, 2, 3 ) )
     * 
     * // This matrix is equivalent:
     * local M2 = Matrix( {
     * 	{ 1, 0, 0, 4 },
     * 	{ 0, 2, 0, 5 },
     * 	{ 0, 0, 3, 6 },
     * 	{ 0, 0, 0, 1 }
     * } )
     * 
     * // Initializes a matrix, translates it by Vector( 4, 5, 6 ) and then scales it by Vector( 1, 2, 3 ). 
     */
    function Matrix(data?: table): VMatrix;
    
    /**
     * Returns a new mesh object. 
     * @param mat [=nil] The material the mesh is intended to be rendered with. It's merely a hint that tells that mesh what vertex format it should use. 
     * @returns The created object. 
     * @example
     * 
     * local mat = Material( "editor/wireframe" ) // The material (a wireframe)
     * local obj = Mesh() // Create the IMesh object
     * 
     * local verts = { // A table of 3 vertices that form a triangle
     * 	{ pos = Vector( 0,  0,  0 ), u = 0, v = 0 }, // Vertex 1
     * 	{ pos = Vector( 10, 0,  0 ), u = 1, v = 0 }, // Vertex 2
     * 	{ pos = Vector( 10, 10, 0 ), u = 1, v = 1 }, // Vertex 3
     * }
     * 
     * obj:BuildFromTriangles( verts ) // Load the vertices into the IMesh object
     * 
     * hook.Add( "PostDrawOpaqueRenderables", "IMeshTest", function()
     * 
     * 	render.SetMaterial( mat ) // Apply the material
     * 	obj:Draw() // Draw the mesh
     * end )
     * 
     * // Draws a triangle near Vector( 0, 0, 0 ) in the map. 
     */
    function Mesh(mat?: IMaterial): IMesh;
    
    /**
     * Runs {{LibraryFunction|util|PrecacheModel}} and returns the string 
     * @param model  The model to precache 
     * @returns The same string entered as an argument 
     * @example
     * 
     * local CAMERA_MODEL = Model( "models/dav0r/camera.mdl" )
     * function ENT:Initialize()
     *  self:SetModel( CAMERA_MODEL )
     *  ...
     * 
     * // From entities/gmod_cameraprop.lua 
     */
    function Model(model: string): string;
    
    /**
     * Creates a table with the specified module name and sets the function environment for said table.
     * 
     * Any passed loaders are called with the table as an argument. An example of this is {{LibraryFunction|package|seeall}}. 
     * @param name  The name of the module. This will be used to access the module table in the runtime environment. 
     * @param loaders  Calls each function passed with the new table as an argument. 
     */
    function module(name: string, ...loaders: (any)[]): void;
    
    /**
     * Writes every given argument to the console.
     * 
     * Automatically attempts to convert each argument to a string. (See {{GlobalFunction|tostring}})
     * 
     * Unlike {{GlobalFunction|print}}, arguments are not separated by anything. They are simply concatenated.
     * 
     * Additionally, a newline isn't added automatically to the end, so subsequent Msg or print operations will continue the same line of text in the console. See {{GlobalFunction|MsgN}} for a version that does add a newline.
     * 
     * The text is blue on the server, orange on the client, and green on the menu: [[File:msg server client colors.png]] 
     * @param args  List of values to print. 
     * @example
     * 
     * Msg("Hello", " World!")
     * 
     * // Prints "Hello World!" to the console. 
     */
    function Msg(...args: (any)[]): void;
    
    /**
     * Works exactly like {{GlobalFunction|Msg}} except that, if called on the server, will print to all players consoles plus the server console. 
     * @param args  List of values to print. 
     */
    function MsgAll(...args: (any)[]): void;
    
    /**
     * Just like {{GlobalFunction|Msg}}, except it can also print colored text, just like {{LibraryFunction|chat|AddText}}. 
     * @param args  Values to print. If you put in a color, all text after that color will be printed in that color. 
     * @example
     * 
     * MsgC( Color( 255, 0, 0 ), "Hello World!" )
     * 
     * // Prints "Hello World!" in red to the console.@example
     * 
     * MsgC( Color( 137, 222, 255 ), "Default server color" )
     * MsgC( Color( 255, 222, 102 ), "Default client color" )
     * 
     * // Shows the built in colors for server and client 
     */
    function MsgC(...args: (any)[]): void;
    
    /**
     * Same as {{GlobalFunction|print}}, except it concatinates the arguments without inserting any whitespace in between them.
     * 
     * See also {{GlobalFunction|Msg}}, which doesn't add a newline (''"\n"'') at the end. 
     * @param args  List of values to print. They can be of any type and will be converted to strings with {{GlobalFunction|tostring}}. 
     * @example
     * 
     * MsgN("Hello,")
     * MsgN("World!")
     * 
     * // Prints "Hello, World!" in two lines to the console. 
     */
    function MsgN(...args: (any)[]): void;
    
    /**
     * Returns named color defined in resource/ClientScheme.res. 
     * @param name  Name of color 
     * @returns A {{Struct|Color}} or nil 
     */
    function NamedColor(name: string): Color;
    
    /**
     * Returns a new userdata object. 
     * @param addMetatable [=false] If true, the userdata will get its own metatable automatically. 
     * @returns The newly created userdata. 
     */
    function newproxy(addMetatable?: boolean): userdata;
    
    /**
     * Returns the next key and value pair in a table.
     * 
     * **Note:**
     * >Table keys in Lua have no specific order, and will be returned in whatever order they exist in memory. This may not always be in ascending order or alphabetical order. If you need to iterate over an array in order, use {{GlobalFunction|ipairs}}. 
     * @param tab  The table 
     * @param prevKey [=nil] The previous key in the table. 
     * @returns [The next key for the table. If the previous key was nil, this will be the first key in the table. If the previous key was the last key in the table, this will be nil., The value associated with that key. If the previous key was the last key in the table, this will be nil.] 
     * @example
     * 
     * local function IsEmptyTable( t )
     * 	return next( t ) == nil
     * end
     * 
     * local mytable = {}
     * print( "mytable is empty:", IsEmptyTable( mytable ) )
     * mytable["hello"]=true
     * print( "mytable is empty:", IsEmptyTable( mytable ) )
     * 
     * // Returns whether the table is empty or not 
     * !TupleReturn
     */
    function next(tab: table, prevKey?: any): [any, any];
    
    /**
     * Returns the number of files needed from the server you are currently joining. 
     * @returns The number of downloadables 
     */
    function NumDownloadables(): number;
    
    /**
     * Returns the amount of skins the specified model has 
     * @param modelName  Model to return amount of skins of 
     * @returns Amount of skins 
     */
    function NumModelSkins(modelName: string): number;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Called by the engine when a model has been loaded. Caches model information with the {{Lib|sql}}. 
     * @param modelName  Name of the model. 
     * @param numPostParams  Number of pose parameters the model has. 
     * @param numSeq  Number of sequences the model has. 
     * @param numAttachments  Number of attachments the model has. 
     * @param numBoneControllers  Number of bone controllers the model has. 
     * @param numSkins  Number of skins that the model has. 
     * @param size  Size of the model. 
     */
    function OnModelLoaded(modelName: string, numPostParams: number, numSeq: number, numAttachments: number, numBoneControllers: number, numSkins: number, size: number): void;
    
    /**
     * Opens a folder with the given name in the garrysmod folder using the operating system's file browser. Currently broken on OS X and Linux. 
     * @param folder  The subdirectory to open in the garrysmod folder. 
     * @example
     * 
     * OpenFolder( "saves" )
     * 
     * // Opens the "saves" folder. 
     */
    function OpenFolder(folder: string): void;
    
    /**
     * Modifies the given vectors so that all of vector2's axis are larger than vector1's by switching them around. Also known as ordering vectors.
     * 
     * **Note:**
     * >This function will irreversibly modify the given vectors 
     * @param vector1  Bounding box min resultant 
     * @param vector2  Bounding box max resultant 
     */
    function OrderVectors(vector1: Vector, vector2: Vector): void;
    
    /**
     * Returns an iterator function({{GlobalFunction|next}}) for a for loop that will return the values of the specified table in an arbitrary order.
     * 
     * For alphabetical '''key''' order use {{GlobalFunction|SortedPairs}}.
     * 
     * For alphabetical '''value''' order use {{GlobalFunction|SortedPairsByValue}}. 
     * @param tab  The table to iterate over 
     * @returns [The iterator ({{GlobalFunction|next}}), The table being iterated over, '''nil''' (for the constructor)] 
     * @example
     * 
     * for k, v in pairs( player.GetAll() ) do
     * 	print( v:Nick() )
     * end
     * 
     * // Iterates through all players on the server and prints their names. 
     * !TupleReturn
     */
    function pairs(tab: table): [Function, table, any];
    
    /**
     * Calls {{LibraryFunction|game|AddParticles}} and returns given string. 
     * @param file  The particle file. 
     * @returns The particle file. 
     */
    function Particle(file: string): string;
    
    /**
     * Creates a particle effect.
     * 
     * **Note:**
     * >The particle effect must be precached with {{GlobalFunction|PrecacheParticleSystem}} and the file its from must be added via {{LibraryFunction|game|AddParticles}} before it can be used! 
     * @param particleName  The name of the particle effect. 
     * @param position  The start position of the effect. 
     * @param angles  The orientation of the effect. 
     * @param parent [=NULL] If set, the particle will be parented to the entity. 
     */
    function ParticleEffect(particleName: string, position: Vector, angles: Angle, parent?: Entity): void;
    
    /**
     * Creates a particle effect with specialized parameters.
     * 
     * **Note:**
     * >The particle effect must be precached with {{GlobalFunction|PrecacheParticleSystem}} and the file its from must be added via {{LibraryFunction|game|AddParticles}} before it can be used! 
     * @param particleName  The name of the particle effect. 
     * @param attachType  Attachment type using {{Enum|PATTACH}}. 
     * @param entity  The entity to be used in the way specified by the attachType. 
     * @param attachmentID  The id of the attachment to be used in the way specified by the attachType. 
     */
    function ParticleEffectAttach(particleName: string, attachType: PATTACH, entity: Entity, attachmentID: number): void;
    
    /**
     * Creates a new {{Type|CLuaEmitter}}.
     * 
     * **Note:**
     * >Do not forget to delete the emitter with {{ClassFunction|CLuaEmitter|Finish}} once you are done with it 
     * @param position  The start position of the emitter.
     * 
     * This is only used to determine particle drawing order for translucent particles. 
     * @param use3D  Whenever to render the particles in 2D or 3D mode. 
     * @returns The new particle emitter. 
     * @example
     * 
     * local tr =  LocalPlayer():GetEyeTrace()
     * local pos = tr.HitPos + tr.HitNormal * 100 // The origin position of the effect
     * 
     * local emitter = ParticleEmitter( pos ) // Particle emitter in this position
     * 
     * for i = 0, 100 do // Do 100 particles
     * 	local part = emitter:Add( "effects/spark", pos ) // Create a new particle at pos
     * 	if ( part ) then
     * 		part:SetDieTime( 1 ) // How long the particle should "live"
     * 
     * 		part:SetStartAlpha( 255 ) // Starting alpha of the particle
     * 		part:SetEndAlpha( 0 ) // Particle size at the end if its lifetime
     * 
     * 		part:SetStartSize( 5 ) // Starting size
     * 		part:SetEndSize( 0 ) // Size when removed
     * 
     * 		part:SetGravity( Vector( 0, 0, -250 ) ) // Gravity of the particle
     * 		part:SetVelocity( VectorRand() * 50 ) // Initial velocity of the particle
     * 	end
     * end
     * 
     * emitter:Finish()
     * 
     * // Creates a simple spark particle effect 100 units above where the local player is looking at. 
     */
    function ParticleEmitter(position: Vector, use3D: boolean): CLuaEmitter;
    
    /**
     * Creates a path for the bot to follow 
     * @param type  The name of the path to create.
     * This is going to be "Follow" or "Chase" right now. 
     * @returns The path 
     */
    function Path(type: string): PathFollower;
    
    /**
     * Calls a function and catches an error that can be thrown while the execution of the call.
     * 
     * **Bug [#1976](https://github.com/Facepunch/garrysmod-issues/issues/1976):**
     * >Using this function with {{GlobalFunction|include}} will break autorefresh.
     * 
     * **Bug [#2498](https://github.com/Facepunch/garrysmod-issues/issues/2498):**
     * >This does not stop {{GlobalFunction|Error}} and {{GlobalFunction|ErrorNoHalt}} from sending error messages to the server (if called clientside) or calling the {{HookFunction|GM|OnLuaError}} hook. The success boolean returned will always return true and thus you will not get the error message returned. {{GlobalFunction|error}} does not exhibit these behaviours.
     * 
     * **Bug [#3112](https://github.com/Facepunch/garrysmod-issues/issues/3112):**
     * >This does not stop errors incurred by {{GlobalFunction|include}}. 
     * @param func  Function to be executed and of which the errors should be caught of 
     * @param arguments  Arguments to call the function with. 
     * @returns [If the function had no errors occur within it., If an error occurred, this will be a string containing the error message. Otherwise, this will be the return values of the function passed in.] 
     * @example
     * 
     * local succ, err = pcall(function() aisj() end)
     * print(succ, err)
     * 
     * // Catch an error. 
     * !TupleReturn
     */
    function pcall(func: Function, ...arguments: (any)[]): [boolean, any];
    
    /**
     * Returns the player with the matching {{ClassFunction|Player|UserID}}.
     * 
     * For a function that returns a player based on their {{ClassFunction|Entity|EntIndex}}, see {{GlobalFunction|Entity}}.
     * 
     * For a function that returns a player based on their connection ID, see {{LibraryFunction|player|GetByID}}. 
     * @param playerIndex  The player index. 
     * @returns The retrieved player. 
     */
    function Player(playerIndex: number): Player;
    
    /**
     * Moves the given model to the given position and returns view information based on its properties 
     * @param model  Model that is being rendered to the spawn icon 
     * @param position  Position that the model is being rendered at 
     * @returns Table of information of the view which can be used for rendering 
     */
    function PositionSpawnIcon(model: Entity, position: Vector): table;
    
    /**
     * Precaches the particle with the specified name. 
     * @param particleSystemName  The name of the particle system. 
     */
    function PrecacheParticleSystem(particleSystemName: string): void;
    
    /**
     * Precaches a scene file. 
     * @param scene  Path to the scene file to precache. 
     */
    function PrecacheScene(scene: string): void;
    
    /**
     * Load and precache a custom sentence file. 
     * @param filename  The path to the custom sentences.txt. 
     * @example
     * 
     * PrecacheSentenceFile( "data/customsentences.txt" )
     * 
     * // Precache a file named "customsentences.txt" in the data directory. 
     */
    function PrecacheSentenceFile(filename: string): void;
    
    /**
     * Precache a sentence group in a sentences.txt definition file. 
     * @param group  The group to precache. 
     * @example
     * 
     * PrecacheSentenceGroup( "METROPOLICE" )
     * 
     * // Precache all metropolice sentences. 
     */
    function PrecacheSentenceGroup(group: string): void;
    
    /**
     * Writes every given argument to the console.
     * 
     * Automatically attempts to convert each argument to a string. (See {{GlobalFunction|tostring}})
     * 
     * Separates arguments with a tab character (''"\t"''). 
     * @param args  List of values to print. 
     * @example
     * 
     * print("Hello World!", "Yay!")
     * 
     * // Prints "Hello World! Yay!" to the console. 
     */
    function print(...args: (any)[]): void;
    
    /**
     * Displays a message in the chat, console, or center of screen of every player.
     * 
     * This uses the archaic user message system ({{Lib|umsg}}) and hence is limited to &asymp;250 characters. 
     * @param type  Which type of message should be sent to the players (see {{Enum|HUD}}) 
     * @param message  Message to be sent to the players 
     * @example
     * 
     * PrintMessage(HUD_PRINTTALK, "I'm new here.")
     * 
     * // Prints into the every player's chat: "I'm new here." 
     */
    function PrintMessage(type: HUD, message: string): void;
    
    /**
     * Recursively prints the contents of a table to the console. 
     * @param tableToPrint  The table to be printed 
     * @param indent [=0] Number of tabs to start indenting at. Increases by 2 when entering another table. 
     * @param done [={}] Internal argument, you shouldn't normally change this. Used to check if a nested table has already been printed so it doesn't get caught in a loop. 
     * @example
     * 
     * local tbl = {
     *  "test",
     *  3829.4,
     *  {"foo", "baah", 20/5},
     *  true
     * }
     * PrintTable(tbl)
     * 
     * // Prints the table we created. 
     */
    function PrintTable(tableToPrint: table, indent?: number, done?: table): void;
    
    /**
     * Creates a new {{Type|ProjectedTexture}}. 
     * @returns Newly created projected texture. 
     * @example
     * 
     * function ENT:Initialize()
     * 	local lamp = ProjectedTexture() // Create a projected texture
     * 	self.lamp = lamp // Assign it to the entity table so it may be accessed later
     * 
     * 	// Set it all up
     * 	lamp:SetTexture( "effects/flashlight001" )
     * 	lamp:SetFarZ( 500 ) // How far the light should shine
     * 
     * 	lamp:SetPos( self:GetPos() ) // Initial position and angles
     * 	lamp:SetAngles( self:GetAngles() )
     * 	lamp:Update()
     * end
     * 
     * function ENT:OnRemove()
     * 	if ( IsValid( self.lamp ) ) then
     * 		self.lamp:Remove()
     * 	end
     * end
     * 
     * function ENT:Think()
     * 	// Keep updating the light so it's attached to our entity
     * 	// you might want to call other functions here, you can do animations here as well
     * 	if ( IsValid( self.lamp ) ) then
     * 		self.lamp:SetPos( self:GetPos() )
     * 		self.lamp:SetAngles( self:GetAngles() )
     * 		self.lamp:Update()
     * 	end
     * end
     * 
     * // Creates a simple ProjectedTexture attached to a [[Scripted Entities|Scripted Entity]].
     * 
     * Note that this code must be ran on clientside only, not shared. 
     */
    function ProjectedTexture(): ProjectedTexture;
    
    /**
     * Runs a function without stopping the whole script on error.
     * 
     * This function is similar to {{GlobalFunction|pcall}} and {{GlobalFunction|xpcall}} except the errors are still printed and sent to the error handler (i.e. sent to server console if clientside and {{HookFunction|GM|OnLuaError}} called). 
     * @param func  Function to run 
     * @returns Were there any errors or not 
     */
    function ProtectedCall(func: Function): boolean;
    
    /**
     * Returns an iterator function that can be used to loop through a table in random order 
     * @param table  Table to create iterator for 
     * @param descending  Whether the iterator should iterate descending or not 
     * @returns Iterator function 
     * @example
     * 
     * local tab = {"a", "b", "c", "d", "e", "f"}
     * 
     * for k, v in RandomPairs(tab) do
     *     print(v)
     * end
     * 
     * // Creates a table and prints its contents in random order 
     */
    function RandomPairs(table: table, descending: boolean): Function;
    
    /**
     * Compares the two values without calling their __eq operator. 
     * @param value1  The first value to compare. 
     * @param value2  The second value to compare. 
     * @returns Whether or not the two values are equal. 
     */
    function rawequal(value1: any, value2: any): boolean;
    
    /**
     * Gets the value with the specified key from the table without calling the __index method. 
     * @param table  Table to get the value from. 
     * @param index  The index to get the value from. 
     * @returns The value. 
     */
    function rawget(table: table, index: any): any;
    
    /**
     * Sets the value with the specified key from the table without calling the __newindex method. 
     * @param table  Table to get the value from. 
     * @param index  The index to get the value from. 
     * @param value  The value to set for the specified key. 
     */
    function rawset(table: table, index: any, value: any): void;
    
    /**
     * Returns the real frame-time which is unaffected by host_timescale. To be used for GUI effects (for example) 
     * @returns Real frame time 
     */
    function RealFrameTime(): number;
    
    /**
     * Returns the uptime of the game/server in seconds (to at least 4 decimal places)
     * 
     * **Note:**
     * >This is '''not''' synchronised or affected by the game.
     * 
     * You should use this function (or SysTime) for timing real-world events such as user interaction, but not for timing game events such as animations.
     * 
     * See also: {{GlobalFunction|CurTime}}, {{GlobalFunction|SysTime}} 
     * @returns Uptime of the server. 
     */
    function RealTime(): number;
    
    /**
     * Creates a new {{Type|CRecipientFilter}}. 
     * @returns The new created recipient filter. 
     * @example
     * 
     * local rf = RecipientFilter()
     * rf:AddAllPlayers()
     * print( rf:GetCount() )
     * PrintTable( rf:GetPlayers() )
     * 
     * // Example usage of the function 
     */
    function RecipientFilter(): CRecipientFilter;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Adds a frame to the currently recording demo. 
     */
    function RecordDemoFrame(): void;
    
    /**
     * Registers a Derma element to be closed the next time {{GlobalFunction|CloseDermaMenus}} is called 
     * @param menu  Menu to be registered for closure 
     */
    function RegisterDermaMenuForClose(menu: Panel): void;
    
    /**
     * Saves position of your cursor on screen. You can restore it by using {{GlobalFunction|RestoreCursorPosition}}.
     * 
     * Despite this function being available on server, it will not do anything on server. 
     */
    function RememberCursorPosition(): void;
    
    /**
     * Does the removing of the tooltip panel. Called by {{GlobalFunction|EndTooltip}}. 
     */
    function RemoveTooltip(): void;
    
    /**
     * Returns the angle that the clients view is being rendered at 
     * @returns Render Angles 
     */
    function RenderAngles(): Angle;
    
    /**
     * Renders a Depth of Field effect 
     * @param origin  Origin to render the effect at 
     * @param angle  Angle to render the effect at 
     * @param usableFocusPoint  Point to focus the effect at 
     * @param angleSize  Angle size of the effect 
     * @param radialSteps  Amount of radial steps to render the effect with 
     * @param passes  Amount of render passes 
     * @param spin  Whether to cycle the frame or not 
     * @param inView  Table of view data 
     * @param fov  FOV to render the effect with 
     */
    function RenderDoF(origin: Vector, angle: Angle, usableFocusPoint: Vector, angleSize: number, radialSteps: number, passes: number, spin: boolean, inView: table, fov: number): void;
    
    /**
     * Renders the stereoscopic post-process effect 
     * @param viewOrigin  Origin to render the effect at 
     * @param viewAngles  Angles to render the effect at 
     */
    function RenderStereoscopy(viewOrigin: Vector, viewAngles: Angle): void;
    
    /**
     * Renders the Super Depth of Field post-process effect 
     * @param viewOrigin  Origin to render the effect at 
     * @param viewAngles  Angles to render the effect at 
     * @param viewFOV  Field of View to render the effect at 
     */
    function RenderSuperDoF(viewOrigin: Vector, viewAngles: Angle, viewFOV: number): void;
    
    /**
     * First tries to load a binary module with the given name, if unsuccessful, it tries to load a Lua module with the given name.
     * 
     * **Bug [#1041](https://github.com/Facepunch/garrysmod-issues/issues/1041):**
     * >Request=813 
     * @param name  The name of the module to be loaded. 
     */
    function require(name: string): void;
    
    /**
     * Restores position of your cursor on screen. You can save it by using {{GlobalFunction|RememberCursorPosition}}.
     * 
     * Despite this function being available on server, it will not do anything on server. 
     */
    function RestoreCursorPosition(): void;
    
    /**
     * Executes the given console command with the parameters.
     * 
     * **Note:**
     * >Some commands/convars are blocked from being ran/changed using this function, usually to prevent harm/annoyance to clients. For a list of blocked commands, see [[Blocked ConCommands]]. 
     * @param command  The command to be executed. 
     * @param arguments  The arguments. Note, that unlike {{ClassFunction|Player|ConCommand}}, you must pass each argument as a new string, not separating them with a space. 
     * @example
     * 
     * RunConsoleCommand("sv_gravity", "400")
     * 
     * // Changes the gravity to 400 (default 600). 
     */
    function RunConsoleCommand(command: string, ...arguments: (any)[]): void;
    
    /**
     * Runs a menu command. Equivalent to {{GlobalFunction|RunConsoleCommand}}( "gamemenucommand", command ) unless the command starts with the "engine" keyword in which case it is equivalent to {{GlobalFunction|RunConsoleCommand}}( command ). 
     * @param command  The menu command to run
     * 
     * Should be one of the following:
     * * Disconnect - Disconnects from the current server.
     * * OpenBenchmarkDialog - Opens the "Video Hardware Stress Test" dialog.
     * * OpenChangeGameDialog - Does not work in GMod.
     * * OpenCreateMultiplayerGameDialog - Opens the Source dialog for creating a listen server.
     * * OpenCustomMapsDialog - Does nothing.
     * * OpenFriendsDialog - Does nothing.
     * * OpenGameMenu - Does not work in GMod.
     * * OpenLoadCommentaryDialog - Opens the "Developer Commentary" selection dialog. Useless in GMod.
     * * OpenLoadDemoDialog - Does nothing.
     * * OpenLoadGameDialog - Opens the Source "Load Game" dialog.
     * * OpenNewGameDialog - Opens the "New Game" dialog. Useless in GMod.
     * * OpenOptionsDialog - Opens the options dialog.
     * * OpenPlayerListDialog - Opens the "Mute Players" dialog that shows all players connected to the server and allows to mute them.
     * * OpenSaveGameDialog - Opens the Source "Save Game" dialog.
     * * OpenServerBrowser - Opens the legacy server browser.
     * * Quit - Quits the game ''without'' confirmation (unlike other Source games).
     * * QuitNoConfirm - Quits the game without confirmation (like other Source games).
     * * ResumeGame - Closes the menu and returns to the game.
     * * engine <concommand> - Runs a console command. Equivalent to {{GlobalFunction|RunConsoleCommand}}( <concommand> ). 
     * @example
     * 
     * RunGameUICommand( "OpenOptionsDialog" )
     * 
     * // Opens the options dialog.@example
     * 
     * RunGameUICommand( "engine gameui_hide" )
     * 
     * // Hides the game UI (menu). Equivalent to {{GlobalFunction|RunConsoleCommand}}( "gameui_hide" ) 
     */
    function RunGameUICommand(command: string): void;
    
    /**
     * Evaluates and executes the given code, will throw an error on failure.
     * **Note:**
     * >Local variables are not passed to the given code. 
     * @param code  The code to execute. 
     * @param identifier [="RunString"] The name that should appear in any error messages caused by this code. 
     * @param handleError [=true] If false, this function will return a string containing any error messages instead of throwing an error. 
     * @returns If handleError is false, the error message (if any). 
     */
    function RunString(code: string, identifier?: string, handleError?: boolean): string;
    
    /**
     * Alias of {{GlobalFunction|RunString}}.
     * 
     * **Deprecated:**
     * >Use {{GlobalFunction|RunString}} instead. 
     */
    function RunStringEx(): void;
    
    /**
     * Removes the given entity unless it is a player or the world entity 
     * @param ent  Entity to safely remove. 
     */
    function SafeRemoveEntity(ent: Entity): void;
    
    /**
     * Removes entity after delay using {{GlobalFunction|SafeRemoveEntity}} 
     * @param entity  Entity to be removed 
     * @param delay  Delay for entity removal in seconds 
     */
    function SafeRemoveEntityDelayed(entity: Entity, delay: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * This function is used to save the last map and category to which the map belongs as a [[:Category:cookie|cookie]]. 
     * @param map  The name of the map. 
     * @param category  The name of the category to which this map belongs. 
     */
    function SaveLastMap(map: string, category: string): void;
    
    /**
     * Overwrites all presets with the supplied table. Used by the {{Lib|presets}} for preset saving 
     * @param presets  Presets to be saved 
     */
    function SavePresets(presets: table): void;
    
    /**
     * Returns a number based on the Size argument and your screen's width. The screen's width is always equal to size 640. This function is primarily used for scaling font sizes. 
     * @param Size  The number you want to scale. 
     * @example
     * 
     * print( ScreenScale(96) )
     * print( ScreenScale(400) )
     * print( ScreenScale(640) )
     * 
     * // Prints a scaled number based on the number 96, 400 and 640. 
     */
    function ScreenScale(Size: number): void;
    
    /**
     * Gets the height of the game's window (in pixels). 
     * @returns The height of the game's window in pixels 
     * @example
     * 
     * print(ScrH())
     * 
     * // Prints the Height of the window.@example
     * 
     * hook.Add("HUDPaint", "WhiteBox", function()
     *     surface.SetDrawColor(Color(255,255,255,255))
     *     surface.DrawRect(0, 0, ScrW() / 2, ScrH() / 2)
     * end)
     * 
     * // Draws a white box on the top left corner of your screen 
     */
    function ScrH(): number;
    
    /**
     * Gets the width of the game's window (in pixels). 
     * @returns The width of the game's window in pixels 
     * @example
     * 
     * print( ScrW() )
     * 
     * // Prints the width of the screen 
     */
    function ScrW(): number;
    
    /**
     * Used to select single values from a vararg or get the count of values in it. 
     * @param parameter  Can be a {{Type|number}} or {{Type|string}}.
     * * If it's a string and starts with "#", the function will return the amount of values in the vararg (ignoring the rest of the string).
     * * If it's a positive number, the function will return all values starting from the given index.
     * * If the number is negative, it will return the amount specified from the end instead of the beginning. 
     * @param vararg  The vararg. These are the values from which you want to select. 
     * @returns Returns a {{Type|number}} or {{Type|vararg}}, depending on the select method. 
     * @example
     * 
     * print( select( '#', 'a', true, false, {}, 1 ) )
     * 
     * // This code shows how it works with the "#" modifier:@example
     * 
     * print( select( 2, 1, 2, 3, 4, 5 ) )
     * 
     * // This prints from the 2nd vararg passed to the last@example
     * 
     * print( select( -2, 1, 2, 3, 4, 5 ) )
     * 
     * // This prints the last 2 arguments passed 
     */
    function select(parameter: number | string, ...vararg: (any)[]): number | any;
    
    /**
     * Send a usermessage 
     * @param name  The name of the usermessage 
     * @param recipients  Can be a {{Type|CRecipientFilter}}, {{Type|table}} or {{Type|Player}} object. 
     * @param args  Data to send in the usermessage 
     */
    function SendUserMessage(name: string, recipients: CRecipientFilter | table | Player, ...args: (any)[]): void;
    
    /**
     * Prints "ServerLog: PARAM" without a newline, to the server log and console. 
     * @param parameter  The value to be printed to console. 
     */
    function ServerLog(parameter: string): void;
    
    /**
     * Adds the given string to the computers clipboard, which can then be pasted in or outside of GMod with Ctrl + V. 
     * @param text  The text to add to the clipboard. 
     */
    function SetClipboardText(text: string): void;
    
    /**
     * Sets the enviroment for a function or a stack level, if a function is passed, the return value will be the function, otherwise nil. 
     * @param location  The function to set the enviroment for or a number representing stack level. 
     * @param enviroment  Table to be used as enviroment. 
     */
    function setfenv(location: Function, enviroment: table): void;
    
    /**
     * Defines an angle to be automatically networked to clients
     * 
     * **Note:**
     * >Running this function clientside will only set it clientside for the client it is called on! 
     * @param index  Index to identify the global angle with 
     * @param angle  Angle to be networked 
     */
    function SetGlobalAngle(index: any, angle: Angle): void;
    
    /**
     * Defined a boolean to be automatically networked to clients
     * 
     * **Note:**
     * >Running this function clientside will only set it clientside for the client it is called on! 
     * @param index  Index to identify the global boolean with 
     * @param bool  Boolean to be networked 
     */
    function SetGlobalBool(index: any, bool: boolean): void;
    
    /**
     * Defines an entity to be automatically networked to clients
     * 
     * **Note:**
     * >Running this function clientside will only set it clientside for the client it is called on! 
     * @param index  Index to identify the global entity with 
     * @param ent  Entity to be networked 
     */
    function SetGlobalEntity(index: any, ent: Entity): void;
    
    /**
     * Defines a floating point number to be automatically networked to clients
     * 
     * **Note:**
     * >Running this function clientside will only set it clientside for the client it is called on! 
     * @param index  Index to identify the global float with 
     * @param float  Float to be networked 
     */
    function SetGlobalFloat(index: any, float: number): void;
    
    /**
     * Sets an integer that is shared between the server and all clients.
     * 
     * **Note:**
     * >Running this function clientside will only set it clientside for the client it is called on!
     * 
     * **Bug [#3374](https://github.com/Facepunch/garrysmod-issues/issues/3374):**
     * >This function will not round decimal values as it actually networks a float internally. 
     * @param index  The unique index to identify the global value with. 
     * @param value  The value to set the global value to 
     * @example
     * 
     * SetGlobalInt("RoundNumber", 4)
     * 
     * // Sets the current round number. 
     */
    function SetGlobalInt(index: string, value: number): void;
    
    /**
     * Defines a string with a maximum of 199 characters to be automatically networked to clients
     * 
     * **Note:**
     * >Running this function clientside will only set it clientside for the client it is called on! 
     * @param index  Index to identify the global string with 
     * @param str  String to be networked 
     */
    function SetGlobalString(index: any, str: string): void;
    
    /**
     * Defines a vector to be automatically networked to clients
     * 
     * **Note:**
     * >Running this function clientside will only set it clientside for the client it is called on! 
     * @param index  Index to identify the global vector with 
     * @param vec  Vector to be networked 
     */
    function SetGlobalVector(index: any, vec: Vector): void;
    
    /**
     * Sets, changes or removes a table's metatable. Returns Tab (the first argument). 
     * @param Tab  The table who's metatable to change. 
     * @param Metatable  The metatable to assign.
     * If it's nil, the metatable will be removed. 
     * @returns The first argument. 
     * @example
     * 
     * local Pupil_meta = {
     * 	GetName = function(self)
     * 		return self.name
     * 	end
     * }
     * Pupil_meta.__index = Pupil_meta
     * // If a key cannot be found in an object, it will look in it's metatable's __index metamethod.
     * 
     * local Pupil = {
     * 	name = "John Doe"
     * }
     * 
     * setmetatable(Pupil, Pupil_meta)
     * 
     * print( Pupil:GetName() )
     * // This will look for the "GetName" key in Pupil, but it doesn't have one. So it will look in it's metatable (Pupil_meta) __index key instead.
     * 
     * // Creates a metatable and assigns it to a table. 
     */
    function setmetatable(Tab: table, Metatable: table): table;
    
    /**
     * Called by the engine to set which constraint system [https://developer.valvesoftware.com/wiki/Phys_constraintsystem] the next created constraints should use 
     * @param constraintSystem  Constraint system to use 
     */
    function SetPhysConstraintSystem(constraintSystem: Entity): void;
    
    /**
     * This function can be used in a for loop instead of {{GlobalFunction|pairs}}. It sorts all '''keys''' alphabetically.
     * 
     * For sorting by specific '''value member''', use {{GlobalFunction|SortedPairsByMemberValue}}.
     * 
     * For sorting by '''value''', use {{GlobalFunction|SortedPairsByValue}}. 
     * @param table  The table to sort 
     * @param desc [=false] Reverse the sorting order 
     * @returns [Iterator function, The table being iterated over] 
     * @example
     * 
     * for id, text in SortedPairs( { "e", "b", "d", "c", "a" } ) do
     *     print(id, text)
     * end
     * 
     * print( "//-" )
     * 
     * for id, text in SortedPairs( { e = 1, b = 2, d = 3, c = 4, a = 5 } ) do
     *     print(id, text)
     * end
     * 
     * // Example of usage. 
     * !TupleReturn
     */
    function SortedPairs(table: table, desc?: boolean): [Function, table];
    
    /**
     * Returns an iterator function that can be used to loop through a table in order of member values, when the values of the table are also tables and contain that member.
     * 
     * To sort by '''value''', use {{GlobalFunction|SortedPairsByValue}}.
     * 
     * To sort by '''keys''', use {{GlobalFunction|SortedPairs}}. 
     * @param table  Table to create iterator for. 
     * @param memberKey  Key of the value member to sort by. 
     * @param descending [=false] Whether the iterator should iterate in descending order or not. 
     * @returns [Iterator function, The table the iterator was created for.] 
     * @example
     * 
     * local tab = {
     * 	{
     * 		Name = "Adam",
     * 		Age = 16
     * 	},
     * 	{
     * 		Name = "Charles",
     * 		Age = 18
     * 	}
     * }
     * 
     * for k, v in SortedPairsByMemberValue(tab, "Age", true) do
     * 	print(v.Name)
     * end
     * 
     * // Creates a table and prints its contents in order of the age member descending 
     * !TupleReturn
     */
    function SortedPairsByMemberValue(table: table, memberKey: any, descending?: boolean): [Function, table];
    
    /**
     * Returns an iterator function that can be used to loop through a table in order of its '''values'''.
     * 
     * To sort by specific '''value member''', use {{GlobalFunction|SortedPairsByMemberValue}}.
     * 
     * To sort by '''keys''', use {{GlobalFunction|SortedPairs}}. 
     * @param table  Table to create iterator for 
     * @param descending [=false] Whether the iterator should iterate in descending order or not 
     * @returns [Iterator function, The table which will be iterated over] 
     * !TupleReturn
     */
    function SortedPairsByValue(table: table, descending?: boolean): [Function, table];
    
    /**
     * Runs {{LibraryFunction|util|PrecacheSound}} and returns the string 
     * @param soundPath  The soundpath to precache 
     * @returns The string passed as the first argument 
     * @example
     * 
     * local BounceSound = Sound( "garrysmod/balloon_pop_cute.wav" )
     * function ENT:PhysicsCollide( data, physobj )
     *  // Play sound on bounce
     *  if ( data.Speed > 60 && data.DeltaTime > 0.2 ) then
     *  sound.Play( BounceSound, self:GetPos(), 75, math.random( 90, 120 ), math.Clamp( data.Speed / 150, 0, 1 ) )
     *  ...
     * 
     * // From entities/sent_ball.lua 
     */
    function Sound(soundPath: string): string;
    
    /**
     * Returns the duration of the sound specified in seconds.
     * 
     * **Bug [#936](https://github.com/Facepunch/garrysmod-issues/issues/936):**
     * >This only works properly for .wav files serverside. 
     * @param soundName  The sound file path. 
     * @returns Sound duration in seconds. 
     */
    function SoundDuration(soundName: string): number;
    
    /**
     * Returns the input value in an escaped form so that it can safely be used inside of queries. The returned value is surrounded by quotes unless noQuotes is true. Alias of {{LibraryFunction|sql|SQLStr}} 
     * @param input  String to be escaped 
     * @param noQuotes [=false] Whether the returned value should be surrounded in quotes or not 
     * @returns Escaped input 
     */
    function SQLStr(input: string, noQuotes?: boolean): string;
    
    /**
     * **Deprecated:**
     * >You should be using {{GlobalFunction|ScreenScale}} instead.
     * 
     * Returns a number based on the Size argument and your screen's width. Alias of {{GlobalFunction|ScreenScale}}. 
     * @param Size  The number you want to scale. 
     * @example
     * 
     * print( SScale(40) )
     * 
     * // Prints a scaled number based on the number 40. 
     */
    function SScale(Size: number): void;
    
    /**
     * Returns the ordinal suffix of a given number. 
     * @param number  The number to find the ordinal suffix of. 
     * @returns suffix 
     * @example
     * 
     * print( 72 .. STNDRD(72) )
     * 
     * // Returns the ordinal suffix of 72. 
     */
    function STNDRD(number: number): string;
    
    /**
     * Suppress any networking from the server to the specified player. This is automatically called by the engine before/after a player fires their weapon, reloads, or causes any other similar shared-predicted event to occur. 
     * @param suppressPlayer  The player to suppress any networking to. 
     */
    function SuppressHostEvents(suppressPlayer: Player): void;
    
    /**
     * Returns a highly accurate time in seconds since the start up, ideal for benchmarking. 
     * @returns Uptime of the server. 
     * @example
     * 
     * print(SysTime())
     * 
     * // Prints the runtime@example
     * 
     * local SysTime = SysTime
     * local Distance = FindMetaTable("Vector").Distance
     * 
     * local vec1 = Vector(1, 2, 3)
     * local vec2 = Vector(13, 26, -10)
     * 
     * local count = 10000
     * 
     * local StartTime = SysTime()
     * 
     * for i = 1, count do
     * 	// Repeat an action 10,000 times to check how long it takes on average
     * 	// Example action:
     * 	Distance(vec1 , vec2)
     * end
     * 
     * local EndTime = SysTime()
     * local TotalTime = EndTime - StartTime
     * local AverageTime = TotalTime / count
     * 
     * print("Total: " .. TotalTime .. " seconds. Average: " .. AverageTime .. " seconds.")
     * 
     * // Typical usage of this function for benchmarking 
     */
    function SysTime(): number;
    
    /**
     * Returns a TauntCamera object 
     * @returns TauntCamera 
     */
    function TauntCamera(): table;
    
    /**
     * Clears focus from any text entries player may have focused. 
     */
    function TextEntryLoseFocus(): void;
    
    /**
     * Returns a cosine value that fluctuates based on the current time 
     * @param frequency  The frequency of fluctuation 
     * @param min  Minimum value 
     * @param max  Maxmimum value 
     * @param offset  Offset variable that doesn't affect the rate of change, but causes the returned value to be offset by time 
     * @returns Cosine value 
     */
    function TimedCos(frequency: number, min: number, max: number, offset: number): number;
    
    /**
     * Returns a sine value that fluctuates based on {{GlobalFunction|CurTime}}. The value returned will be between the start value plus/minus the range value.
     * 
     * Due to a bug, the range arguments don't work as intended. The existing (bugged) behavior is documented below. 
     * @param frequency  The frequency of fluctuation, in [[wikipedia:hertz|hertz]] 
     * @param origin  The center value of the sine wave. 
     * @param max  This argument's distance from origin defines the size of the full range of the sine wave. For example, if origin is 3 and max is 5, then the full range of the sine wave is 5-3 = 2. 3 is the center point of the sine wave, so the sine wave will range between 2 and 4. 
     * @param offset  Offset variable that doesn't affect the rate of change, but causes the returned value to be offset by time 
     * @returns Sine value 
     */
    function TimedSin(frequency: number, origin: number, max: number, offset: number): number;
    
    /**
     * Attempts to return an appropriate boolean for the given value 
     * @param val  The object to be converted to a boolean 
     * @returns '''false''' for the boolean false.
     * '''false''' for "false".
     * '''false''' for "0".
     * '''false''' for numeric 0.
     * '''false''' for nil.
     * 
     * '''true''' otherwise. 
     * @example
     * 
     * print("boolean true:", tobool(true))
     * print("boolean false:", tobool(false))
     * print("string true:", tobool("true"))
     * print("string false:", tobool("false"))
     * print("numeric 0:", tobool(0))
     * print("string 0:", tobool("0"))
     * print("string 1:", tobool("1"))
     * print("nil:", tobool(nil))
     * print("text string:", tobool("not a boolean"))
     * print("empty string:", tobool(""))
     * 
     * // Demonstrate the output of this function with various values. 
     */
    function tobool(val: any): boolean;
    
    /**
     * Toggles whether or not the named map is favorited in the new game list. 
     * @param map  Map to toggle favorite. 
     */
    function ToggleFavourite(map: string): void;
    
    /**
     * Attempts to convert the value to a number.
     * 
     * Returns nil on failure. 
     * @param value  The value to convert. Can be a number or string. 
     * @param base [=10] The [[wikipedia:Radix|numeric base]] used in the string. Can be any integer between 2 and 36, inclusive. 
     * @returns The numeric representation of the value with the given base, or nil if the conversion failed. 
     */
    function tonumber(value: any, base?: number): number;
    
    /**
     * Attempts to convert the value to a string. If the value is an object and its metatable has defined the __tostring metamethod, this will call that function.
     * 
     * {{GlobalFunction|print}} also uses this functionality. 
     * @param value  The object to be converted to a string. 
     * @returns The string representation of the value. 
     * @example
     * 
     * print(tostring(0x16))
     * 
     * // Convert a number to a string. 
     */
    function tostring(value: any): string;
    
    /**
     * **Deprecated!**
     * 
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Returns "Lua Cache File" if the given file name is in a certain string table, nothing otherwise. 
     * @param filename  File name to test 
     * @returns "Lua Cache File" if the given file name is in a certain string table, nothing otherwise. 
     */
    function TranslateDownloadableName(filename: string): string;
    
    /**
     * Returns a string representing the name of the type of the passed object. 
     * @param variable  The object to get the type of. 
     * @returns The name of the object's type. 
     * @example
     * 
     * print( type(2) )
     * print( type("hai") )
     * print( type({}) )
     * 
     * // Print the name of a few types.@example
     * 
     * print( type() )
     * 
     * // Returns "no value" if called with 0 arguments/parameters. 
     */
    function type(variable: any): string;
    
    /**
     * Gets the associated type ID of the variable.
     * 
     * **Bug [#1120](https://github.com/Facepunch/garrysmod-issues/issues/1120):**
     * >This does not work properly with _LOADLIB objects. 
     * @param variable  The variable to get the type ID of. 
     * @returns The type ID of the variable. See the {{Enum|TYPE}}. 
     */
    function TypeID(variable: any): TYPE;
    
    /**
     * This function takes a numeric indexed table and return all the members as a vararg. If specified, it will start at the given index and end at end index. 
     * @param tbl  The table to generate the vararg from. 
     * @param startIndex [=1] Which index to start from. Optional. 
     * @param endIndex [=#tbl] Which index to end at. Optional, even if you set StartIndex. 
     * @returns Output values 
     * @example
     * 
     * print( unpack{"a", "b", "c"} )
     * 
     * // Prints a vararg 
     */
    function unpack(tbl: table, startIndex?: number, endIndex?: number): any;
    
    /**
     * Returns the current asynchronous in-game time. 
     * @returns The asynchronous in-game time. 
     */
    function UnPredictedCurTime(): number;
    
    /**
     * Runs JavaScript on the loading screen panel ({{GlobalFunction|GetLoadPanel}}). 
     * @param javascript  JavaScript to run on the loading panel. 
     */
    function UpdateLoadPanel(javascript: string): void;
    
    /**
     * **Deprecated:**
     * >You should use {{GlobalFunction|IsUselessModel}} instead.
     * 
     * Returns whether or not a model is useless by checking that the file path is that of a proper model.
     * 
     * If the string ".mdl" is not found in the model name, the function will return true.
     * 
     * The function will also return true if any of the following strings are found in the given model name:
     * * "_gesture"
     * * "_anim"
     * * "_gst"
     * * "_pst"
     * * "_shd"
     * * "_ss"
     * * "_posture"
     * * "_anm"
     * * "ghostanim"
     * * "_paths"
     * * "_shared"
     * * "anim_"
     * * "gestures_"
     * * "shared_ragdoll_" 
     * @param modelName  The model name to be checked 
     * @returns Whether or not the model is useless 
     */
    function UTIL_IsUselessModel(modelName: string): boolean;
    
    /**
     * **Deprecated:**
     * >You should use {{GlobalFunction|IsValid}} instead
     * 
     * Returns if a panel is safe to use. 
     * @param panel  The panel to validate. 
     */
    function ValidPanel(panel: Panel): void;
    
    /**
     * Creates a {{Type|Vector}} object. 
     * @param x [=0] The x component of the vector.
     * 
     * If this is a {{Type|Vector}}, this function will return a copy of the given vector.
     * 
     * If this is a {{Type|string}}, this function will try to parse the string as a vector. If it fails, it returns a 0 vector.
     * (See examples) 
     * @param y [=0] The y component of the vector. 
     * @param z [=0] The z component of the vector. 
     * @returns The created vector object. 
     * @example
     * 
     * print( Vector( 1, 2, 3 ) )
     * print( Vector( "4 5 6" ) )
     * local test = Vector( 7, 8, 9 )
     * print( Vector( test ) )
     * 
     * print( Vector( "4 5 test" ) )
     * print( Vector() )
     * 
     * // Creates a vector and prints the value to the console. 
     */
    function Vector(x?: number, y?: number, z?: number): Vector;
    
    /**
     * Returns a random vector whose components are each between -1 and 1 
     * @returns The random direction vector 
     */
    function VectorRand(): Vector;
    
    /**
     * Returns the time in seconds it took to render the VGUI. 
     */
    function VGUIFrameTime(): void;
    
    /**
     * Creates and returns a {{Type|DShape}} rectangle GUI element with the given dimensions. 
     * @param x  X position of the created element 
     * @param y  Y position of the created element 
     * @param w  Width of the created element 
     * @param h  Height of the created element 
     * @returns {{Type|DShape}} element 
     */
    function VGUIRect(x: number, y: number, w: number, h: number): DShape;
    
    /**
     * Briefly displays layout details of the given panel on-screen 
     * @param panel  Panel to display layout details of 
     */
    function VisualizeLayout(panel: Panel): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Returns a new WorkshopFileBase element 
     * @param namespace  Namespace for the file base 
     * @param requiredTags  Tags required for a Workshop submission to be interacted with by the filebase 
     * @returns WorkshopFileBase element 
     */
    function WorkshopFileBase(namespace: string, requiredTags: table): table;
    
    /**
     * Translates the specified position and angle into the specified coordinate system. 
     * @param position  The position that should be translated from the current to the new system. 
     * @param angle  The angles that should be translated from the current to the new system. 
     * @param newSystemOrigin  The origin of the system to translate to. 
     * @param newSystemAngles  The angles of the system to translate to. 
     * @returns [Local position, Local angles] 
     * !TupleReturn
     */
    function WorldToLocal(position: Vector, angle: Angle, newSystemOrigin: Vector, newSystemAngles: Angle): [Vector, Angle];
    
    /**
     * Attempts to call the first function. If the execution succeeds, this returns ''true'' followed by the returns of the function. If execution fails, this returns ''false'' and the second function is called with the error message. 
     * 
     * Unlike in {{GlobalFunction|pcall}}, the stack is not unwound and can therefore be used for stack analyses with the {{Lib|debug}}.
     * 
     * **Bug [#1976](https://github.com/Facepunch/garrysmod-issues/issues/1976):**
     * >Using this function with {{GlobalFunction|include}} will break autorefresh.
     * 
     * **Bug [#2498](https://github.com/Facepunch/garrysmod-issues/issues/2498):**
     * >This does not stop {{GlobalFunction|Error}} and {{GlobalFunction|ErrorNoHalt}} from sending error messages to the server (if called clientside) or calling the {{HookFunction|GM|OnLuaError}} hook. The success boolean returned will always return true and thus you will not get the error message returned. {{GlobalFunction|error}} does not exhibit these behaviours.
     * 
     * **Bug [#3112](https://github.com/Facepunch/garrysmod-issues/issues/3112):**
     * >This does not stop errors incurred by {{GlobalFunction|include}}. 
     * @param func  The function to call initially. 
     * @param errorCallback  The function to be called if execution of the first fails; the error message is passed as a string.
     * 
     * You cannot throw an {{GlobalFunction|error}}() from this callback: it will have no effect (not even stopping the callback). 
     * @param arguments  Arguments to pass to the initial function. 
     * @returns [Status of the execution; ''true'' for success, ''false'' for failure., The returns of the first function if execution succeeded, otherwise the '''first''' return value of the error callback.] 
     * @example
     * 
     * local function test()
     * 	aisj()
     * end
     * 
     * local function catch( err )
     * 	print( "ERROR: ", err )
     * end
     * 
     * print( "Output: ", xpcall( test, catch ) )
     * 
     * // Using xpcall to catch an error. 
     * !TupleReturn
     */
    function xpcall(func: Function, errorCallback: Function, ...arguments: (any)[]): [boolean, any];
}

/**
 * Similar purpose to the {{Lib|game}} and {{Lib|engine}}, allows access to various features of the game's engine. 
 */
declare namespace gmod {
    /**
     * Returns {{GlobalVar|GAMEMODE}}. 
     * @returns GAMEMODE 
     */
    function GetGamemode(): table;
}

/**
 * The gmsave library provides functions relating to the singleplayer save system in Garry's Mod. 
 */
declare namespace gmsave {
    /**
     * Loads a saved map. 
     * @param mapData  The JSON encoded string containing all the map data. 
     * @param ply  The player to load positions for 
     */
    function LoadMap(mapData: string, ply: Player): void;
    
    /**
     * Sets player position and angles from supplied table 
     * @param ply  The player to "load" values for 
     * @param data  A table containing Origin and Angle keys for position and angles to set. 
     */
    function PlayerLoad(ply: Player, data: table): void;
    
    /**
     * Returns a table containing player position and angles. Used by {{LibraryFunction|gmsave|SaveMap}}. 
     * @param ply  The player to "save" 
     * @returns A table containing player position ( Origin ) and angles ( Angle ) 
     */
    function PlayerSave(ply: Player): table;
    
    /**
     * Saves the map 
     * @param ply  The player, whose position should be saved for loading the save 
     * @returns The encoded to JSON string containing save data 
     */
    function SaveMap(ply: Player): string;
    
    /**
     * Returns if we should save this entity in a duplication or a map save or not. 
     * @param ent  The entity 
     * @param t  A table containing classname key with entities classname. 
     * @returns Should save entity or not 
     */
    function ShouldSaveEntity(ent: Entity, t: table): boolean;
}

/**
 * The gui library is similar to the {{Lib|input}} but features functions that are more focused on the mouse's interaction with GUI panels. 
 */
declare namespace gui {
    /**
     * Opens the game menu overlay. 
     */
    function ActivateGameUI(): void;
    
    /**
     * Enables the mouse cursor without restricting player movement, like using Sandbox's context menu.
     * 
     * **Bug [#982](https://github.com/Facepunch/garrysmod-issues/issues/982):**
     * >Some {{Type|CUserCmd}} functions to return incorrect values will return incorrect values when this function is active
     * . 
     * @param enabled  Whether the cursor should be enabled or not. (true = enable, false = disable) 
     */
    function EnableScreenClicker(enabled: boolean): void;
    
    /**
     * Hides the game menu overlay. 
     */
    function HideGameUI(): void;
    
    /**
     * Simulates a mouse move with the given deltas. 
     * @param deltaX  The movement delta on the x axis. 
     * @param deltaY  The movement delta on the y axis. 
     */
    function InternalCursorMoved(deltaX: number, deltaY: number): void;
    
    /**
     * Simulates a key press for the given key. 
     * @param key  The key, see {{Enum|KEY}}. 
     */
    function InternalKeyCodePressed(key: KEY): void;
    
    /**
     * Simulates a key release for the given key. 
     * @param key  The key, see {{Enum|KEY}}. 
     */
    function InternalKeyCodeReleased(key: KEY): void;
    
    /**
     * Simulates a key type typing to the specified key. 
     * @param key  The key, see {{Enum|KEY}}. 
     */
    function InternalKeyCodeTyped(key: KEY): void;
    
    /**
     * Simulates an ASCII symbol writing.
     * Use to write text in the chat or in VGUI.
     * Doesn't work while the main menu is open! 
     * @param code  ASCII code of symbol, see http://www.mikroe.com/img/publication/spa/pic-books/programming-in-basic/chapter/04/fig4-24.gif 
     * @example
     * 
     * hook.Add("Think","Example",function()
     * 	gui.InternalKeyTyped(72)
     * 	gui.InternalKeyTyped(101)
     * 	gui.InternalKeyTyped(108)
     * 	gui.InternalKeyTyped(108)
     * 	gui.InternalKeyTyped(111)
     * end)
     * 
     * // Writes "Hello" every think. 
     */
    function InternalKeyTyped(code: number): void;
    
    /**
     * Simulates a double mouse key press for the given mouse key. 
     * @param key  The key, see {{Enum|MOUSE}}. 
     */
    function InternalMouseDoublePressed(key: MOUSE): void;
    
    /**
     * Simulates a mouse key press for the given mouse key. 
     * @param key  The key, see {{Enum|MOUSE}}. 
     */
    function InternalMousePressed(key: MOUSE): void;
    
    /**
     * Simulates a mouse key release for the given mouse key. 
     * @param key  The key, see {{Enum|MOUSE}}. 
     */
    function InternalMouseReleased(key: MOUSE): void;
    
    /**
     * Simulates a mouse wheel scroll with the given delta. 
     * @param delta  The amount of scrolling to simulate. 
     */
    function InternalMouseWheeled(delta: number): void;
    
    /**
     * Returns whether the console is visible or not. 
     * @returns Whether the console is visible or not. 
     */
    function IsConsoleVisible(): boolean;
    
    /**
     * Returns whenever the game menu overlay ( main menu ) is open or not. 
     * @returns Whenever the game menu overlay ( main menu ) is open or not 
     */
    function IsGameUIVisible(): boolean;
    
    /**
     * Returns the cursor's position on the screen 
     * @returns [mouseX, mouseY] 
     * !TupleReturn
     */
    function MousePos(): [number, number];
    
    /**
     * Returns x component of the mouse position. 
     * @returns mouseX 
     */
    function MouseX(): number;
    
    /**
     * Returns y component of the mouse position. 
     * @returns mouseY 
     */
    function MouseY(): number;
    
    /**
     * Opens specified URL in the steam overlay browser. The URL has to start with either http:// or https://
     * 
     * **Note:**
     * >User will be asked for confirmation before the website will open.
     * 
     * **Bug [#3383](https://github.com/Facepunch/garrysmod-issues/issues/3383):**
     * >You can't click the confirmation if a modal panel has focus. 
     * @param url  URL to open 
     * @example
     * 
     * local button = vgui.Create( "DButton" )
     * button:SetSize( 125, 90 )
     * button:Center() 
     * button:SetText( "Join our Steam Group!" )
     * button.DoClick = function()
     *     gui.OpenURL( "http://steamcommunity.com/groups/glua" )
     * end
     * 
     * // Opens a page when a button is clicked. 
     */
    function OpenURL(url: string): void;
    
    /**
     * Converts the specified screen position to a '''direction''' vector local to the player's view. A related function is {{ClassFunction|Vector|ToScreen}}, which translates a 3D position to a screen coordinate.
     * 
     * {{LibraryFunction|util|AimVector}} is a more generic version of this, using a custom view instead of the player's current view. 
     * @param x  X coordinate on the screen. 
     * @param y  Y coordinate on the screen. 
     * @returns Direction 
     * @example
     * 
     * local tr = util.QuickTrace(LocalPlayer():GetShootPos(), gui.ScreenToVector(gui.MousePos()),LocalPlayer())
     * print(tr.HitPos)
     * 
     * // This will do a trace from the mouse position to the world@example
     * 
     * print(gui.ScreenToVector(ScrW()/2, ScrH()/2))
     * 
     * // Replacement for {{ClassFunction|Player|GetAimVector}} 
     */
    function ScreenToVector(x: number, y: number): Vector;
    
    /**
     * **Deprecated:**
     * >Use {{LibraryFunction|input|SetCursorPos}} instead.
     * 
     * Sets the cursor's position on the screen, relative to the topleft corner of the window 
     * @param mouseX  The X coordinate to move the cursor to. 
     * @param mouseY  The Y coordinate to move the cursor to. 
     */
    function SetMousePos(mouseX: number, mouseY: number): void;
    
    /**
     * Shows console in the game UI. 
     * @example
     * 
     * function PANEL:Init()
     * 
     * 	self:Dock( FILL )
     * 	self:SetKeyboardInputEnabled( true )
     * 	self:SetMouseInputEnabled( true )
     * 
     * 	self.HTML = vgui.Create( "DHTML", self )
     * 
     * 	JS_Language( self.HTML )
     * 	JS_Utility( self.HTML )
     * 	JS_Workshop( self.HTML )
     * 
     * 	self.HTML:Dock( FILL )
     * 	self.HTML:OpenURL( "asset://garrysmod/html/menu.html" )
     * 	self.HTML:SetKeyboardInputEnabled( true )
     * 	self.HTML:SetMouseInputEnabled( true )
     * 	self.HTML:SetAllowLua( true )
     * 	self.HTML:RequestFocus()
     * 
     * 	ws_save.HTML = self.HTML
     * 	addon.HTML = self.HTML
     * 	demo.HTML = self.HTML
     * 
     * 	self:MakePopup()
     * 	self:SetPopupStayAtBack( true )
     * 	
     * 	// If the console is already open, we've got in its way.
     * 	if ( gui.IsConsoleVisible() ) then
     * 		gui.ShowConsole()
     * 	end
     * 
     * end
     * 
     * // Example from ''garrysmod\lua\menu\mainmenu.lua'' that initializes the game UI and shows console if activated. 
     */
    function ShowConsole(): void;
}

/**
 * GWEN is a system that allows you to load a spritesheet and generate a skin out of it. 
 */
declare namespace GWEN {
    /**
     * Used in derma skins to create a bordered rectangle drawing function from an image. The texture is taken either from last argument or from SKIN.GwenTexture 
     * @param x  The X coordinate on the texture 
     * @param y  The Y coordinate on the texture 
     * @param w  Width of the area on texture 
     * @param h  Height of the area on texture 
     * @param left  Left width of border 
     * @param top  Top width of border 
     * @param right  Right width of border 
     * @param bottom  Bottom width of border 
     * @param source [=nil] Texture of source image to create a bordered rectangle from. Uses SKIN.GwenTexture if not set. 
     * @returns The drawing function. Arguments are:
     * {{FuncArg|number|x|X coordinate for the box}}
     * 
     * {{FuncArg|number|y|Y coordinate for the box}}
     * 
     * {{FuncArg|number|w|Width of the box}}
     * 
     * {{FuncArg|number|h|Height of the box}}
     * 
     * {{FuncArg|table|clr|Optional color, default is white. Uses the {{Struct|Color}}}} 
     * @example
     * 
     * local paintBox = GWEN.CreateTextureBorder( 384, 32, 31, 31, 4, 4, 4, 4 )
     * hook.Add( "HUDPaint", "PaintStuff", function()
     *     paintBox( 0, 0, 100, 100 )
     * end )
     * 
     * // Draws a bordered box in the top left corner of the screen using current skins texture. 
     */
    function CreateTextureBorder(x: number, y: number, w: number, h: number, left: number, top: number, right: number, bottom: number, source?: IMaterial): Function;
    
    /**
     * Used in derma skins to create a rectangle drawing function from an image. The rectangle will not be scaled, but instead it will be drawn in the center of the box. The texture is taken from SKIN.GwenTexture 
     * @param x  The X coordinate on the texture 
     * @param y  The Y coordinate on the texture 
     * @param w  Width of the area on texture 
     * @param h  Height of the area on texture 
     * @returns The drawing function. Arguments are:
     * {{FuncArg|number|x|X coordinate for the box}}
     * 
     * {{FuncArg|number|y|Y coordinate for the box}}
     * 
     * {{FuncArg|number|w|Width of the box}}
     * 
     * {{FuncArg|number|h|Height of the box}}
     * 
     * {{FuncArg|table|clr|Optional color, default is white. Uses the {{Struct|Color}}}} 
     * @example
     * 
     * local paintBox = GWEN.CreateTextureCentered( 384, 32, 32, 32 )
     * hook.Add( "HUDPaint", "PaintStuff", function()
     *     paintBox( 0, 0, 100, 100 )
     * end )
     * 
     * // Draws a box in the top left corner of the screen using current skins texture. 
     */
    function CreateTextureCentered(x: number, y: number, w: number, h: number): Function;
    
    /**
     * Used in derma skins to create a rectangle drawing function from an image. The texture of the rectangle will be scaled. The texture is taken from SKIN.GwenTexture 
     * @param x  The X coordinate on the texture 
     * @param y  The Y coordinate on the texture 
     * @param w  Width of the area on texture 
     * @param h  Height of the area on texture 
     * @returns The drawing function. Arguments are:
     * {{FuncArg|number|x|X coordinate for the box}}
     * 
     * {{FuncArg|number|y|Y coordinate for the box}}
     * 
     * {{FuncArg|number|w|Width of the box}}
     * 
     * {{FuncArg|number|h|Height of the box}}
     * 
     * {{FuncArg|table|clr|Optional color, default is white. Uses the {{Struct|Color}}}} 
     * @example
     * 
     * local paintBox = GWEN.CreateTextureNormal( 448, 32, 15, 15 )
     * hook.Add( "HUDPaint", "PaintStuff", function()
     *     paintBox( 0, 0, 100, 100 )
     * end )
     * 
     * // Draws a huge checked checkbox in the top left corner of the screen using current skins texture. 
     */
    function CreateTextureNormal(x: number, y: number, w: number, h: number): Function;
    
    /**
     * When used in a material skin, it returns a color value from a point in the skin image. 
     * @param x  X position of the pixel to get the color from. 
     * @param y  Y position of the pixel to get the color from. 
     * @returns The color of the point on the skin as a {{Struct|Color}}. 
     */
    function TextureColor(x: number, y: number): Color;
}

/**
 * The halo library is used to draw glowing outlines around entities, an example of this can be seen by picking up props with the physgun in Garry's Mod 13. 
 */
declare namespace halo {
    /**
     * Applies a "halo" glow effect to one or multiple entities. 
     * @param entities  A table of entities to add the halo effect to 
     * @param color  The desired color of the halo. See {{Struct|Color}} 
     * @param blurX [=2] The strength of the halo's blur on the x axis. 
     * @param blurY [=2] The strength of the halo's blur on the y axis. 
     * @param passes [=1] The number of times the halo should be drawn per frame. Increasing this may hinder player FPS. 
     * @param additive [=true] Sets the render mode of the halo to additive. 
     * @param ignoreZ [=false] Renders the halo through anything when set to true. 
     * @example
     * 
     * hook.Add( "PreDrawHalos", "AddPropHalos", function()
     * 	halo.Add( ents.FindByClass( "prop_physics*" ), Color( 255, 0, 0 ), 5, 5, 2 )
     * end )
     * 
     * // Adds a halo around all props in the map using an O(n) operation and iterating through unseen objects which can be extremely expensive to process.@example
     * 
     * hook.Add( "PreDrawHalos", "AddStaffHalos", function()
     * 	local staff = {}
     * 	local staffcount = 0
     * 
     * 	for _, ply in ipairs( player.GetAll() ) do
     * 		if ( ply:IsAdmin() ) then
     * 			staffcount = staffcount + 1
     * 			staff[ staffcount ] = ply
     * 		end
     * 	end
     * 
     * 	if ( staffcount > 0 ) then
     * 		halo.Add( staff, Color( 0, 255, 0 ), 0, 0, 2, true, true )
     * 	end
     * end )
     * 
     * // Adds a green halo around all admins. 
     */
    function Add(entities: table, color: Color, blurX?: number, blurY?: number, passes?: number, additive?: boolean, ignoreZ?: boolean): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Renders a halo according to the specified table, only used internally, called from a PostDrawEffects hook added by the halo library 
     * @param entry  Table with info about the halo to draw. 
     */
    function Render(entry: table): void;
    
    /**
     * Returns the entity the halo library is currently rendering the halo for.
     * 
     * The main purpose of this function is to be used in {{HookFunction|ENTITY|Draw}} in order not to draw certain parts of the entity when the halo is being rendered, so there's no halo around unwanted entity parts, such as lasers, 3D2D displays, etc. 
     * @returns If set, the currently rendered entity by the halo library. 
     */
    function RenderedEntity(): Entity;
}

/**
 * The hammer library. 
 */
declare namespace hammer {
    /**
     * Sends command to Hammer, if Hammer is running with the current map loaded. 
     * @param cmd  Command to send including arguments
     * 
     * All commands are in the format "command var1 var2 etc"
     * 
     * All commands that pick an entity with x y z , must use the exact position including decimals. i.e. -354.4523 123.4 -1224.325452 
     * 
     * <h2>List of commands</h2>
     * <b>"session_begin mapName mapVersion"</b> - Starts a hammer edit, locking the editor. mapName is the current map without path or suffix, mapVersion is the current version in the .vmf file
     * 
     * <b>"session_end"</b> - Ends a hammer edit, unlocking the editor.
     * 
     * <b>"map_check_version mapName mapVersion"</b> - This only works after session_begin, so you'd know the right version already and this only returns ok, this function is apparently useless
     * 
     * <b>"entity_create entityClass x y z"</b> - Creates an entity of entityClass at position x y z 
     * 
     * <b>"entity_delete entityClass x y z"</b> - Deletes an entity of entityClass at position x y z 
     * 
     * <b>"entity_set_keyvalue entityClass x y z "key" "value""</b> - Set's the KeyValue pair of an entity of entityClass at x y z. The Key name and Value String must be in quotes.
     * 
     * <b>"entity_rotate_incremental entityClass x y z incX incY incZ"</b> - Rotates an entity of entityClass at x y z by incX incY incZ
     * 
     * <b>"node_create nodeClass nodeID x y z"</b> - Creates an AI node of nodeClass with nodeID at x y z you should keep nodeID unique or you will have issues
     * 
     * <b>"node_delete nodeID"</b> - Deletes node(s) with nodeID, this will delete multiple nodes if they have the same nodeID
     * 
     * <b>"nodelink_create startNodeID endNodeID"</b> - Creates a link between AI nodes startNodeID and endNodeID
     * 
     * <b>"nodelink_delete startNodeID endNodeID"</b> - Removes a link between AI nodes startNodeID and endNodeID 
     * @returns Returns "ok" if command succeeded otherwise returns "badcommand".
     * 
     * <b>All changes only happen in hammer, there is *NO* in game representation/feedback</b> 
     * @example
     * 
     * if ( !SERVER) then return end
     * // Hammer Editor Lua Library
     * // By Malcolm Greene Jr (Fantym420)
     *  
     * // Allows easy access to the hammer editor commands from lua code
     * // All commands return ok if they worked and badcommand if they don't
     * // All changes only show up in hammer, so if you want to see stuff in game you must
     * // write your own ghost entites and such.
     * 
     * hammerLib = {}
     * hammerLib.mapName = game.GetMap() // Get the map name
     * hammerLib.vBSPMapVer = game.GetMapVersion() // This is the vbsp map version, we need the vmf map version
     * hammerLib.mapVer = hammerLib.vBSPMapVer // place holder value findGoodVer will find the current vmf version via trial and error
     * 
     * // returns a vector string with spaces the way hammer likes it
     * function hammerLib.vectorToString(vec)
     * 
     * 	return tostring(vec.x) .. " " .. tostring(vec.y) .. " " .. tostring(vec.z)
     * 
     * end
     * 
     * // tries to start a session using the current version, if it fails it tries the next
     * // if it can't find it in 20 tries you should probably compile your map before edititng more
     * function hammerLib.findGoodVer()
     * 	
     * 	local verInc = 0
     * 	local result = ""
     * 	
     * 	for verInc = 0, 20 do 
     * 	
     * 		hammerLib.mapVer = hammerLib.vBSPMapVer + verInc
     * 		
     * 		result = hammerLib.startSession()
     * 		
     * 		if result == "ok" then
     * 			break
     * 		end
     * 		
     * 		if verInc == 20 then
     * 			print("Good Version Not Found, Please Re-Compile your map!!!")
     * 		end
     * 	end
     * 	
     * 	hammerLib.endSession()
     * 	
     * end
     * 
     * // simple wrapper for hammer.SendCommand so that I could print the debug info
     * // un-comment the prints to see the command strings and results in console
     * function hammerLib.runCommand(cmd)
     * 	
     * 	local result = ""
     * 	//print("running " .. cmd)
     * 	result = hammer.SendCommand(cmd)
     * 	//print(cmd .. " result: " .. result)
     * 	return result
     * 	
     * 
     * end
     * 
     * // Always ran when starting an edit
     * // This locks hammer until you issue the session_end command
     * function hammerLib.startSession()
     * 	
     * 	local cmd = "session_begin " .. hammerLib.mapName .. " " .. hammerLib.mapVer
     * 	
     * 	return hammerLib.runCommand(cmd)
     * 	
     * end
     * 
     * // Ends the session unlocking hammer
     * function hammerLib.endSession()
     * 	
     * 	local cmd = "session_end"
     * 
     * 	return hammer.SendCommand(cmd)
     * 	
     * end
     * 
     * // useless function, it will return ok if you give it a good name and version
     * // however to run it you must already have a good version because you ran session_start
     * // implemented here for thoroughness, if you give it no variables it will just use the stored info.
     * function hammerLib.mapCheckVersion(mcName, mcVer)
     * 	
     * 	mcName = mcName or hammerLib.mapName
     * 	mcVer = mcVer or hammerLib.mapVer
     * 	local cmd = "map_check_version " .. mcName .. " " .. mcVer
     * 	local result = ""
     * 	hammerLib.startSession()
     * 	result = hammerLib.runCommand(cmd)
     * 	hammerLib.endSession()
     * 	
     * 	return result
     * 	
     * end
     * 
     * // this creates an entity of type entityClass at the given position
     * //  I believe this only works with point entites seeing as there is no tie to brush command
     * function hammerLib.entityCreate(entityClass, entityPos)
     * 	
     * 	if (entityClass == nil) or (entityPos == nil) then return end
     * 	local cmd = "entity_create " .. entityClass .. " " .. hammerLib.vectorToString(entityPos)
     * 	local result = ""
     * 	hammerLib.startSession()
     * 	result = hammerLib.runCommand(cmd)
     * 	hammerLib.endSession()
     * 	
     * 	return result
     * 	
     * end
     * 
     * // this deletes an entity of type entityClass at entityPos
     * // NOTE: must be entities **EXACT** position, decimals and all or it fails
     * function hammerLib.entityDelete(entityClass, entityPos)
     * 	
     * 	if (entityClass == nil) or (entityPos == nil) then return end
     * 	local cmd = "entity_delete " .. entityClass .. " " .. hammerLib.vectorToString(entityPos)
     * 	local result = ""
     * 	hammerLib.startSession()
     * 	result = hammerLib.runCommand(cmd)
     * 	hammerLib.endSession()
     * 	
     * 	return result
     * 	
     * end
     * 
     * // Set's a Key/Value pair on entity of type entityClass at entityPos
     * // NOTE: must be entities **EXACT** position, decimals and all or it fails
     * function hammerLib.entitySetKeyValue(entityClass, entityPos, key, value)
     * 	
     * 	
     * 	if (entityClass == nil) or 
     * 	   (entityPos == nil) or
     * 	   (key == nil) or
     * 	   (value == nil) then return end
     * 	   
     * 	local cmd = "entity_set_keyvalue " .. entityClass .. " " .. hammerLib.vectorToString(entityPos) .. " \"" .. key .. "\" \"" .. value .. "\""
     * 	local result = ""
     * 	hammerLib.startSession()
     * 	result = hammerLib.runCommand(cmd)
     * 	hammerLib.endSession()
     * 	
     * 	return result
     * 	
     * end
     * // this will rotate an entity of type entityClass(string) at entityPos(vector) by rotationInc(vector)
     * // NOTE: must be entities **EXACT** position, decimals and all or it fails
     * function hammerLib.entityRotateIncremental(entityClass, entityPos, rotationInc)
     * 	
     * 	if (entityClass == nil) or (entityPos == nil) then return end
     * 	local cmd = "entity_rotate_incremental " .. entityClass .. " " .. hammerLib.vectorToString(entityPos) .. " " .. hammerLib.vectorToString(rotationInc)
     * 	local result = ""
     * 	hammerLib.startSession()
     * 	result = hammerLib.runCommand(cmd)
     * 	hammerLib.endSession()
     * 	
     * 	return result
     * 	
     * end
     * 
     * // This creates a node of type nodeClass with an ID of nodeID at nodePos
     * // keep nodeID unique, if you don't and you use node_delete, it deletes all nodes with the given id
     * function hammerLib.nodeCreate(nodeClass, nodeID, nodePos)
     * 	
     * 	if (nodeClass == nil) or (nodeID == nil) or (nodePos == nil) then return end
     * 	local cmd = "node_create " .. nodeClass .. " " .. nodeID .. " " .. hammerLib.vectorToString(nodePos)
     * 	local result = ""
     * 	hammerLib.startSession()
     * 	result = hammerLib.runCommand(cmd)
     * 	hammerLib.endSession()
     * 	
     * 	return result
     * 	
     * end
     * // deletes node(s) with the given nodeID, however if there are more than one node with the nodeID all 
     * // are deleted
     * function hammerLib.nodeDelete(nodeID)
     * 	
     * 	if (nodeID == nil) then return end
     * 	local cmd = "node_delete " .. nodeID
     * 	local result = ""
     * 	hammerLib.startSession()
     * 	result = hammerLib.runCommand(cmd)
     * 	hammerLib.endSession()
     * 	
     * 	return result
     * end
     * 
     * // This creates a link between two nodes, not sure if there's a limit no number of links
     * // so far it does at least 2 per node
     * function hammerLib.nodeLinkCreate(node1ID, node2ID)
     * 	
     * 	if (node1ID == nil) or (node2ID == nil) then return end
     * 	local cmd = "nodelink_create " .. node1ID .. " " .. node2ID
     * 	local result = ""
     * 	hammerLib.startSession()
     * 	result = hammerLib.runCommand(cmd)
     * 	hammerLib.endSession()
     * 	
     * 	return result
     * 	
     * end
     * 
     * // This deletes a connection between two nodes
     * function hammerLib.nodeLinkDelete(node1ID, node2ID)
     * 	
     * 	if (node1ID == nil) or (node2ID == nil) then return end
     * 	local cmd = "nodelink_delete " .. node1ID .. " " .. node2ID
     * 	local result = ""
     * 	hammerLib.startSession()
     * 	result = hammerLib.runCommand(cmd)
     * 	hammerLib.endSession()
     * 	
     * 	return result
     * 	
     * end
     * 
     * // All loaded, run findGoodVer to store the current vmf version
     * hammerLib.findGoodVer()
     * 
     * // A hammer function library I wrote while testing all these functions.
     * 
     * Please feel free to use this library as-is or with modification. 
     */
    function SendCommand(cmd: string): string;
}

/**
 * The hook library allows you to add hooks called by the game engine, allowing multiple scripts to modify game function. 
 */
declare namespace hook {
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  The function to be called, arguments given to it depend on the [[:Category:Hooks|hook]].  {{Warning|Returning any value besides nil from the hook's function will stop other hooks of the same event down the loop from being executed. Only return a value when absolutely necessary and when you know what you are doing.
     * It WILL break other addons.}} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: string, identifier: string | table | Entity | Panel | number | boolean, func: Function): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PostDrawViewModel} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PostDrawViewModel", identifier: string | table | Entity | Panel | number | boolean, func: (viewmodel: Entity, player: Player, weapon: Weapon) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PostGamemodeLoaded} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PostGamemodeLoaded", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PostPlayerDeath} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PostPlayerDeath", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PostPlayerDraw} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PostPlayerDraw", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PostProcessPermitted} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PostProcessPermitted", identifier: string | table | Entity | Panel | number | boolean, func: (ppeffect: string) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PostRender} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PostRender", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PostRenderVGUI} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PostRenderVGUI", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PreCleanupMap} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PreCleanupMap", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PreDrawEffects} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PreDrawEffects", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PreDrawHalos} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PreDrawHalos", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PreDrawHUD} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PreDrawHUD", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PreDrawOpaqueRenderables} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PreDrawOpaqueRenderables", identifier: string | table | Entity | Panel | number | boolean, func: (isDrawingDepth: boolean, isDrawSkybox: boolean) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PreDrawPlayerHands} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PreDrawPlayerHands", identifier: string | table | Entity | Panel | number | boolean, func: (hands: Entity, vm: Entity, ply: Player, weapon: Weapon) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PreDrawSkyBox} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PreDrawSkyBox", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PreDrawTranslucentRenderables} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PreDrawTranslucentRenderables", identifier: string | table | Entity | Panel | number | boolean, func: (isDrawingDepth: boolean, isDrawSkybox: boolean) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PreDrawViewModel} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PreDrawViewModel", identifier: string | table | Entity | Panel | number | boolean, func: (vm: Entity, ply: Player, weapon: Weapon) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PreGamemodeLoaded} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PreGamemodeLoaded", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PrePlayerDraw} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PrePlayerDraw", identifier: string | table | Entity | Panel | number | boolean, func: (player: Player) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PreRender} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PreRender", identifier: string | table | Entity | Panel | number | boolean, func: () => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PreventScreenClicks} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PreventScreenClicks", identifier: string | table | Entity | Panel | number | boolean, func: () => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PropBreak} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PropBreak", identifier: string | table | Entity | Panel | number | boolean, func: (attacker: Player, prop: Entity) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#RenderScene} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "RenderScene", identifier: string | table | Entity | Panel | number | boolean, func: (origin: Vector, angles: Angle, fov: number) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#RenderScreenspaceEffects} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "RenderScreenspaceEffects", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#Restored} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "Restored", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#Saved} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "Saved", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#ScaleNPCDamage} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "ScaleNPCDamage", identifier: string | table | Entity | Panel | number | boolean, func: (npc: NPC, hitgroup: HITGROUP, dmginfo: CTakeDamageInfo) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#ScalePlayerDamage} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "ScalePlayerDamage", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, hitgroup: HITGROUP, dmginfo: CTakeDamageInfo) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#ScoreboardHide} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "ScoreboardHide", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#ScoreboardShow} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "ScoreboardShow", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PostDrawTranslucentRenderables} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PostDrawTranslucentRenderables", identifier: string | table | Entity | Panel | number | boolean, func: (bDrawingDepth: boolean, bDrawingSkybox: boolean) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PostDrawSkyBox} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PostDrawSkyBox", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PostDrawPlayerHands} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PostDrawPlayerHands", identifier: string | table | Entity | Panel | number | boolean, func: (hands: Entity, vm: Entity, ply: Player, weapon: Weapon) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PostDrawOpaqueRenderables} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PostDrawOpaqueRenderables", identifier: string | table | Entity | Panel | number | boolean, func: (bDrawingDepth: boolean, bDrawingSkybox: boolean) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerLeaveVehicle} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerLeaveVehicle", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, veh: Vehicle) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerLoadout} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerLoadout", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerNoClip} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerNoClip", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, desiredState: boolean) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerPostThink} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerPostThink", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerRequestTeam} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerRequestTeam", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, team: number) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerSay} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerSay", identifier: string | table | Entity | Panel | number | boolean, func: (sender: Player, text: string, teamChat: boolean) => void | string): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerSelectSpawn} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerSelectSpawn", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player) => void | Entity): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerSelectTeamSpawn} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerSelectTeamSpawn", identifier: string | table | Entity | Panel | number | boolean, func: (team: number, ply: Player) => void | Entity): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerSetHandsModel} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerSetHandsModel", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, ent: Entity) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerSetModel} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerSetModel", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerShouldTakeDamage} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerShouldTakeDamage", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, attacker: Entity) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerShouldTaunt} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerShouldTaunt", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, act: ACT) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerSilentDeath} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerSilentDeath", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerSpawn} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerSpawn", identifier: string | table | Entity | Panel | number | boolean, func: (player: Player) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#SetPlayerSpeed} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "SetPlayerSpeed", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, walkSpeed: number, runSpeed: number) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerSpawnAsSpectator} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerSpawnAsSpectator", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerStartTaunt} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerStartTaunt", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, act: number, length: number) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerStartVoice} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerStartVoice", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerStepSoundTime} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerStepSoundTime", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, type: STEPSOUNDTIME, walking: boolean) => void | number): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerSwitchFlashlight} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerSwitchFlashlight", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, enabled: boolean) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerSwitchWeapon} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerSwitchWeapon", identifier: string | table | Entity | Panel | number | boolean, func: (player: Player, oldWeapon: Weapon, newWeapon: Weapon) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerTick} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerTick", identifier: string | table | Entity | Panel | number | boolean, func: (player: Player, mv: CMoveData) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerTraceAttack} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerTraceAttack", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, dmginfo: CTakeDamageInfo, dir: Vector, trace: TraceResult) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerUnfrozeObject} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerUnfrozeObject", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, ent: Entity, physobj: PhysObj) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerUse} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerUse", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, ent: Entity) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PopulateMenuBar} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PopulateMenuBar", identifier: string | table | Entity | Panel | number | boolean, func: (menubar: DMenuBar) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PostCleanupMap} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PostCleanupMap", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PostDraw2DSkyBox} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PostDraw2DSkyBox", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PostDrawEffects} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PostDrawEffects", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PostDrawHUD} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PostDrawHUD", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerSpray} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerSpray", identifier: string | table | Entity | Panel | number | boolean, func: (sprayer: Player) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#SetupMove} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "SetupMove", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, mv: CMoveData, cmd: CUserCmd) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#SetupPlayerVisibility} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "SetupPlayerVisibility", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, viewEntity: Entity) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#SetupSkyboxFog} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "SetupSkyboxFog", identifier: string | table | Entity | Panel | number | boolean, func: (scale: number) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#CanProperty} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "CanProperty", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, property: string, ent: Entity) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#CanTool} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "CanTool", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, tr: TraceResult, tool: string) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#ContentSidebarSelection} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "ContentSidebarSelection", identifier: string | table | Entity | Panel | number | boolean, func: (parent: Panel, node: Panel) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#ContextMenuCreated} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "ContextMenuCreated", identifier: string | table | Entity | Panel | number | boolean, func: (g_ContextMenu: Panel) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#ContextMenuOpen} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "ContextMenuOpen", identifier: string | table | Entity | Panel | number | boolean, func: () => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#PaintNotes} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PaintNotes", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#PaintWorldTips} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PaintWorldTips", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#PersistenceLoad} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PersistenceLoad", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#PersistenceSave} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PersistenceSave", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#PlayerGiveSWEP} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerGiveSWEP", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, weapon: string, swep: SWEP[]) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#PlayerSpawnedEffect} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerSpawnedEffect", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, model: string, ent: Entity) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#PlayerSpawnedNPC} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerSpawnedNPC", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, ent: Entity) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#PlayerSpawnedProp} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerSpawnedProp", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, model: string, entity: Entity) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#PlayerSpawnedRagdoll} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerSpawnedRagdoll", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, model: string, ent: Entity) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#CanDrive} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "CanDrive", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, ent: Entity) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#PlayerSpawnedSENT} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerSpawnedSENT", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, ent: Entity) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#PlayerSpawnedVehicle} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerSpawnedVehicle", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, ent: Entity) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#PlayerSpawnEffect} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerSpawnEffect", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, model: string) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#PlayerSpawnNPC} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerSpawnNPC", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, npc_type: string, weapon: string) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#PlayerSpawnObject} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerSpawnObject", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, model: string, skin: number) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#PlayerSpawnProp} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerSpawnProp", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, model: string) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#PlayerSpawnRagdoll} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerSpawnRagdoll", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, model: string) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#PlayerSpawnSENT} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerSpawnSENT", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, classRef: string) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#PlayerSpawnSWEP} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerSpawnSWEP", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, weapon: string, swep: SWEP) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#PlayerSpawnVehicle} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerSpawnVehicle", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, model: string, name: string, table: table) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#PopulatePropMenu} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PopulatePropMenu", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#PopulateSTOOLMenu} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PopulateSTOOLMenu", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#PopulateToolMenu} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PopulateToolMenu", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#PostReloadToolsMenu} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PostReloadToolsMenu", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#PreReloadToolsMenu} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PreReloadToolsMenu", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#PlayerSpawnedSWEP} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerSpawnedSWEP", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, ent: Entity) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerJoinTeam} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerJoinTeam", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, team: number) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#AddToolMenuTabs} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "AddToolMenuTabs", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#AddGamemodeToolMenuTabs} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "AddGamemodeToolMenuTabs", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#SetupWorldFog} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "SetupWorldFog", identifier: string | table | Entity | Panel | number | boolean, func: () => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#ShouldCollide} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "ShouldCollide", identifier: string | table | Entity | Panel | number | boolean, func: (ent1: Entity, ent2: Entity) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#ShouldDrawLocalPlayer} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "ShouldDrawLocalPlayer", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#ShowHelp} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "ShowHelp", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#ShowSpare1} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "ShowSpare1", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#ShowSpare2} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "ShowSpare2", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#ShowTeam} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "ShowTeam", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#ShutDown} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "ShutDown", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#SpawniconGenerated} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "SpawniconGenerated", identifier: string | table | Entity | Panel | number | boolean, func: (lastmodel: string, imagename: string, modelsleft: number) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#StartChat} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "StartChat", identifier: string | table | Entity | Panel | number | boolean, func: (isTeamChat: boolean) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#StartCommand} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "StartCommand", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, ucmd: CUserCmd) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#StartEntityDriving} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "StartEntityDriving", identifier: string | table | Entity | Panel | number | boolean, func: (ent: Entity, ply: Player) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#StartGame} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "StartGame", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#Think} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "Think", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#AddToolMenuCategories} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "AddToolMenuCategories", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#Tick} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "Tick", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#UpdateAnimation} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "UpdateAnimation", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, velocity: number, maxSeqGroundSpeed: number) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#VariableEdited} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "VariableEdited", identifier: string | table | Entity | Panel | number | boolean, func: (ent: Entity, ply: Player, key: string, val: string, editor: table) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#VehicleMove} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "VehicleMove", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, veh: Vehicle, mv: CMoveData) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#VGUIMousePressAllowed} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "VGUIMousePressAllowed", identifier: string | table | Entity | Panel | number | boolean, func: (button: MOUSE) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#VGUIMousePressed} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "VGUIMousePressed", identifier: string | table | Entity | Panel | number | boolean, func: (pnl: Panel, mouseCode: MOUSE) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#WeaponEquip} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "WeaponEquip", identifier: string | table | Entity | Panel | number | boolean, func: (weapon: Weapon, owner: Player) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#WorkshopDownloadedFile} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "WorkshopDownloadedFile", identifier: string | table | Entity | Panel | number | boolean, func: (id: number, title: string) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#WorkshopDownloadFile} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "WorkshopDownloadFile", identifier: string | table | Entity | Panel | number | boolean, func: (id: number, imageID: number, title: string, size: number) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#WorkshopDownloadProgress} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "WorkshopDownloadProgress", identifier: string | table | Entity | Panel | number | boolean, func: (id: number, imageID: number, title: string, downloaded: number, expected: number) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#WorkshopDownloadTotals} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "WorkshopDownloadTotals", identifier: string | table | Entity | Panel | number | boolean, func: (remain: number, total: number) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#WorkshopEnd} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "WorkshopEnd", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#WorkshopStart} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "WorkshopStart", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#WorkshopSubscriptionsProgress} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "WorkshopSubscriptionsProgress", identifier: string | table | Entity | Panel | number | boolean, func: (num: number, max: number) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#AddGamemodeToolMenuCategories} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "AddGamemodeToolMenuCategories", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#TranslateActivity} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "TranslateActivity", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, act: ACT) => void | number): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#SpawnMenuEnabled} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "SpawnMenuEnabled", identifier: string | table | Entity | Panel | number | boolean, func: () => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerInitialSpawn} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerInitialSpawn", identifier: string | table | Entity | Panel | number | boolean, func: (player: Player) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerFrozeObject} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerFrozeObject", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, ent: Entity, physobj: PhysObj) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#EntityRemoved} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "EntityRemoved", identifier: string | table | Entity | Panel | number | boolean, func: (ent: Entity) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#EntityTakeDamage} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "EntityTakeDamage", identifier: string | table | Entity | Panel | number | boolean, func: (target: Entity, dmg: CTakeDamageInfo) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#FindUseEntity} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "FindUseEntity", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, defaultEnt: Entity) => void | Entity): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#FinishChat} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "FinishChat", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#FinishMove} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "FinishMove", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, mv: CMoveData) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#ForceDermaSkin} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "ForceDermaSkin", identifier: string | table | Entity | Panel | number | boolean, func: () => void | string): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#GameContentChanged} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "GameContentChanged", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#GetFallDamage} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "GetFallDamage", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, speed: number) => void | number): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#GetGameDescription} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "GetGameDescription", identifier: string | table | Entity | Panel | number | boolean, func: () => void | string): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#GetMotionBlurValues} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "GetMotionBlurValues", identifier: string | table | Entity | Panel | number | boolean, func: (horizontal: number, vertical: number, forward: number, rotational: number) => void | number): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#GetPreferredCarryAngles} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "GetPreferredCarryAngles", identifier: string | table | Entity | Panel | number | boolean, func: (ent: Entity) => void | Angle): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#GetTeamColor} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "GetTeamColor", identifier: string | table | Entity | Panel | number | boolean, func: (ent: Entity) => void | table): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#GetTeamNumColor} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "GetTeamNumColor", identifier: string | table | Entity | Panel | number | boolean, func: (team: number) => void | table): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#EntityNetworkedVarChanged} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "EntityNetworkedVarChanged", identifier: string | table | Entity | Panel | number | boolean, func: (ent: Entity, name: string, oldval: any, newval: any) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#GrabEarAnimation} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "GrabEarAnimation", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#GravGunOnPickedUp} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "GravGunOnPickedUp", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, ent: Entity) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#GravGunPickupAllowed} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "GravGunPickupAllowed", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, ent: Entity) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#GravGunPunt} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "GravGunPunt", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, ent: Entity) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#GUIMouseDoublePressed} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "GUIMouseDoublePressed", identifier: string | table | Entity | Panel | number | boolean, func: (mouseCode: MOUSE, aimVector: Vector) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#GUIMousePressed} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "GUIMousePressed", identifier: string | table | Entity | Panel | number | boolean, func: (mouseCode: MOUSE, aimVector: Vector) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#GUIMouseReleased} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "GUIMouseReleased", identifier: string | table | Entity | Panel | number | boolean, func: (mouseCode: MOUSE, aimVector: Vector) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#HandlePlayerDriving} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "HandlePlayerDriving", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#HandlePlayerDucking} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "HandlePlayerDucking", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, velocity: number) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#HandlePlayerJumping} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "HandlePlayerJumping", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, velocity: number) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#HandlePlayerLanding} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "HandlePlayerLanding", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, velocity: number, onGround: boolean) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#HandlePlayerNoClipping} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "HandlePlayerNoClipping", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, velocity: number) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#HandlePlayerSwimming} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "HandlePlayerSwimming", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, velocity: number) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#HandlePlayerVaulting} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "HandlePlayerVaulting", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, velocity: number) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#GravGunOnDropped} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "GravGunOnDropped", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, ent: Entity) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#EntityKeyValue} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "EntityKeyValue", identifier: string | table | Entity | Panel | number | boolean, func: (ent: Entity, key: string, value: string) => void | string): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#EntityFireBullets} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "EntityFireBullets", identifier: string | table | Entity | Panel | number | boolean, func: (ent: Entity, data: Bullet) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#EntityEmitSound} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "EntityEmitSound", identifier: string | table | Entity | Panel | number | boolean, func: (data: EmitSoundInfo) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#AcceptInput} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "AcceptInput", identifier: string | table | Entity | Panel | number | boolean, func: (ent: Entity, input: string, activator: Entity, caller: Entity, value: any) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#AddDeathNotice} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "AddDeathNotice", identifier: string | table | Entity | Panel | number | boolean, func: (attacker: string, attackerTeam: number, inflictor: string, victim: string, victimTeam: number) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#AdjustMouseSensitivity} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "AdjustMouseSensitivity", identifier: string | table | Entity | Panel | number | boolean, func: (defaultSensitivity: number) => void | number): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#AllowPlayerPickup} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "AllowPlayerPickup", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, ent: Entity) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#CalcMainActivity} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "CalcMainActivity", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, vel: Vector) => void | ACT): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#CalcVehicleView} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "CalcVehicleView", identifier: string | table | Entity | Panel | number | boolean, func: (veh: Vehicle, ply: Player, view: CamData) => void | CamData): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#CalcView} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "CalcView", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, origin: Vector, angles: Angle, fov: number, znear: number, zfar: number) => void | CamData): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#CalcViewModelView} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "CalcViewModelView", identifier: string | table | Entity | Panel | number | boolean, func: (wep: Weapon, vm: Entity, oldPos: Vector, oldAng: Angle, pos: Vector, ang: Angle) => void | Vector): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#CanEditVariable} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "CanEditVariable", identifier: string | table | Entity | Panel | number | boolean, func: (ent: Entity, ply: Player, key: string, val: string, editor: table) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#CanExitVehicle} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "CanExitVehicle", identifier: string | table | Entity | Panel | number | boolean, func: (veh: Vehicle, ply: Player) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#CanPlayerEnterVehicle} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "CanPlayerEnterVehicle", identifier: string | table | Entity | Panel | number | boolean, func: (player: Player, vehicle: Vehicle, role: number) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#CanPlayerSuicide} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "CanPlayerSuicide", identifier: string | table | Entity | Panel | number | boolean, func: (player: Player) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#CanPlayerUnfreeze} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "CanPlayerUnfreeze", identifier: string | table | Entity | Panel | number | boolean, func: (player: Player, entity: Entity, phys: PhysObj) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#CaptureVideo} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "CaptureVideo", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#ChatText} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "ChatText", identifier: string | table | Entity | Panel | number | boolean, func: (index: number, name: string, text: string, type: string) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#ChatTextChanged} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "ChatTextChanged", identifier: string | table | Entity | Panel | number | boolean, func: (text: string) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#CheckPassword} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "CheckPassword", identifier: string | table | Entity | Panel | number | boolean, func: (steamID64: string, ipAddress: string, svPassword: string, clPassword: string, name: string) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#CloseDermaMenus} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "CloseDermaMenus", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#CreateClientsideRagdoll} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "CreateClientsideRagdoll", identifier: string | table | Entity | Panel | number | boolean, func: (entity: Entity, ragdoll: Entity) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#CreateEntityRagdoll} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "CreateEntityRagdoll", identifier: string | table | Entity | Panel | number | boolean, func: (owner: Entity, ragdoll: Entity) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#CreateMove} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "CreateMove", identifier: string | table | Entity | Panel | number | boolean, func: (cmd: CUserCmd) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#CreateTeams} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "CreateTeams", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#DoAnimationEvent} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "DoAnimationEvent", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, event: PLAYERANIMEVENT, data?: ACT) => void | ACT): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#DoPlayerDeath} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "DoPlayerDeath", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, attacker: Entity, dmg: CTakeDamageInfo) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#DrawDeathNotice} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "DrawDeathNotice", identifier: string | table | Entity | Panel | number | boolean, func: (x: number, y: number) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#DrawMonitors} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "DrawMonitors", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#DrawOverlay} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "DrawOverlay", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#DrawPhysgunBeam} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "DrawPhysgunBeam", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, physgun: Weapon, enabled: boolean, target: Entity, physBone: number, hitPos: PhysObj) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#EndEntityDriving} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "EndEntityDriving", identifier: string | table | Entity | Panel | number | boolean, func: (ent: Entity, ply: Player) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerHurt} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerHurt", identifier: string | table | Entity | Panel | number | boolean, func: (victim: Player, attacker: Entity, healthRemaining: number, damageTaken: number) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#HUDAmmoPickedUp} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "HUDAmmoPickedUp", identifier: string | table | Entity | Panel | number | boolean, func: (itemName: string, amount: number) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#HideTeam} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "HideTeam", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#HUDDrawScoreBoard} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "HUDDrawScoreBoard", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#HUDDrawPickupHistory} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "HUDDrawPickupHistory", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#OnReloaded} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "OnReloaded", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#OnSpawnMenuClose} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "OnSpawnMenuClose", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#OnSpawnMenuOpen} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "OnSpawnMenuOpen", identifier: string | table | Entity | Panel | number | boolean, func: () => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#OnTextEntryGetFocus} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "OnTextEntryGetFocus", identifier: string | table | Entity | Panel | number | boolean, func: (panel: Panel) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#OnTextEntryLoseFocus} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "OnTextEntryLoseFocus", identifier: string | table | Entity | Panel | number | boolean, func: (panel: Panel) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#OnUndo} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "OnUndo", identifier: string | table | Entity | Panel | number | boolean, func: (name: string, customText: string) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#OnViewModelChanged} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "OnViewModelChanged", identifier: string | table | Entity | Panel | number | boolean, func: (viewmodel: Entity, oldModel: string, newModel: string) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PhysgunDrop} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PhysgunDrop", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, ent: Entity) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PhysgunPickup} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PhysgunPickup", identifier: string | table | Entity | Panel | number | boolean, func: (player: Player, entity: Entity) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerAuthed} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerAuthed", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, steamid: string, uniqueid: string) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerBindPress} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerBindPress", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, bind: string, pressed: boolean) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerButtonDown} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerButtonDown", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, button: BUTTON_CODE) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerButtonUp} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerButtonUp", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, button: BUTTON_CODE) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerCanHearPlayersVoice} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerCanHearPlayersVoice", identifier: string | table | Entity | Panel | number | boolean, func: (listener: Player, talker: Player) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerCanJoinTeam} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerCanJoinTeam", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, team: number) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerCanPickupItem} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerCanPickupItem", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, item: Entity) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerCanPickupWeapon} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerCanPickupWeapon", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, wep: Weapon) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerCanSeePlayersChat} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerCanSeePlayersChat", identifier: string | table | Entity | Panel | number | boolean, func: (text: string, teamOnly: boolean, listener: Player, speaker: Player) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerConnect} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerConnect", identifier: string | table | Entity | Panel | number | boolean, func: (name: string, ip: string) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerDeath} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerDeath", identifier: string | table | Entity | Panel | number | boolean, func: (victim: Player, inflictor: Entity, attacker: Entity) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerDeathSound} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerDeathSound", identifier: string | table | Entity | Panel | number | boolean, func: () => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerDeathThink} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerDeathThink", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerDisconnected} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerDisconnected", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerDriveAnimate} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerDriveAnimate", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerDroppedWeapon} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerDroppedWeapon", identifier: string | table | Entity | Panel | number | boolean, func: (owner: Player, wep: Weapon) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerEndVoice} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerEndVoice", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerEnteredVehicle} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerEnteredVehicle", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, veh: Vehicle, role: number) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#PlayerFootstep} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "PlayerFootstep", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, pos: Vector, foot: number, sound: string, volume: number, filter: CRecipientFilter) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#OnPlayerChat} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "OnPlayerChat", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, text: string, teamChat: boolean, isDead: boolean) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#OnPlayerChangedTeam} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "OnPlayerChangedTeam", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, oldTeam: number, newTeam: number) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#OnPlayerHitGround} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "OnPlayerHitGround", identifier: string | table | Entity | Panel | number | boolean, func: (player: Entity, inWater: boolean, onFloater: boolean, speed: number) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#OnPhysgunFreeze} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "OnPhysgunFreeze", identifier: string | table | Entity | Panel | number | boolean, func: (weapon: Entity, physobj: PhysObj, ent: Entity, ply: Player) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#HUDDrawTargetID} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "HUDDrawTargetID", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#HUDItemPickedUp} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "HUDItemPickedUp", identifier: string | table | Entity | Panel | number | boolean, func: (itemName: string) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#HUDPaint} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "HUDPaint", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#HUDPaintBackground} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "HUDPaintBackground", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#HUDShouldDraw} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "HUDShouldDraw", identifier: string | table | Entity | Panel | number | boolean, func: (name: string) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#HUDWeaponPickedUp} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "HUDWeaponPickedUp", identifier: string | table | Entity | Panel | number | boolean, func: (weapon: Weapon) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#Initialize} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "Initialize", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#InitPostEntity} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "InitPostEntity", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#InputMouseApply} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "InputMouseApply", identifier: string | table | Entity | Panel | number | boolean, func: (cmd: CUserCmd, x: number, y: number, ang: Angle) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#IsSpawnpointSuitable} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "IsSpawnpointSuitable", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, spawnpoint: Entity, makeSuitable: boolean) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#KeyPress} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "KeyPress", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, key: IN) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#KeyRelease} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "KeyRelease", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, key: IN) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#OnPhysgunReload} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "OnPhysgunReload", identifier: string | table | Entity | Panel | number | boolean, func: (physgun: Weapon, ply: Player) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#MenuStart} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "MenuStart", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#LoadGModSave} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "LoadGModSave", identifier: string | table | Entity | Panel | number | boolean, func: (data: string, map: string, timestamp: number) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#Move} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "Move", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, mv: CMoveData) => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#OnNPCKilled} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "OnNPCKilled", identifier: string | table | Entity | Panel | number | boolean, func: (npc: NPC, attacker: Entity, inflictor: Entity) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#OnLuaError} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "OnLuaError", identifier: string | table | Entity | Panel | number | boolean, func: (error: string, realm: number, name: string, id: number) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#OnGamemodeLoaded} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "OnGamemodeLoaded", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#OnEntityCreated} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "OnEntityCreated", identifier: string | table | Entity | Panel | number | boolean, func: (entity: Entity) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#MouthMoveAnimation} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "MouthMoveAnimation", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#OnContextMenuOpen} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "OnContextMenuOpen", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#OnDamagedByExplosion} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "OnDamagedByExplosion", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, dmginfo: CTakeDamageInfo) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#OnChatTab} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "OnChatTab", identifier: string | table | Entity | Panel | number | boolean, func: (text: string) => void | string): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#OnAchievementAchieved} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "OnAchievementAchieved", identifier: string | table | Entity | Panel | number | boolean, func: (ply: Player, achievement: number) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#NotifyShouldTransmit} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "NotifyShouldTransmit", identifier: string | table | Entity | Panel | number | boolean, func: (ent: Entity, shouldtransmit: boolean) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#NetworkIDValidated} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "NetworkIDValidated", identifier: string | table | Entity | Panel | number | boolean, func: (name: string, steamID: string) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#NetworkEntityCreated} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "NetworkEntityCreated", identifier: string | table | Entity | Panel | number | boolean, func: (ent: Entity) => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#NeedsDepthPass} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "NeedsDepthPass", identifier: string | table | Entity | Panel | number | boolean, func: () => void | boolean): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link GM#OnContextMenuClose} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "OnContextMenuClose", identifier: string | table | Entity | Panel | number | boolean, func: () => void): void;
    
    /**
     * Add a hook to be called upon the given event occurring. 
     * @param eventName  The event to hook on to, see [[:Category:GM Hooks|GM Hooks]] and [[:Category:SANDBOX Hooks|Sandbox Hooks]] 
     * @param identifier  The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier '''should''' be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
     * 
     * The identifier can be either a {{Type|string}}, or a {{Type|table}}/object with an IsValid function defined such as an {{Type|Entity}} or {{Type|Panel}}. {{Type|number}}s and {{Type|boolean}}s, for example, are not allowed.
     * 
     * If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, as soon as IsValid( identifier ) returns false, the hook will be removed. 
     * @param func  see { @link SANDBOX#SpawnMenuOpen} 
     * @example
     * 
     * local function onThink()
     * 	print( "onThink has been called" )
     * end
     * 
     * hook.Add( "Think", "Some unique name", onThink )
     * 
     * // This will hook onto the "Think" event with the function onThink, printing to the console whenever the event occurs.@example
     * 
     * hook.Add( "Think", "Another unique name", function()
     * 	print( "Think has been called" )
     * end )
     * 
     * // This works the same as above, but defines the function inside hook.Add rather than above it.@example
     * 
     * local myTable = {}
     * function myTable:IsValid()
     *     return true
     * end
     * 
     * function myTable:PlayerInitialSpawn(ply)
     *     print( "CustomHook", self, ply )
     * end
     * 
     * hook.Add( "CustomHook" , myTable , myTable.PlayerInitialSpawn )
     * hook.Run( "CustomHook" )
     * 
     * // This code demonstrates how you can add a table function with a 'self' argument, without the use of a wrapper function 
     */
    function Add(eventName: "SpawnMenuOpen", identifier: string | table | Entity | Panel | number | boolean, func: () => void | boolean): void;
    
    /**
     * Calls all hooks associated with the given event until one returns something other than nil, and then returns that data.
     * 
     * In almost all cases, you should use {{LibraryFunction|hook|Run}} instead - it calls hook.Call internally but supplies the gamemode table by itself, making your code neater. 
     * @param eventName  The event to call hooks for 
     * @param gamemodeTable  If the gamemode is specified, the gamemode hook within will be called, otherwise not 
     * @param args  The arguments to be passed to the hooks 
     * @returns Return data from called hooks. Limited to 6 return values 
     * @example
     * 
     * function DoSomething()
     *     //Does something
     *     hook.Call("DoneDoingSomething")
     * end
     * 
     * function DoSomethingElse()
     *     //Does something else, once the hook DoneDoingSomething is called.
     *     print("Done!")
     * end
     * hook.Add( "DoneDoingSomething", "Does something else", DoSomethingElse )
     * 
     * DoSomething()
     * 
     * // Runs function DoSomething, which eventually calls the event "DoneDoingSomething", triggering the hooked function DoSomethingElse.@example
     * 
     * function MakeCheese()
     *     local shouldMakeCheese = hook.Call("MakeCheezPleez")
     * 
     *     if shouldMakeCheese then
     *         print("yay")
     *     else
     *         print("nay")
     *     end
     * end
     * 
     * function MakeCheeseOrNot()
     *     if #player.GetAll() >= 1 then
     *         return true
     *     else
     *         return false
     *     end
     * end
     * hook.Add( "MakeCheezPleez", "Does something else", MakeCheeseOrNot )
     * 
     * MakeCheese()
     * 
     * // You can also make custom functions controllable via hooks. 
     */
    function Call(eventName: string, gamemodeTable: table, ...args: (any)[]): any;
    
    /**
     * Returns a list of all the hooks registered with {{LibraryFunction|hook|Add}}. 
     * @returns A table of tables. See below for output example. 
     * @example
     * 
     * PrintTable( hook.GetTable() )
     * 
     * // Example of output table structure. 
     */
    function GetTable(): table[];
    
    /**
     * Removes the hook with the supplied identifier from the given event. 
     * @param eventName  The event name. 
     * @param identifier  The unique identifier of the hook to remove, usually a string. 
     * @example
     * 
     * hook.Add( "HUDPaint", "my_hook_identifier", function()
     * 	
     * 	surface.SetDrawColor( 0, 0, 0, 150 )
     * 	surface.DrawRect( 0, 0, ScrW(), ScrH() )
     * 	
     * end )
     * 
     * timer.Simple( 15, function()
     * 
     * 	hook.Remove( "HUDPaint", "my_hook_identifier" )
     * 
     * end )
     * 
     * // Darkens the player's screen for 15 seconds. 
     */
    function Remove(eventName: string, identifier: any): void;
    
    /**
     * Calls hooks associated with the given event.
     * 
     * Calls all hooks until one returns something other than nil and then returns that data.
     * 
     * If no hook returns any data, it will try to call the GAMEMODE:<eventName> alternative, if one exists.
     * 
     * This function internally calls {{LibraryFunction|hook|Call}}.
     * 
     * See also: {{LibraryFunction|gamemode|Call}} - same as this, but does not call hooks if the gamemode hasn't defined the function. 
     * @param eventName  The event to call hooks for 
     * @param args  The arguments to be passed to the hooks 
     * @returns Returned data from called hooks 
     */
    function Run(eventName: string, ...args: (any)[]): any;
}

/**
 * The HTML control can be used to display HTML code just like an internet browser. Unlike {{Type|DHTML}}, this control cannot accept user input or complex interaction, such as retrieving image data.
 * 
 * '''Blocked URL Extentions'''
 * 
 * ''This means your url cannot end in any of these extensions, e.g.: (http://yourdomain.com/garry.exe)''
 * * .exe
 * * .bat
 * * .dll
 * * .zip
 * * .mp3
 * * .swf 
 * @example
 * 
 * HTMLTest = vgui.Create( "HTML" )
 * HTMLTest:SetPos( 50, 50 )
 * HTMLTest:SetSize( ScrW() - 100, ScrH() - 100 )
 * HTMLTest:OpenURL( "wiki.garrysmod.com" )
 * 
 * // Creates an HTML control in the center of screen, and makes it display http://wiki.garrysmod.com/ 
 */
declare class HTML extends Panel {
    /**
     * Returns the panel's HTML material. Only works with {{Type|Awesomium}}, {{Type|HTML}} and {{Type|DHTML}} panels that have been fully loaded.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     * @returns The HTML material used by the panel. Typically starts with "__vgui_texture_" followed by an incremental number. 
     * @example
     * 
     * AddCSLuaFile()
     * 
     * ENT.Type = "anim"
     * ENT.Base = "base_entity"
     * 
     * ENT.PrintName = "Web Screen"
     * ENT.Author = "Microflash"
     * ENT.Spawnable = true
     * 
     * if ( CLIENT ) then
     * 	ENT.Mat = nil
     * 	ENT.Panel = nil
     * end
     * 
     * function ENT:Initialize()
     * 
     * 	if ( SERVER ) then
     * 		
     * 		self:SetModel("models/props_phx/rt_screen.mdl")
     * 		self:SetMoveType(MOVETYPE_VPHYSICS)
     * 		self:SetSolid(SOLID_VPHYSICS)
     * 		
     * 		self:PhysicsInit(SOLID_VPHYSICS)
     * 		
     * 		self:Freeze()
     * 		
     * 	else
     * 	
     * 		// Reset material and panel and load DHTML panel
     * 		self.Mat = nil
     * 		self.Panel = nil
     * 		self:OpenPage()
     * 		
     * 	end
     * 	
     * end
     * 
     * function ENT:Freeze()
     * 	local phys = self:GetPhysicsObject()
     * 	if (IsValid(phys)) then phys:EnableMotion(false) end
     * end
     * 
     * // Load the DHTML reference panel
     * function ENT:OpenPage()
     * 
     * 	// Iff for some reason a panel is already loaded, delete it
     * 	if(self.Panel) then
     * 	
     * 		self.Panel:Remove()
     * 		self.Panel = nil
     * 	
     * 	end
     * 
     * 	// Create a web page panel and fill the entire screen
     * 	self.Panel = vgui.Create("DHTML")
     * 	self.Panel:Dock(FILL)
     * 	
     * 	// Wiki page URL
     * 	local url = <nowiki>"http://wiki.garrysmod.com/page/Category:Material"</nowiki>
     * 	
     * 	// Load the wiki page
     * 	self.Panel:OpenURL(url)
     * 	
     * 	// Hide the panel
     * 	self.Panel:SetAlpha(0)
     * 	self.Panel:SetMouseInputEnabled(false)
     * 	
     * 	// Disable HTML messages
     * 	function self.Panel:ConsoleMessage(msg) end
     * 
     * end
     * 
     * function ENT:Draw()
     * 
     * 	// Iff the material has already been grabbed from the panel
     * 	if(self.Mat) then
     * 		
     * 		// Apply it to the screen/model
     * 		if(render.MaterialOverrideByIndex) then
     * 			render.MaterialOverrideByIndex(1, self.Mat)
     * 		else
     * 			render.ModelMaterialOverride(self.Mat)
     * 		end
     * 		
     * 	// Otherwise, check that the panel is valid and the HTML material is finished loading
     * 	elseif(self.Panel && self.Panel:GetHTMLMaterial()) then
     * 
     * 		// Get the html material
     * 		local html_mat = self.Panel:GetHTMLMaterial()
     * 		
     * 		// Used to make the material fit the model screen
     * 		// May need to be changed iff using a different model
     * 		// For the multiplication number it goes in segments of 512
     * 		// Based off the players screen resolution
     * 		local scale_x, scale_y = ScrW()/2048, ScrH()/1024
     * 		
     * 		// Create a new material with the proper scaling and shader
     * 		local matdata =
     * 		{
     * 			["$basetexture"]=html_mat:GetName(),
     * 			["$basetexturetransform"]="center 0 0 scale "..scale_x.." "..scale_y.." rotate 0 translate 0 0",
     * 			["$model"]=1
     * 		}
     * 		// Unique ID used for material name
     * 		local uid = string.Replace(html_mat:GetName(), "__vgui_texture_", "")
     * 		
     * 		// Create the model material
     * 		self.Mat = CreateMaterial("WebMaterial_"..uid, "VertexLitGeneric", matdata)
     * 	
     * 	end
     * 
     * 	// Render the model
     * 	self:DrawModel()
     * 	
     * 	// Reset the material override or else everything will have a HTML material!
     * 	render.ModelMaterialOverride(nil)
     * 
     * end
     * 
     * function ENT:OnRemove()
     * 	// Make sure the panel is removed too
     * 	if(self.Panel) then self.Panel:Remove() end
     * end
     * 
     * // Defines a new entity which can display a web page on a TV screen. 
     */
    public GetHTMLMaterial(): IMaterial;
    
    /**
     * Returns the panel's HTML material. Only works with {{Type|Awesomium}}, {{Type|HTML}} and {{Type|DHTML}} panels that have been fully loaded.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     * @returns The HTML material used by the panel. Typically starts with "__vgui_texture_" followed by an incremental number. 
     * @example
     * 
     * AddCSLuaFile()
     * 
     * ENT.Type = "anim"
     * ENT.Base = "base_entity"
     * 
     * ENT.PrintName = "Web Screen"
     * ENT.Author = "Microflash"
     * ENT.Spawnable = true
     * 
     * if ( CLIENT ) then
     * 	ENT.Mat = nil
     * 	ENT.Panel = nil
     * end
     * 
     * function ENT:Initialize()
     * 
     * 	if ( SERVER ) then
     * 		
     * 		self:SetModel("models/props_phx/rt_screen.mdl")
     * 		self:SetMoveType(MOVETYPE_VPHYSICS)
     * 		self:SetSolid(SOLID_VPHYSICS)
     * 		
     * 		self:PhysicsInit(SOLID_VPHYSICS)
     * 		
     * 		self:Freeze()
     * 		
     * 	else
     * 	
     * 		// Reset material and panel and load DHTML panel
     * 		self.Mat = nil
     * 		self.Panel = nil
     * 		self:OpenPage()
     * 		
     * 	end
     * 	
     * end
     * 
     * function ENT:Freeze()
     * 	local phys = self:GetPhysicsObject()
     * 	if (IsValid(phys)) then phys:EnableMotion(false) end
     * end
     * 
     * // Load the DHTML reference panel
     * function ENT:OpenPage()
     * 
     * 	// Iff for some reason a panel is already loaded, delete it
     * 	if(self.Panel) then
     * 	
     * 		self.Panel:Remove()
     * 		self.Panel = nil
     * 	
     * 	end
     * 
     * 	// Create a web page panel and fill the entire screen
     * 	self.Panel = vgui.Create("DHTML")
     * 	self.Panel:Dock(FILL)
     * 	
     * 	// Wiki page URL
     * 	local url = <nowiki>"http://wiki.garrysmod.com/page/Category:Material"</nowiki>
     * 	
     * 	// Load the wiki page
     * 	self.Panel:OpenURL(url)
     * 	
     * 	// Hide the panel
     * 	self.Panel:SetAlpha(0)
     * 	self.Panel:SetMouseInputEnabled(false)
     * 	
     * 	// Disable HTML messages
     * 	function self.Panel:ConsoleMessage(msg) end
     * 
     * end
     * 
     * function ENT:Draw()
     * 
     * 	// Iff the material has already been grabbed from the panel
     * 	if(self.Mat) then
     * 		
     * 		// Apply it to the screen/model
     * 		if(render.MaterialOverrideByIndex) then
     * 			render.MaterialOverrideByIndex(1, self.Mat)
     * 		else
     * 			render.ModelMaterialOverride(self.Mat)
     * 		end
     * 		
     * 	// Otherwise, check that the panel is valid and the HTML material is finished loading
     * 	elseif(self.Panel && self.Panel:GetHTMLMaterial()) then
     * 
     * 		// Get the html material
     * 		local html_mat = self.Panel:GetHTMLMaterial()
     * 		
     * 		// Used to make the material fit the model screen
     * 		// May need to be changed iff using a different model
     * 		// For the multiplication number it goes in segments of 512
     * 		// Based off the players screen resolution
     * 		local scale_x, scale_y = ScrW()/2048, ScrH()/1024
     * 		
     * 		// Create a new material with the proper scaling and shader
     * 		local matdata =
     * 		{
     * 			["$basetexture"]=html_mat:GetName(),
     * 			["$basetexturetransform"]="center 0 0 scale "..scale_x.." "..scale_y.." rotate 0 translate 0 0",
     * 			["$model"]=1
     * 		}
     * 		// Unique ID used for material name
     * 		local uid = string.Replace(html_mat:GetName(), "__vgui_texture_", "")
     * 		
     * 		// Create the model material
     * 		self.Mat = CreateMaterial("WebMaterial_"..uid, "VertexLitGeneric", matdata)
     * 	
     * 	end
     * 
     * 	// Render the model
     * 	self:DrawModel()
     * 	
     * 	// Reset the material override or else everything will have a HTML material!
     * 	render.ModelMaterialOverride(nil)
     * 
     * end
     * 
     * function ENT:OnRemove()
     * 	// Make sure the panel is removed too
     * 	if(self.Panel) then self.Panel:Remove() end
     * end
     * 
     * // Defines a new entity which can display a web page on a TV screen. 
     */
    public GetHTMLMaterial(): IMaterial;
    
    /**
     * Goes back one page in the HTML panel's history if available.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     */
    public GoBack(): void;
    
    /**
     * Goes back one page in the HTML panel's history if available.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     */
    public GoBack(): void;
    
    /**
     * Goes forward one page in the HTML panel's history if available.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     */
    public GoForward(): void;
    
    /**
     * Goes forward one page in the HTML panel's history if available.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     */
    public GoForward(): void;
    
    /**
     * Goes to the page in the HTML panel's history at the specified relative offset.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     * @param offset  The offset in the panel's back/forward history, relative to the current page, that you would like to skip to. Because this is relative, 0 = current page while negative goes back and positive goes forward. For example, -2 will go back 2 pages in the history. 
     */
    public GoToHistoryOffset(offset: number): void;
    
    /**
     * Goes to the page in the HTML panel's history at the specified relative offset.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     * @param offset  The offset in the panel's back/forward history, relative to the current page, that you would like to skip to. Because this is relative, 0 = current page while negative goes back and positive goes forward. For example, -2 will go back 2 pages in the history. 
     */
    public GoToHistoryOffset(offset: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     * @param objectName 
     */
    public NewObject(objectName: string): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     * @param objectName 
     */
    public NewObject(objectName: string): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     * @param objectName 
     * @param callbackName 
     */
    public NewObjectCallback(objectName: string, callbackName: string): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     * @param objectName 
     * @param callbackName 
     */
    public NewObjectCallback(objectName: string, callbackName: string): void;
    
    /**
     * [[Category:HTML]][[Category:Awesomium]]Instructs a HTML control to download and parse a HTML script using the passed URL. 
     * @param URL  URL to open 
     * @example
     * 
     * local frame = vgui.Create( "DFrame" )
     * frame:SetTitle( "HTML Example" )
     * frame:SetSize( ScrW() * 0.75, ScrH() * 0.75 )
     * frame:Center()
     * frame:MakePopup()
     * 
     * local html = vgui.Create( "HTML", frame )
     * html:Dock( FILL )
     * html:OpenURL( "wiki.garrysmod.com" )
     * 
     * // Displays the Garry's Mod wiki page.@example
     * 
     * local frame = vgui.Create( "DFrame" )
     * frame:SetTitle( "HTML Example" )
     * frame:SetSize( ScrW() * 0.75, ScrH() * 0.75 )
     * frame:Center()
     * frame:MakePopup()
     * 
     * local html = vgui.Create( "HTML", frame )
     * html:Dock( FILL )
     * html:OpenURL( "asset://garrysmod/html/loading.html" )
     * 
     * // Displays the default loading screen from the html folder. 
     */
    public OpenURL(URL: string): void;
    
    /**
     * [[Category:HTML]][[Category:Awesomium]]Instructs a HTML control to download and parse a HTML script using the passed URL. 
     * @param URL  URL to open 
     * @example
     * 
     * local frame = vgui.Create( "DFrame" )
     * frame:SetTitle( "HTML Example" )
     * frame:SetSize( ScrW() * 0.75, ScrH() * 0.75 )
     * frame:Center()
     * frame:MakePopup()
     * 
     * local html = vgui.Create( "HTML", frame )
     * html:Dock( FILL )
     * html:OpenURL( "wiki.garrysmod.com" )
     * 
     * // Displays the Garry's Mod wiki page.@example
     * 
     * local frame = vgui.Create( "DFrame" )
     * frame:SetTitle( "HTML Example" )
     * frame:SetSize( ScrW() * 0.75, ScrH() * 0.75 )
     * frame:Center()
     * frame:MakePopup()
     * 
     * local html = vgui.Create( "HTML", frame )
     * html:Dock( FILL )
     * html:OpenURL( "asset://garrysmod/html/loading.html" )
     * 
     * // Displays the default loading screen from the html folder. 
     */
    public OpenURL(URL: string): void;
    
    /**
     * Refreshes the HTML panel's current page.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     * @param ignoreCache [=false] If true, the refresh will ignore cached content similar to "ctrl+f5" in most browsers. 
     */
    public Refresh(ignoreCache?: boolean): void;
    
    /**
     * Refreshes the HTML panel's current page.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     * @param ignoreCache [=false] If true, the refresh will ignore cached content similar to "ctrl+f5" in most browsers. 
     */
    public Refresh(ignoreCache?: boolean): void;
    
    /**
     * [[Category:HTML]][[Category:Awesomium]]Allows you to set HTML code within a panel. 
     * @param HTML_code  The code to set. 
     * @example
     * 
     * local HTML = vgui.Create( "HTML", DPanel )
     * HTML:SetHTML( "<p>Put HTML code here</p>" )
     * HTML:SetSize( 390, 400 )
     * 
     * // 
     */
    public SetHTML(HTML_code: string): void;
    
    /**
     * [[Category:HTML]][[Category:Awesomium]]Allows you to set HTML code within a panel. 
     * @param HTML_code  The code to set. 
     * @example
     * 
     * local HTML = vgui.Create( "HTML", DPanel )
     * HTML:SetHTML( "<p>Put HTML code here</p>" )
     * HTML:SetSize( 390, 400 )
     * 
     * // 
     */
    public SetHTML(HTML_code: string): void;
    
    /**
     * Stops the loading of the HTML panel's current page.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     */
    public StopLoading(): void;
    
    /**
     * Forcibly updates the panels' HTML Material, similar to when Paint is called on it.
     * This is only useful if the panel is not normally visible, i.e the panel exists purely for its HTML Material.
     * **Note:**
     * >Only works on with panels that have a HTML Material. See {{ClassFunction|Panel|GetHTMLMaterial}} for more details.
     * 
     * **Note:**
     * >A good place to call this is in the {{HookFunction|GM|PreRender}} hook
     * 
     * [[Category:HTML]][[Category:Awesomium]] 
     */
    public UpdateHTMLTexture(): void;
    
    /**
     * Forcibly updates the panels' HTML Material, similar to when Paint is called on it.
     * This is only useful if the panel is not normally visible, i.e the panel exists purely for its HTML Material.
     * **Note:**
     * >Only works on with panels that have a HTML Material. See {{ClassFunction|Panel|GetHTMLMaterial}} for more details.
     * 
     * **Note:**
     * >A good place to call this is in the {{HookFunction|GM|PreRender}} hook
     * 
     * [[Category:HTML]][[Category:Awesomium]] 
     */
    public UpdateHTMLTexture(): void;
}

/**
 * The http library allows either the server or client to communicate with external websites via HTTP, both GET ({{LibraryFunction|http|Fetch}}) and POST ({{LibraryFunction|http|Post}}) are supported. A more powerful & advanced method can be used via the global {{GlobalFunction|HTTP}} function. 
 */
declare namespace http {
    /**
     * Launches a GET request. 
     * @param url  The URL of the website to fetch. 
     * @param onSuccess [=nil] Function to be called on success. Arguments are
     * * {{FuncArg|string|body}}
     * * {{FuncArg|string|size|equal to {{LibraryFunction|string|len}}(body)}}
     * * {{FuncArg|table|headers}}
     * * {{FuncArg|number|code|The HTTP success code}} 
     * @param onFailure [=nil] Function to be called on failure. Arguments are
     * * {{FuncArg|string|error|The error message}} 
     * @param headers [={}] KeyValue table for headers 
     * @example
     * 
     * local TheReturnedHTML = "" // Blankness
     * 
     * http.Fetch( "http:&#47;&#47;www.google.com",
     * 	function( body, len, headers, code )
     * 		// The first argument is the HTML we asked for.
     * 		TheReturnedHTML = body
     * 	end,
     * 	function( error )
     * 		// We failed. =(
     * 	end
     * )
     * 
     * // Shows the typical usage to get the HTML of a webpage. 
     */
    function Fetch(url: string, onSuccess?: Function, onFailure?: Function, headers?: table): void;
    
    /**
     * Sends an asynchronous POST request to a HTTP server.
     * 
     * HTTP requests returning a status code >= 400 are still considered a success and will call the onSuccess callback.
     * 
     * The onFailure callback is usually only called on DNS or TCP errors (e.g. the website is unavailable or the domain does not exist) 
     * @param url  The url to of the website to fetch. 
     * @param parameters  The post parameters to be send to the server. '''Keys and values ''must'' be strings. 
     * @param onSuccess [=nil] The function called on success: function( string responseText, number contentLength, table responseHeaders, number statusCode ) 
     * @param onFailure [=nil] The function called on failure: function( string errorMessage ) 
     * @param headers [={}] KeyValue table for headers 
     * @example
     * 
     * http.Post("http://localhost/post.php", { p = "Gmod", a = "Test" }, function(result)
     * 	if result then print("Done!") end
     * end, function(failed)
     * 	print(failed)
     * end)
     * 
     * // Write a file in PHP, and invoke it from Lua. The output below is written in the file, not in the console.
     * 
     * <pre class="plain"><?php
     * 	$p = $_POST["p"];
     * 	$a = $_POST["a"];
     * 
     * 	$f = fopen("write.html", "w");
     * 
     * 	fwrite($f, "This is a test. $p $a\n");
     * 
     * 	fclose($f);
     * ?>``` 
     */
    function Post(url: string, parameters: table, onSuccess?: Function, onFailure?: Function, headers?: table): void;
}

/**
 * An icon editor that permits a user to modify a {{Type|SpawnIcon}} and re-render it. This is used by the spawn menu and is what is shown when you right-click an icon and select ''Edit Icon''.
 * 
 * This makes use of the {{Type|DAdjustableModelPanel}} element.
 * 
 * **Note:**
 * >This panel is only available in Sandbox and Sandbox derived gamemodes! 
 * @example
 * 
 * local frame = vgui.Create( "DFrame" ) // Container for the SpawnIcon
 * frame:SetPos( 200, 200 )
 * frame:SetSize( 200, 200 )
 * frame:SetTitle( "Icon Editor Example" )
 * frame:MakePopup()
 * 
 * local icon = vgui.Create( "SpawnIcon" , frame ) // SpawnIcon, with blue barrel model
 * icon:Center()
 * // It is important below to include the SkinID (0 = default skin); the IconEditor will not work otherwise
 * icon:SetModel( "models/props_borealis/bluebarrel001.mdl", 0 )
 * 
 * local editor = vgui.Create( "IconEditor" ) // Create IconEditor
 * editor:SetIcon( icon ) // Set the SpawnIcon to modify
 * editor:Refresh() // Sets up the internal DAdjustableModelPanel and SpawnIcon
 * editor:MakePopup()
 * editor:Center()
 * 
 * // Creates an SpawnIcon with model <tt>"models/props_borealis/bluebarrel001.mdl"</tt> and IconEditor to modify it. 
 */
declare class IconEditor extends DFrame {
    /**
     * Applies the top-down view camera settings for the model in the {{Type|DAdjustableModelPanel}}.
     * 
     * Called when a user clicks the ''Above'' (third) button (See the [[:Category:IconEditor|example]]). 
     */
    public AboveLayout(): void;
    
    /**
     * Applies the best camera settings for the model in the {{Type|DAdjustableModelPanel}}, using the values returned by {{GlobalFunction|PositionSpawnIcon}}.
     * 
     * Called when a user clicks the ''wand'' button (See the [[:Category:IconEditor|example]]) and when {{ClassFunction|IconEditor|Refresh}} is called. 
     */
    public BestGuessLayout(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Fills the {{Type|DListView}} on the left of the editor with the model entity's animation list. Called by {{ClassFunction|IconEditor|Refresh}}. 
     * @param ent  The entity being rendered within the model panel. 
     */
    public FillAnimations(ent: Entity): void;
    
    /**
     * Applies the front view camera settings for the model in the {{Type|DAdjustableModelPanel}}.
     * 
     * Called when a user clicks the ''Front'' (second) button (See the [[:Category:IconEditor|example]]). 
     */
    public FullFrontalLayout(): void;
    
    /**
     * Places the camera at the origin (0,0,0), relative to the entity, in the {{Type|DAdjustableModelPanel}}.
     * 
     * Called when a user clicks the ''Center'' (fifth) button (See the [[:Category:IconEditor|example]]). 
     */
    public OriginLayout(): void;
    
    /**
     * Updates the internal {{Type|DAdjustableModelPanel}} and {{Type|SpawnIcon}}. 
     * 
     * This should be called immediately after setting the SpawnIcon with {{ClassFunction|IconEditor|SetIcon}}. 
     */
    public Refresh(): void;
    
    /**
     * Re-renders the {{Type|SpawnIcon}}.
     * 
     * Called when a user clicks the ''RENDER'' button, this retrieves the render data from the internal {{Type|DAdjustableModelPanel}} and passes it as a table to {{ClassFunction|Panel|RebuildSpawnIconEx}}. 
     */
    public RenderIcon(): void;
    
    /**
     * Applies the right side view camera settings for the model in the {{Type|DAdjustableModelPanel}}.
     * 
     * Called when a user clicks the ''Right'' (fourth) button (See the [[:Category:IconEditor|example]]). (Note: The icon for this points left.) 
     */
    public RightLayout(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Sets up the default ambient and directional lighting for the {{Type|DAdjustableModelPanel}}. Called by {{ClassFunction|IconEditor|Refresh}}. 
     */
    public SetDefaultLighting(): void;
    
    /**
     * Sets the editor's model and icon from an entity. Alternative to {{ClassFunction|IconEditor|SetIcon}}, with uses a {{Type|SpawnIcon}}.
     * 
     * You do not need to call {{ClassFunction|IconEditor|Refresh}} after this. 
     * @param ent  The entity to retrieve the model and skin from. 
     */
    public SetFromEntity(ent: Entity): void;
    
    /**
     * Sets the {{Type|SpawnIcon}} to modify. You should call {{ClassFunction|Panel|Refresh}} immediately after this, as the user will not be able to make changes to the icon beforehand. 
     * @param icon  The {{Type|SpawnIcon}} object to be modified. 
     */
    public SetIcon(icon: SpawnIcon): void;
    
    /**
     * Adds or removes an icon on the left of the {{Type|DFrame}}'s title. 
     * @param path  Set to nil to remove the icon.
     * 
     * Otherwise, set to file path to create the icon. 
     */
    public SetIcon(path: string): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Updates the entity being rendered in the internal {{Type|DAdjustableModelPanel}}. Called by the model panel's {{ClassFunction|DModelPanel|LayoutEntity}} method. 
     * @param ent  The entity being rendered within the model panel. 
     */
    public UpdateEntity(ent: Entity): void;
}

/**
 * A sound channel returned by a callback of {{LibraryFunction|sound|PlayURL}} and {{LibraryFunction|sound|PlayFile}}. 
 */
declare class IGModAudioChannel {
    /**
     * Enables or disables looping of audio channel, requires noblock flag. 
     * @param enable  Enable or disable looping of this audio channel. 
     */
    public EnableLooping(enable: boolean): void;
    
    /**
     * Computes the [https://en.wikipedia.org/wiki/Discrete_Fourier_transform DFT (discrete Fourier transform)] of the sound channel.
     * 
     * The size parameter specifies the number of consecutive audio samples to use as the input to the DFT and is restricted to a power of two. A [https://en.wikipedia.org/wiki/Hann_function Hann window] is applied to the input data.
     * 
     * The computed DFT has the same number of frequency bins as the number of samples. Only half of this DFT is returned, since [https://en.wikipedia.org/wiki/Discrete_Fourier_transform#The_real-input_DFT the DFT magnitudes are symmetric for real input data]. The magnitudes of the DFT (values from 0 to 1) are used to fill the output table, starting at index 1.
     * 
     * '''Visualization protip:''' For a size N DFT, bin k (1-indexed) corresponds to a frequency of (k - 1) / N * sampleRate.
     * 
     * '''Visualization protip:''' Sound energy is proportional to the square of the magnitudes. Adding magnitudes together makes no sense physically, but adding energies does.
     * 
     * '''Visualization protip:''' The human ear works on a logarithmic amplitude scale. You can convert to [https://en.wikipedia.org/wiki/Decibel decibels] by taking 20 log<sub>10</sub> of frequency magnitudes, or 10 log<sub>10</sub> of energy. The decibel values will range from -infinity to 0. 
     * @param tbl  The table to output the DFT magnitudes (numbers between 0 and 1) into. Indices start from 1. 
     * @param size  The number of samples to use. See {{Enum|FFT}} 
     * @returns The number of frequency bins that have been filled in the output table. 
     */
    public FFT(tbl: table, size: FFT): number;
    
    /**
     * Returns 3D cone of the sound channel. See {{ClassFunction|IGModAudioChannel|Set3DCone}}. 
     * @returns [The angle of the inside projection cone in degrees., The angle of the outside projection cone in degrees., The delta-volume outside the outer projection cone.] 
     * !TupleReturn
     */
    public Get3DCone(): [number, number, number];
    
    /**
     * Returns 3D fade distances of a sound channel. 
     * @returns [The minimum distance. The channel's volume is at maximum when the listener is within this distance, The maximum distance. The channel's volume stops decreasing when the listener is beyond this distance] 
     * !TupleReturn
     */
    public Get3DFadeDistance(): [number, number];
    
    /**
     * Returns the average bit rate of the sound channel. 
     * @returns The average bit rate of the sound channel. 
     */
    public GetAverageBitRate(): number;
    
    /**
     * Retrieves the number of bits per sample of the sound channel.
     * 
     * Doesn't work for mp3 and ogg files. 
     * @returns Number of bits per sample, or 0 if unknown. 
     */
    public GetBitsPerSample(): number;
    
    /**
     * Returns the filename for the sound channel. 
     * @returns The file name. This will not be always what you have put into the {{LibraryFunction|sound|PlayURL}} as first argument. 
     */
    public GetFileName(): string;
    
    /**
     * Returns the length of sound played by the sound channel. 
     * @returns The length of the sound. This value seems to be less then 0 for continuous radio streams. 
     */
    public GetLength(): number;
    
    /**
     * Returns the right and left levels of sound played by the sound channel. 
     * @returns [The left sound level. The value is between 0 and 1., The right sound level. The value is between 0 and 1.] 
     * !TupleReturn
     */
    public GetLevel(): [number, number];
    
    /**
     * Returns the playback rate of the sound channel. 
     * @returns The current playback rate of the sound channel 
     */
    public GetPlaybackRate(): number;
    
    /**
     * Returns position of the sound channel 
     * @returns The position of the sound channel, previously set by {{ClassFunction|IGModAudioChannel|SetPos}} 
     */
    public GetPos(): Vector;
    
    /**
     * Returns the sample rate for currently playing sound. 
     * @returns The sample rate in MHz. This should always be 44100. 
     */
    public GetSamplingRate(): number;
    
    /**
     * Returns the state of a sound channel 
     * @returns The state of the sound channel, see {{Enum|GMOD_CHANNEL}} 
     */
    public GetState(): GMOD_CHANNEL;
    
    /**
     * Returns the current time of the sound channel 
     * @returns The current time of the stream 
     */
    public GetTime(): number;
    
    /**
     * Returns volume of a sound channel 
     * @returns The volume of the sound channel 
     */
    public GetVolume(): number;
    
    /**
     * Returns if the sound channel is in 3D mode or not. 
     * @returns Is 3D or not. 
     */
    public Is3D(): boolean;
    
    /**
     * Returns whether the audio stream is block streamed or not. 
     * @returns Is the audio stream block streamed or not. 
     */
    public IsBlockStreamed(): boolean;
    
    /**
     * Returns if the sound channel is looping or not. 
     * @returns Is looping or not. 
     */
    public IsLooping(): boolean;
    
    /**
     * Returns if the sound channel is streamed from the Internet or not. 
     * @returns Is online or not. 
     */
    public IsOnline(): boolean;
    
    /**
     * Returns if the sound channel is valid or not. 
     * @returns Is the sound channel valid or not 
     */
    public IsValid(): boolean;
    
    /**
     * Pauses the stream. It can be started again using {{ClassFunction|IGModAudioChannel|Play}} 
     */
    public Pause(): void;
    
    /**
     * Starts playing the stream. 
     */
    public Play(): void;
    
    /**
     * Sets 3D cone of the sound channel. 
     * @param innerAngle  The angle of the inside projection cone in degrees.
     * 
     * Range is from 0 (no cone) to 360 (sphere), -1 = leave current. 
     * @param outerAngle  The angle of the outside projection cone in degrees.
     * 
     * Range is from 0 (no cone) to 360 (sphere), -1 = leave current. 
     * @param outerVolume  The delta-volume outside the outer projection cone.
     * 
     * Range is from 0 (silent) to 1 (same as inside the cone), less than 0 = leave current. 
     * @example
     * 
     * Channel:Set3DCone( 360, 360, 0 )
     * 
     * // The default values 
     */
    public Set3DCone(innerAngle: number, outerAngle: number, outerVolume: number): void;
    
    /**
     * Sets 3D fade distances of a sound channel. 
     * @param min  The minimum distance. The channel's volume is at maximum when the listener is within this distance.
     * 
     * 0 or less = leave current. 
     * @param max  The maximum distance. The channel's volume stops decreasing when the listener is beyond this distance.
     * 
     * 0 or less = leave current. 
     * @example
     * 
     * Channel:Set3DFadeDistance( 200, 1000000000 )
     * 
     * // The default values. 
     */
    public Set3DFadeDistance(min: number, max: number): void;
    
    /**
     * Sets the playback rate of the sound channel. May not work with high values for radio streams. 
     * @param rate  Playback rate to set to. 1 is normal speed, 0.5 is half the normal speed, etc. 
     */
    public SetPlaybackRate(rate: number): void;
    
    /**
     * Sets position of sound channel in case the sound channel has a 3d option set. 
     * @param pos  The position to put the sound into 
     * @param dir [=Vector( 0, 0, 0 )] The direction of the sound 
     */
    public SetPos(pos: Vector, dir?: Vector): void;
    
    /**
     * Sets the sound channel to specified time ( Rewind to that position of the song ). Does not work on online radio streams.
     * 
     * Streamed sounds must have "noblock" parameter for this to work. 
     * @param secs  The time to set the stream to, in seconds. 
     */
    public SetTime(secs: number): void;
    
    /**
     * Sets the volume of a sound channel 
     * @param volume  Volume to set, a number between 0 and 1 
     */
    public SetVolume(volume: number): void;
    
    /**
     * Stop the stream. It can be started again using {{ClassFunction|IGModAudioChannel|Play}}.
     * 
     * **Bug [#1497](https://github.com/Facepunch/garrysmod-issues/issues/1497):**
     * >Calling this invalidates the IGModAudioChannel object rendering it unusable for further functions. 
     */
    public Stop(): void;
}

/**
 */
declare class ImageCheckBox extends Button {

}

/**
 * A Material object. It represents a game material, similarly to how a .vmt file does.
 * 
 * It can be created with {{GlobalFunction|Material}} or {{GlobalFunction|CreateMaterial}}. 
 * !CustomConstructor Material */
declare class IMaterial {
    /**
     * Either returns the material with the given name, or loads the material interpreting the first argument as the path.
     * 
     * **Note:**
     * >When using .png or .jpg textures, make sure that their sizes are Power Of 2 (1, 2, 4, 8, 16, 32, 64, etc). If they are not, they will be automatically stretched to the nearest PO2 size and cause graphical artifacts. 
     * @param materialName  The material name or path. The path is relative to the '''materials/''' folder. You do not need to add '''materials/''' to your path.
     * 
     * To retrieve a Lua material created with {{GlobalFunction|CreateMaterial}}, just prepend a "!" to the material name. 
     * @param pngParameters [=nil] A string containing space separated keywords which will be used to add material parameters.
     * 
     * See [[Material Parameters]] for more information.
     * 
     * **Note:**
     * >This feature only works when importing .png or .jpeg image files 
     * @example
     * 
     * local wave = Material( "vgui/wave.png", "noclamp smooth" )
     * 
     * // Creates a PNG material with noclamp and smooth parameters set.
     * 
     * In this example the .png file is located in '''materials/vgui/wave.png'''@example
     * 
     * local mat_color = Material( "pp/colour" )  // used outside of the hook for performance
     * 
     * hook.Add("RenderScreenspaceEffects", "ColorExample", function()
     * 	render.UpdateScreenEffectTexture()
     * 
     * 	mat_color:SetTexture( "$fbtexture", render.GetScreenEffectTexture() )
     * 
     * 	mat_color:SetFloat( "$pp_colour_addr", 0 )
     * 	mat_color:SetFloat( "$pp_colour_addg", 0 )
     * 	mat_color:SetFloat( "$pp_colour_addb", 0 )
     * 	mat_color:SetFloat( "$pp_colour_mulr", 0 )
     * 	mat_color:SetFloat( "$pp_colour_mulg", 0 )
     * 	mat_color:SetFloat( "$pp_colour_mulb", 0 )
     * 	mat_color:SetFloat( "$pp_colour_brightness", 0 )
     * 	mat_color:SetFloat( "$pp_colour_contrast", 0.5 )
     * 	mat_color:SetFloat( "$pp_colour_colour", 5 )
     * 
     * 	render.SetMaterial( mat_color )
     * 	render.DrawScreenQuad()
     * end )
     * 
     * // Acquires and uses one of the [[Post-Processing Materials]] to make the screen darker and more saturated 
     */
    public constructor(materialName: string, pngParameters?: string);
    
    /**
     * Returns the color of the specified pixel of the $basetexture, only works for materials created from PNG files.
     * 
     * Basically identical to {{ClassFunction|ITexture|GetColor}} used on {{ClassFunction|IMaterial|GetTexture}}( "$basetexture" ). 
     * @param x  The X coordinate. 
     * @param y  The Y coordinate. 
     * @returns The color of the pixel as a {{Struct|Color}}. 
     * @example
     * 
     * local m = Material( "gui/colors_dark.png" )
     * local t = m:GetTexture("$basetexture")
     * 
     * PrintTable( t:GetColor( 5, 5 ) )
     * PrintTable( m:GetColor( 5, 5 ) )
     * 
     * // Identical functionality. 
     */
    public GetColor(x: number, y: number): Color;
    
    /**
     * Returns the specified material value as a float, or nil if the value is not set. 
     * @param materialFloat  The name of the material value. 
     * @returns float 
     */
    public GetFloat(materialFloat: string): number;
    
    /**
     * Returns the specified material value as a int, rounds the value if its a float, or nil if the value is not set. 
     * @param materialInt  The name of the material integer. 
     * @returns int 
     */
    public GetInt(materialInt: string): number;
    
    /**
     * Gets all the key values defined for the material. 
     * @returns The material's key values. 
     * @example
     * 
     * PrintTable( Material( "pp/add" ):GetKeyValues() )
     * 
     * // Example output of this function 
     */
    public GetKeyValues(): table;
    
    /**
     * Returns the specified material matrix as a int, or nil if the value is not set or is not a matrix. 
     * @param materialMatrix  The name of the material matrix. 
     * @returns matrix 
     */
    public GetMatrix(materialMatrix: string): VMatrix;
    
    /**
     * Returns the name of the material, in most cases the path. 
     * @returns Material name/path 
     */
    public GetName(): string;
    
    /**
     * Returns the name of the materials shader.
     * 
     * **Bug [#3256](https://github.com/Facepunch/garrysmod-issues/issues/3256):**
     * >This function does not work serverside on Linux SRCDS. 
     * @returns shaderName 
     */
    public GetShader(): string;
    
    /**
     * Returns the specified material string, or nil if the value is not set or if the value can not be converted to a string. 
     * @param materialString  The name of the material string. 
     * @returns The value as a string 
     */
    public GetString(materialString: string): string;
    
    /**
     * Returns an {{Type|ITexture}} based on the passed shader parameter. 
     * @param param  The [https://developer.valvesoftware.com/wiki/Category:List_of_Shader_Parameters shader parameter] to retrieve. This should normally be ''$basetexture''. 
     * @returns The value of the shader parameter. Returns nothing if the param doesn't exist. 
     */
    public GetTexture(param: string): ITexture;
    
    /**
     * Returns the specified material vector, or nil if the value is not set.
     * 
     * See also {{ClassFunction|IMaterial|GetVectorLinear}} 
     * @param materialVector  The name of the material vector. 
     * @returns The color vector 
     */
    public GetVector(materialVector: string): Vector;
    
    /**
     * Returns the specified material linear color vector, or nil if the value is not set.
     * 
     * See https://en.wikipedia.org/wiki/Gamma_correction
     * 
     * See also {{ClassFunction|IMaterial|GetVector}} 
     * @param materialVector  The name of the material vector. 
     * @returns The linear color vector 
     */
    public GetVectorLinear(materialVector: string): Vector;
    
    /**
     * Returns the height of the member texture set for $basetexture. 
     * @returns height 
     */
    public Height(): number;
    
    /**
     * Returns whenever the material was not loaded successfully. 
     * @returns isError 
     */
    public IsError(): boolean;
    
    /**
     * Recomputes the material's snapshot. This needs to be called if you have changed variables on your material and it isn't changing. 
     * 
     * Be careful though - this function is slow - so try to call it only when needed! 
     */
    public Recompute(): void;
    
    /**
     * Sets the specified material float to the specified float, does nothing on a type mismatch. 
     * @param materialFloat  The name of the material float. 
     * @param float  The new float value. 
     */
    public SetFloat(materialFloat: string, float: number): void;
    
    /**
     * Sets the specified material value to the specified int, does nothing on a type mismatch. 
     * @param materialInt  The name of the material int. 
     * @param int  The new int value. 
     */
    public SetInt(materialInt: string, int: number): void;
    
    /**
     * Sets the specified material value to the specified matrix, does nothing on a type mismatch. 
     * @param materialMatrix  The name of the material int. 
     * @param matrix  The new matrix. 
     */
    public SetMatrix(materialMatrix: string, matrix: VMatrix): void;
    
    /**
     * **Deprecated:**
     * >This function does nothing
     * 
     * The functionality of this function was removed due to the amount of crashes it caused. 
     * @param shaderName  Name of the shader 
     */
    public SetShader(shaderName: string): void;
    
    /**
     * Sets the specified material value to the specified string, does nothing on a type mismatch. 
     * @param materialString  The name of the material string. 
     * @param str  The new string. 
     */
    public SetString(materialString: string, str: string): void;
    
    /**
     * Sets the specified material texture to the specified texture, does nothing on a type mismatch. 
     * @param materialTexture  The name of the keyvalue on the material to store the texture on. 
     * @param texture  The new texture. This can also be a string, the name of the new texture. 
     * @example
     * 
     * local blur_mat = Material( "pp/bokehblur" )
     * 
     * blur_mat:SetTexture( "$basetexture", render.GetScreenEffectTexture() )
     * 
     * // Example usage of this function.@example
     * 
     * local blur_mat = Material( "pp/bokehblur" )
     * 
     * blur_mat:SetTexture( "$basetexture", "_rt_fullframefb" )
     * 
     * // Equivalent of Example 1, demonstrating the use of a texture's name. 
     */
    public SetTexture(materialTexture: string, texture: ITexture): void;
    
    /**
     * Unsets the value for the specified material value. 
     * @param materialValueName  The name of the material value to be unset. 
     */
    public SetUndefined(materialValueName: string): void;
    
    /**
     * Sets the specified material vector to the specified vector, does nothing on a type mismatch. 
     * @param MaterialVector  The name of the material vector. 
     * @param vec  The new vector. 
     */
    public SetVector(MaterialVector: string, vec: Vector): void;
    
    /**
     * Returns the width of the member texture set for $basetexture. 
     * @returns width 
     */
    public Width(): number;
}

/**
 * Renderable mesh object, can be used to create models on the fly. The only way to create your own IMesh object is to call [[Global/Mesh|Mesh]].
 * 
 * **Bug [#2301](https://github.com/Facepunch/garrysmod-issues/issues/2301):**
 * >IMeshes only respond to one projected texture. 
 * !CustomConstructor Mesh */
declare class IMesh {
    /**
     * Returns a new mesh object. 
     * @param mat [=nil] The material the mesh is intended to be rendered with. It's merely a hint that tells that mesh what vertex format it should use. 
     * @example
     * 
     * local mat = Material( "editor/wireframe" ) // The material (a wireframe)
     * local obj = Mesh() // Create the IMesh object
     * 
     * local verts = { // A table of 3 vertices that form a triangle
     * 	{ pos = Vector( 0,  0,  0 ), u = 0, v = 0 }, // Vertex 1
     * 	{ pos = Vector( 10, 0,  0 ), u = 1, v = 0 }, // Vertex 2
     * 	{ pos = Vector( 10, 10, 0 ), u = 1, v = 1 }, // Vertex 3
     * }
     * 
     * obj:BuildFromTriangles( verts ) // Load the vertices into the IMesh object
     * 
     * hook.Add( "PostDrawOpaqueRenderables", "IMeshTest", function()
     * 
     * 	render.SetMaterial( mat ) // Apply the material
     * 	obj:Draw() // Draw the mesh
     * end )
     * 
     * // Draws a triangle near Vector( 0, 0, 0 ) in the map. 
     */
    public constructor(mat?: IMaterial);
    
    /**
     * Builds the mesh from a table mesh vertexes. 
     * @param vertexes  A table consisting of {{Struct|MeshVertex}}s. 
     */
    public BuildFromTriangles(vertexes: MeshVertex): void;
    
    /**
     * Deletes the mesh and frees the memory used by it.. 
     */
    public Destroy(): void;
    
    /**
     * Renders the mesh with the active matrix. 
     */
    public Draw(): void;
}

/**
 * The input library allows you to gather information about the clients input devices (mouse & keyboard), such as the cursor position and whether a key is pressed or not. 
 */
declare namespace input {
    /**
     * Returns the last key captured by key trapping. 
     * @returns The key, see {{Enum|KEY}} 
     */
    function CheckKeyTrapping(): KEY;
    
    /**
     * Returns the cursor's position on the screen 
     * @returns [mouseX, mouseY] 
     * !TupleReturn
     */
    function GetCursorPos(): [number, number];
    
    /**
     * Gets the button code from a button name. This is opposite of {{LibraryFunction|input|GetKeyName}}.
     * 
     * {{NextUpdate}} 
     * @param button  The internal button name, such as "e" or "shift". 
     * @returns The button code, see {{Enum|BUTTON_CODE}}. 
     */
    function GetKeyCode(button: string): BUTTON_CODE;
    
    /**
     * Gets the button name from a numeric button code. The name needs to be translated with {{LibraryFunction|language|GetPhrase}} before being displayed.
     * 
     * **Note:**
     * >Despite the name of the function, this also works for the full range of keys in {{Enum|BUTTON_CODE}}. 
     * @param button  The button, see {{Enum|BUTTON_CODE}}. 
     * @returns Button name. 
     */
    function GetKeyName(button: BUTTON_CODE): string;
    
    /**
     * Gets whether the specified button code is down.
     * 
     * Unlike {{LibraryFunction|input|IsKeyDown}} this can also detect joystick presses from {{Enum|JOYSTICK}} 
     * @param button  The button, valid values are in the range of {{Enum|BUTTON_CODE}}. 
     * @returns Is the button down 
     */
    function IsButtonDown(button: BUTTON_CODE): boolean;
    
    /**
     * Returns whether a control key is being pressed 
     * @returns Is Ctrl key down or not 
     */
    function IsControlDown(): boolean;
    
    /**
     * Gets whether a key is down 
     * @param key  The key, see {{Enum|KEY}}. 
     * @returns Is the key down 
     */
    function IsKeyDown(key: KEY): boolean;
    
    /**
     * Returns whether key trapping is activate and the next key press will be captured. 
     * @returns Whether key trapping active or not 
     */
    function IsKeyTrapping(): boolean;
    
    /**
     * Gets whether a mouse button is down 
     * @param mouseKey  The key, see {{Enum|MOUSE}} 
     * @returns Is the key down 
     */
    function IsMouseDown(mouseKey: MOUSE): boolean;
    
    /**
     * Gets whether a shift key is being pressed 
     * @returns isDown 
     */
    function IsShiftDown(): boolean;
    
    /**
     * Gets the match uppercase key for the specified binding. 
     * @param binding  The binding name 
     * @param exact [=false] True if the binding should match exactly 
     * @returns The first key found with that binding or no value if no key with given binding was found.
     * 
     * See also {{LibraryFunction|input|GetKeyCode}}. 
     * @example
     * 
     * print( input.LookupBinding( "+use" ) )
     * print( input.LookupBinding( "use" ) )
     * print( input.LookupBinding( "+use", true ) )
     * print( input.LookupBinding( "use", true ) )
     * 
     * // Demonstrates usage of this function and its arguments. 
     */
    function LookupBinding(binding: string, exact?: boolean): string;
    
    /**
     * Returns the bind string that the given key is bound to. 
     * @param key  Key from {{Enum|BUTTON_CODE}} 
     * @returns The bind string of the given key. 
     */
    function LookupKeyBinding(key: BUTTON_CODE): string;
    
    /**
     * Switches to the provided weapon on the next CUserCmd generation/CreateMove call. Direct binding to [https://github.com/LestaD/SourceEngine2007/blob/43a5c90a5ada1e69ca044595383be67f40b33c61/se2007/game/client/in_main.cpp#L929-L932 CInput::MakeWeaponSelection]. 
     * @param weapon  The weapon entity to switch to. 
     */
    function SelectWeapon(weapon: Weapon): void;
    
    /**
     * Sets the cursor's position on the screen, relative to the topleft corner of the window 
     * @param mouseX  X coordinate for mouse position 
     * @param mouseY  Y coordinate for mouse position 
     * @example
     * 
     * hook.Add( 'HUDPaint', 'CircleScreen', function()
     * 	input.SetCursorPos( ScrW()/2+math.sin(CurTime())*ScrW()/2, ScrH()/2+math.cos(CurTime())*ScrH()/2 )
     * end)
     * 
     * // Makes the user's cursor circle their screen 
     */
    function SetCursorPos(mouseX: number, mouseY: number): void;
    
    /**
     * Begins waiting for a key to be pressed so we can save it for {{LibraryFunction|input|CheckKeyTrapping}}. Used by the {{Type|DBinder}}. 
     */
    function StartKeyTrapping(): void;
    
    /**
     * Returns whether a key was initially pressed in the same frame this function was called.
     * 
     * This function only works in Move hooks, and will detect key presses even in main menu or when a typing in a text field. 
     * @param key  The key, see {{Enum|KEY}}. 
     * @returns True if the key was initially pressed the same frame that this function was called, false otherwise. 
     */
    function WasKeyPressed(key: KEY): boolean;
    
    /**
     * Returns whether a key was released in the same frame this function was called.
     * 
     * This function only works in Move hooks, and will detect key releases even in main menu or when a typing in a text field. 
     * @param key  The key, see {{Enum|KEY}}. 
     * @returns True if the key was released the same frame that this function was called, false otherwise. 
     */
    function WasKeyReleased(key: KEY): boolean;
    
    /**
     * Returns whether the key is being held down or not.
     * 
     * This function only works in Move hooks, and will detect key events even in main menu or when a typing in a text field. 
     * @param key  The key to test, see {{Enum|KEY}} 
     * @returns Whether the key is being held down or not. 
     */
    function WasKeyTyped(key: KEY): boolean;
    
    /**
     * Returns whether a mouse key was double pressed in the same frame this function was called.
     * 
     * If this function returns true, {{LibraryFunction|input|WasMousePressed}} will return false.
     * 
     * This function only works in Move hooks, and will detect mouse events even in main menu or when a typing in a text field. 
     * @param button  The mouse button to test, see {{Enum|MOUSE}} 
     * @returns Whether the mouse key was double pressed or not. 
     */
    function WasMouseDoublePressed(button: MOUSE): boolean;
    
    /**
     * Returns whether a mouse key was initially pressed in the same frame this function was called.
     * 
     * If {{LibraryFunction|input|WasMouseDoublePressed}} returns true, this function will return false.
     * 
     * This function only works in Move hooks, and will detect mouse events even in main menu or when a typing in a text field. 
     * @param key  The key, see {{Enum|MOUSE}} 
     * @returns True if the mouse key was initially pressed the same frame that this function was called, false otherwise. 
     */
    function WasMousePressed(key: MOUSE): boolean;
}

/**
 * The object used in the {{Lib|saverestore}}, mainly in {{LibraryFunction|saverestore|AddRestoreHook}}.
 * 
 * It allows you to read blocks directly from the save game files used by Half-Life 2 save system when such save is loaded. 
 */
declare class IRestore {
    /**
     * Ends current data block started with {{ClassFunction|IRestore|StartBlock}} and returns to the parent block.
     * 
     * To avoid all sorts of errors, you '''must''' end all blocks you start. 
     */
    public EndBlock(): void;
    
    /**
     * Reads next bytes from the restore object as an {{Type|Angle}}. 
     * @returns The angle that has been read 
     */
    public ReadAngle(): Angle;
    
    /**
     * Reads next bytes from the restore object as a {{Type|boolean}}. 
     * @returns The boolean that has been read 
     */
    public ReadBool(): boolean;
    
    /**
     * Reads next bytes from the restore object as an {{Type|Entity}}. 
     * @returns The entity that has been read. 
     */
    public ReadEntity(): Entity;
    
    /**
     * Reads next bytes from the restore object as a floating point {{Type|number}}. 
     * @returns The read floating point number. 
     */
    public ReadFloat(): number;
    
    /**
     * Reads next bytes from the restore object as an integer {{Type|number}}. 
     * @returns The read integer number. 
     */
    public ReadInt(): number;
    
    /**
     * Reads next bytes from the restore object as a {{Type|string}}. 
     * @returns The read string. Maximum length is 1024. 
     */
    public ReadString(): string;
    
    /**
     * Reads next bytes from the restore object as a {{Type|Vector}}. 
     * @returns The read vector. 
     */
    public ReadVector(): Vector;
    
    /**
     * Loads next block of data to be read inside current block. Blocks '''must''' be ended with {{ClassFunction|IRestore|EndBlock}}. 
     * @returns The name of the next data block to be read. 
     * @example
     * 
     * saverestore.AddRestoreHook( "HookNameHere", function( save )
     * 	local name = save:StartBlock()
     * 	local myval = save:ReadString()
     * 	save:EndBlock()
     * 
     * 	print( name, myval )
     * end )
     * 
     * // Example usage. 
     */
    public StartBlock(): string;
}

/**
 * The object used in the {{Lib|saverestore}}, mainly in {{LibraryFunction|saverestore|AddSaveHook}}.
 * 
 * It allows you to write blocks directly into the save game files used by Half-Life 2 save system when such save is being saved. 
 */
declare class ISave {
    /**
     * Ends current data block started with {{ClassFunction|ISave|StartBlock}} and returns to the parent block.
     * 
     * To avoid all sorts of errors, you '''must''' end all blocks you start. 
     */
    public EndBlock(): void;
    
    /**
     * Starts a new block of data that you can write to inside current block. Blocks '''must''' be ended with {{ClassFunction|ISave|EndBlock}}. 
     * @param name  Name of the new block. Used for determining which block is which, returned by {{ClassFunction|IRestore|StartBlock}} during game load. 
     * @example
     * 
     * saverestore.AddSaveHook( "HookNameHere", function( save )
     * 	save:StartBlock( "Test" )
     * 		save:WriteString( "myawesomestring" )
     * 	save:EndBlock()
     * end )
     * 
     * // Example usage 
     */
    public StartBlock(name: string): void;
    
    /**
     * Writes an {{Type|Angle}} to the save object. 
     * @param ang  The angle to write. 
     */
    public WriteAngle(ang: Angle): void;
    
    /**
     * Writes a {{Type|boolean}} to the save object. 
     * @param bool  The boolean to write. 
     */
    public WriteBool(bool: boolean): void;
    
    /**
     * Writes an {{Type|Entity}} to the save object. 
     * @param ent  The entity to write. 
     */
    public WriteEntity(ent: Entity): void;
    
    /**
     * Writes a floating point {{Type|number}} to the save object. 
     * @param float  The floating point number to write. 
     */
    public WriteFloat(float: number): void;
    
    /**
     * Writes an integer {{Type|number}} to the save object. 
     * @param int  The integer number to write. 
     */
    public WriteInt(int: number): void;
    
    /**
     * Writes a {{Type|string}} to the save object. 
     * @param str  The string to write. Maximum length is 1024. 
     */
    public WriteString(str: string): void;
    
    /**
     * Writes a {{Type|Vector}} to the save object. 
     * @param vec  The vector to write. 
     */
    public WriteVector(vec: Vector): void;
}

/**
 * An object representing game texture, like a .vtf file. Do not confuse with {{Type|IMaterial}}. Returned by {{ClassFunction|IMaterial|GetTexture}} 
 */
declare class ITexture {
    /**
     * Invokes the generator of the texture. Reloads file based textures from disk and clears render target textures. 
     */
    public Download(): void;
    
    /**
     * Returns the color of the specified pixel, only works for textures created from PNG files. 
     * @param x  The X coordinate. 
     * @param y  The Y coordinate. 
     * @returns The color of the pixel as a {{Struct|Color}}. 
     */
    public GetColor(x: number, y: number): Color;
    
    /**
     * Returns the true unmodified height of the texture. 
     * @returns height 
     */
    public GetMappingHeight(): number;
    
    /**
     * Returns the true unmodified width of the texture. 
     * @returns width 
     */
    public GetMappingWidth(): number;
    
    /**
     * Returns the name of the texture, in most cases the path. 
     * @returns name 
     */
    public GetName(): string;
    
    /**
     * Returns the modified height of the texture, this value may be affected by mipmapping and other factors. 
     * @returns height 
     */
    public Height(): number;
    
    /**
     * Returns whenever the texture is invalid or not. 
     * @returns isError 
     */
    public IsError(): boolean;
    
    /**
     * Returns the modified width of the texture, this value may be affected by mipmapping and other factors. 
     * @returns width 
     */
    public Width(): number;
}

/**
 * This is returned from {{LibraryFunction|video|Record}}. 
 */
declare class IVideoWriter {
    /**
     * Adds the current framebuffer to the video stream. 
     * @param frameTime  Usually set to what {{GlobalFunction|FrameTime}} is, or simply 1/fps. 
     * @param downsample  If true it will downsample the whole screenspace to the videos width and height, otherwise it will just record from the top left corner to the given width and height and therefor not the whole screen. 
     * @example
     * 
     * //Taken from /lua/menu/video.lua
     * 
     * hook.Add( "DrawOverlay", "CaptureFrames", function()
     * 
     * 	if ( !ActiveVideo ) then return end
     * 	
     * 	ActiveVideo:AddFrame( FrameTime(), true );
     * 
     * end )
     * 
     * // If ActiveVideo was a {{Type|IVideoWriter}}, it would record the screen every frame. 
     */
    public AddFrame(frameTime: number, downsample: boolean): void;
    
    /**
     * Ends the video recording and dumps it to disk. 
     */
    public Finish(): void;
    
    /**
     * Returns the height of the video stream. 
     * @returns height 
     */
    public Height(): number;
    
    /**
     * Sets whether to record sound or not. 
     * @param record  Record. 
     */
    public SetRecordSound(record: boolean): void;
    
    /**
     * Returns the width of the video stream. 
     * @returns width 
     */
    public Width(): number;
}

/**
 * Function to work with the [http://luajit.org/ LuaJIT] functionality of gmod. 
 */
declare namespace jit {
    /**
     * =Not a function=
     * 
     * This is NOT a function, it's a variable containing the target architecture name: "x86", "x64", "arm", "ppc", "ppcspe", or "mips". This will be "x86" in GMod.
     * 
     * [[Category:Functions]]
     * [[Category:jit]]
     * [[Category:Shared]]
     * [[Category:Menu]]
     * [[Category:Documented_Functions]]
     * [[Category:Library Functions]] 
     */
    function arch(): void;
    
    /**
     * You can attach callbacks to a number of compiler events with jit.attach. The callback can be called:
     * 
     * *when a function has been compiled to bytecode ("bc");
     * *when trace recording starts or stops ("trace");
     * *as a trace is being recorded ("record");
     * *or when a trace exits through a side exit ("texit").
     * 
     * Set a callback with jit.attach(callback, "event") and clear the same callback with jit.attach(callback)
     * 
     * {{Warning|This function isn't officially documented on LuJIT wiki, use it at your own risk.}} 
     * @param callback  The callback function.
     * 
     * The arguments passed to the callback depend on the event being reported:
     * 
     * *"bc":
     * {{FuncArg|function|func|The function that's just been recorded}}
     * 
     * *"trace":
     * {{FuncArg|string|what|description of the trace event: "flush", "start", "stop", "abort". Available for all events.}}
     * 
     * {{FuncArg|number|tr|The trace number. Not available for flush.}}
     * 
     * {{FuncArg|function|func|The function being traced. Available for start and abort.}}
     * 
     * {{FuncArg|number|pc|The program counter - the bytecode number of the function being recorded (if this a Lua function). Available for start and abort.}}
     * 
     * {{FuncArg|number|otr|start: the parent trace number if this is a side trace, abort: abort code}}
     * 
     * {{FuncArg|string|oex|start: the exit number for the parent trace, abort: abort reason (string)}}
     * 
     * *"record":
     * {{FuncArg|number|tr|The trace number. Not available for flush.}}
     * 
     * {{FuncArg|function|func|The function being traced. Available for start and abort.}}
     * 
     * {{FuncArg|number|pc|The program counter - the bytecode number of the function being recorded (if this a Lua function). Available for start and abort.}}
     * 
     * {{FuncArg|number|depth |The depth of the inlining of the current bytecode.}}
     * 
     * *"texit":
     * {{FuncArg|number|tr|The trace number. Not available for flush.}}
     * 
     * {{FuncArg|number|ex|The exit number}}
     * 
     * {{FuncArg|number|ngpr|The number of general-purpose and floating point registers that are active at the exit.}}
     * 
     * {{FuncArg|number|nfpr|The number of general-purpose and floating point registers that are active at the exit.}} 
     * @param event  The event to hook into. 
     */
    function attach(callback: Function, event: string): void;
    
    /**
     * Flushes the whole cache of compiled code. 
     */
    function flush(): void;
    
    /**
     * Disables LuaJIT Lua compilation. 
     */
    function off(): void;
    
    /**
     * Enables LuaJIT Lua compilation. 
     */
    function on(): void;
    
    /**
     * =Not a function=
     * 
     * This is NOT a function, it's a variable containing the target OS name: "Windows", "Linux", "OSX", "BSD", "POSIX" or "Other".
     * 
     * [[Category:Functions]]
     * [[Category:jit]]
     * [[Category:Shared]]
     * [[Category:Menu]]
     * [[Category:Documented_Functions]]
     * [[Category:Library Functions]] 
     */
    function os(): void;
    
    /**
     * Returns the status of the JIT compiler and the current optimizations enabled. 
     * @returns [Is JIT enabled, Strings for CPU-specific features and enabled optimizations] 
     * !TupleReturn
     */
    function status(): [boolean, any];
    
    /**
     * =Not a function=
     * 
     * This is NOT a function, it's a variable containing the LuaJIT version string. This is "LuaJIT 2.0.4" in GMod.
     * 
     * [[Category:Functions]]
     * [[Category:jit]]
     * [[Category:Shared]]
     * [[Category:Menu]]
     * [[Category:Documented_Functions]]
     * [[Category:Library Functions]] 
     */
    function version(): void;
    
    /**
     * =Not a function=
     * 
     * This is NOT a function, it's a variable containing the version number of the LuaJIT core. Version xx.yy.zz is represented by the decimal number xxyyzz. In GMod this is 20004.
     * 
     * [[Category:Functions]]
     * [[Category:jit]]
     * [[Category:Shared]]
     * [[Category:Menu]]
     * [[Category:Documented_Functions]]
     * [[Category:Library Functions]] 
     */
    function version_num(): void;
}

/**
 * The killicon library is used to add to and control the icons that appear in the top right of your screen when a player is killed. 
 */
declare namespace killicon {
    /**
     * Creates new kill icon using a texture. 
     * @param classRef  Weapon or entity class 
     * @param texture  Path to the texture 
     * @param color  Color of the kill icon 
     * @example
     * 
     * killicon.Add( "default", "HUD/killicons/default", Color( 255, 80, 0, 255 ) )
     * 
     * // Creates default killicon. 
     */
    function Add(classRef: string, texture: string, color: table): void;
    
    /**
     * Creates kill icon from existing one. 
     * @param new_class  New class of the kill icon 
     * @param existing_class  Already existing kill icon class 
     * @example
     * 
     * killicon.AddAlias( "prop_ragdoll", "prop_physics" )
     * 
     * // Copies prop_physics kill icon to prop_ragdoll. 
     */
    function AddAlias(new_class: string, existing_class: string): void;
    
    /**
     * Adds kill icon for given weapon/entity class using special font. 
     * @param classRef  Weapon or entity class 
     * @param font  Font to be used 
     * @param symbol  The symbol to be used 
     * @param color  Color of the killicon 
     * @example
     * 
     * killicon.AddFont( "weapon_pistol", "HL2MPTypeDeath", "-", Color( 255, 80, 0, 255 ) )
     * 
     * // Example of using the function. Adds pistol kill icon. 
     */
    function AddFont(classRef: string, font: string, symbol: string, color: table): void;
    
    /**
     * Draws a kill icon. 
     * @param x  X coordinate of the icon 
     * @param y  Y coordinate of the icon 
     * @param name  Classname of the kill icon 
     * @param alpha  Alpha/transparency value ( 0 - 255 ) of the icon 
     */
    function Draw(x: number, y: number, name: string, alpha: number): void;
    
    /**
     * Checks if kill icon exists for given class. 
     * @param classRef  The class to test 
     * @returns Returns true if kill icon exists 
     */
    function Exists(classRef: string): boolean;
    
    /**
     * Returns the size of a kill icon. 
     * @param name  Classname of the kill icon 
     * @returns [Width of the kill icon, Height of the kill icon] 
     * !TupleReturn
     */
    function GetSize(name: string): [number, number];
}

/**
 * A basic label or "single line text area" that is non-editable. 
 * @example
 * 
 * local frame = vgui.Create( "Frame" )
 * frame.Label1 = vgui.Create( "Label", frame )
 * frame.Label1:SetPos( 50, 50 )
 * frame.Label1:SetText("Lua Labels!")
 * frame.Label1:SizeToContents()
 *  
 * frame:SetSize( ScrW() * 0.25, ScrH() * 0.25 )
 * frame:Center()
 * frame:SetVisible( true )
 * frame:MakePopup()
 * 
 * // Creates a label and fills it with the text "Lua Labels!" parented to a simple frame. 
 */
declare class Label extends Panel {
    /**
     * Gets the size of the content/children within a panel object.
     * 
     * Only works with {{Type|Label}} derived panels by default such as {{Type|DLabel}}.
     * 
     * Will also work on any panel that manually implements this method.
     * 
     * [[Category:Label]] 
     * @returns [The content width of the object., The content height of the object.] 
     * @example
     * 
     * local PANEL = {}
     * 
     * function PANEL:GetContentSize()
     * 	surface.SetFont( self:GetFont() )
     * 	return surface.GetTextSize( self:GetText() )
     * end
     * 
     * vgui.Register( "DTextEntry_Edit", PANEL, "DTextEntry" )
     * 
     * // Somewhere else, to test the newly created panel
     * local frame = vgui.Create( "DFrame" )
     * frame:SetSize( 500, 200 )
     * frame:Center()
     * frame:MakePopup()
     * 
     * local txt = vgui.Create( "DTextEntry_Edit", frame )
     * txt:SetPos( 5, 25 )
     * txt:SetSize( 100, 10 )
     * txt:SetText( "Really long string that is bigger than 100 pixels" )
     * txt:SizeToContentsX( 5 ) // Must be called after setting the text
     * txt:SizeToContentsY( 5 ) // These two functions will not have effect on a normal DTextEntry
     * 
     * // Demonstrates how to implement this function in your own panel. 
     * !TupleReturn
     */
    public GetContentSize(): [number, number];
    
    /**
     * Gets the size of the content/children within a panel object.
     * 
     * Only works with {{Type|Label}} derived panels by default such as {{Type|DLabel}}.
     * 
     * Will also work on any panel that manually implements this method.
     * 
     * [[Category:Label]] 
     * @returns [The content width of the object., The content height of the object.] 
     * @example
     * 
     * local PANEL = {}
     * 
     * function PANEL:GetContentSize()
     * 	surface.SetFont( self:GetFont() )
     * 	return surface.GetTextSize( self:GetText() )
     * end
     * 
     * vgui.Register( "DTextEntry_Edit", PANEL, "DTextEntry" )
     * 
     * // Somewhere else, to test the newly created panel
     * local frame = vgui.Create( "DFrame" )
     * frame:SetSize( 500, 200 )
     * frame:Center()
     * frame:MakePopup()
     * 
     * local txt = vgui.Create( "DTextEntry_Edit", frame )
     * txt:SetPos( 5, 25 )
     * txt:SetSize( 100, 10 )
     * txt:SetText( "Really long string that is bigger than 100 pixels" )
     * txt:SizeToContentsX( 5 ) // Must be called after setting the text
     * txt:SizeToContentsY( 5 ) // These two functions will not have effect on a normal DTextEntry
     * 
     * // Demonstrates how to implement this function in your own panel. 
     * !TupleReturn
     */
    public GetContentSize(): [number, number];
    
    /**
     * Gets the left and top text margins of a text-based panel object, such as a {{Type|DButton}} or {{Type|DLabel}}. This is set with {{ClassFunction|Panel|SetTextInset}}.
     * 
     * [[Category:Label]] 
     * @returns [The left margin of the text, in pixels., The top margin of the text, in pixels.] 
     * !TupleReturn
     */
    public GetTextInset(): [number, number];
    
    /**
     * Gets the left and top text margins of a text-based panel object, such as a {{Type|DButton}} or {{Type|DLabel}}. This is set with {{ClassFunction|Panel|SetTextInset}}.
     * 
     * [[Category:Label]] 
     * @returns [The left margin of the text, in pixels., The top margin of the text, in pixels.] 
     * !TupleReturn
     */
    public GetTextInset(): [number, number];
    
    /**
     * Gets the size of the text within a {{Type|Label}} derived panel.
     * 
     * **Bug [#2576](https://github.com/Facepunch/garrysmod-issues/issues/2576):**
     * >This can return 0 incorrectly.
     * 
     * [[Category:Label]] 
     * @returns [The width of the text in the DLabel., The height of the text in the DLabel.] 
     * !TupleReturn
     */
    public GetTextSize(): [number, number];
    
    /**
     * Gets the size of the text within a {{Type|Label}} derived panel.
     * 
     * **Bug [#2576](https://github.com/Facepunch/garrysmod-issues/issues/2576):**
     * >This can return 0 incorrectly.
     * 
     * [[Category:Label]] 
     * @returns [The width of the text in the DLabel., The height of the text in the DLabel.] 
     * !TupleReturn
     */
    public GetTextSize(): [number, number];
    
    /**
     * Sets the alignment of the contents.
     * 
     * [[Category:Label]]
     * [[Category:DLabel]] 
     * @param alignment  The direction of the content, based on the number pad.
     * <table>
     * <tr><td>{{Key|7}}: '''top-left'''</td><td>{{Key|8}}: '''top-center'''</td><td>{{Key|9}}: '''top-right'''</td></tr>
     * <tr><td>{{Key|4}}: '''middle-left'''</td><td>{{Key|5}}: '''center'''</td><td>{{Key|6}}: '''middle-right'''</td></tr>
     * <tr><td>{{Key|1}}: '''bottom-left'''</td><td>{{Key|2}}: '''bottom-center'''</td><td>{{Key|3}}: '''bottom-right'''</td></tr>
     * </table>
     * [[File:DLabel_SetContentAlignment.gif]] 
     */
    public SetContentAlignment(alignment: number): void;
    
    /**
     * Sets the alignment of the contents.
     * 
     * [[Category:Label]]
     * [[Category:DLabel]] 
     * @param alignment  The direction of the content, based on the number pad.
     * <table>
     * <tr><td>{{Key|7}}: '''top-left'''</td><td>{{Key|8}}: '''top-center'''</td><td>{{Key|9}}: '''top-right'''</td></tr>
     * <tr><td>{{Key|4}}: '''middle-left'''</td><td>{{Key|5}}: '''center'''</td><td>{{Key|6}}: '''middle-right'''</td></tr>
     * <tr><td>{{Key|1}}: '''bottom-left'''</td><td>{{Key|2}}: '''bottom-center'''</td><td>{{Key|3}}: '''bottom-right'''</td></tr>
     * </table>
     * [[File:DLabel_SetContentAlignment.gif]] 
     */
    public SetContentAlignment(alignment: number): void;
    
    /**
     * Adds a shadow falling to the bottom right corner of the panel's text. This has no effect on panels that do not derive from Label.
     * 
     * [[Category:Label]] 
     * @param distance  The distance of the shadow from the panel. 
     * @param Color  The color of the shadow. Uses the {{Struct|Color}}. 
     */
    public SetExpensiveShadow(distance: number, Color: Color): void;
    
    /**
     * Adds a shadow falling to the bottom right corner of the panel's text. This has no effect on panels that do not derive from Label.
     * 
     * [[Category:Label]] 
     * @param distance  The distance of the shadow from the panel. 
     * @param Color  The color of the shadow. Uses the {{Struct|Color}}. 
     */
    public SetExpensiveShadow(distance: number, Color: Color): void;
    
    /**
     * Sets the font used to render this panel's text.
     * 
     * To retrieve the font used by a panel, call {{ClassFunction|Panel|GetFont}}.
     * 
     * [[Category:Label]]
     * [[Category:TextEntry]]
     * [[Category:RichText]] 
     * @param fontName  The name of the font.
     * 
     * See [[Default_Fonts|here]] for a list of existing fonts.
     * Alternatively, use {{LibraryFunction|surface|CreateFont}} to create your own custom font. 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(200, 100)
     * TextFrame:Center()
     * TextFrame:SetTitle("This is a font test")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Sample text
     * richtext:SetText("This is a sample of text using the chat box font.")
     * 
     * // Ensure font and text color changes are applied
     * function richtext:PerformLayout()
     * 
     * 	self:SetFontInternal("ChatFont")
     * 	self:SetFGColor(Color(255, 255, 255))
     * 	
     * end
     * 
     * // Sets the font of a {{Type|RichText}} element to match the chat box font. 
     */
    public SetFontInternal(fontName: string): void;
    
    /**
     * Sets the font used to render this panel's text.
     * 
     * To retrieve the font used by a panel, call {{ClassFunction|Panel|GetFont}}.
     * 
     * [[Category:Label]]
     * [[Category:TextEntry]]
     * [[Category:RichText]] 
     * @param fontName  The name of the font.
     * 
     * See [[Default_Fonts|here]] for a list of existing fonts.
     * Alternatively, use {{LibraryFunction|surface|CreateFont}} to create your own custom font. 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(200, 100)
     * TextFrame:Center()
     * TextFrame:SetTitle("This is a font test")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Sample text
     * richtext:SetText("This is a sample of text using the chat box font.")
     * 
     * // Ensure font and text color changes are applied
     * function richtext:PerformLayout()
     * 
     * 	self:SetFontInternal("ChatFont")
     * 	self:SetFGColor(Color(255, 255, 255))
     * 	
     * end
     * 
     * // Sets the font of a {{Type|RichText}} element to match the chat box font. 
     */
    public SetFontInternal(fontName: string): void;
    
    /**
     * Sets the text value of a panel object containing text, such as a {{Type|Label}}, {{Type|TextEntry}} or  {{Type|RichText}} and their derivatives, such as {{Type|DLabel}}, {{Type|DTextEntry}} or {{Type|DButton}}.
     * 
     * {{Warning|When used on a {{Type|Label}} or its derivatives ( {{Type|DLabel}} and {{Type|DButton}} ), it will automatically call {{ClassFunction|Panel|InvalidateLayout}}, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.}}
     * [[Category:Label]]
     * [[Category:DLabel]]
     * [[Category:TextEntry]]
     * [[Category:RichText]]
     * [[Category:DTree_Node]] 
     * @param text  The text value to set. 
     * @example
     * 
     * // Window frame for the RichText
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(250, 150)
     * TextFrame:Center()
     * TextFrame:SetTitle("#VAC_ConnectionRefusedTitle") // Results in "Connection Refused - VAC"
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Set the text to the message you get when VAC banned
     * richtext:SetText("#VAC_ConnectionRefusedDetail")
     * 
     * // Creates a {{Type|RichText}} element and sets the text to a localized string; the default VAC rejection message. 
     */
    public SetText(text: string): void;
    
    /**
     * Sets the text value of a panel object containing text, such as a {{Type|Label}}, {{Type|TextEntry}} or  {{Type|RichText}} and their derivatives, such as {{Type|DLabel}}, {{Type|DTextEntry}} or {{Type|DButton}}.
     * 
     * {{Warning|When used on a {{Type|Label}} or its derivatives ( {{Type|DLabel}} and {{Type|DButton}} ), it will automatically call {{ClassFunction|Panel|InvalidateLayout}}, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.}}
     * [[Category:Label]]
     * [[Category:DLabel]]
     * [[Category:TextEntry]]
     * [[Category:RichText]]
     * [[Category:DTree_Node]] 
     * @param text  The text value to set. 
     * @example
     * 
     * // Window frame for the RichText
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(250, 150)
     * TextFrame:Center()
     * TextFrame:SetTitle("#VAC_ConnectionRefusedTitle") // Results in "Connection Refused - VAC"
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Set the text to the message you get when VAC banned
     * richtext:SetText("#VAC_ConnectionRefusedDetail")
     * 
     * // Creates a {{Type|RichText}} element and sets the text to a localized string; the default VAC rejection message. 
     */
    public SetText(text: string): void;
    
    /**
     * Sets the left and top text margins of a text-based panel object, such as a {{Type|DButton}} or {{Type|DLabel}}.
     * 
     * [[Category:Label]] 
     * @param insetX  The left margin for the text, in pixels. This will only affect centered text if the margin is greater than its x-coordinate. 
     * @param insetY  The top margin for the text, in pixels. 
     */
    public SetTextInset(insetX: number, insetY: number): void;
    
    /**
     * Sets the left and top text margins of a text-based panel object, such as a {{Type|DButton}} or {{Type|DLabel}}.
     * 
     * [[Category:Label]] 
     * @param insetX  The left margin for the text, in pixels. This will only affect centered text if the margin is greater than its x-coordinate. 
     * @param insetY  The top margin for the text, in pixels. 
     */
    public SetTextInset(insetX: number, insetY: number): void;
}

/**
 * The language library is used for translation. 
 */
declare namespace language {
    /**
     * Adds a language item. Language placeholders preceded with "#" are replaced with full text in Garry's Mod once registered with this function. 
     * @param placeholder  The key for this phrase, without the preceding "#". 
     * @param fulltext  The phrase that should be displayed whenever this key is used. 
     * @example
     * 
     * language.Add("Tool_cooltool_name", "The really cool tool")
     * language.Add("Tool_cooltool_desc", "Do some random cool stuff.")
     * language.Add("Tool_cooltool_0", "Left-click: Cool Stuff. Right-click: Nothing.")
     * language.Add("Undone_cooltool", "Cool stuff has been undone.")
     * 
     * // Small excerpt from a STOOL named cooltool. It has been registered as cooltool. 
     */
    function Add(placeholder: string, fulltext: string): void;
    
    /**
     * Retrieves the translated version of inputted string. Useful for concentrating multiple translated strings. 
     * @param phrase  The phrase to translate 
     * @returns The translated phrase 
     * @example
     * 
     * print( "Our phrase is: " .. language.GetPhrase( "limit_physgun" ) )
     * 
     * // An example on usage of this function. 
     */
    function GetPhrase(phrase: string): string;
}

/**
 * The list library allows you add and retrieve values to and from lists. The list library is basically a fancy wrapper for a table, but with much more limited functionality. 
 */
declare namespace list {
    /**
     * Adds an item to a named list 
     * @param identifier  The list identifier 
     * @param item  The item to add to the list 
     */
    function Add(identifier: string, item: any): void;
    
    /**
     * Returns true if the list contains the value. (as a value - not a key) 
     * @param list  List to search through 
     * @param value  The value to test 
     * @returns Returns true if the list contains the value, false otherwise 
     */
    function Contains(list: string, value: any): boolean;
    
    /**
     * Returns a copy of the list stored at identifier 
     * @param identifier  The list identifier 
     * @returns listCopy 
     */
    function Get(identifier: string): table;
    
    /**
     * Returns the actual table of the list stored at identifier. Modifying this will affect the stored list 
     * @param identifier  The list identifier 
     * @returns The actual list 
     */
    function GetForEdit(identifier: string): table;
    
    /**
     * Sets a specific position in the named list to a value. 
     * @param identifier  The list identifier 
     * @param key  The key in the list to set 
     * @param item  The item to set to the list as key 
     * @example
     * 
     * // Lost Coast
     * list.Set("NPC", "npc_fisherman", {
     * 	Name = "Fisherman",
     * 	Class = "npc_fisherman",
     * 	Weapons = { "weapon_oldmanharpoon" },
     * 	Category = Category
     * })
     * 
     * // Adds an NPC to the spawnmenu NPC list with the name "Fisherman", classname of "npc_fisherman" and the default weapon of "weapon_oldmanharpoon"@example
     * 
     * list.Set( "DesktopWindows", "My Custom Context Menu Icon", {
     * 	title = "Context Menu Icon",
     * 	icon = "icon64/icon.png",
     * 	init = function( icon, window )
     * 		//Your code here
     * 	end
     * } )
     * 
     * // Adds a new "Desktop Widget" to the Context Menu (C Menu). (This is how Player Model selection is added) 
     */
    function Set(identifier: string, key: any, item: any): void;
}

/**
 * The markup library only contains a single function to create a {{Type|MarkupObject}}. 
 */
declare namespace markup {
    /**
     * Parses markup into a {{Type| MarkupObject}}. Currently, this only supports fonts and colors as demonstrated in the example. 
     * @param markup  The markup to be parsed. 
     * @param maxwidth  The max width of the output 
     * @returns parsed 
     * @example
     * 
     * local parsed = markup.Parse("<font=Default>changed font</font>\n<colour=255,0,255,255>changed colour</colour>")
     * 
     * hook.Add("HUDPaint", "MarkupTest", function()
     *  parsed:Draw(100, 100, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
     * end)
     * 
     * // Renders a markup string on the HUD. 
     */
    function Parse(markup: string, maxwidth: number): MarkupObject;
}

/**
 * Object containing parsed markup for later rendering. Created by {{LibraryFunction|markup|Parse}}. 
 */
declare class MarkupObject {
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Creates a new empty markupobject. Use {{LibraryFunction|markup|Parse}} instead of calling this. 
     * @returns The created object. 
     */
    public Create(): MarkupObject;
    
    /**
     * Draws the computed markupobject to the screen. 
     * @param xOffset  The X coordinate on the screen. 
     * @param yOffset  The Y coordinate on the screen. 
     * @param xAlign  The alignment of the x coordinate using {{Enum|TEXT_ALIGN}} 
     * @param yAlign  The alignment of the y coordinate using {{Enum|TEXT_ALIGN}} 
     * @param alphaoverride [=255] Sets the alpha of all drawn objects to this. 
     */
    public Draw(xOffset: number, yOffset: number, xAlign: TEXT_ALIGN, yAlign: TEXT_ALIGN, alphaoverride?: number): void;
    
    /**
     * Gets computed the height of the markupobject. 
     * @returns The computed height. 
     */
    public GetHeight(): number;
    
    /**
     * Gets computed the width of the markupobject. 
     * @returns The computed width. 
     */
    public GetWidth(): number;
    
    /**
     * Gets computed the width and height of the markupobject. 
     * @returns [The computed width., The computed height.] 
     * !TupleReturn
     */
    public Size(): [number, number];
}

/**
 * Material is a VGUI element that renders a VMT material. 
 * @example
 * 
 * // Background panel
 * BGPanel = vgui.Create("DPanel")
 * BGPanel:SetSize(400, 400)
 * BGPanel:Center()
 * BGPanel:SetBackgroundColor(Color(0, 0, 0, 255))
 * 
 * // Material panel with TV static
 * local mat = vgui.Create("Material", BGPanel)
 * mat:SetPos(10, 10)
 * mat:SetSize(380, 380)
 * mat:SetMaterial("effects/tvscreen_noise002a")	// Path to material VMT
 * 
 * // Set this to false to enable material stretching
 * mat.AutoSize = false
 * 
 * // Model panel for GMod Logo
 * local mdl = vgui.Create("DModelPanel", BGPanel)
 * mdl:SetPos(10, 10)
 * mdl:SetSize(380, 380)
 * mdl:SetModel("models/maxofs2d/logo_gmod_b.mdl")
 * mdl:SetCamPos(Vector(240, 0, 0))
 * mdl:SetLookAt(Vector(0, 0, 0))
 * mdl:SetFOV(40)
 * 
 * // Spin faster
 * function mdl:LayoutEntity(ent)
 * 	ent:SetAngles(Angle(0, RealTime()*100,  0))
 * end
 * 
 * // Creates a Material panel with TV static under a {{Type|DModelPanel}} with a spinning Garry's Mod logo model.@example
 * 
 * // Background panel
 * BGPanel = vgui.Create("DPanel")
 * BGPanel:SetSize(720, 480)
 * BGPanel:Center()
 * BGPanel:SetBackgroundColor(Color(0, 0, 0, 255))
 * 
 * // Material data for the scanline background
 * local matdata = {
 * 	["$basetexture"]="vgui/appchooser/background_portal_widescreen",
 * 	["$texture2"]="dev/dev_scanline",
 * 	["Proxies"]={
 * 		["TextureScroll"]={
 * 			["texturescrollvar"]="$texture2transform",
 * 			["texturescrollrate"]=.06,
 * 			["texturescrollangle"]=-90
 * 		}
 * 	}
 * }
 * 
 * // Create material and recompute just in case
 * local portal_scanlines = CreateMaterial("PortalScanlines", "UnlitTwoTexture", matdata)
 * portal_scanlines:Recompute()
 * 
 * // Create material panel
 * local mat = vgui.Create("Material", BGPanel)
 * mat:SetPos(5, 5)
 * mat:SetSize(710, 470)
 * 
 * // This has to be set manually since mat:SetMaterial only accepts string argument
 * mat.Material = portal_scanlines
 * 
 * // Stretch to fit
 * mat.AutoSize = false
 * 
 * // Creates a custom VMT material (using existing textures) of a Portal background with scrolling scan lines, and then displays that material in a Material panel in the center of the screen. 
 */
declare class Material extends Button {
    /**
     * Sets the alpha value of the Material panel. 
     * @param alpha  The alpha value, from 0 to 255. 
     * @example
     * 
     * local mat = vgui.Create("Material")
     * mat:SetSize(200, 200)
     * mat:Center()
     * mat:SetMaterial("weapons/swep")
     * 	
     * mat:SetAlpha(128)
     * 
     * // Creates a transparent SWEP icon in the middle of the screen. 
     */
    public SetAlpha(alpha: number): void;
    
    /**
     * Sets the alpha multiplier for the panel 
     * @param alpha  The alpha value in the range of 0-255. 
     */
    public SetAlpha(alpha: number): void;
    
    /**
     * Sets the material used by the panel.
     * 
     * **Note:**
     * >If the material is not showing up as the correct size, try setting the Material panel's ''AutoSize'' variable to '''false''' 
     * @param matname  The file path of the material to set (relative to "garrysmod/materials/"). 
     * @example
     * 
     * // Black background panel
     * BGPanel = vgui.Create("DPanel")
     * BGPanel:SetSize(200, 200)
     * BGPanel:Center()
     * BGPanel:SetBackgroundColor(Color(0, 0, 0, 255))
     * 		
     * local mat = vgui.Create("Material", BGPanel)
     * mat:SetPos(5, 5)
     * mat:SetSize(190, 190)
     * 
     * // It's not really good to use a models material for VGUI drawing
     * // But it looks good enough for a quick demo
     * mat:SetMaterial("models/screenspace")
     * 
     * // Stretch to fit
     * mat.AutoSize = false
     * 
     * // Creates a Material panel and sets the material to a screen space effect. 
     */
    public SetMaterial(matname: string): void;
}

/**
 * The math library is a standard Lua library that provides functions for manipulating numbers. In Garry's Mod several additional math functions have been added. 
 */
declare namespace math {
    /**
     * Calculates the absolute value of a number (effectively removes any negative sign). 
     * @param x  The number to get the absolute value of. 
     * @returns absolute_value 
     * @example
     * 
     * print( math.abs( 15 ) )
     * print( math.abs( -15 ) )
     * 
     * // Demonstrates what this function does. 
     */
    function abs(x: number): number;
    
    /**
     * Returns the [[wikipedia:arc cosine|arc cosine]] of the given number. 
     * @param cos  Cosine value in range of -1 to 1. 
     * @returns An angle in radians, between 0 and pi, which has the given cos value.
     * 
     * [[nan]] if the argument is out of range. 
     */
    function acos(cos: number): number;
    
    /**
     * Calculates the difference between two angles. 
     * @param a  The first angle. 
     * @param b  The second angle. 
     * @returns The difference between the angles between -180 and 180 
     * @example
     * 
     * print("Angle difference between 159 and 240 is " .. math.AngleDifference(159, 240))
     * print("Angle difference between 240 and 159 is " .. math.AngleDifference(240, 159))
     * print("Angle difference between 58 and 145 is " .. math.AngleDifference(58, 145))
     * 
     * // Find the angle difference between various angles 
     */
    function AngleDifference(a: number, b: number): number;
    
    /**
     * Gradually approaches the target value by the specified amount. 
     * @param current  The value we're currently at. 
     * @param target  The target value. This function will never overshoot this value. 
     * @param change  The amount that the current value is allowed to change by to approach the target. (It makes no difference whether this is positive or negative.) 
     * @returns New current value, closer to the target than it was previously. 
     * @example
     * 
     * print( math.Approach( 0, 5, 1 ) ) // attempts to increment 0 by 1, 0 + 1 is less than 5 so returns 1
     * print( math.Approach( 4, 5, 3 ) ) // attempts to increment 4 by 3, 4 + 3 = 7 is greater than 5 so returns 5
     * 
     * // Demonstrates what this function does@example
     * 
     * local MyNumber = 0
     * local Target = 0
     * local LastThink = 0
     * local ChangeRate = 1
     * 
     * hook.Add( "Think", "math.Approach Example", function()
     * 	local now = CurTime()
     * 	local timepassed = now - LastThink
     * 	LastThink = now
     * 
     * 	MyNumber = math.Approach( MyNumber, Target, ChangeRate * timepassed )
     * 
     * 	// Normally, you would use MyNumber in code that appears here.
     * end )
     * 
     * // The following functions are for example only:
     * function GetMyNumber()
     * 	return MyNumber
     * end
     * 
     * function SetMyNumberTarget( newtarget )
     * 	Target = newtarget
     * end
     * 
     * function SetMyNumberChangeRate( newrate )
     * 	ChangeRate = newrate
     * end
     * 
     * // Common usage example of this function with a control variable. 
     */
    function Approach(current: number, target: number, change: number): number;
    
    /**
     * Increments an angle towards another by specified rate.
     * 
     * **Note:**
     * >This function is for numbers representing angles (0-360), NOT {{Type|Angle}} objects! 
     * @param currentAngle  The current angle to increase 
     * @param targetAngle  The angle to increase towards 
     * @param rate  The amount to approach the target angle by 
     * @returns Modified angle 
     */
    function ApproachAngle(currentAngle: number, targetAngle: number, rate: number): number;
    
    /**
     * Returns the [[wikipedia:arc sine|arc sine]] of the given number. 
     * @param normal  Sine value in the range of -1 to 1. 
     * @returns An angle in radians, in the range -pi/2 to pi/2, which has the given sine value.
     * 
     * [[nan]] if the argument is out of range. 
     */
    function asin(normal: number): number;
    
    /**
     * Returns the [[wikipedia:arc tangent|arc tangent]] of the given number. 
     * @param normal  Tangent value. 
     * @returns An angle in radians, in the range -pi/2 to pi/2, which has the given tangent. 
     */
    function atan(normal: number): number;
    
    /**
     * [[wikipedia:atan2|atan2]] functions like {{LibraryFunction|math|atan}}(y / x), except it also takes into account the quadrant of the angle and so doesn't have a limited range of output.
     * 
     * **Note:**
     * >The Y argument comes first! 
     * @param y  Y coordinate. 
     * @param x  X coordinate. 
     * @returns The angle of the line from (0, 0) to (x, y) in radians, in the range -pi to pi. 
     * @example
     * 
     * print( atan( 1 ) )
     * print( ata2( 1, 1 ) )
     * print( atan2( -1, -1 ) )
     * 
     * // atan( 1 ) and atan2( 1, 1 ) are both math.pi / 4
     * 
     * atan2( -1, -1 ) equals to ( (-3) * math.pi ) / 4 
     */
    function atan2(y: number, x: number): number;
    
    /**
     * Converts a binary string into a number. 
     * @param str  Binary string to convert 
     * @returns Base 10 number. 
     * @example
     * 
     * print( math.BinToInt( "101010101" ) )
     * 
     * // Will print the string "101010101" as a number in console. 
     */
    function BinToInt(str: string): number;
    
    /**
     * Basic code for [[wikipedia:Bézier curve|Bézier-Spline]] algorithm. 
     * @param tDiff  From 0 to 1, where alongside the spline the point will be. 
     * @param tPoints  A table of {{Type|Vector}}s. The amount cannot be less than 4. 
     * @param tMax  Just leave this at 1. 
     * @returns Point on Bezier curve, related to tDiff. 
     * @example
     * 
     * local points = { Vector( 100, 100, 0 ), Vector( 200, 200, 0 ), Vector( 300, 100, 0 ), Vector( 400, 200, 0 ) }
     * hook.Add( "HUDPaint", "BSplinePointExample", function()
     * 	// Draw the points
     * 	for id, p in pairs( points ) do
     * 		draw.RoundedBox( 0, p.x - 2, p.y - 2, 4, 4, color_white )
     * 	end
     * 
     * 	// Draw the spline
     * 	local pos = math.BSplinePoint( ( math.cos( CurTime() ) + 1 ) / 2, e, 1 )
     * 	draw.RoundedBox( 0, pos.x - 2, pos.y - 2, 4, 4, Color( 0, 0, 0 ) )
     * end )
     * 
     * // Example usage of the function, makes a black box moving along the beizer curve made out of 4 points 
     */
    function BSplinePoint(tDiff: number, tPoints: Vector[], tMax: number): Vector;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Basic code for Bezier-Spline algorithm, helper function for {{LibraryFunction|math|BSplinePoint}}. 
     * @param i 
     * @param k  **Bug [#1477](https://github.com/Facepunch/garrysmod-issues/issues/1477):**
     * >Sending in a value < 1 will result in an infinite loop. 
     * @param t 
     * @param tinc 
     * @returns 
     */
    function calcBSplineN(i: number, k: number, t: number, tinc: number): number;
    
    /**
     * Ceils or rounds a number up. 
     * @param number  The number to be rounded up. 
     * @returns ceiled numbers 
     * @example
     * 
     * print(math.ceil(math.pi))
     * 
     * // Round pi. 
     */
    function ceil(number: number): number;
    
    /**
     * Clamps a number between a minimum and maximum value 
     * @param input  The number to clamp. 
     * @param min  The minimum value, this function will never return a number less than this. 
     * @param max  The maximum value, this function will never return a number greater than this. 
     * @returns The clamped value. 
     * @example
     * 
     * print( math.Clamp( 10, 0, 5 ) ) // 10 is greater than 5 so returns 5
     * print( math.Clamp( 3, 0, 5 ) ) // 3 is greater than 0 and less than 5, so returns 3
     * print( math.Clamp( -1, 0, 5 ) ) // -1 is less than 0, so returns 0
     * 
     * // Demonstrates what this function does.@example
     * 
     * ply:SetHealth( math.Clamp( ply:Health() + 10, 0, 100 ) )
     * 
     * // Heals player "ply" by 10 health, but won't let their health go above 100. 
     */
    function Clamp(input: number, min: number, max: number): number;
    
    /**
     * Returns the [[wikipedia:cosine|cosine]] of given angle. 
     * @param number  Angle in radians 
     * @returns Cosine of given angle 
     * @example
     * 
     * print( math.cos( 3.14159265 ) )
     * 
     * // Prints the cosine of 3.14159265 (Pi) 
     */
    function cos(number: number): number;
    
    /**
     * Returns the [[wikipedia:hyperbolic cosine|hyperbolic cosine]] of the given angle. 
     * @param number  Angle in radians. 
     * @returns The hyperbolic cosine of the given angle. 
     */
    function cosh(number: number): number;
    
    /**
     * Converts radians to degrees. 
     * @param radians  Value to be converted to degrees. 
     * @returns degrees 
     */
    function deg(radians: number): number;
    
    /**
     * **Deprecated:**
     * >You should use {{LibraryFunction|math|Distance}} instead
     * 
     * Returns the difference between two points in 2D space. Alias of {{LibraryFunction|math|Distance}}. 
     * @param x1  X position of first point 
     * @param y1  Y position of first point 
     * @param x2  X position of second point 
     * @param y2  Y position of second point 
     * @returns Distance between the two points. 
     * @example
     * 
     * print( math.Distance( 1, 2, 5, 6 ) ) // distance bet
     * 
     * // Demonstrates the use of this function. 
     */
    function Dist(x1: number, y1: number, x2: number, y2: number): number;
    
    /**
     * Returns the difference between two points in 2D space. 
     * @param x1  X position of first point 
     * @param y1  Y position of first point 
     * @param x2  X position of second point 
     * @param y2  Y position of second point 
     * @returns Distance between the two points 
     * @example
     * 
     * print( math.Distance( 1, 2, 5, 6 ) ) // distance bet
     * 
     * // Demonstrates the use of this function. 
     */
    function Distance(x1: number, y1: number, x2: number, y2: number): number;
    
    /**
     * Calculates the progress of a value fraction, taking in to account given easing fractions 
     * @param progress  Fraction of the progress to ease 
     * @param easeIn  Fraction of how much easing to begin with 
     * @param easeOut  Fraction of how much easing to end with 
     * @returns Eased Value 
     * @example
     * 
     * print(math.EaseInOut(0.1, 0.1, 0.1))
     * print(math.EaseInOut(0.2, 0.1, 0.1))
     * print(math.EaseInOut(0.3, 0.1, 0.1))
     * 
     * // Calculates the easing of three situations 
     */
    function EaseInOut(progress: number, easeIn: number, easeOut: number): number;
    
    /**
     * Returns the x power of the Euler constant ''[[wikipedia:e (mathematical constant)|e]]''. 
     * @param exponent  The exponent for the function. 
     * @returns e to the specified power 
     */
    function exp(exponent: number): number;
    
    /**
     * Floors or rounds a number down. 
     * @param number  The number to be rounded down. 
     * @returns floored numbers 
     * @example
     * 
     * print(math.floor(math.pi))
     * 
     * // Round pi.@example
     * 
     * local value = 3.6
     * 
     * print( math.Round( value ), math.floor( value ) )
     * 
     * // Demonstrates the difference between math.Round and math.floor. 
     */
    function floor(number: number): number;
    
    /**
     * Returns the modulus of the specified values.
     * 
     * While this is similar to the % operator, '''it will return a negative value if the first argument is negative''', whereas the % operator will return a ''positive'' value '''even if the first operand is negative'''. 
     * @param base  The base value. 
     * @param modulator  The modulator. 
     * @returns The calculated modulus. 
     */
    function fmod(base: number, modulator: number): number;
    
    /**
     * <!-- lua reference desctiption: Returns m and e such that x = m2e, e is an integer and the absolute value of m is in the range ((0.5, 1) (or zero when x is zero).  -->
     * Used to split the number value into a normalized fraction and an exponent. Two values are returned: the first is a multiplier in the range 1/2 (inclusive) to 1 (exclusive) and the second is an integer exponent.
     * 
     * The result is such that x {{eq}} m*2^e. 
     * @param x  The value to get the normalized fraction and the exponent from. 
     * @returns [m, multiplier - between 0.5 and 1, e, exponent - always an integer] 
     * !TupleReturn
     */
    function frexp(x: number): [number, number];
    
    /**
     * =Not a function=
     * This is NOT a function, it's a variable that effectively represents infinity, in the sense that in any numerical comparison every number will be less than this.
     * 
     * For example, if x is a number, "x > math.huge" will NEVER be true except in the case of overflow (see below).
     * 
     * Lua will consider any number greater than or equal to 2<sup>1024</sup> (the exponent limit of a [http://en.wikipedia.org/wiki/Double-precision_floating-point_format double]) as ''inf'' and hence equal to this.
     * 
     * [[Category:Functions]]
     * [[Category:math]]
     * [[Category:Shared]]
     * [[Category:Menu]]
     * [[Category:Documented_Functions]]
     * [[Category:Library Functions]] 
     */
    function huge(): void;
    
    /**
     * Converts an integer to a binary (base-2) string. 
     * @param int  Number to be converted. 
     * @returns Binary number string. The length of this will always be a multiple of 3. 
     * @example
     * 
     * print(math.IntToBin(4))
     * 
     * // Prints the binary representation of 4 
     */
    function IntToBin(int: number): string;
    
    /**
     * Takes a normalised number and returns the floating point representation. 
     * @param normalizedFraction  The value to get the normalized fraction and the exponent from. 
     * @param exponent  The value to get the normalized fraction and the exponent from. 
     * @returns result 
     */
    function ldexp(normalizedFraction: number, exponent: number): number;
    
    /**
     * With one argument, return the natural logarithm of x (to base e).
     * 
     * With two arguments, return the logarithm of x to the given base, calculated as log(x)/log(base). 
     * @param x  The value to get the base from exponent from. 
     * @param base [=<span class="texhtml mvar">''[[Wikipedia:e (mathematical constant)|e]]''</span>] The logarithmic base. 
     * @returns Logarithm of x to the given base 
     */
    function log(x: number, base?: number): number;
    
    /**
     * Returns the base-10 logarithm of x. This is usually more accurate than math.log(x, 10). 
     * @param x  The value to get the base from exponent from. 
     */
    function log10(x: number): void;
    
    /**
     * Returns the largest value of all arguments. 
     * @param numbers  Numbers to get the largest from 
     * @returns The largest number 
     * @example
     * 
     * print( math.max( 464, 654698468, 1, 3, 2 ) )
     * 
     * // Get the largest number of a group.@example
     * 
     * local minimumValue = 5
     * 
     * function lowClamp(num)
     * 
     *      return math.max( minimumValue, num )
     * 
     * end
     * 
     * print( lowClamp( 0.1 ) )
     * print( lowClamp( -6 ) )
     * print( lowClamp( 5 ) )
     * print( lowClamp( 8 ) )
     * print( lowClamp( 24 ) )
     * 
     * // Prevent a value from falling under a certain minimum. A one-sided version of {{LibraryFunction|math|Clamp}}. 
     */
    function max(...numbers: (any)[]): number;
    
    /**
     * Returns the smallest value of all arguments. 
     * @param numbers  Numbers to get the smallest from. 
     * @returns The smallest number 
     * @example
     * 
     * print( math.min( 1, 2, -3, 464, 654698468 ) )
     * 
     * // Get the smallest number of a group. 
     */
    function min(...numbers: (any)[]): number;
    
    /**
     * **Deprecated:**
     * >This is removed in Lua versions later than what GMod is currently using. You should use the % operator or {{LibraryFunction|math|fmod}} instead.
     * 
     * Returns the modulus of the specified values. Same as {{LibraryFunction|math|fmod}}. 
     * @param base  The base value 
     * @param modulator  Modulator 
     * @returns The calculated modulus 
     */
    function mod(base: number, modulator: number): number;
    
    /**
     * Returns the integral and fractional component of the modulo operation. 
     * @param base  The base value. 
     * @returns [The integral component., The fractional component.] 
     * @example
     * 
     * print(math.modf(5.6))
     * 
     * // Finds the integral and fractional components of 5.6. 
     * !TupleReturn
     */
    function modf(base: number): [number, number];
    
    /**
     * Normalizes angle, so it returns value between -180 and 180. 
     * @param angle  The angle to normalize, in degrees. 
     * @returns The normalized angle, in the range of -180 to 180 degrees. 
     */
    function NormalizeAngle(angle: number): number;
    
    /**
     * =Not a function=
     * 
     * This is NOT a function, it's a variable containing the mathematical constant pi.
     * 
     * For example: math.sin( math.pi ) will return 0.
     * 
     * [[Category:Functions]]
     * [[Category:math]]
     * [[Category:Shared]]
     * [[Category:Menu]]
     * [[Category:Documented_Functions]]
     * [[Category:Library Functions]] 
     */
    function pi(): void;
    
    /**
     * Returns x raised to the power y.
     * In particular, math.pow(1.0, x) and math.pow(x, 0.0) always return 1.0, even when x is a zero or a NaN. If both x and y are finite, x is negative, and y is not an integer then math.pow(x, y) is undefined. 
     * @param x  Base. 
     * @param y  Exponent. 
     * @returns y power of x 
     */
    function pow(x: number, y: number): number;
    
    /**
     * Converts an angle in degrees to it's equivalent in radians. 
     * @param degrees  The angle measured in degrees. 
     * @returns radians 
     * @example
     * 
     * print( "Degrees: 360, Radians: " .. math.rad( 360 ) ) // 2*pi
     * print( "Degrees: 180, Radians: " .. math.rad( 180 ) ) // pi
     * print( "Degrees: 90, Radians: " .. math.rad( 90 ) ) // pi/2
     * print( "Degrees: 1, Radians: " .. math.rad( 1 ) ) // pi/180
     * 
     * // Convert various angles in degrees to their equivalent in radians. 
     */
    function rad(degrees: number): number;
    
    /**
     * Returns a random float between min and max.
     * 
     * See also {{LibraryFunction|math|random}} 
     * @param min  The minimum value. 
     * @param max  The maximum value. 
     * @returns Random float between min and max. 
     */
    function Rand(min: number, max: number): number;
    
    /**
     * When called without arguments, returns a uniform pseudo-random real number in the range 0 to 1 which includes 0 but excludes 1.
     * 
     * When called with an integer number m, returns a uniform pseudo-random integer in the range 1 to m inclusive.
     * 
     * When called with two integer numbers m and n, returns a uniform pseudo-random integer in the range m to n inclusive.
     * 
     * See also {{LibraryFunction|math|Rand}} 
     * @param m [=nil] If m is the only parameter: upper limit.
     * 
     * If n is also provided: lower limit.
     * 
     * If provided, this must be an integer. 
     * @param n [=nil] Upper limit.
     * 
     * If provided, this must be an integer. 
     * @returns Random value 
     * @example
     * 
     * print(math.random(1,400))
     * 
     * print(math.Rand(1,400))
     * 
     * // Generate a random number between 1 and 400 with both math.random and math.Rand.@example
     * 
     * function GetWeightedRandomKey(tab)
     * 	local sum = 0
     * 
     * 	for _, chance in pairs(tab) do
     * 		sum = sum + chance
     * 	end
     * 
     * 	local select = math.random() * sum
     * 
     * 	for key, chance in pairs(tab) do
     * 		select = select - chance
     * 		if select < 0 then return key end
     * 	end
     * end
     * 
     * // Example usage:
     * local fruit = {
     * 	Grape = 4.5,
     * 	Orange = 20,
     * 	Banana = 3.14
     * }
     * 
     * for i = 1, 5 do
     * 	print(GetWeightedRandomKey(fruit))
     * end
     * 
     * // Select a random key from a table, where the keys have a different probability of being selected. 
     */
    function random(m?: number, n?: number): number;
    
    /**
     * Seeds the random number generator. The same seed will guarantee the same sequence of numbers each time with {{LibraryFunction|math|random}}.
     * 
     * For shared random values across predicted realms, use {{LibraryFunction|util|SharedRandom}}.
     * 
     * {{Warning|Incorrect usage of this function will affect ''all'' random numbers in the game.}} 
     * @param seed  The new seed 
     */
    function randomseed(seed: number): void;
    
    /**
     * Remaps the value from one range to another 
     * @param value  The value 
     * @param inMin  The minimum of the initial range 
     * @param inMax  The maximum of the initial range 
     * @param outMin  The minimum of new range 
     * @param outMax  The maximum of new range 
     * @returns The number in the new range 
     * @example
     * 
     * print( math.Remap( 0.5, 0, 1, 0, 255 ) )
     * 
     * // Example usage, converts a value from range 0-1, to range 0-255. 
     */
    function Remap(value: number, inMin: number, inMax: number, outMin: number, outMax: number): number;
    
    /**
     * Rounds the given value to the nearest whole number or to the given decimal places. 
     * @param value  The value to round. 
     * @param decimals [=0] The decimal places to round to. 
     * @returns The rounded value. 
     * @example
     * 
     * print(math.Round(104.6256712))
     * 
     * // Rounds a number to the nearest whole number.@example
     * 
     * print(math.Round(104.6256712, 2))
     * 
     * // Rounds the number to two decimal places. 
     */
    function Round(value: number, decimals?: number): number;
    
    /**
     * Returns the [[wikipedia:sine|sine]] of given angle. 
     * @param number  Angle in radians 
     * @returns Sine for given angle 
     */
    function sin(number: number): number;
    
    /**
     * Returns the [[wikipedia:hyperbolic sine|hyperbolic sine]] of the given angle. 
     * @param number  Angle in radians. 
     * @returns The hyperbolic sine of the given angle. 
     */
    function sinh(number: number): number;
    
    /**
     * Returns the square root of the number. 
     * @param value  Value to get the square root of. 
     * @returns squareRoot 
     */
    function sqrt(value: number): number;
    
    /**
     * Returns the [[wikipedia:tangent (trigonometry)|tangent]] of the given angle. 
     * @param value  Angle in radians 
     * @returns The tangent of the given angle. 
     */
    function tan(value: number): number;
    
    /**
     * Returns the [[wikipedia:hyperbolic tangents|hyperbolic tangents]] of the given number. 
     * @param number  Angle in radians. 
     * @returns The hyperbolic tangent of the given angle. 
     */
    function tanh(number: number): number;
    
    /**
     * Returns the fraction of where the current time is relative to the start and end times 
     * @param start  Start time in seconds 
     * @param end  End time in seconds 
     * @param current  Current time in seconds 
     * @returns Fraction 
     * @example
     * 
     * print(math.TimeFraction(0, 10, 5))
     * 
     * // Prints the time fraction of 5 between 0 and 10 
     */
    function TimeFraction(start: number, end: number, current: number): number;
    
    /**
     * Rounds towards zero. 
     * @param num  The number to truncate 
     * @param digits [=0] The amount of digits to keep after the point. 
     * @example
     * 
     * local num = 54.59874
     * 
     * print( math.Truncate( num, 2 ) ) // 54.59
     * print( math.Round( num, 2 ) ) // 54.6
     * 
     * // Demonstrates the use of this function. 
     */
    function Truncate(num: number, digits?: number): void;
}

/**
 * Add proxies to materials. 
 */
declare namespace matproxy {
    /**
     * Adds a material proxy. 
     * @param MatProxyData  The information about the proxy. See {{Struct|MatProxyData}} 
     * @example
     * 
     * matproxy.Add({
     *     name = "PlayerColor", 
     *     init = function( self, mat, values )
     *         // Store the name of the variable we want to set
     *         self.ResultTo = values.resultvar
     *     end,
     *     bind = function( self, mat, ent )
     *         // If the target ent has a function called GetPlayerColor then use that
     *         // The function SHOULD return a Vector with the chosen player's colour.
     * 
     *         // In sandbox this function is created as a network function, 
     *         // in player_sandbox.lua in SetupDataTables
     *        if ( ent.GetPlayerColor ) then
     *            mat:SetVector( self.ResultTo, ent:GetPlayerColor() )
     *        end
     *    end 
     * })
     * 
     * // Adds PlayerColor proxy. Example taken from lua/matproxy/player_color.lua.@example
     * 
     * values = {
     *     resultvar = "$color2"
     *     myvariable = "$color"
     * }
     * 
     * // Material proxy values are stored like this:
     * 
     * * In the .vmt:
     * ```Proxies {
     *     PlayerColor {
     *        resultVar $color2
     *        myVariable $color
     *     }
     * }```
     * 
     * * In Lua ( The '''Init''' function of {{Struct|MatProxyData}} ) 
     */
    function Add(MatProxyData: MatProxyData): void;
    
    /**
     * Called by the engine from OnBind 
     * @param uname 
     * @param mat 
     * @param ent 
     */
    function Call(uname: string, mat: IMaterial, ent: Entity): void;
    
    /**
     * Called by the engine from OnBind 
     * @param name 
     * @param uname 
     * @param mat 
     * @param values 
     */
    function Init(name: string, uname: string, mat: IMaterial, values: table): void;
    
    /**
     * Called by engine, returns true if we're overriding a proxy 
     * @param name  The name of proxy in question 
     * @returns Are we overriding it? 
     */
    function ShouldOverrideProxy(name: string): boolean;
}

/**
 * The panel used by Material & Lamp Sandbox tools for texture selection. 
 */
declare class MatSelect extends ContextBase {

}

/**
 * The menu library. 
 */
declare namespace menu {
    /**
     * Used by "Demo to Video" to record the frame. 
     */
    function RecordFrame(): void;
}

/**
 * The menubar library. 
 */
declare namespace menubar {
    /**
     * Creates the menu bar ( The bar at the top of the screen when holding C or Q in sandbox ) and docks it to the top of the screen. It will not appear.
     * 
     * Calling this multiple times will '''NOT''' remove previous panel. 
     */
    function Init(): void;
    
    /**
     * Checks if the supplied panel is parent to the menubar 
     * @param pnl  The panel to check 
     * @returns Is parent or not 
     */
    function IsParent(pnl: Panel): boolean;
    
    /**
     * Parents the menubar to the panel and displays the menubar. 
     * @param pnl  The panel to parent to 
     */
    function ParentTo(pnl: Panel): void;
}

/**
 * The mesh library allows you to create meshes. A mesh is a set of vertices that define a 3D shape, for constant meshes you should use the {{Type|IMesh}} object instead. 
 */
declare namespace mesh {
    /**
     * Pushes the new vertex data onto the render stack. 
     */
    function AdvanceVertex(): void;
    
    /**
     * Starts a new dynamic mesh. If an {{Type|IMesh}} is passed, it will use that mesh instead. 
     * @param mesh [=nil] Mesh to build. This argument can be removed if you wish to build a "dynamic" mesh. See examples below. 
     * @param primitiveType [=] Primitive type, see {{Enum|MATERIAL}}. 
     * @param primiteCount [=] The amount of primitives. 
     * @example
     * 
     * local mat = Material( "editor/wireframe" ) // The material (a wireframe)
     * 
     * local verts = { // A table of 3 vertices that form a triangle
     * 	{ pos = Vector( 0,  0,  0 ), u = 0, v = 0 }, // Vertex 1
     * 	{ pos = Vector( 10, 0,  0 ), u = 1, v = 0 }, // Vertex 2
     * 	{ pos = Vector( 10, 10, 0 ), u = 1, v = 1 }, // Vertex 3
     * }
     * 
     * hook.Add( "PostDrawOpaqueRenderables", "MeshLibTest", function()
     * 
     * 	render.SetMaterial( mat ) // Apply the material
     * 	mesh.Begin( MATERIAL_TRIANGLES, 1 ) // Begin writing to the dynamic mesh
     * 	for i = 1, #verts do
     * 		mesh.Position( verts[i].pos ) // Set the position
     * 		mesh.TexCoord( 0, verts[i].u, verts[i].v ) // Set the texture UV coordinates
     * 		mesh.AdvanceVertex() // Write the vertex
     * 	end
     * 	mesh.End() // Finish writing the mesh and draw it
     * end )
     * 
     * // Draws a triangle near Vector( 0, 0, 0 ) in the map using a dynamic mesh.@example
     * 
     * local mat = Material( "editor/wireframe" ) // The material (a wireframe)
     * local obj = Mesh() // Create the IMesh object
     * 
     * local verts = { // A table of 3 vertices that form a triangle
     * 	{ pos = Vector( 0,  0,  0 ), u = 0, v = 0 }, // Vertex 1
     * 	{ pos = Vector( 10, 0,  0 ), u = 1, v = 0 }, // Vertex 2
     * 	{ pos = Vector( 10, 10, 0 ), u = 1, v = 1 }, // Vertex 3
     * }
     * 
     * mesh.Begin( obj, MATERIAL_TRIANGLES, 1 ) // Begin writing to the static mesh
     * for i = 1, #verts do
     * 	mesh.Position( verts[i].pos ) // Set the position
     * 	mesh.TexCoord( 0, verts[i].u, verts[i].v ) // Set the texture UV coordinates
     * 	mesh.AdvanceVertex() // Write the vertex
     * end
     * mesh.End() // Finish writing to the IMesh
     * 
     * hook.Add( "PostDrawOpaqueRenderables", "MeshLibTest", function()
     * 
     * 	render.SetMaterial( mat ) // Apply the material
     * 	obj:Draw() // Draw the mesh
     * end )
     * 
     * // Draws a triangle near Vector( 0, 0, 0 ) in the map using a static mesh. 
     */
    function Begin(mesh?: IMesh, primitiveType?: MATERIAL, primiteCount?: number): void;
    
    /**
     * Starts a new dynamic mesh. If an {{Type|IMesh}} is passed, it will use that mesh instead. 
     * @param primitiveType  Primitive type, see {{Enum|MATERIAL}}. 
     * @param primiteCount  The amount of primitives. 
     * @example
     * 
     * local mat = Material( "editor/wireframe" ) // The material (a wireframe)
     * 
     * local verts = { // A table of 3 vertices that form a triangle
     * 	{ pos = Vector( 0,  0,  0 ), u = 0, v = 0 }, // Vertex 1
     * 	{ pos = Vector( 10, 0,  0 ), u = 1, v = 0 }, // Vertex 2
     * 	{ pos = Vector( 10, 10, 0 ), u = 1, v = 1 }, // Vertex 3
     * }
     * 
     * hook.Add( "PostDrawOpaqueRenderables", "MeshLibTest", function()
     * 
     * 	render.SetMaterial( mat ) // Apply the material
     * 	mesh.Begin( MATERIAL_TRIANGLES, 1 ) // Begin writing to the dynamic mesh
     * 	for i = 1, #verts do
     * 		mesh.Position( verts[i].pos ) // Set the position
     * 		mesh.TexCoord( 0, verts[i].u, verts[i].v ) // Set the texture UV coordinates
     * 		mesh.AdvanceVertex() // Write the vertex
     * 	end
     * 	mesh.End() // Finish writing the mesh and draw it
     * end )
     * 
     * // Draws a triangle near Vector( 0, 0, 0 ) in the map using a dynamic mesh.@example
     * 
     * local mat = Material( "editor/wireframe" ) // The material (a wireframe)
     * local obj = Mesh() // Create the IMesh object
     * 
     * local verts = { // A table of 3 vertices that form a triangle
     * 	{ pos = Vector( 0,  0,  0 ), u = 0, v = 0 }, // Vertex 1
     * 	{ pos = Vector( 10, 0,  0 ), u = 1, v = 0 }, // Vertex 2
     * 	{ pos = Vector( 10, 10, 0 ), u = 1, v = 1 }, // Vertex 3
     * }
     * 
     * mesh.Begin( obj, MATERIAL_TRIANGLES, 1 ) // Begin writing to the static mesh
     * for i = 1, #verts do
     * 	mesh.Position( verts[i].pos ) // Set the position
     * 	mesh.TexCoord( 0, verts[i].u, verts[i].v ) // Set the texture UV coordinates
     * 	mesh.AdvanceVertex() // Write the vertex
     * end
     * mesh.End() // Finish writing to the IMesh
     * 
     * hook.Add( "PostDrawOpaqueRenderables", "MeshLibTest", function()
     * 
     * 	render.SetMaterial( mat ) // Apply the material
     * 	obj:Draw() // Draw the mesh
     * end )
     * 
     * // Draws a triangle near Vector( 0, 0, 0 ) in the map using a static mesh. 
     */
    function Begin(primitiveType: MATERIAL, primiteCount: number): void;
    
    /**
     * Sets the color to be used for the next vertex. 
     * @param r  Red component. 
     * @param g  Green component. 
     * @param b  Blue component. 
     * @param a  Alpha component. 
     */
    function Color(r: number, g: number, b: number, a: number): void;
    
    /**
     * Ends the mesh and renders it. 
     */
    function End(): void;
    
    /**
     * Sets the normal to be used for the next vertex. 
     * @param normal  The normal of the vertex. 
     */
    function Normal(normal: Vector): void;
    
    /**
     * Sets the position to be used for the next vertex. 
     * @param position  The position of the vertex. 
     */
    function Position(position: Vector): void;
    
    /**
     * Draws a quad using 4 vertices. 
     * @param vertex1  The first vertex. 
     * @param vertex2  The second vertex. 
     * @param vertex3  The third vertex. 
     * @param vertex4  The fourth vertex. 
     */
    function Quad(vertex1: Vector, vertex2: Vector, vertex3: Vector, vertex4: Vector): void;
    
    /**
     * Draws a quad using a position, a normal and the size. 
     * @param position  The center of the quad. 
     * @param normal  The normal of the quad. 
     * @param sizeX  X size in pixels. 
     * @param sizeY  Y size in pixels. 
     */
    function QuadEasy(position: Vector, normal: Vector, sizeX: number, sizeY: number): void;
    
    /**
     * Sets the specular map values.
     * 
     * This function actually does nothing. 
     * @param r  The red channel multiplier of the specular map. 
     * @param g  The green channel multiplier of the specular map. 
     * @param b  The blue channel multiplier of the specular map. 
     * @param a  The alpha channel multiplier of the specular map. 
     */
    function Specular(r: number, g: number, b: number, a: number): void;
    
    /**
     * Sets the s tangent to be used.
     * 
     * This function actually does nothing. 
     * @param sTanger  The s tangent. 
     */
    function TangentS(sTanger: Vector): void;
    
    /**
     * Sets the T tangent to be used.
     * 
     * This function actually does nothing. 
     * @param tTanger  The t tangent. 
     */
    function TangentT(tTanger: Vector): void;
    
    /**
     * Sets the texture coordinates for the next vertex.
     * 
     * Non-zero values of stage require the currently bound material to support it. For example, any LightmappedGeneric material supports stages 1 and 2 (lightmap texture coordinates). 
     * @param stage  The stage of the texture coordinate. 
     * @param u  U coordinate. 
     * @param v  V coordinate. 
     */
    function TexCoord(stage: number, u: number, v: number): void;
    
    /**
     * **Note:**
     * >It is recommended to use {{ClassFunction|IMesh|BuildFromTriangles}} instead of the mesh library.
     * 
     * A table of four numbers. This is used by most shaders in Source to hold tangent information of the vertex ( tangentX, tangentY, tangentZ, tangentHandedness ). 
     * @param tangentX 
     * @param tangentY 
     * @param tangentZ 
     * @param tangentHandedness 
     */
    function UserData(tangentX: number, tangentY: number, tangentZ: number, tangentHandedness: number): void;
    
    /**
     * Returns the amount of vertex that have yet been pushed. 
     * @returns vertexCount 
     */
    function VertexCount(): number;
}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * Panel used to display models, used by {{Type|SpawnIcon}}. 
 */
declare class ModelImage {
    /**
     * Causes a {{Type|SpawnIcon}} to rebuild its model image.
     * [[Category:ModelImage]][[Category:SpawnIcon]] 
     */
    public RebuildSpawnIcon(): void;
    
    /**
     * Re-renders a spawn icon with customized cam data.
     * 
     * **Note:**
     * >This function does '''not''' accept the standard {{Struct|CamData}}.
     * 
     * [[Category:ModelImage]][[Category:SpawnIcon]] 
     * @param data  A four-membered table containing the information needed to re-render:
     * * {{FuncArg|Vector|cam_pos|The relative camera position the model is viewed from.}}
     * * {{FuncArg|Angle|cam_ang|The camera angle the model is viewed from.}}
     * * {{FuncArg|number|cam_fov|The camera's field of view (FOV).}}
     * * {{FuncArg|Entity|ent|The entity object of the model.}}
     * See the example below for how to retrieve these values. 
     * @example
     * 
     * function PANEL:RenderIcon()
     * 	
     * 	local ent = self.ModelPanel:GetEntity()
     * 	
     * 	local tab = {}
     * 	tab.ent		= ent
     * 	tab.cam_pos = self.ModelPanel:GetCamPos()
     * 	tab.cam_ang = self.ModelPanel:GetLookAng()
     * 	tab.cam_fov = self.ModelPanel:GetFOV()
     * 
     * 	self.SpawnIcon:RebuildSpawnIconEx( tab )
     * end
     * 
     * // The ''RenderIcon'' method used by {{Type|IconEditor}}. ''SpawnIcon'' is a {{Type|SpawnIcon}} and ''ModelPanel'' is a {{Type|DAdjustableModelPanel}}. 
     */
    public RebuildSpawnIconEx(data: table): void;
    
    /**
     * [[Category:ModelImage]][[Category:SpawnIcon]]Sets the model to be displayed by {{Type|SpawnIcon}}.[[Category:SpawnIcon]] 
     * @param ModelPath  The path of the model to set 
     * @param skin [=0] The skin to set 
     * @param bodygroups [=""] The body groups to set. Each single-digit number in the string represents a separate bodygroup. '''This make it impossible to set any body group to a value higher than 9!''' 
     */
    public SetModel(ModelPath: string, skin?: number, bodygroups?: string): void;
    
    /**
     * [[Category:ModelImage]][[Category:SpawnIcon]]Sets the [[Silkicons|silkicon]] of a panel object such as a {{Type|SpawnIcon}} and {{Type|ModelImage}}. 
     * @param icon  The [[Silkicons|silkicon]] to use. 
     */
    public SetSpawnIcon(icon: string): void;
}

/**
 * Functions related to Kinect for Windows usage in GMod. 
 */
declare namespace motionsensor {
    /**
     * @param translator 
     * @param player 
     * @param rotation 
     * @returns [Pos, ang, sensor] 
     * !TupleReturn
     */
    function BuildSkeleton(translator: table, player: Player, rotation: Angle): [Vector, Angle, sensor];
    
    /**
     * @param ent  Entity to choose builder for 
     * @returns Chosen builder 
     */
    function ChooseBuilderFromEntity(ent: Entity): string;
    
    /**
     * Returns the depth map material. 
     * @returns The material 
     */
    function GetColourMaterial(): IMaterial;
    
    /**
     */
    function GetSkeleton(): void;
    
    /**
     * Return whether a kinect is connected - and active (ie - Start has been called). 
     * @returns Connected and active or not 
     */
    function IsActive(): boolean;
    
    /**
     * Returns true if we have detected that there's a kinect connected to the PC 
     * @returns Connected or not 
     */
    function IsAvailable(): boolean;
    
    /**
     * @param translator 
     * @param sensor 
     * @param pos 
     * @param ang 
     * @param special_vectors 
     * @param boneid 
     * @param v 
     * @returns Return nil on failure 
     */
    function ProcessAngle(translator: table, sensor: table, pos: Vector, ang: Angle, special_vectors: table, boneid: number, v: table): boolean;
    
    /**
     * @param translator 
     * @param sensor 
     * @param pos 
     * @param rotation 
     * @returns Ang. If !translator.AnglesTable then return - {} 
     */
    function ProcessAnglesTable(translator: table, sensor: table, pos: Vector, rotation: Angle): Angle;
    
    /**
     * @param translator 
     * @param sensor 
     * @returns Pos. if !translator.PositionTable then return - {} 
     */
    function ProcessPositionTable(translator: table, sensor: table): Vector;
    
    /**
     * This starts access to the kinect sensor. Note that this usually freezes the game for a couple of seconds. 
     */
    function Start(): void;
    
    /**
     * Stops the motion capture. 
     */
    function Stop(): void;
}

/**
 * The navigation mesh library. To be used with {{Type|CNavArea}}.
 * 
 * The navigation mesh is used by {{Type|NextBot}} to calculate path to its target. 
 */
declare namespace navmesh {
    /**
     * Add this position and normal to the list of walkable positions, used before map generation with {{LibraryFunction|navmesh|BeginGeneration}} 
     * @param pos  The terrain position. 
     * @param dir  The normal of this terrain position. 
     */
    function AddWalkableSeed(pos: Vector, dir: Vector): void;
    
    /**
     * Starts the generation of a new navmesh.
     * 
     * **Note:**
     * >This process is highly resource intensive and it's not wise to use during normal gameplay 
     */
    function BeginGeneration(): void;
    
    /**
     * Clears all the walkable positions, used before calling {{LibraryFunction|navmesh|BeginGeneration}}. 
     */
    function ClearWalkableSeeds(): void;
    
    /**
     * Creates a new {{Type|CNavArea}}. 
     * @param corner  The first corner of the new {{Type|CNavArea}} 
     * @param opposite_corner  The opposite (diagonally) corner of the new {{Type|CNavArea}} 
     * @returns The new {{Type|CNavArea}} or {{Type|nil}} if we failed for some reason. 
     */
    function CreateNavArea(corner: CNavArea, opposite_corner: CNavArea): CNavArea | undefined;
    
    /**
     * Returns a bunch of areas within distance, used to find hiding spots by {{Type|NextBot}}s for example. 
     * @param pos  The position to search around 
     * @param radius  Radius to search within 
     * @param stepdown  Maximum stepdown( fall distance ) allowed 
     * @param stepup  Maximum stepup( jump height ) allowed 
     * @returns A table of {{Type|CNavArea}}s 
     */
    function Find(pos: Vector, radius: number, stepdown: number, stepup: number): CNavArea[];
    
    /**
     * Returns an integer indexed table of all {{Type|CNavArea}}s on the current map. If the map doesn't have a navmesh generated then this will return an empty table. 
     * @returns A table of all the {{Type|CNavArea}}s on the current map. 
     */
    function GetAllNavAreas(): CNavArea[];
    
    /**
     * Returns the position of the edit cursor when nav_edit is set to 1. 
     * @returns The position of the edit cursor. 
     */
    function GetEditCursorPosition(): Vector;
    
    /**
     * @param pos 
     * @returns [The height, The normal] 
     * !TupleReturn
     */
    function GetGroundHeight(pos: Vector): [number, Vector];
    
    /**
     * Returns the currently marked {{Type|CNavArea}}, for use with editing console commands. 
     * @returns The currently marked {{Type|CNavArea}}. 
     */
    function GetMarkedArea(): CNavArea;
    
    /**
     * Returns the currently marked {{Type|CNavLadder}}, for use with editing console commands. 
     * @returns The currently marked {{Type|CNavLadder}}. 
     */
    function GetMarkedLadder(): CNavLadder;
    
    /**
     * Returns the Nav Area contained in this position that also satisfies the elevation limit. 
     * @param pos  The position to search for. 
     * @param beneathLimit  The elevation limit at which the Nav Area will be searched. 
     * @returns The nav area. 
     */
    function GetNavArea(pos: Vector, beneathLimit: number): CNavArea;
    
    /**
     * Returns a {{Type|CNavArea}} by the given ID.
     * 
     * **Note:**
     * >Avoid calling this function every frame, as internally it does a lookup trough all the {{Type|CNavArea}}s, call this once and store the result 
     * @param id  ID of the {{Type|CNavArea}} to get. Starts with 1. 
     * @returns The {{Type|CNavArea}} with given ID. 
     */
    function GetNavAreaByID(id: number): CNavArea;
    
    /**
     * Returns the highest ID of all nav areas on the map. While this can be used to get all nav areas, this number may not actually be the actual number of nav areas on the map. 
     * @returns The highest ID of all nav areas on the map. 
     */
    function GetNavAreaCount(): number;
    
    /**
     * Returns a {{Type|CNavLadder}} by the given ID. 
     * @param id  ID of the {{Type|CNavLadder}} to get. Starts with 1. 
     * @returns The {{Type|CNavLadder}} with given ID. 
     */
    function GetNavLadderByID(id: number): CNavLadder;
    
    /**
     * Returns the closest {{Type|CNavArea}} to given position at the same height, or beneath it. 
     * @param pos  The position to look from 
     * @param anyZ [=false] This argument is ignored and has no effect 
     * @param maxDist [=10000] This is the maximum distance from the given position that the function will look for a {{Type|CNavArea}} 
     * @param checkLOS [=false] If this is set to true then the function will internally do a {{LibraryFunction|util|TraceLine}} from the starting position to each potential {{Type|CNavArea}} with a MASK_NPCSOLID_BRUSHONLY {{Enum|MASK|Test}}. If the trace fails then the {{Type|CNavArea}} is ignored.
     * 
     * If this is set to false then the function will find the closest {{Type|CNavArea}} through anything, including the world. 
     * @param checkGround [=true] If checkGround is true then this function will internally call {{LibraryFunction|navmesh|GetNavArea}} to check if there is a {{Type|CNavArea}} directly below the position, and return it if so, before checking anywhere else. 
     * @param team [=TEAM_ANY=-2] This will internally call {{ClassFunction|CNavArea|IsBlocked}} to check if the target {{Type|CNavArea}} is not to be navigated by the given team. Currently this appears to do nothing. 
     * @returns The closest {{Type|CNavArea}} found with the given parameters. 
     */
    function GetNearestNavArea(pos: Vector, anyZ?: boolean, maxDist?: number, checkLOS?: CNavArea | CNavArea | CNavArea, checkGround?: CNavArea, team?: number): CNavArea;
    
    /**
     * Returns the classname of the player spawn entity. 
     * @returns The classname of the spawn point entity. By default returns "info_player_start" 
     */
    function GetPlayerSpawnName(): string;
    
    /**
     * Whether we're currently generating a new navmesh with {{LibraryFunction|navmesh|BeginGeneration}}. 
     * @returns Whether we're generating a nav mesh or not. 
     */
    function IsGenerating(): boolean;
    
    /**
     * Returns true if a navmesh has been loaded when loading the map. 
     * @returns Whether a navmesh has been loaded when loading the map. 
     */
    function IsLoaded(): boolean;
    
    /**
     * Loads a new navmesh from the .nav file for current map discarding any changes made to the navmesh previously. 
     */
    function Load(): void;
    
    /**
     * Deletes every {{Type|CNavArea}} and {{Type|CNavLadder}} on the map '''without saving the changes'''. 
     */
    function Reset(): void;
    
    /**
     * Saves any changes made to navmesh to the .nav file. 
     */
    function Save(): void;
    
    /**
     * Sets the {{Type|CNavArea}} as marked, so it can be used with editing console commands. 
     * @param area  The {{Type|CNavArea}} to set as the marked area. 
     */
    function SetMarkedArea(area: CNavArea): void;
    
    /**
     * Sets the {{Type|CNavLadder}} as marked, so it can be used with editing console commands. 
     * @param area  The {{Type|CNavLadder}} to set as the marked ladder. 
     */
    function SetMarkedLadder(area: CNavLadder): void;
    
    /**
     * Sets the classname of the default spawn point entity, used before generating a new navmesh with {{LibraryFunction|navmesh|BeginGeneration}}. 
     * @param spawnPointClass  The classname of what the player uses to spawn, automatically adds it to the walkable positions during map generation. 
     */
    function SetPlayerSpawnName(spawnPointClass: string): void;
}

/**
 * The net library is one of a number of ways to send data between the client and server. 
 * 
 * The major advantages of the net library are the large size limit (64kb/message) and the ability to send data backwards - from the client to the server.
 * 
 * Refer to [[Net Library Usage]] for a short introduction. 
 */
declare namespace net {
    /**
     * Sends the currently built net message to all connected players.
     * More information can be found in [[Net Library Usage]].
     * 
     * **Bug [#3412](https://github.com/Facepunch/garrysmod-issues/issues/3412):**
     * >Calling this too early causes the game to infinitely hang. You should wait until after {{HookFunction|GM|InitPostEntity}} to send a net message. 
     * @example
     * 
     * net.Start("NETHOOK")
     *     net.WriteString("some text")
     * net.Broadcast()
     * 
     * // Sends a packet to all players. 
     */
    function Broadcast(): void;
    
    /**
     * Returns the size of the current message in bytes. 
     * @returns bytes 
     */
    function BytesWritten(): number;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Function called by the engine to tell the lua state a message arrived. 
     * @param length  The message length, in bits. 
     * @param client  The player that sent the message. This will be nil in the client state. 
     */
    function Incoming(length: number, client: Player): void;
    
    /**
     * Reads an angle from the received net message.
     * {{Warning|You '''must''' read information in same order as you write it.}} 
     * @returns The read angle, or Angle(0,0,0) if no angle could be read 
     */
    function ReadAngle(): Angle;
    
    /**
     * Reads a bit from the received net message.
     * 
     * {{Warning|You '''must''' read information in same order as you write it.}} 
     * @returns 0 or 1, or 0 if the bit could not be read. 
     */
    function ReadBit(): number;
    
    /**
     * Reads a boolean from the received net message.
     * {{Warning|You '''must''' read information in same order as you write it.}} 
     * @returns true or false, or false if the bool could not be read. 
     */
    function ReadBool(): boolean;
    
    /**
     * Reads a {{Struct|Color}} from the current net message.
     * {{Warning|You '''must''' read information in same order as you write it.}} 
     * @returns The {{Struct|Color}} read from the current net message, or Color(0,0,0,0) if the color could not be read. 
     */
    function ReadColor(): Color;
    
    /**
     * Reads pure binary data from the message.
     * {{Warning|You '''must''' read information in same order as you write it.}} 
     * @param length  The length of the data to be read, in bytes. 
     * @returns The binary data read, or a string containing one character with a byte of 0 if no data could be read. 
     */
    function ReadData(length: number): string;
    
    /**
     * Reads a double-precision number from the received net message.
     * {{Warning|You '''must''' read information in same order as you write it.}} 
     * @returns The double-precision number, or 0 if no number could be read. 
     */
    function ReadDouble(): number;
    
    /**
     * Reads an entity from the received net message. You should always check if the specified entity exists as it may have been removed and therefor NULL if it is outside of the players PVS or was already removed.
     * {{Warning|You '''must''' read information in same order as you write it.}} 
     * @returns The entity, or Entity(0) if no entity could be read. 
     */
    function ReadEntity(): Entity;
    
    /**
     * Reads a floating point number from the received net message.
     * {{Warning|You '''must''' read information in same order as you write it.}} 
     * @returns The floating point number, or 0 if no number could be read. 
     */
    function ReadFloat(): number;
    
    /**
     * Returns the "header" of the message which contains a short which can be converted to the corresponding message name via {{LibraryFunction|util|NetworkIDToString}}. 
     * @returns The header number 
     */
    function ReadHeader(): number;
    
    /**
     * Reads an integer from the received net message.
     * {{Warning|You '''must''' read information in same order as you write it.}} 
     * @param bitCount  The amount of bits to be read.
     * 
     * This must be set to what you set to {{LibraryFunction|net|WriteInt}}. Read more information at {{LibraryFunction|net|WriteInt}}. 
     * @returns The read integer number, or 0 if no integer could be read. 
     */
    function ReadInt(bitCount: number): number;
    
    /**
     * Reads a {{Type|VMatrix}} from the received net message.
     * {{Warning|You '''must''' read information in same order as you write it.}} 
     * @returns The matrix, or an empty matrix if no matrix could be read. 
     */
    function ReadMatrix(): VMatrix;
    
    /**
     * Reads a normal vector from the net message.
     * {{Warning|You '''must''' read information in same order as you write it.}} 
     * @returns The normalized vector ( length = 1 ), or Vector(0,0,1) if no normal could be read. 
     */
    function ReadNormal(): Vector;
    
    /**
     * Reads a null terminated string from the net stream. The size of the string is 8 bits plus 8 bits for every ASCII character in the string.
     * {{Warning|You '''must''' read information in same order as you write it.}} 
     * @returns The read string, or a string with 0 length if no string could be read. 
     */
    function ReadString(): string;
    
    /**
     * Reads a table from the received net message.
     * 
     * **Note:**
     * >Sometimes when sending a table through the net library, the order of the keys may be switched. So be cautious when comparing (See Example 1).
     * 
     * {{Warning|You '''must''' read information in same order as you write it.}} 
     * @returns Table recieved via the net message, or a blank table if no table could be read. 
     * @example
     * 
     * //Client:
     * function SendTable()
     *      local Table = {}
     *      Table.Type = "Dining"
     *      Table.Legs = 4
     *      Table.Material = "Wood"
     *      net.Start("TableSend")
     *       net.WriteTable(Table)
     *      net.SendToServer()
     *      PrintTable(Table) // Prints the order client side
     * end
     * 
     * //Server:
     * function GotTable(len, Player)
     *      PrintTable(net.ReadTable()) // Prints the order server side
     * end
     * net.Receive("TableSend", GotTable)
     * 
     * // This is an example of how the keys order may be switched: 
     */
    function ReadTable(): table;
    
    /**
     * Reads a value from the net message with the specified type.
     * {{Warning|You '''must''' read information in same order as you write it.}} 
     * @param typeID [=net.ReadUInt(8)] The type of value to be read, using {{Enum|TYPE}}. 
     * @returns The value, or the respective blank value based on the type you're reading if the value could not be read. 
     */
    function ReadType(typeID?: TYPE): any;
    
    /**
     * Reads an unsigned integer with the specified number of bits from the received net message.
     * {{Warning|You '''must''' read information in same order as you write it.}} 
     * @param numberOfBits  The size of the integer to be read, in bits. 
     * @returns The unsigned integer read, or 0 if the integer could not be read. 
     */
    function ReadUInt(numberOfBits: number): number;
    
    /**
     * Reads a vector from the received net message.  Vectors sent by this function are compressed, which may result in precision loss. See {{LibraryFunction|net|WriteVector}} for more information.
     * {{Warning|You '''must''' read information in same order as you write it.}} 
     * @returns The read vector, or Vector(0,0,0) if no vector could be read. 
     */
    function ReadVector(): Vector;
    
    /**
     * Adds a net message handler. Only one receiver can be used to receive the net message.
     * **Note:**
     * >The message-name is converted to lower-case so the message-names "''BigBlue''" and "''bigblue''" would be equal.
     * 
     * {{Warning|You '''must''' put this function '''outside''' of any other function or hook for it to work properly unless you know what you are doing!}}
     * {{Warning|You '''must''' read information in the same order as you write it.}}
     * {{Warning|Each net message has a length limit of 64KB!}} 
     * @param messageName  The message name to hook to. 
     * @param callback  The function to be called if the specified message was received. Arguments are:
     * 
     * {{FuncArg|number|len|Length of the message, in bits}}
     * {{FuncArg|Player|ply|The player that sent the message, works only serverside}} 
     * @example
     * 
     * net.Receive( "my_message", function( len, pl )
     * 	if ( IsValid( pl ) and pl:IsPlayer() ) then
     * 		print( "Message from " .. pl:Nick() .. " received. Its length is " .. len .. "." )
     * 	else
     * 		print( "Message from server received. Its length is " .. len .. "." )
     * 	end
     * end )
     * 
     * // A simple callback 
     */
    function Receive(messageName: string, callback: Function): void;
    
    /**
     * Sends the current message to the specified player, or to all players listed in the table. 
     * @param ply  The player(s) to send the message to. Can be a table of players or a {{Type|CRecipientFilter}}. 
     */
    function Send(ply: CRecipientFilter): void;
    
    /**
     * Sends the current message to all except the specified, or to all except all players in the table. 
     * @param ply  The player(s) to NOT send the message to. Can be a table of players 
     */
    function SendOmit(ply: Player): void;
    
    /**
     * Sends the message to all players that are in the same potentially audible set(PAS) as the position, or simply said, it adds all players that can potentially hear sounds from this position. 
     * @param position  PAS position. 
     */
    function SendPAS(position: Vector): void;
    
    /**
     * Sends the message to all players the position is in the PVS of or, more simply said, sends the message to players that can potentially see this position. 
     * @param position  Position that must be in players' visibility set. 
     */
    function SendPVS(position: Vector): void;
    
    /**
     * Sends the current message to the server. 
     * @example
     * 
     * net.Start( "hello_world" )
     * 	net.WriteString( "Hi" )
     * net.SendToServer()
     * 
     * // Sends a simple "hello_world" message with the string "Hi" to the server 
     */
    function SendToServer(): void;
    
    /**
     * Begins a new net message.
     * 
     * {{Warning|Each net message has a length limit of 64KB!}}
     * 
     * {{Warning|Don't forget to pool the messageName with {{LibraryFunction|util|AddNetworkString}}!}}
     * 
     * **Bug [#2220](https://github.com/Facepunch/garrysmod-issues/issues/2220):**
     * >This will silently fail if another net message is already in progress. 
     * @param messageName  The name of the message to send 
     * @param unreliable [=false] If set to true, the message is not guaranteed to reach its destination 
     * @returns True if the message has been started. 
     */
    function Start(messageName: string, unreliable?: boolean): boolean;
    
    /**
     * Writes an angle to the current net message. 
     * @param angle  The angle to be sent. 
     */
    function WriteAngle(angle: Angle): void;
    
    /**
     * Appends a boolean (as 1 or 0) to the current net message.
     * 
     * Please note that the bit is written here from a {{Type|boolean}} (true/false) but {{LibraryFunction|net|ReadBit}} returns a number. 
     * @param boolean  Bit status (false = 0, true = 1) 
     */
    function WriteBit(boolean: boolean): void;
    
    /**
     * Appends a boolean to the current net message. Alias of {{LibraryFunction|net|WriteBit}} 
     * @param boolean  Boolean value to write 
     */
    function WriteBool(boolean: boolean): void;
    
    /**
     * Appends a {{Struct|Color}} to the current net message. 
     * @param Color  The {{Struct|Color}} you want to append to the net message. 
     */
    function WriteColor(Color: Color): void;
    
    /**
     * Writes a chunk of binary data to the message. 
     * @param binaryData  The binary data to be sent. 
     * @param length  The length of the binary data to be sent, in bytes. 
     */
    function WriteData(binaryData: string, length: number): void;
    
    /**
     * Appends a double-precision number to the current net message. 
     * @param double  The double to be sent 
     */
    function WriteDouble(double: number): void;
    
    /**
     * Appends an entity to the current net message. 
     * @param entity  The entity to be sent. 
     */
    function WriteEntity(entity: Entity): void;
    
    /**
     * Appends a float (number with decimals) to the current net message. 
     * @param float  The float to be sent. 
     */
    function WriteFloat(float: number): void;
    
    /**
     * Appends an integer - a whole number - to the current net message. Can be read back with {{LibraryFunction|net|ReadInt}} on the receiving end.
     * 
     * Use {{LibraryFunction|net|WriteUInt}} to send an unsigned number (that you know will never be negative). Use {{LibraryFunction|net|WriteFloat}} for a non-whole number (e.g. 2.25). 
     * @param integer  The integer to be sent. 
     * @param bitCount  The amount of bits the number consists of. This must be 32 or less.
     * 
     * If you are unsure what to set, just set it to 32.
     * 
     * {{{!}} class="mw-collapsible mw-collapsed wikitable"
     * {{!}}+Consult the table below to determine the bit count you need.
     * ! Bit Count
     * ! Minimum value
     * ! Maximum value
     * {{!}}-
     * {{!}} 2
     * {{!}} -2
     * {{!}} 1
     * {{!}}-
     * {{!}}  3
     * {{!}} -4
     * {{!}} 3
     * {{!}}-
     * {{!}}  4
     * {{!}} -8
     * {{!}} 7
     * {{!}}-
     * {{!}}  5
     * {{!}} -16
     * {{!}} 15
     * {{!}}-
     * {{!}}  6
     * {{!}} -32
     * {{!}} 31
     * {{!}}-
     * {{!}}  7
     * {{!}} -64
     * {{!}} 63
     * {{!}}-
     * {{!}}  8
     * {{!}} -128
     * {{!}} 127
     * {{!}}-
     * {{!}}  9
     * {{!}} -256
     * {{!}} 255
     * {{!}}-
     * {{!}}  10
     * {{!}} -512
     * {{!}} 511
     * {{!}}-
     * {{!}}  11
     * {{!}} -1024
     * {{!}} 1023
     * {{!}}-
     * {{!}}  12
     * {{!}} -2048
     * {{!}} 2047
     * {{!}}-
     * {{!}}  13
     * {{!}} -4096
     * {{!}} 4095
     * {{!}}-
     * {{!}}  14
     * {{!}} -8192
     * {{!}} 8191
     * {{!}}-
     * {{!}}  15
     * {{!}} -16384
     * {{!}} 16383
     * {{!}}-
     * {{!}}  16
     * {{!}} -32768
     * {{!}} 32767
     * {{!}}-
     * {{!}}  17
     * {{!}} -65536
     * {{!}} 65535
     * {{!}}-
     * {{!}}  18
     * {{!}} -131072
     * {{!}} 131071
     * {{!}}-
     * {{!}}  19
     * {{!}} -262144
     * {{!}} 262143
     * {{!}}-
     * {{!}}  20
     * {{!}} -524288
     * {{!}} 524287
     * {{!}}-
     * {{!}}  21
     * {{!}} -1048576
     * {{!}} 1048575
     * {{!}}-
     * {{!}}  22
     * {{!}} -2097152
     * {{!}} 2097151
     * {{!}}-
     * {{!}}  23
     * {{!}} -4194304
     * {{!}} 4194303
     * {{!}}-
     * {{!}}  24
     * {{!}} -8388608
     * {{!}} 8388607
     * {{!}}-
     * {{!}}  25
     * {{!}} -16777216
     * {{!}} 16777215
     * {{!}}-
     * {{!}}  26
     * {{!}} -33554432
     * {{!}} 33554431
     * {{!}}-
     * {{!}}  27
     * {{!}} -67108864
     * {{!}} 67108863
     * {{!}}-
     * {{!}}  28
     * {{!}} -134217728
     * {{!}} 134217727
     * {{!}}-
     * {{!}}  29
     * {{!}} -268435456
     * {{!}} 268435455
     * {{!}}-
     * {{!}}  30
     * {{!}} -536870912
     * {{!}} 536870911
     * {{!}}-
     * {{!}}  31
     * {{!}} -1073741824
     * {{!}} 1073741823
     * {{!}}-
     * {{!}}  32
     * {{!}} -2147483648
     * {{!}} 2147483647
     * {{!}}} 
     * @example
     * 
     * //Client
     * function SendAge()
     *      net.Start("SendAge")
     *      net.WriteInt(3, 3)  // Only 2 bits are needed to store the number '3', but we add one because of the rule.
     *      net.SendToServer()
     * end
     * 
     * //Server
     * util.AddNetworkString("SendAge")
     * 
     * local function GetAge(len, ply)
     *      local age = net.ReadInt(3) // use the same number of bits that were written
     *      print("Player " .. ply:Nick() .. " is " .. age .. " years old."
     * end
     * net.Receive("SendAge", GetAge)
     * 
     * // Sends the server the client's age. 
     */
    function WriteInt(integer: number, bitCount: number): void;
    
    /**
     * Writes a {{Type|VMatrix}} to the current net message. 
     * @param matrix  The matrix to be sent. 
     */
    function WriteMatrix(matrix: VMatrix): void;
    
    /**
     * Writes a normalized/direction vector ( Vector with length of 1 ) to the net message.
     * 
     * This function uses less bandwidth compared to {{LibraryFunction|net|WriteVector}} and will not send vectors with length of > 1 properly. 
     * @param normal  The normalized/direction vector to be send. 
     * @example
     * 
     * if ( SERVER ) then
     * 	util.AddNetworkString( "test1" )
     * 	util.AddNetworkString( "test2" )
     * 	
     * 	timer.Simple( 1, function()
     * 		net.Start( "test1" )
     * 			net.WriteVector( Vector( 1.23456789, 2.3456789, 3.456789 ) )
     * 		net.Broadcast()
     * 	
     * 		net.Start( "test2" )
     * 			net.WriteNormal( Vector( 1.23456789, 2.3456789, 3.456789 ) )
     * 		net.Broadcast()
     * 
     * 		net.Start( "test2" )
     * 			net.WriteNormal( Vector( 1.23456789, 2.3456789, 3.456789 ):GetNormalized() )
     * 		net.Broadcast()
     * 	
     * 		net.Start( "test2" )
     * 			net.WriteNormal( Vector( 0.5, -0.5, 0.23 ) )
     * 		net.Broadcast()
     * 	end )
     * else
     * 	net.Receive( "test1", function( ... )
     * 		print( ... ) 
     * 		print( net.ReadVector() ) 
     * 	end )
     * 	
     * 	net.Receive( "test2", function( ... )
     * 		print( ... ) 
     * 		print( net.ReadNormal() ) 
     * 	end )
     * end
     * 
     * // Showcases the difference between this function and {{LibraryFunction|net|WriteVector}}. 
     */
    function WriteNormal(normal: Vector): void;
    
    /**
     * Appends a string to the current net message. The size of the string is 8 bits plus 8 bits for every ASCII character in the string. The maximum allowed length of a single written string is 65533 characters. 
     * @param str  The string to be sent. 
     */
    function WriteString(str: string): void;
    
    /**
     * Appends a table to the current net message. Adds 16 extra bits per key/value pair so you're better off writing each individual key/value as the exact type if possible.
     * 
     * {{Warning|All net messages have a 64kb buffer. This function will not check or error when that buffer is overflown. You might want to consider using {{LibraryFunction|util|TableToJSON}} and {{LibraryFunction|util|Compress}} and send the resulting string in 60kb chunks, doing the opposite on the receiving end.}} 
     * @param table  The table to be sent. 
     */
    function WriteTable(table: table): void;
    
    /**
     * Appends any type of value to the current net message. 
     * @param Data  The data to be sent. A UInt(8) indicating the type will automatically be written to the packet before the value, in order to facilitate reading with {{LibraryFunction|net|ReadType}}. 
     */
    function WriteType(Data: any): void;
    
    /**
     * Appends an unsigned integer with the specified number of bits to the current net message. 
     * @param unsignedInteger  The unsigned integer to be sent. 
     * @param numberOfBits  The size of the integer to be sent, in bits. Acceptable values range from any number 1 to 32 inclusive. For reference, 1 = bit, 4 = nibble, 8 = byte, 16 = short, 32 = long. 
     */
    function WriteUInt(unsignedInteger: number, numberOfBits: number): void;
    
    /**
     * Appends a vector to the current net message.
     * Vectors sent by this function are compressed, which may result in precision loss.  XYZ components greater than 16384 or less than -16384 are irrecoverably altered (most significant bits are trimmed) and precision after the decimal point is low. 
     * @param vector  The vector to be sent. 
     * @example
     * 
     * if SERVER then
     * 
     *     util.AddNetworkString("testingvecs")
     *     function testvecs_sv()
     *         net.Start("testingvecs")
     *         net.WriteVector(Vector(10000, 20000, -20000.123456789))
     *         net.Broadcast()
     *     end
     *     concommand.Add("dovectest", testvecs_sv)
     * 
     * elseif CLIENT then
     * 
     *     function testvecs_cl(len)
     *         print("RECV: vec = " .. tostring(net.ReadVector()) .. "\n")
     *     end
     *     net.Receive("testingvecs", testvecs_cl)
     * 
     * end
     * 
     * // Create a serverside command to send a vector to all clients, and a function to receive the vector on the clientside.  This example displays the vector compression discussed above. 
     */
    function WriteVector(vector: Vector): void;
}

/**
 * '''NextBots''' are a new system to create NPCs in the Source Engine, utilizing the more powerful {{Lib|navmesh}} system for navigation over the old node based system.
 * 
 * This page lists all possible functions usable with '''NextBot'''s.
 * 
 * See [[NextBot NPC Creation]] for more information on how to create NextBot NPCs. 
 */
declare class NextBot extends Entity {
    /**
     * Become a ragdoll and remove the entity. 
     * @param info  Damage info passed from an onkilled event 
     */
    public BecomeRagdoll(info: CTakeDamageInfo): void;
    
    /**
     * Called to initialize the behaviour.
     * 
     * You shouldn't override this - it's used to kick off the coroutine that runs the bot's behaviour. 
     * 
     * This is called automatically when the NPC is created, there should be no need to call it manually. 
     */
    protected BehaveStart(): void;
    
    /**
     * Called to update the bot's behaviour. 
     * @param interval  How long since the last update 
     */
    protected BehaveUpdate(interval: number): void;
    
    /**
     * Should only be called in BodyUpdate. This sets the move_x and move_y pose parameters of the bot to fit how they're currently moving, sets the animation speed to suit the ground speed, and calls FrameAdvance.
     * 
     * **Bug [#3420](https://github.com/Facepunch/garrysmod-issues/issues/3420):**
     * >This function might cause crashes with some activities. 
     */
    public BodyMoveXY(): void;
    
    /**
     * Called to update the bot's animation. 
     */
    protected BodyUpdate(): void;
    
    /**
     * Like {{ClassFunction|NextBot|FindSpots}} but only returns a vector. 
     * @param type  Either "random", "near", "far" 
     * @param options  This table should contain the search info.
     * 
     * {{FuncArg|string|type|The type (Only'hiding' for now)}}
     * {{FuncArg|Vector|pos|the position to search.}}
     * {{FuncArg|number|radius|the radius to search.}}
     * {{FuncArg|number|stepup|the highest step to step up.}}
     * {{FuncArg|number|stepdown|the highest we can step down without being hurt.}} 
     * @returns If it finds a spot it will return a vector. If not it will return nil. 
     */
    public FindSpot(type: string, options: table): Vector;
    
    /**
     * Returns a table of hiding spots. 
     * @param specs  This table should contain the search info.
     * 
     * {{FuncArg|string|type|The type (either 'hiding')}}
     * {{FuncArg|Vector|pos|the position to search.}}
     * {{FuncArg|number|radius|the radius to search.}}
     * {{FuncArg|number|stepup|the highest step to step up.}}
     * {{FuncArg|number|stepdown|the highest we can step down without being hurt.}} 
     * @returns An unsorted table of tables containing:
     * 
     * {{FuncArg|Vector|vector|The position of the hiding spot}}
     * {{FuncArg|number|distance|the distance to that position}} 
     */
    public FindSpots(specs: table): table[];
    
    /**
     * Returns the currently running activity 
     * @returns The current activity 
     */
    public GetActivity(): number;
    
    /**
     * Returns squared distance to an entity or a position.
     * 
     * See also {{ClassFunction|NextBot|GetRangeTo}}. 
     * @param to  The position to measure distance to. Can be an entity. 
     * @returns The squared distance 
     */
    public GetRangeSquaredTo(to: Vector): number;
    
    /**
     * Returns the distance to an entity or position.
     * 
     * See also {{ClassFunction|NextBot|GetRangeSquaredTo}}. 
     * @param to  The position to measure distance to. Can be an entity. 
     * @returns The distance 
     */
    public GetRangeTo(to: Vector): number;
    
    /**
     * Returns the solid mask for given NextBot. 
     * @returns The solid mask, see {{Enum|CONTENTS}} and {{Enum|MASK}} 
     */
    public GetSolidMask(): CONTENTS | MASK;
    
    /**
     * Called from Lua when the NPC is stuck. This should only be called from the behaviour coroutine - so if you want to override this function and do something special that yields - then go for it.
     * 
     * You should always call self.loco:ClearStuck() in this function to reset the stuck status - so it knows it's unstuck. See {{ClassFunction|CLuaLocomotion|ClearStuck}}. 
     */
    public HandleStuck(): void;
    
    /**
     * To be called in the behaviour coroutine only! Will yield until the bot has reached the goal or is stuck 
     * @param pos  The position we want to get to 
     * @param options  A table containing a bunch of tweakable options.
     * 
     * {{FuncArg|number|lookahead|Minimum look ahead distance.}}
     * 
     * {{FuncArg|number|tolerance|How close we must be to the goal before it can be considered complete.}}
     * 
     * {{FuncArg|boolean|draw|Draw the path. Only visible on listen servers and single player.}}
     * 
     * {{FuncArg|number|maxage|Maximum age of the path before it times out.}}
     * 
     * {{FuncArg|number|repath|Rebuilds the path after this number of seconds.}} 
     * @returns Either "failed", "stuck", "timeout" or "ok" - depending on how the NPC got on 
     */
    public MoveToPos(pos: Vector, options: table): string;
    
    /**
     * Called when the nextbot touches another entity. 
     * @param ent  The entity the nextbot came in contact with. 
     */
    protected OnContact(ent: Entity): void;
    
    /**
     * Called when the bot is ignited. 
     */
    protected OnIgnite(): void;
    
    /**
     * Called when the bot gets hurt. 
     * @param info  The damage info 
     */
    protected OnInjured(info: CTakeDamageInfo): void;
    
    /**
     * Called when the bot gets killed. 
     * @param info  The damage info 
     * @example
     * 
     * function ENT:OnKilled( dmginfo )
     * 
     * 	hook.Call( "OnNPCKilled", GAMEMODE, self, dmginfo:GetAttacker(), dmginfo:GetInflictor() )
     * 
     * 	self:BecomeRagdoll( dmginfo )
     * 
     * end
     * 
     * // Example of NPC becoming a ragdoll after death and sending death notification to everybodys killfeed.@example
     * 
     * function ENT:OnKilled( dmginfo )
     * 	
     * 	hook.Call( "OnNPCKilled", GAMEMODE, self, dmginfo:GetAttacker(), dmginfo:GetInflictor() )
     * 	
     * 	local body = ents.Create( "prop_ragdoll" )
     * 	body:SetPos( self:GetPos() )
     * 	body:SetModel( self:GetModel() )
     * 	body:Spawn()
     * 	
     * 	self:Remove()
     * 	
     * 	timer.Simple( 5, function()
     * 	
     * 		body:Remove()
     * 		
     * 	end )
     * 
     * end
     * 
     * // Removes the body after 5 seconds, to prevent having lots of bodies laying around after a while. 
     */
    protected OnKilled(info: CTakeDamageInfo): void;
    
    /**
     * Called when the bot's feet return to the ground. 
     * @param ent  The entity the nextbot has landed on. 
     */
    protected OnLandOnGround(ent: Entity): void;
    
    /**
     * Called when the bot's feet leave the ground - for whatever reason. 
     * @param ent  The entity the bot "jumped" from. 
     */
    protected OnLeaveGround(ent: Entity): void;
    
    /**
     * Called when the nextbot enters a new navigation area. 
     * @param old  The navigation area the bot just left 
     * @param newVal  The navigation area the bot just entered 
     */
    protected OnNavAreaChanged(old: CNavArea, newVal: CNavArea): void;
    
    /**
     * Called when someone else or something else has been killed. 
     * @param victim  The victim that was killed 
     * @param info  The damage info 
     */
    protected OnOtherKilled(victim: Entity, info: CTakeDamageInfo): void;
    
    /**
     * Called when the bot thinks it is stuck. 
     * @example
     * 
     * function ENT:OnStuck()
     * 
     * 	local dmginfo = DamageInfo()
     * 	dmginfo:SetAttacker( self )
     * 
     * 	self:OnKilled( dmginfo )
     * 	
     * end
     * 
     * // Kills the bot when getting stuck, using a new damageinfo object. 
     */
    protected OnStuck(): void;
    
    /**
     * Called when the bot thinks it is un-stuck. 
     */
    protected OnUnStuck(): void;
    
    /**
     * To be called in the behaviour coroutine only! Plays an animation sequence and waits for it to end before returning. 
     * @param name  The sequence name 
     * @param speed [=1] Playback Rate of that sequence 
     */
    public PlaySequenceAndWait(name: string, speed?: number): void;
    
    /**
     * Sets the solid mask for given NextBot.
     * 
     * The default solid mask of a NextBot is [[Enums/MASK|MASK_NPCSOLID]]. 
     * @param mask  The new mask, see {{Enum|CONTENTS}} and {{Enum|MASK}} 
     */
    public SetSolidMask(mask: CONTENTS | MASK): void;
    
    /**
     * Start doing an activity (animation) 
     * @param activity  One of the {{Enum|ACT}} 
     */
    public StartActivity(activity: ACT): void;
    
    /**
     * Called every tick on the server. Called every frame on the client. 
     * @returns Return true if you used {{ClassFunction|Entity|NextThink}} to override the next execution time. 
     */
    protected Think(): boolean;
    
    /**
     * Called when a player 'uses' the entity. 
     * @param activator  The initial cause for the use. 
     * @param caller  The entity that directly triggered the use. 
     * @param useType  The type of use, see {{Enum|USE}} 
     * @param value  Any passed value 
     */
    protected Use(activator: Entity, caller: Entity, useType: USE, value: number): void;
}

/**
 * Used to display notifications on the screen (mid-right). 
 */
declare namespace notification {
    /**
     * Adds a standard notification to your screen. 
     * @param Text  The string to display 
     * @param Type  Determines the method for displaying the notification. See the {{Enum|NOTIFY}} 
     * @param Length  The number of seconds to display the notification for 
     * @example
     * 
     * notification.AddLegacy( "Undone Prop", NOTIFY_UNDO, 2 )
     * surface.PlaySound( "buttons/button15.wav" )
     * Msg( "Prop undone\n" )
     * 
     * // Adds a prop undo notification to the screen, like in Sandbox. 
     */
    function AddLegacy(Text: string, Type: NOTIFY, Length: number): void;
    
    /**
     * Adds a notification with an animated progress bar. 
     * @param id  Can be any type. It's used as an index. 
     * @param strText  The text to show 
     * @example
     * 
     * notification.AddProgress("FileDownload", "Downloading file...")
     * timer.Simple(3, function()
     * 	notification.Kill("FileDownload")
     * end)
     * 
     * // Add a notification that says "Downloading file...", and remove after three seconds. 
     */
    function AddProgress(id: any, strText: string): void;
    
    /**
     * Removes the notification after 0.8 seconds. 
     * @param uid  The unique ID of the notification 
     */
    function Kill(uid: any): void;
}

/**
 * This is a list of all methods only available for NPCs. It is also possible to call [http://wiki.garrysmod.com/index.php?title=Category:Entity Entity] functions on NPCs. 
 */
declare class NPC extends Entity {
    /**
     * Makes the NPC like, hate, feel neutral towards, or fear the entity in question. If you want to setup relationship towards a certain entity ''class'', use {{ClassFunction|NPC|AddRelationship}}. 
     * @param target  The entity for the relationship to be applied to. 
     * @param disposition  A {{Enum|D}} representing the relationship type. 
     * @param priority  How strong the relationship is. 
     * @example
     * 
     * local hack = ents.Create( "npc_manhack" )
     * hack:Spawn()
     * hack:AddEntityRelationship( player.GetByID(1), D_FR, 99 )
     * 
     * // Spawns a manhack and makes it fear player 1.@example
     * 
     * function ENT:Think()
     * local enemy = ents.FindByClass("npc_*") //Find any spawned entity in map with class beginning at npc
     *     for _, x in pairs(enemy) do //for every found entity do
     *        if !x:IsNPC() then return end // if found entity is not NPC then do nothing 
     *        if x:GetClass() != self:GetClass() then // if found entity is not self entity then continue
     *         x:AddEntityRelationship( self, D_HT, 99 ) // found entity will hate self entity
     *         self:AddEntityRelationship( x, D_HT, 99 ) // self entity will hate found entity          
     *        end
     *     end 
     * end
     * 
     * // Find wanted NPC class name and make them hate the entity. 
     */
    public AddEntityRelationship(target: Entity, disposition: D, priority: number): void;
    
    /**
     * Changes how an NPC feels towards another NPC.  If you want to setup relationship towards a certain ''entity'', use {{ClassFunction|NPC|AddEntityRelationship}}. 
     * @param relationstring  A string representing how the relationship should be set up.
     * Should be formatted as "npc_class {{Enum|D}} numberPriority". 
     * @example
     * 
     * local hack = ents.Create( "npc_manhack" )
     * hack:Spawn()
     * hack:AddRelationship( "npc_turret_floor D_HT 99" )
     * 
     * // Spawns a manhack and makes it hate floor turrets. 
     */
    public AddRelationship(relationstring: string): void;
    
    /**
     * Force an NPC to play his Alert sound. 
     */
    public AlertSound(): void;
    
    /**
     * Adds a capability to the NPC. 
     * @param capabilities  Capabilities to add, see {{Enum|CAP}} 
     * @example
     * 
     * self:CapabilitiesAdd(CAP_USE_SHOT_REGULATOR)
     * 
     * // Adds the CAP_USE_SHOT_REGULATOR to the NPC's capabilities. 
     */
    public CapabilitiesAdd(capabilities: CAP): void;
    
    /**
     * Removes all of Capabilities the NPC has. 
     * @example
     * 
     * self:CapabilitiesClear()
     * 
     * // Removes all of the Capabilities that the NPC has. 
     */
    public CapabilitiesClear(): void;
    
    /**
     * Returns the NPC's capabilities along the ones defined on its weapon. 
     * @returns The capabilities as a bitflag.
     * See {{Enum|CAP}} 
     */
    public CapabilitiesGet(): CAP;
    
    /**
     * Remove a certain capability. 
     * @param capabilities  Capabilities to remove, see {{Enum|CAP}} 
     * @example
     * 
     * self:CapabilitiesRemove(CAP_USE_SHOT_REGULATOR)
     * 
     * // Removes the CAP_USE_SHOT_REGULATOR capability, if the NPC has it. 
     */
    public CapabilitiesRemove(capabilities: CAP): void;
    
    /**
     * Returns the NPC class. Do not confuse with {{ClassFunction|Entity|GetClass}}! 
     * @returns See {{Enum|CLASS}} 
     */
    public Classify(): CLASS;
    
    /**
     * Clears out the specified {{Enum|COND}} on this NPC. 
     * @param condition  The {{Enum|COND}} to clear out. 
     */
    public ClearCondition(condition: COND): void;
    
    /**
     * Clears the Enemy from the NPC's memory, effectively forgetting it until met again with either the NPC vision or with {{ClassFunction|NPC|UpdateEnemyMemory}}. 
     */
    public ClearEnemyMemory(): void;
    
    /**
     * Clears the NPC's current expression which can be set with {{ClassFunction|NPC|SetExpression}}. 
     */
    public ClearExpression(): void;
    
    /**
     * Clears the current NPC goal or target. 
     */
    public ClearGoal(): void;
    
    /**
     * Stops the current schedule that the NPC is doing. 
     */
    public ClearSchedule(): void;
    
    /**
     * Translates condition ID to a string. 
     * @param cond  The NPCs condition ID, see {{Enum|COND}} 
     * @returns A human understandable string equivalent of that condition. 
     */
    public ConditionName(cond: COND): string;
    
    /**
     * Returns the way the NPC "feels" about the entity. 
     * @param ent  The entity to get the disposition from. 
     * @returns The NPCs disposition, see {{Enum|D}}. 
     * @example
     * 
     * function FriendlyFireAnnouncement( ply, atk )
     *    if atk:IsNPC() and atk:Disposition(ply) == D_LI then //like
     *       PrintMessage("A "..atk:GetClass().." attacked "..ply:Nick().."!", HUD_PRINTTALK)
     *    end
     * end
     * 
     * hook.Add( "PlayerHurt", "FriendlyFire", FriendlyFireAnnouncement )
     * 
     * // If a player is hurt by a friendly NPC, announce it. 
     */
    public Disposition(ent: Entity): D;
    
    /**
     * Makes an NPC exit a scripted sequence, if one is playing. 
     */
    public ExitScriptedSequence(): void;
    
    /**
     * Force an NPC to play his Fear sound. 
     */
    public FearSound(): void;
    
    /**
     * Force an NPC to play its FoundEnemy sound. 
     */
    public FoundEnemySound(): void;
    
    /**
     * Returns the weapon the NPC is currently carrying, or [http://wiki.garrysmod.com/page/Global_Variables NULL]. 
     * @returns The NPCs current weapon 
     */
    public GetActiveWeapon(): Entity;
    
    /**
     * Returns the NPC's current activity. 
     * @returns Current activity, see {{Enum|ACT}}. 
     */
    public GetActivity(): ACT;
    
    /**
     * Returns the aim vector of the NPC. NPC alternative of {{ClassFunction|Player|GetAimVector}}. 
     * @returns The aim direction of the NPC. 
     */
    public GetAimVector(): Vector;
    
    /**
     * Returns the activity to be played when the NPC arrives at its goal 
     * @returns 
     */
    public GetArrivalActivity(): number;
    
    /**
     * @returns 
     */
    public GetArrivalSequence(): number;
    
    /**
     * Returns the entity blocking the NPC along its path. 
     * @returns Blocking entity 
     */
    public GetBlockingEntity(): Entity;
    
    /**
     * Returns the NPC's current schedule. 
     * @returns The NPCs schedule, see {{Enum|SCHED}} or -1 if we failed for some reason 
     */
    public GetCurrentSchedule(): SCHED;
    
    /**
     * Returns how proficient (skilled) an NPC is with its current weapon. 
     * @returns NPC's proficiency for current weapon. See {{Enum|WEAPON_PROFICIENCY}}. 
     */
    public GetCurrentWeaponProficiency(): WEAPON_PROFICIENCY;
    
    /**
     * Returns the entity that this NPC is trying to fight.
     * 
     * **Bug [#3132](https://github.com/Facepunch/garrysmod-issues/issues/3132):**
     * >This returns nil if the NPC has no enemy. You should use {{GlobalFunction|IsValid}} (which accounts for nil and NULL) on the return to verify validity of the enemy. 
     * @returns Enemy NPC. 
     * @example
     * 
     * local function Think( )
     * 	for k, v in pairs( ents.GetAll( ) ) do
     * 		if v:IsNPC( ) and v:GetEnemy( ) == Entity( 1 ) then
     * 			v:TakeDamage( 999 )
     * 		end
     * 	end
     * end
     * 
     * hook.Add( "Think", "Kill My Enemies", Think )
     * 
     * // Kill any npc that sets the first player as its enemy. 
     */
    public GetEnemy(): NPC;
    
    /**
     * Returns the expression file the NPC is currently playing. 
     * @returns The file path of the expression. 
     */
    public GetExpression(): string;
    
    /**
     * Returns NPCs hull type set by {{ClassFunction|NPC|SetHullType}}. 
     * @returns Hull type, see {{Enum|HULL}} 
     */
    public GetHullType(): HULL;
    
    /**
     * Returns the NPC's current movement activity. 
     * @returns Current NPC movement activity, see {{Enum|ACT}}. 
     */
    public GetMovementActivity(): ACT;
    
    /**
     * Returns the index of the sequence the NPC uses to move. 
     * @returns The movement sequence index 
     */
    public GetMovementSequence(): number;
    
    /**
     * Returns the NPC's state. 
     * @returns The NPC's current state, see {{Enum|NPC_STATE}}. 
     * @example
     * 
     * function ReportIdleNPCs()
     * 
     * 	for _, npc in pairs(ents.FindByClass("npc_*")) do
     * 	
     * 		if(IsValid(npc) && npc:IsNPC() &&
     * 			npc:GetNPCState() == NPC_STATE_IDLE) then
     * 		
     * 			print("Ent #"..npc:EntIndex()..": "..npc:GetClass().." is idle.")
     * 			
     * 		end
     * 		
     * 	end
     * 
     * end
     * 
     * // Function which prints out a list of idle NPCs to the server console. 
     */
    public GetNPCState(): NPC_STATE;
    
    /**
     * @returns 
     */
    public GetPathDistanceToGoal(): number;
    
    /**
     * @returns 
     */
    public GetPathTimeToGoal(): number;
    
    /**
     * Returns the shooting position of the NPC.
     * 
     * **Note:**
     * >This only works properly when called on an NPC that can hold weapons, otherwise it will return the same value as {{ClassFunction|Entity|GetPos}}. 
     * @returns The NPC's shooting position. 
     */
    public GetShootPos(): Vector;
    
    /**
     * Returns the NPC's current target set by {{ClassFunction|NPC|SetTarget}}.
     * 
     * **Bug [#3132](https://github.com/Facepunch/garrysmod-issues/issues/3132):**
     * >This returns nil if the NPC has no target. You should use {{GlobalFunction|IsValid}} (which accounts for nil and NULL) on the return to verify validity of the target. 
     * @returns Target entity 
     */
    public GetTarget(): Entity;
    
    /**
     * Used to give a weapon to an already spawned NPC. 
     * @param weapon  Class name of the weapon to equip to the NPC. 
     * @returns The weapon entity given to the NPC. 
     */
    public Give(weapon: string): Weapon;
    
    /**
     * Returns whether or not the NPC has the given condition. 
     * @param condition  The condition index, see {{Enum|COND}}. 
     * @returns True if the NPC has the given condition, false otherwise. 
     * @example
     * 
     * function ListConditions(npc)
     * 	
     * 	if(!IsValid(npc)) then return end
     * 	
     * 	print(npc:GetClass().." ("..npc:EntIndex()..") has conditions:")
     * 	
     * 	for c = 0, 100 do
     * 	
     * 		if(npc:HasCondition(c)) then
     * 		
     * 			print(npc:ConditionName(c))
     * 			
     * 		end
     * 		
     * 	end
     * 	
     * end
     * 
     * // Function that prints a list of conditions an NPC has. 
     */
    public HasCondition(condition: COND): boolean;
    
    /**
     * Force an NPC to play his Idle sound. 
     */
    public IdleSound(): void;
    
    /**
     * Returns whether or not the NPC is performing the given schedule. 
     * @param schedule  The schedule number, see {{Enum|SCHED}}. 
     * @returns True if the NPC is performing the given schedule, false otherwise. 
     * @example
     * 
     * function GetNPCSchedule(npc)
     * 
     * 	if(!IsValid(npc)) then return end
     * 	
     * 	for s = 0, LAST_SHARED_SCHEDULE-1 do
     * 		if(npc:IsCurrentSchedule(s)) then return s end
     * 	end
     * 	
     * 	return 0
     * 	
     * end
     * 
     * // Function which returns the schedule an NPC is performing. 
     */
    public IsCurrentSchedule(schedule: SCHED): boolean;
    
    /**
     * Returns whether the NPC is moving or not. 
     * @returns Whether the NPC is moving or not. 
     */
    public IsMoving(): boolean;
    
    /**
     * @returns 
     */
    public IsRunningBehavior(): boolean;
    
    /**
     * Returns whether the entity given can be reached by this NPC. 
     * @param testEntity  The entity to test. 
     * @returns If the entity is reachable or not. 
     */
    public IsUnreachable(testEntity: Entity): boolean;
    
    /**
     * Force an NPC to play his LostEnemy sound. 
     */
    public LostEnemySound(): void;
    
    /**
     */
    public MaintainActivity(): void;
    
    /**
     * Causes the NPC to temporarily forget the current enemy and switch on to a better one. 
     */
    public MarkEnemyAsEluded(): void;
    
    /**
     */
    public MoveOrder(): void;
    
    /**
     * Sets the goal position for the NPC. 
     * @param position  The position to set as the goal 
     */
    public NavSetGoal(position: Vector): void;
    
    /**
     * Set the goal target for an NPC. 
     * @param target  The targeted entity to set the goal to. 
     * @param offset  The offset to apply to the targeted entity's position. 
     */
    public NavSetGoalTarget(target: Entity, offset: Vector): void;
    
    /**
     * Creates a random path of specified minimum length between a closest start node and random node in the specified direction. 
     * @param minPathLength  Minimum length of path in units 
     * @param dir  Unit vector pointing in the direction of the target random node 
     */
    public NavSetRandomGoal(minPathLength: number, dir: Vector): void;
    
    /**
     * Sets a goal in x, y offsets for the npc to wander to 
     * @param xoffset  X offset 
     * @param yoffset  Y offset 
     * @example
     * 
     * if npc:IsValid() then
     *     npc:NavSetWanderGoal(100, 100)
     *     npc:SetSchedule(SCHED_IDLE_WANDER)
     * end
     * 
     * // Given an npc makes them wander to a location 100 units in both the x and y directions 
     */
    public NavSetWanderGoal(xoffset: number, yoffset: number): void;
    
    /**
     * Forces the NPC to play a sentence from scripts/sentences.txt 
     * @param sentence  The sentence string to speak. 
     * @param delay  Delay in seconds until the sentence starts playing. 
     * @param volume  The volume of the sentence, from 0 to 1. 
     * @returns Returns the sentence index, -1 if the sentence couldn't be played. 
     */
    public PlaySentence(sentence: string, delay: number, volume: number): number;
    
    /**
     * **Deprecated!**
     * 
     * This function crashes the game no matter how it is used and will be removed in a future update.
     * 
     * Use {{ClassFunction|NPC|ClearEnemyMemory}} instead. 
     */
    public RemoveMemory(): void;
    
    /**
     * @param taskID  The task ID, see [https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/ai_task.h#L89-L502 ai_task.h] 
     * @param taskData  The task data. 
     */
    public RunEngineTask(taskID: number, taskData: number): void;
    
    /**
     */
    public SentenceStop(): void;
    
    /**
     * @param act 
     */
    public SetArrivalActivity(act: number): void;
    
    /**
     */
    public SetArrivalDirection(): void;
    
    /**
     */
    public SetArrivalDistance(): void;
    
    /**
     */
    public SetArrivalSequence(): void;
    
    /**
     */
    public SetArrivalSpeed(): void;
    
    /**
     * Sets an NPC condition. 
     * @param condition  The condition index, see {{Enum|COND}}. 
     * @example
     * 
     * COND_NPC_UNFREEZE = 68	// Delete this line when COND_ enums are added
     * 
     * function FreezeNPCTemporarily(npc, delay)
     * 	
     * 	if(!IsValid(npc)) then return end
     * 	
     * 	delay = delay or 1
     * 	
     * 	npc:SetSchedule(SCHED_NPC_FREEZE)
     * 
     * 	timer.Simple(delay, function()
     * 		if(IsValid(npc)) then npc:SetCondition(COND_NPC_UNFREEZE) end
     * 	end)
     * 	
     * end
     * 
     * // Freezes an NPC for a period of time. 
     */
    public SetCondition(condition: COND): void;
    
    /**
     * Sets the weapon proficiency of an NPC (how skilled an NPC is with its current weapon). 
     * @param proficiency  The proficiency for the NPC's current weapon. See {{Enum|WEAPON_PROFICIENCY}}. 
     * @example
     * 
     * for _, v in pairs( ents.FindByClass( "npc_*" ) ) do
     *     v:SetCurrentWeaponProficiency( WEAPON_PROFICIENCY_POOR )
     * end
     * 
     * // Makes all NPCs suck at using their current weapons. 
     */
    public SetCurrentWeaponProficiency(proficiency: WEAPON_PROFICIENCY): void;
    
    /**
     * Sets the target for an NPC. 
     * @param enemy  The enemy that the NPC should target 
     * @param newenemy [=true] Calls NPC:SetCondition(COND_NEW_ENEMY) if the new enemy is valid and not equal to the last enemy. 
     * @example
     * 
     * for k, v in ipairs( ents.FindByClass("npc_*") ) do
     * 	if ( v:IsNPC() ) then
     * 		if ( !IsValid( v:GetEnemy() ) ) then
     * 			local nearest_ply
     * 			local dist = 0
     * 			for i, j in ipairs( player.GetAll() ) do
     * 				local dist2 = j:GetPos():Distance( v:GetPos() )
     * 				if dist2 < dist then
     * 					dist = dist2
     * 					nearest_ply = j
     * 				end
     * 			end
     *             v:SetEnemy(nearest_ply)
     * 		end
     * 	end
     * end
     * 
     * // If any NPC has no specific target, it will go towards the nearest enemy. Place this in a think function in init.lua 
     */
    public SetEnemy(enemy: Entity, newenemy?: boolean): void;
    
    /**
     * Sets the NPC's .vcd expression. Similar to {{ClassFunction|Entity|PlayScene}} except the scene is looped until it's interrupted by default NPC behavior or {{ClassFunction|NPC|ClearExpression}}. 
     * @param expression  The expression filepath. 
     * @returns 
     * @example
     * 
     * function GrenadesScene(ply)
     * 
     * 	if(!IsValid(ply)) then return end
     * 	
     * 	local npc = ply:GetEyeTrace().Entity
     * 	
     * 	if(IsValid(npc) && npc:IsNPC()) then
     * 		npc:SetExpression("scenes/streetwar/sniper/ba_nag_grenade0"..math.random(1, 5)..".vcd")
     * 	end
     * 	
     * end
     * 
     * // Function which makes the NPC whom the player is looking at repeat an annoying scene. 
     */
    public SetExpression(expression: string): number;
    
    /**
     * Updates the NPC's hull and physics hull in order to match its model scale. {{ClassFunction|Entity|SetModelScale}} seems to take care of this regardless. 
     */
    public SetHullSizeNormal(): void;
    
    /**
     * Sets the hull type for the NPC. 
     * @param hullType  Hull type. See {{Enum|HULL}} 
     */
    public SetHullType(hullType: HULL): void;
    
    /**
     * Sets the last registered or memorized position for an npc. When using scheduling, the NPC will focus on navigating to the last position via nodes.
     * 
     * **Note:**
     * >The navigation requires ground nodes to function properly, otherwise the NPC could only navigate in a small area. (https://developer.valvesoftware.com/wiki/Info_node) 
     * @param Position  Where the NPC's last position will be set. 
     * @example
     * 
     * function NPCGoGoRun(npc, ply)
     * 	npc:SetLastPosition( ply:GetPos() )
     * 	npc:SetSchedule( SCHED_FORCED_GO_RUN )
     * end
     * 
     * // Make an NPC chase a player 
     */
    public SetLastPosition(Position: Vector): void;
    
    /**
     */
    public SetMaxRouteRebuildTime(): void;
    
    /**
     * Sets the activity the NPC uses when it moves. 
     * @param activity  The movement activity, see {{Enum|ACT}}. 
     * @example
     * 
     * function GM:Think()
     * 	
     * 	for _, npc in pairs(ents.FindByClass("npc_*")) do
     * 
     * 		if(IsValid(npc) && npc:IsNPC() && npc:GetMovementActivity() != ACT_WALK) then
     * 			npc:SetMovementActivity(ACT_WALK)
     * 		end
     * 
     * 	end
     * 	
     * end
     * 
     * // Makes all NPCs walk instead of run. 
     */
    public SetMovementActivity(activity: ACT): void;
    
    /**
     * Sets the sequence the NPC navigation path uses for speed calculation. Doesn't seem to have any visible effect on NPC movement. 
     * @param sequenceId  The movement sequence index 
     */
    public SetMovementSequence(sequenceId: number): void;
    
    /**
     * Sets the state the NPC is in to help it decide on a ideal schedule. 
     * @param state  New NPC state, see {{Enum|NPC_STATE}} 
     */
    public SetNPCState(state: NPC_STATE): void;
    
    /**
     * Sets the NPC's current schedule. 
     * @param schedule  The NPC schedule, see {{Enum|SCHED}}. 
     * @example
     * 
     * function NPCMoveTo(npc, ent)
     * 
     * 	if(!IsValid(npc) or !IsValid(ent)) then return end
     * 		
     * 	npc:SetSaveValue("m_vecLastPosition", ent:GetPos())
     * 	npc:SetSchedule(SCHED_FORCED_GO)
     * 	
     * end
     * 
     * // Function which forces an NPC to walk to an entity. 
     */
    public SetSchedule(schedule: SCHED): void;
    
    /**
     * Sets the NPC's target. This is used in some engine schedules. 
     * @param entity  The target of the NPC. 
     * @example
     * 
     * npc:SetTarget( Entity( 1 ) )
     * 
     * // Sets the NPC's target to first player. 
     */
    public SetTarget(entity: Entity): void;
    
    /**
     * Forces the NPC to start an engine task, this has different results for every NPC. 
     * @param task  The id of the task to start, see [https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/ai_task.h#L89-L502 ai_task.h] 
     * @param taskData  The task data as a float, not all tasks make use of it. 
     */
    public StartEngineTask(task: number, taskData: number): void;
    
    /**
     * Resets the NPC's movement animation and velocity. Does not actually stop the NPC from moving. 
     */
    public StopMoving(): void;
    
    /**
     */
    public TargetOrder(): void;
    
    /**
     */
    public TaskComplete(): void;
    
    /**
     * @param task  A string most likely defined as a Source Task, for more information on Tasks go to https://developer.valvesoftware.com/wiki/Task 
     */
    public TaskFail(task: string): void;
    
    /**
     * Force the NPC to update information on the supplied enemy, as if it had line of sight to it. 
     * @param enemy  The enemy to update. 
     * @param pos  The last known position of the enemy. 
     */
    public UpdateEnemyMemory(enemy: Entity, pos: Vector): void;
    
    /**
     * @returns 
     */
    public UseActBusyBehavior(): boolean;
    
    /**
     * @returns 
     */
    public UseAssaultBehavior(): boolean;
    
    /**
     * @returns 
     */
    public UseFollowBehavior(): boolean;
    
    /**
     * @returns 
     */
    public UseFuncTankBehavior(): boolean;
    
    /**
     * @returns 
     */
    public UseLeadBehavior(): boolean;
    
    /**
     */
    public UseNoBehavior(): void;
}

/**
 * The numpad module allows you to execute functions on a key press or release. 
 */
declare namespace numpad {
    /**
     * Activates numpad key owned by the player 
     * @param ply  The player whose numpad should be simulated 
     * @param key  The key to press, see {{Enum|KEY}} 
     * @param isButton  Should this keypress pretend to be a from a gmod_button? (causes {{LibraryFunction|numpad|FromButton}} to return true) 
     */
    function Activate(ply: Player, key: KEY, isButton: boolean): void;
    
    /**
     * Deactivates numpad key owned by the player 
     * @param ply  The player whose numpad should be simulated 
     * @param key  The key to press, corresponding to {{Enum|KEY}} 
     * @param isButton  Should this keypress pretend to be a from a gmod_button? (causes {{LibraryFunction|numpad|FromButton}} to return true) 
     */
    function Deactivate(ply: Player, key: KEY, isButton: boolean): void;
    
    /**
     * Returns true during a function added with {{LibraryFunction| numpad|Register}} when the third argument to {{LibraryFunction|numpad|Activate}} is true.
     * 
     * This is caused when a numpad function is triggered by a button SENT being used. 
     * @returns wasButton 
     */
    function FromButton(): boolean;
    
    /**
     * Calls a function registered with {{LibraryFunction|numpad|Register}} when a player presses specified key.
     * 
     * See for key released action: {{LibraryFunction|numpad|OnUp}} 
     * @param ply  The player whose numpad should be watched 
     * @param key  The key, corresponding to {{Enum|KEY}} 
     * @param name  The name of the function to run, corresponding with the one used in {{LibraryFunction|numpad|Register}} 
     * @param args  Arguments to pass to the function passed to {{LibraryFunction|numpad|Register}}. 
     * @returns The impulse ID 
     */
    function OnDown(ply: Player, key: KEY, name: string, ...args: (any)[]): number;
    
    /**
     * Calls a function registered with {{LibraryFunction|numpad|Register}} when a player releases specified key.
     * 
     * See for key pressed action: {{LibraryFunction|numpad|OnDown}} 
     * @param ply  The player whose numpad should be watched 
     * @param key  The key, corresponding to {{Enum|KEY}} 
     * @param name  The name of the function to run, corresponding with the one used in {{LibraryFunction|numpad|Register}} 
     * @param args  Arguments to pass to the function passed to {{LibraryFunction|numpad|Register}}. 
     * @returns The impulse ID 
     */
    function OnUp(ply: Player, key: KEY, name: string, ...args: (any)[]): number;
    
    /**
     * Registers a numpad library action for use with {{LibraryFunction|numpad|OnDown}} and {{LibraryFunction|numpad|OnUp}} 
     * @param id  The unique id of your action. 
     * @param func  The function to be executed.
     * 
     * Arguments are:
     * 
     * {{FuncArg|Player|ply|The player who pressed the button}}
     * 
     * {{FuncArg|vararg|...|The 4th and all subsequent arguments passed from {{LibraryFunction|numpad|OnDown}} and/or {{LibraryFunction|numpad|OnUp}}}}
     * 
     * Returning <b>false</b> in this function will remove the listener which triggered this function (example: return false if one of your varargs is an entity which is no longer valid) 
     */
    function Register(id: string, func: Function): void;
    
    /**
     * Removes a function added by either {{LibraryFunction|numpad|OnUp}} or {{LibraryFunction|numpad|OnDown}} 
     * @param ID  The impulse ID returned by {{LibraryFunction|numpad|OnUp}} or {{LibraryFunction|numpad|OnDown}} 
     */
    function Remove(ID: number): void;
    
    /**
     * Either runs {{LibraryFunction|numpad|Activate}} or {{LibraryFunction|numpad|Deactivate}} depending on the key's current state 
     * @param ply  The player whose numpad should be simulated 
     * @param key  The key to press, corresponding to {{Enum|KEY}} 
     */
    function Toggle(ply: Player, key: KEY): void;
}

/**
 * The os library is a standard Lua library originally intended to allow Lua access to various features of the Operating System it's running on, however many of the features and functions have been removed in Garry's Mod due to security issues. It's only used in Garry's Mod for date & time operations. 
 */
declare namespace os {
    /**
     * Returns the approximate cpu time the application ran. 
     * @returns runtime 
     * @example
     * 
     * print(os.clock())
     * 
     * // Prints the amount of time since Garry's Mod has been open to the console. 
     */
    function clock(): number;
    
    /**
     * Returns the date/time as a formatted string or in a table. 
     * @param format  The format string.
     * 
     * If this is equal to '*t' then this function will return a table, otherwise it will return a string.
     * 
     * If this starts with an '!', the returned data will use the UTC timezone rather than the local timezone.
     * 
     * See http://www.mkssoftware.com/docs/man3/strftime.3.asp for available format flags.
     * 
     * **Bug [#3438](https://github.com/Facepunch/garrysmod-issues/issues/3438):**
     * >'''Not all flags are available on all operating systems''' and the result of using an invalid flag is undefined. This currently crashes the game on Windows. Most or all flags are available on OS X and Linux but considerably fewer are available on Windows. See http://msdn.microsoft.com/en-us/library/fe06s4ak.aspx for a list of available flags on Windows. Note that the '''#''' flags also crashes the game on Windows. 
     * @param time  Time to use for the format. 
     * @returns Formatted date
     * **Note:**
     * >This can be a table if the first argument equals to '*t'! 
     * @example
     * 
     * local Timestamp = os.time()
     * local TimeString = os.date( "%H:%M:%S - %d/%m/%Y" , Timestamp )
     * print( "Timestamp:", Timestamp )
     * print( "TimeString:", TimeString )
     * 
     * // This will use the os.time() function, and return it in a friendly way.
     * os.time() is useful for storing as a date stamp but needs this to make it readable. 
     */
    function date(format: string, time: number): string;
    
    /**
     * Subtracts the second of the first value and rounds the result. 
     * @param timeA  The first value. 
     * @param timeB  The value to subtract. 
     * @returns diffTime 
     */
    function difftime(timeA: number, timeB: number): number;
    
    /**
     * Returns the system time in seconds past the unix epoch. If a table is supplied, the function attempts to build a system time with the specified table members. 
     * @param dateData [=nil] Table to generate the time from. This table's data is interpreted as being in the local timezone. See {{Struct|DateData}} 
     * @returns Seconds passed since Unix epoch 
     * @example
     * 
     * print( os.time() )
     * 
     * // Prints out the current time, in seconds past the unix epoch. 
     */
    function time(dateData?: DateData): number;
}

/**
 * The package library is a standard Lua library, it's mainly for use with the module system built into Lua. 
 */
declare namespace package {
    /**
     * Sets a metatable for module with its __index field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to {{GlobalFunction|module}}. 
     * @param module  The module table to be given a metatable 
     */
    function seeall(module: table): void;
}

/**
 * This is the base panel for every other VGUI panel.
 * 
 * It contains all of the basic methods, some of which may only work on certain VGUI elements. As their functionality is provided at the game's C/C++ level rather than by its Lua script extension, they are unfortunately unavailable for most practical purposes, however, they can still be obtained in a way similar to that provided by the {{Type|baseclass}} library:
 * ```
 * -- Create a new panel type NewPanel that inherits all of its functionality from DLabel,
 * -- but has a different SetText method than DLabel does - all without the hassle of that
 * -- old DLabel's default text getting in the way. Fun stuff.
 * 
 * local PANEL = {}
 * 
 * function PANEL:Init()
 * 
 * 	self:SetText_Base( "" )
 * 	self:SetText( "Time for something different!" )
 * 
 * end
 * 
 * function PANEL:Paint( aWide, aTall )
 * 
 * 	local TextX, TextY = 0, 0
 * 	local TextColor = Color( 255, 000, 000, 255 )
 * 
 * 	surface.SetFont( self:GetFont() or "default" )
 * 	surface.SetTextColor( TextColor )
 * 	surface.SetTextPos( TextX, TextY )
 * 	surface.DrawText( self:GetText() )
 * 
 * end
 * 
 * -- And here we go:
 * PANEL.SetText_Base = FindMetaTable( "Panel" ).SetText
 * 
 * function PANEL:SetText( aText ) 
 * 
 * 	self.Text = tostring( aText ) 
 * 
 * end
 * 
 * function PANEL:GetText() 
 * 
 * 	return self.Text or "" 
 * 
 * end
 * 
 * vgui.Register( "NewPanel", PANEL, "DLabel" )
 * ``` 
 */
declare class Panel {
    /**
     * Called whenever a panel receives a command signal from one of its children.
     * 
     * This hook is called when using {{ClassFunction|Panel|Command}}, when clicking a {{Type|Button}} with {{ClassFunction|Panel|SetCommand}} set, and when clicking text within a {{Type|RichText}} panel that is marked as click-able. 
     * @param signalName  The name of the signal, usually the sender of the signal or the command name. 
     * @param signalValue  The value of the signal, usually a command argument. 
     */
    protected ActionSignal(signalName: string, signalValue: string): void;
    
    /**
     * Adds the specified object to the panel.
     * 
     * **Bug [#1482](https://github.com/Facepunch/garrysmod-issues/issues/1482):**
     * >Creating a DFrame or a panel that inherits from DFrame will not drag/resize correctly when created through this function. 
     * @param object  The panel to be added (parented). Can also be:
     * * {{FuncArg|string|Class Name|creates panel with the specified name and adds it to the panel.}}
     * * {{FuncArg|table|PANEL table|creates a panel from table and adds it to the panel.}} 
     * @returns New panel 
     */
    public Add(object: Panel): Panel;
    
    /**
     * **Deprecated:**
     * >Does nothing
     * 
     * This function does nothing. 
     */
    public AddText(): void;
    
    /**
     * Aligns the panel on the bottom of its parent with the specified offset. 
     * @param offset [=0] The align offset. 
     */
    public AlignBottom(offset?: number): void;
    
    /**
     * Aligns the panel on the left of its parent with the specified offset. 
     * @param offset [=0] The align offset. 
     */
    public AlignLeft(offset?: number): void;
    
    /**
     * Aligns the panel on the right of its parent with the specified offset. 
     * @param offset [=0] The align offset. 
     */
    public AlignRight(offset?: number): void;
    
    /**
     * Aligns the panel on the top of its parent with the specified offset. 
     * @param offset [=0] The align offset. 
     */
    public AlignTop(offset?: number): void;
    
    /**
     * Uses animation to transition the current alpha value of a panel to a new alpha, over a set period of time and after a specified delay. 
     * @param alpha  The alpha value (0-255) to approach. 
     * @param duration  The time in seconds it should take to reach the alpha. 
     * @param delay [=0] The delay before the animation starts. 
     * @param callback [=] The function to be called once the animation finishes. Arguments are:
     * * {{FuncArg|table|animData|The {{Struct|AnimationData}} that was used.}}
     * * {{FuncArg|Panel|pnl|The panel object whose alpha was changed.}} 
     */
    public AlphaTo(alpha: number, duration: number, delay?: number, callback?: Function): void;
    
    /**
     * Called every frame unless {{ClassFunction|Panel|IsVisible}} is set to false. Similar to {{HookFunction|PANEL|Think}}, but can be disabled by {{ClassFunction|Panel|SetAnimationEnabled}} as explained below.
     * 
     * If you are overriding this, you must call {{ClassFunction|Panel|AnimationThinkInternal}} every frame, else animations will cease to work.
     * 
     * If you want to "disable" this hook with {{ClassFunction|Panel|SetAnimationEnabled}}, you must call it after defining this hook. Once disabled, a custom hook '''will not''' be re-enabled by {{ClassFunction|Panel|SetAnimationEnabled}} again - the hook will have to be re-defined. 
     */
    protected AnimationThink(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Performs the per-frame operations required for panel animations.
     * 
     * This is called every frame by {{HookFunction|PANEL|AnimationThink}}. 
     */
    public AnimationThinkInternal(): void;
    
    /**
     * Returns the {{GlobalFunction|SysTime}} value when all animations for this panel object will end. 
     * @returns The system time value when all animations will end for this panel. 
     */
    public AnimTail(): number;
    
    /**
     * Appends text to a {{Type|RichText}} element. This does not automatically add a new line.
     * 
     * [[Category:RichText]] 
     * @param txt  The text to append (add on). 
     */
    public AppendText(txt: string): void;
    
    /**
     * Used by {{ClassFunction|Panel|LoadGWENFile}} and {{ClassFunction|Panel|LoadGWENString}} to apply a GWEN controls table to a panel object.
     * 
     * You can do this manually using {{LibraryFunction|file|Read}} and {{LibraryFunction|util|JSONToTable}} to import and create a GWEN table structure from a ''.gwen'' file. This method can then be called, passing the GWEN table's ''Controls'' member. 
     * @param GWENTable  The GWEN controls table to apply to the panel. 
     */
    public ApplyGWEN(GWENTable: table): void;
    
    /**
     * Called whenever the panel should apply its scheme(style). 
     */
    protected ApplySchemeSettings(): void;
    
    /**
     * Centers the panel on its parent. 
     */
    public Center(): void;
    
    /**
     * Centers the panel horizontally with specified fraction. 
     * @param fraction [=0.5] The center fraction. 
     */
    public CenterHorizontal(fraction?: number): void;
    
    /**
     * Centers the panel vertically with specified fraction. 
     * @param fraction [=0.5] The center fraction. 
     */
    public CenterVertical(fraction?: number): void;
    
    /**
     * Returns the amount of children of the of panel. 
     * @returns childCount 
     */
    public ChildCount(): number;
    
    /**
     * Returns the width and height of the space between the position of the panel (upper-left corner) and the max bound of the children panels (farthest reaching lower-right corner). 
     * @returns [The children size width., The children size height.] 
     * @example
     * 
     * // Parent panel
     * BGPanel = vgui.Create("DPanel")
     * BGPanel:SetSize(200, 200)
     * BGPanel:Center()
     * 
     * local panel, child_size_w, child_size_h = nil, 0, 0
     * 
     * // Create increasingly large blocks until children size exceeds the size of the panel
     * while(BGPanel:ChildrenSize() < BGPanel:GetSize()) do
     * 
     * 	child_w, child_h = BGPanel:ChildrenSize()
     * 
     * 	panel = vgui.Create("DPanel", BGPanel)
     * 	panel:SetPos(0, 0)
     * 	
     * 	// Increase size based on the children size
     * 	panel:SetSize(child_w+10, child_h+10)
     * 	
     * 	// Random bluish color every frame
     * 	function panel:PerformLayout()
     * 		self:InvalidateLayout()	// Call this again next frame
     * 		self:SetBackgroundColor(Color(math.random(0, 255), 255, math.random(0, 255)))
     * 	end
     * 	
     * 	// Move to back so we can see the effect
     * 	panel:MoveToBack()
     * 	
     * end
     * 
     * // Creates a recursively generated box of panels where the size of each panel is determined by the parent panel's children size + 10x10 pixels.
     * 
     * Also they flash bluish colors, just for good measure. 
     * !TupleReturn
     */
    public ChildrenSize(): [number, number];
    
    /**
     * Marks all of the panel's children for deletion. 
     */
    public Clear(): void;
    
    /**
     * Fades panels color to specified one. It won't work unless panel has SetColor function. 
     * @param color  The color to fade to 
     * @param length  Length of the animation 
     * @param delay  Delay before start fading 
     * @param callback  Function to execute when finished 
     */
    public ColorTo(color: table, length: number, delay: number, callback: Function): void;
    
    /**
     * Sends an action command signal to the panel. The response is handled by {{HookFunction|PANEL|ActionSignal}}. 
     * @param command  The command to send to the panel. 
     * @example
     * 
     * function DisconnectDialog()
     * 
     * 	// Remove existing dialog box
     * 	if(DialogBox) then DialogBox:Remove() end
     * 	
     * 	// Font and message
     * 	local font = "ChatFont"
     * 	local msg = "Would you like to disconnect?"
     * 	
     * 	// Get the size of the text
     * 	surface.SetFont(font)
     * 	local msg_w, msg_h = surface.GetTextSize(msg)
     * 	
     * 	// Padding and button size
     * 	local padding = 15
     * 	local btn_w, btn_h = 35, 25
     * 	
     * 	// Calculate dialog box size
     * 	local dialog_w = msg_w+(padding*2)
     * 	local dialog_h = msg_h+(padding*3)+btn_h
     * 	
     * 	// Create the dialog box
     * 	DialogBox = vgui.Create("DPanel")
     * 	DialogBox:SetSize(dialog_w, dialog_h)
     * 	DialogBox:Center()
     * 	DialogBox:SetBackgroundColor(Color(64, 64, 92, 255))
     * 	
     * 	// Message
     * 	local lbl = vgui.Create("DLabel", DialogBox)
     * 	lbl:SetPos(padding, padding)
     * 	lbl:SetSize(msg_w, msg_h)
     * 	lbl:SetText(msg)
     * 	lbl:SetFont(font)
     * 	
     * 	// Yes button
     * 	local yes = vgui.Create("DButton", DialogBox)
     * 	yes:SetPos((dialog_w/2)-btn_w-20, msg_h+padding*2)
     * 	yes:SetSize(btn_w, btn_h)
     * 	yes:SetText("Yes")
     * 	yes:SetFont(font)
     * 	yes.DoClick = function() DialogBox:Command("yes") end
     * 	
     * 	// No button
     * 	local no = vgui.Create("DButton", DialogBox)
     * 	no:SetPos((dialog_w/2)+20, msg_h+padding*2)
     * 	no:SetSize(btn_w, btn_h)
     * 	no:SetText("No")
     * 	no:SetFont(font)
     * 	no.DoClick = function() DialogBox:Command("no") end
     * 	
     * 	// Force mouse input
     * 	DialogBox:MakePopup()
     * 	
     * 	// Hook fired when DialogBox:Command is used
     * 	function DialogBox:ActionSignal(signalName, signalValue)
     * 	
     * 		// Thank the player and disconnect after 2 seconds
     * 		if(signalName == "yes") then
     * 		
     * 			chat.AddText(Color(192, 192, 224), "Thanks for playing "..LocalPlayer():Nick()..", come back soon!")
     * 			
     * 			timer.Simple(2.0, function()
     * 				RunConsoleCommand("disconnect")
     * 			end)
     * 			
     * 			self:Remove()
     * 		
     * 		// Remove the dialog box
     * 		elseif(signalName == "no") then
     * 		
     * 			self:Remove()
     * 		
     * 		end
     * 	
     * 	end
     * 	
     * end
     * 
     * // Defines a function which displays a dialog box that asks the player if they want to leave the server. Clicking the buttons fire panel commands that call the {{HookFunction|PANEL|ActionSignal}} which handles what action should be taken. 
     */
    public Command(command: string): void;
    
    /**
     * Updates a panel object's associated console variable. This must first be set up with {{GlobalFunction|Derma_Install_Convar_Functions}}, and have a ConVar set using {{ClassFunction|Panel|SetConVar}}. 
     * @param newValue  The new value to set the associated console variable to. 
     */
    public ConVarChanged(newValue: string): void;
    
    /**
     * A think hook for {{Type|Panel}}s using ConVars as a value. Call it in the Think hook. Sets the panel's value should the convar change.
     * 
     * This function is best for: checkboxes, sliders, number wangs
     * 
     * For a string alternative, see [[Panel/ConVarStringThink|Panel.ConVarStringThink]].
     * 
     * ''Important'': Make sure your Panel has a SetValue function, else you may get errors. 
     * @example
     * 
     * function PANEL:Think()
     * 	self:ConVarNumberThink()
     * end
     * 
     * // How it should be implemented into your input. 
     */
    public ConVarNumberThink(): void;
    
    /**
     * A think hook for [[Panel|panels]] using ConVars as a value. Call it in the Think hook. Sets the panel's value should the convar change.
     * 
     * This function is best for: text inputs, read-only inputs, dropdown selects
     * 
     * For a number alternative, see [[Panel/ConVarNumberThink|Panel.ConVarNumberThink]].
     * 
     * ''Important'': Make sure your Panel has a SetValue function, else you may get errors. 
     * @example
     * 
     * function PANEL:Think()
     * 	ConVarStringThink()
     * end
     * 
     * // How it should be implemented into your input. 
     */
    public ConVarStringThink(): void;
    
    /**
     * Gets the size, position and dock state of the passed panel object, and applies it to this one. 
     * @param srcPanel  The panel to copy the boundary and dock settings from. 
     */
    public CopyBase(srcPanel: Panel): void;
    
    /**
     * Copies position and size of the panel. 
     * @param base  The panel to copy size and position from. 
     */
    public CopyBounds(base: Panel): void;
    
    /**
     * Copies the height of the panel. 
     * @param base  Panel to copy the height from. 
     */
    public CopyHeight(base: Panel): void;
    
    /**
     * Copies the position of the panel. 
     * @param base  Panel to position the width from. 
     */
    public CopyPos(base: Panel): void;
    
    /**
     * Performs the "CONTROL + C" key combination effect ( Copy selection to clipboard ) on selected text.
     * 
     * [[Category:TextEntry]] 
     */
    public CopySelected(): void;
    
    /**
     * Copies the width of the panel. 
     * @param base  Panel to copy the width from. 
     */
    public CopyWidth(base: Panel): void;
    
    /**
     * Returns the cursor position relative to the top left of the panel.
     * 
     * This is equivalent to calling {{LibraryFunction|gui|MousePos}} and then {{ClassFunction|Panel|ScreenToLocal}}.
     * 
     * {{Warning|This function uses a cached value for the screen position of the panel, computed at the end of the last VGUI Think/Layout pass.
     * 
     * ie. inaccurate results may be returned if the panel or any of its ancestors have been repositioned outside of {{HookFunction|PANEL|Think}} or {{HookFunction|PANEL|PerformLayout}} within the last frame.}} 
     * @returns [X coordinate of the cursor, relative to the top left of the panel., Y coordinate of the cursor, relative to the top left of the panel.] 
     * !TupleReturn
     */
    public CursorPos(): [number, number];
    
    /**
     * Performs the "CONTROL + X" ( delete text and copy it to clipboard buffer ) action on selected text.
     * 
     * [[Category:TextEntry]] 
     */
    public CutSelected(): void;
    
    /**
     * Deletes a cookie value using the panel's cookie name ( {{ClassFunction|Panel|GetCookieName}} ) and the passed extension. 
     * @param cookieName  The unique cookie name to delete. 
     */
    public DeleteCookie(cookieName: string): void;
    
    /**
     * Resets the panel object's {{ClassFunction|Panel|SetPos}} method and removes its animation table (''Panel.LerpAnim''). This effectively undoes the changes made by {{ClassFunction|Panel|LerpPositions}}.
     * 
     * In order to use Lerp animation again, you must call {{ClassFunction|Panel|Stop}} before setting its ''SetPosReal'' property to 'nil'. See the example below. 
     * @example
     * 
     * function ChangeLerpSpeed( pnl, newSpeed, ease )
     * 	
     * 	if !ispanel(pnl) or !IsValid(pnl) then return end // Make sure panel is valid
     * 	
     * 	pnl:DisableLerp()
     * 	pnl:Stop()
     * 	pnl.SetPosReal = nil
     * 	
     * 	pnl:LerpPositions( newSpeed, ease )
     * 	
     * end
     * 
     * // Creates a function for changing the Lerp animation speed of a panel. 
     */
    public DisableLerp(): void;
    
    /**
     * Returns the linear distance from the centre of this panel object and another. 
     * @param tgtPanel  The target object with which to compare position. 
     * @returns The linear (straight-line) distance between the centres of the two objects. 
     */
    public Distance(tgtPanel: Panel): number;
    
    /**
     * Returns the distance between the centre of this panel object and a specified point (local to the parent panel). 
     * @param posX  The horizontal (x) position in pixels of the point to compare with. Local to the parent panel, or container. 
     * @param posY  The vertical (y) position in pixels of the point to compare with. Local to the parent panel, or container. 
     * @returns The linear (straight-line) distance between the specified point and the centre of the panel object. 
     */
    public DistanceFrom(posX: number, posY: number): number;
    
    /**
     * Sets the dock type of the panel.
     * 
     * **Note:**
     * >After using this function, if you want to get the correct panel's bounds (position, size), use {{ClassFunction|Panel|InvalidateParent}} (use '''true''' as argument if you need to update immediately) 
     * @param dockType  Dock type using {{Enum|DOCK}}. 
     * @example
     * 
     * local f = vgui.Create( "DFrame" )
     * f:SetTitle( "Dock Test" )
     * f:SetSize( 256, 256 )
     * f:Center()
     * f:MakePopup()
     * 
     * local p = vgui.Create( "DPanel", f )
     * p:Dock( FILL )
     * p:DockMargin( 0, 0, 0, 0 )
     * 
     * for i = 0, 10, 1 do
     * 	local l = vgui.Create( "DLabel", p )
     * 	l:Dock( TOP )
     * 	l:DockMargin( 4, 0, 0, 0 ) // shift to the right
     * 	l:SetColor( color_black )
     * 	l:SetText( "Hi! I'm a label!" )
     * end
     * 
     * // Example docking including DockMargin. Provided by Walrus Viking in [http://facepunch.com/showthread.php?t=1439021&p=47095061&viewfull=1#post47095061 this] Facepunch post.@example
     * 
     * local frame = vgui.Create("DFrame")
     * frame:SetSize(600, 300)
     * frame:SetTitle("Docking Demonstration")
     * frame:Center()
     * frame:MakePopup(true)
     * 
     * local panel = vgui.Create("DPanel", frame) //Create a panel on the left
     * panel:SetSize(300, 0) //Height doesn't matter since we're docking it to the left anyways
     * panel:Dock(LEFT)
     * local fill = vgui.Create("DButton", panel) //Create a button and dock it
     * fill:SetText("FILL")
     * fill:Dock(FILL)
     * local left = vgui.Create("DButton", panel)
     * left:SetText("LEFT")
     * left:Dock(LEFT)
     * local right = vgui.Create("DButton", panel)
     * right:SetText("RIGHT")
     * right:Dock(RIGHT)
     * local top = vgui.Create("DButton", panel)
     * top:SetText("TOP")
     * top:Dock(TOP)
     * local bottom = vgui.Create("DButton", panel)
     * bottom:SetText("BOTTOM")
     * bottom:Dock(BOTTOM)
     * 
     * local panel = vgui.Create("DPanel", frame) //Do the same thing on the right, but this time with top and bottom before left and right
     * panel:SetSize(300, 0)
     * panel:Dock(RIGHT)
     * local fill = vgui.Create("DButton", panel)
     * fill:SetText("FILL")
     * fill:Dock(FILL)
     * local top = vgui.Create("DButton", panel)
     * top:SetText("TOP")
     * top:Dock(TOP)
     * local bottom = vgui.Create("DButton", panel)
     * bottom:SetText("BOTTOM")
     * bottom:Dock(BOTTOM)
     * local left = vgui.Create("DButton", panel)
     * left:SetText("LEFT")
     * left:Dock(LEFT)
     * local right = vgui.Create("DButton", panel)
     * right:SetText("RIGHT")
     * right:Dock(RIGHT)
     * 
     * // Example showing how multiple docked elements behave. 
     */
    public Dock(dockType: DOCK): void;
    
    /**
     * Sets the dock margin of the panel.
     * 
     * The dock margin is the extra space that will be left around the edge when this element is docked inside its parent element. 
     * @param marginLeft  The left margin to the parent. 
     * @param marginTop  The top margin to the parent. 
     * @param marginRight  The right margin to the parent. 
     * @param marginBottom  The bottom margin to the parent. 
     * @example
     * 
     * local frame = vgui.Create("DFrame")
     * frame:SetSize(600, 300)
     * frame:SetTitle("Docking Demonstration")
     * frame:Center()
     * frame:MakePopup(true)
     * 
     * local panel = vgui.Create("DPanel", frame)
     * panel:DockMargin(10, 20, 30, 40)
     * panel:DockPadding(40, 30, 20, 10)
     * panel:Dock(FILL)
     * 
     * local button = vgui.Create("DButton", panel)
     * button:SetText("Lopsided proportions!")
     * button:Dock(FILL)
     * 
     * // Example showing the effects of DockMargin and DockPadding 
     */
    public DockMargin(marginLeft: number, marginTop: number, marginRight: number, marginBottom: number): void;
    
    /**
     * Sets the dock padding of the panel.
     * 
     * The dock padding is the extra space that will be left around the edge when child elements are docked inside this element. 
     * @param paddingLeft  The left padding to the parent. 
     * @param paddingTop  The top padding to the parent. 
     * @param paddingRight  The right padding to the parent. 
     * @param paddingBottom  The bottom padding to the parent. 
     * @example
     * 
     * local frame = vgui.Create("DFrame")
     * frame:SetSize(600, 300)
     * frame:SetTitle("Docking Demonstration")
     * frame:Center()
     * frame:MakePopup(true)
     * 
     * local panel = vgui.Create("DPanel", frame)
     * panel:DockMargin(10, 20, 30, 40)
     * panel:DockPadding(40, 30, 20, 10)
     * panel:Dock(FILL)
     * 
     * local button = vgui.Create("DButton", panel)
     * button:SetText("Lopsided proportions!")
     * button:Dock(FILL)
     * 
     * // Example showing the effects of DockMargin and DockPadding 
     */
    public DockPadding(paddingLeft: number, paddingTop: number, paddingRight: number, paddingBottom: number): void;
    
    /**
     * Makes the panel "lock" the screen until it is removed. It will silently fail if used while cursor is not visible. Call {{ClassFunction|Panel|MakePopup}} before calling this function.
     * 
     * **Bug [#2015](https://github.com/Facepunch/garrysmod-issues/issues/2015):**
     * >Fixed=
     * 
     * **Bug [#3457](https://github.com/Facepunch/garrysmod-issues/issues/3457):**
     * >You can still click in the world even if locked. 
     */
    public DoModal(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Called by {{ClassFunction|Panel|DragMouseRelease}} when a user clicks one mouse button whilst dragging with another. 
     * @returns Always returns ''true''. 
     */
    public DragClick(): boolean;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Called by {{LibraryFunction|dragndrop|HoverThink}} to perform actions on an object that is dragged and hovered over another. 
     * @param HoverTime  If this time is greater than 0.1, {{ClassFunction|Panel|DragHoverClick}}, passing it as an argument. 
     */
    public DragHover(HoverTime: number): void;
    
    /**
     * Called when an object is dragged and hovered over this panel for 0.1 seconds.
     * 
     * This is used by {{Type|DPropertySheet}} and {{Type|DTree}}, for example to open a tab or expand a node when an object is hovered over it. 
     * @param hoverTime  The time the object was hovered over this panel. 
     */
    protected DragHoverClick(hoverTime: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Called to end a drag and hover action. This resets the panel's {{HookFunction|PANEL|PaintOver}} method, and is primarily used by {{LibraryFunction|dragndrop|StopDragging}}. 
     */
    public DragHoverEnd(): void;
    
    /**
     * Called to inform the {{Lib|dragndrop}} that a mouse button is being held down on a panel object. 
     * @param mouseCode  The code for the mouse button pressed, passed by, for example, {{HookFunction|PANEL|OnMousePressed}}. See the {{Enum|MOUSE}}. 
     */
    public DragMousePress(mouseCode: MOUSE): void;
    
    /**
     * Called to inform the {{Lib|dragndrop}} that a mouse button has been depressed on a panel object. 
     * @param mouseCode  The code for the mouse button pressed, passed by, for example, {{HookFunction|PANEL|OnMouseReleased}}. See the {{Enum|MOUSE}}. 
     * @returns ''true'' if an object was being dragged, otherwise ''false''. 
     */
    public DragMouseRelease(mouseCode: MOUSE): boolean;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Called to draw the drop target when an object is being dragged across another. See {{ClassFunction|Panel|SetDropTarget}}. 
     * @param x  The x coordinate of the top-left corner of the drop area. 
     * @param y  The y coordinate of the top-left corner of the drop area. 
     * @param width  The width of the drop area. 
     * @param height  The height of the drop area. 
     */
    public DrawDragHover(x: number, y: number, width: number, height: number): void;
    
    /**
     * Draws a coloured rectangle to fill the panel object this method is called on. The colour is set using {{LibraryFunction|surface|SetDrawColor}}. This should only be called within the object's {{HookFunction|PANEL|Paint}} or {{HookFunction|PANEL|PaintOver}} hooks, as a shortcut for {{LibraryFunction|surface|DrawRect}}. 
     */
    public DrawFilledRect(): void;
    
    /**
     * Draws a hollow rectangle the size of the panel object this method is called on, with a border width of 1 px. The border colour is set using {{LibraryFunction|surface|SetDrawColor}}. This should only be called within the object's {{HookFunction|PANEL|Paint}} or {{HookFunction|PANEL|PaintOver}} hooks, as a shortcut for {{LibraryFunction|surface|DrawOutlinedRect}}. 
     */
    public DrawOutlinedRect(): void;
    
    /**
     * Used to draw the magenta highlight colour of a panel object when it is selected. This should be called in the object's {{HookFunction|PANEL|PaintOver}} hook. Once this is implemented, the highlight colour will be displayed only when the object is selectable and selected. This is achieved using {{ClassFunction|Panel|SetSelectable}} and {{ClassFunction|Panel|SetSelected}} respectively. 
     */
    public DrawSelections(): void;
    
    /**
     * Used to draw the text in a {{Type|DTextEntry}} within a derma skin. This should be called within the {{HookFunction|SKIN|PaintTextEntry}} skin hook.
     * 
     * [[Category:TextEntry]] 
     * @param textCol  The colour of the main text. 
     * @param highlightCol  The colour of the selection highlight (when selecting text). 
     * @param cursorCol  The colour of the text cursor (or caret). 
     * @example
     * 
     * function SKIN:PaintTextEntry( panel, w, h )
     * 
     * 	if ( panel.m_bBackground ) then
     * 	
     * 		if ( panel:GetDisabled() ) then
     * 			self.tex.TextBox_Disabled( 0, 0, w, h )
     * 		elseif ( panel:HasFocus() ) then
     * 			self.tex.TextBox_Focus( 0, 0, w, h )
     * 		else
     * 			self.tex.TextBox( 0, 0, w, h )
     * 		end
     * 	
     * 	end
     * 	
     * 	panel:DrawTextEntryText( panel.m_colText, panel.m_colHighlight, panel.m_colCursor )
     * 	
     * end
     * 
     * // The paint function used in the default derma skin. 
     */
    public DrawTextEntryText(textCol: table, highlightCol: table, cursorCol: table): void;
    
    /**
     * Draws a textured rectangle to fill the panel object this method is called on. The texture is set using {{LibraryFunction|surface|SetTexture}} or {{LibraryFunction|surface|SetMaterial}}. This should only be called within the object's {{HookFunction|PANEL|Paint}} or {{HookFunction|PANEL|PaintOver}} hooks, as a shortcut for {{LibraryFunction|surface|DrawTexturedRect}}. 
     */
    public DrawTexturedRect(): void;
    
    /**
     * Makes this panel droppable. This is used with {{ClassFunction|Panel|Receiver}} to create drag and drop events. 
     * @param name  Name of your droppable panel 
     * @returns Blank table 
     */
    public Droppable(name: string): table;
    
    /**
     * Called when this panel is dropped onto another panel.
     * 
     * Only works for panels derived from {{Type|DDragBase}}. 
     * @param pnl  The panel we are dropped onto 
     */
    protected DroppedOn(pnl: Panel): void;
    
    /**
     * Completes a box selection. If the end point of the selection box is within the selection canvas, mouse capture is disabled for the panel object, and the selected state of each child object within the selection box is toggled. 
     * @returns Whether the end point of the selection box was within the selection canvas. 
     */
    public EndBoxSelection(): boolean;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Used to run commands within a {{Type|DHTML}} window. 
     * @param cmd  The command to be run. 
     */
    public Exec(cmd: string): void;
    
    /**
     * Finds a panel in its children(and sub children) with the given name. 
     * @param panelName  The name of the panel that should be found. 
     * @returns foundPanel 
     */
    public Find(panelName: string): Panel;
    
    /**
     * Focuses the next panel in the focus queue. 
     */
    public FocusNext(): void;
    
    /**
     * Focuses the previous panel in the focus queue. 
     */
    public FocusPrevious(): void;
    
    /**
     * Called when the panel should generate example use case / example code to use for this panel. Used in the panel opened by '''derma_controls''' console command. 
     * @param classRef  The classname of the panel to generate example for. This will be the class name of your panel. 
     * @param dpropertysheet  A {{Type|DPropertySheet}} to add your example to. See examples below. 
     * @param width  Width of the property sheet? 
     * @param height  Width of the property sheet? 
     * @example
     * 
     * function PANEL:GenerateExample( ClassName, PropertySheet, Width, Height )
     * 
     * 	local ctrl = vgui.Create( ClassName )
     * 	ctrl:SetText( "Example Button" )
     * 	ctrl:SetWide( 200 )
     * 
     * 	PropertySheet:AddSheet( ClassName, ctrl, nil, true, true )
     * 
     * end
     * 
     * derma.DefineControl( "DButton", "A standard Button", PANEL, "DLabel" )
     * 
     * // Example usage of this hook from DButton's code. 
     */
    protected GenerateExample(classRef: string, dpropertysheet: DPropertySheet, width: number, height: number): void;
    
    /**
     * Returns the alpha multiplier for this panel. 
     * @returns alphaMul 
     */
    public GetAlpha(): number;
    
    /**
     * Returns the position and size of the panel.
     * 
     * This is equivalent to calling {{ClassFunction|Panel|GetPos}} and {{ClassFunction|Panel|GetSize}} together. 
     * @returns [The x coordinate of the panel, relative to its parent's top left., The y coordinate of the panel, relative to its parent's top left., The width of the panel., The height of the panel.] 
     * !TupleReturn
     */
    public GetBounds(): [number, number, number, number];
    
    /**
     * Returns the position/offset of the caret (or text cursor) in a text-based panel object.
     * 
     * [[Category:TextEntry]] 
     * @returns The caret position/offset from the start of the text. A value of ''0'' means the caret sits before the first character. 
     */
    public GetCaretPos(): number;
    
    /**
     * Gets a child by its index. 
     * @param childIndex  The index of the child to get.
     * 
     * **Note:**
     * >This index starts at 0, except when you use this on a {{Type|DMenu}}. 
     */
    public GetChild(childIndex: number): void;
    
    /**
     * Gets a child object's position relative to this panel object. The number of levels is not relevant; the child may have many parents between itself and the object on which the method is called. 
     * @param pnl  The panel to get the position of. 
     * @returns [The horizontal (x) position of the child relative to this panel object., The vertical (y) position of the child relative to this panel object.] 
     * !TupleReturn
     */
    public GetChildPosition(pnl: Panel): [number, number];
    
    /**
     * Returns a table with all the child panels of the panel. 
     * @returns children 
     */
    public GetChildren(): table;
    
    /**
     * Returns a table of all visible, selectable children of the panel object that lie at least partially within the specified rectangle. 
     * @param x  The horizontal (x) position of the top-left corner of the rectangle, relative to the panel object. 
     * @param y  The vertical (y) position of the top-left corner of the rectangle, relative to the panel object. 
     * @param w  The width of the rectangle. 
     * @param h  The height of the rectangle. 
     * @returns A table of panel objects that lie at least partially within the specified rectangle. 
     */
    public GetChildrenInRect(x: number, y: number, w: number, h: number): table;
    
    /**
     * Returns the class name of the panel. 
     * @returns className 
     */
    public GetClassName(): string;
    
    /**
     * Returns the child of this panel object that is closest to the specified point. The point is relative to the object on which the method is called. The distance the child is from this point is also returned. 
     * @param x  The horizontal (x) position of the point. 
     * @param y  The vertical (y) position of the point. 
     * @returns [The child object that was closest to the specified point., The distance that this child was from the point.] 
     * !TupleReturn
     */
    public GetClosestChild(x: number, y: number): [Panel, number];
    
    /**
     * Gets the size of the content/children within a panel object.
     * 
     * Only works with {{Type|Label}} derived panels by default such as {{Type|DLabel}}.
     * 
     * Will also work on any panel that manually implements this method.
     * 
     * [[Category:Label]] 
     * @returns [The content width of the object., The content height of the object.] 
     * @example
     * 
     * local PANEL = {}
     * 
     * function PANEL:GetContentSize()
     * 	surface.SetFont( self:GetFont() )
     * 	return surface.GetTextSize( self:GetText() )
     * end
     * 
     * vgui.Register( "DTextEntry_Edit", PANEL, "DTextEntry" )
     * 
     * // Somewhere else, to test the newly created panel
     * local frame = vgui.Create( "DFrame" )
     * frame:SetSize( 500, 200 )
     * frame:Center()
     * frame:MakePopup()
     * 
     * local txt = vgui.Create( "DTextEntry_Edit", frame )
     * txt:SetPos( 5, 25 )
     * txt:SetSize( 100, 10 )
     * txt:SetText( "Really long string that is bigger than 100 pixels" )
     * txt:SizeToContentsX( 5 ) // Must be called after setting the text
     * txt:SizeToContentsY( 5 ) // These two functions will not have effect on a normal DTextEntry
     * 
     * // Demonstrates how to implement this function in your own panel. 
     * !TupleReturn
     */
    public GetContentSize(): [number, number];
    
    /**
     * Gets the value of a cookie stored by the panel object. This can also be done with {{LibraryFunction|cookie|GetString}}, using the panel's cookie name, a fullstop, and then the actual name of the cookie.
     * 
     * Make sure the panel's cookie name has not changed since writing, or the cookie will not be accessible. This can be done with {{ClassFunction|Panel|GetCookieName}} and {{ClassFunction|Panel|SetCookieName}}. 
     * @param cookieName  The name of the cookie from which to retrieve the value. 
     * @param defaultVal  The default value to return if the cookie does not exist. 
     * @returns The value of the stored cookie, or the default value should the cookie not exist. 
     */
    public GetCookie(cookieName: string, defaultVal: string): string;
    
    /**
     * Gets the name the panel uses to store cookies. This is set with {{ClassFunction|Panel|SetCookieName}}. 
     * @returns The name the panel uses when reading or writing cookies. The format used is as follows: <code>panelCookieName.individualCookieName</code> 
     */
    public GetCookieName(): string;
    
    /**
     * Gets the value of a cookie stored by the panel object, as a number. This can also be done with {{LibraryFunction|cookie|GetNumber}}, using the panel's cookie name, a fullstop, and then the actual name of the cookie.
     * 
     * Make sure the panel's cookie name has not changed since writing, or the cookie will not be accessible. This can be done with {{ClassFunction|Panel|GetCookieName}} and {{ClassFunction|Panel|SetCookieName}}. 
     * @param cookieName  The name of the cookie from which to retrieve the value. 
     * @param defaultVal  The default value to return if the cookie does not exist. 
     * @returns The number value of the stored cookie, or the default value should the cookie not exist. 
     */
    public GetCookieNumber(cookieName: string, defaultVal: number): number;
    
    /**
     * Returns a dock enum for the panel's current docking type. 
     * @returns The dock enum for the panel. See {{Enum|DOCK}}. 
     */
    public GetDock(): DOCK;
    
    /**
     * Returns the docked margins of the panel. (set by {{ClassFunction|Panel|DockMargin}}) 
     * @returns [Left margin., Top margin., Right margin., Bottom margin.] 
     * !TupleReturn
     */
    public GetDockMargin(): [number, number, number, number];
    
    /**
     * Returns the docked padding of the panel. (set by {{ClassFunction|Panel|DockPadding}}) 
     * @returns [Left padding., Top padding., Right padding., Bottom padding.] 
     * !TupleReturn
     */
    public GetDockPadding(): [number, number, number, number];
    
    /**
     * Returns the name of the font that the panel renders its text with.
     * 
     * This is the same font name set with {{ClassFunction|Panel|SetFontInternal}}. 
     * @returns fontName 
     */
    public GetFont(): string;
    
    /**
     * Returns the panel's HTML material. Only works with {{Type|Awesomium}}, {{Type|HTML}} and {{Type|DHTML}} panels that have been fully loaded.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     * @returns The HTML material used by the panel. Typically starts with "__vgui_texture_" followed by an incremental number. 
     * @example
     * 
     * AddCSLuaFile()
     * 
     * ENT.Type = "anim"
     * ENT.Base = "base_entity"
     * 
     * ENT.PrintName = "Web Screen"
     * ENT.Author = "Microflash"
     * ENT.Spawnable = true
     * 
     * if ( CLIENT ) then
     * 	ENT.Mat = nil
     * 	ENT.Panel = nil
     * end
     * 
     * function ENT:Initialize()
     * 
     * 	if ( SERVER ) then
     * 		
     * 		self:SetModel("models/props_phx/rt_screen.mdl")
     * 		self:SetMoveType(MOVETYPE_VPHYSICS)
     * 		self:SetSolid(SOLID_VPHYSICS)
     * 		
     * 		self:PhysicsInit(SOLID_VPHYSICS)
     * 		
     * 		self:Freeze()
     * 		
     * 	else
     * 	
     * 		// Reset material and panel and load DHTML panel
     * 		self.Mat = nil
     * 		self.Panel = nil
     * 		self:OpenPage()
     * 		
     * 	end
     * 	
     * end
     * 
     * function ENT:Freeze()
     * 	local phys = self:GetPhysicsObject()
     * 	if (IsValid(phys)) then phys:EnableMotion(false) end
     * end
     * 
     * // Load the DHTML reference panel
     * function ENT:OpenPage()
     * 
     * 	// Iff for some reason a panel is already loaded, delete it
     * 	if(self.Panel) then
     * 	
     * 		self.Panel:Remove()
     * 		self.Panel = nil
     * 	
     * 	end
     * 
     * 	// Create a web page panel and fill the entire screen
     * 	self.Panel = vgui.Create("DHTML")
     * 	self.Panel:Dock(FILL)
     * 	
     * 	// Wiki page URL
     * 	local url = <nowiki>"http://wiki.garrysmod.com/page/Category:Material"</nowiki>
     * 	
     * 	// Load the wiki page
     * 	self.Panel:OpenURL(url)
     * 	
     * 	// Hide the panel
     * 	self.Panel:SetAlpha(0)
     * 	self.Panel:SetMouseInputEnabled(false)
     * 	
     * 	// Disable HTML messages
     * 	function self.Panel:ConsoleMessage(msg) end
     * 
     * end
     * 
     * function ENT:Draw()
     * 
     * 	// Iff the material has already been grabbed from the panel
     * 	if(self.Mat) then
     * 		
     * 		// Apply it to the screen/model
     * 		if(render.MaterialOverrideByIndex) then
     * 			render.MaterialOverrideByIndex(1, self.Mat)
     * 		else
     * 			render.ModelMaterialOverride(self.Mat)
     * 		end
     * 		
     * 	// Otherwise, check that the panel is valid and the HTML material is finished loading
     * 	elseif(self.Panel && self.Panel:GetHTMLMaterial()) then
     * 
     * 		// Get the html material
     * 		local html_mat = self.Panel:GetHTMLMaterial()
     * 		
     * 		// Used to make the material fit the model screen
     * 		// May need to be changed iff using a different model
     * 		// For the multiplication number it goes in segments of 512
     * 		// Based off the players screen resolution
     * 		local scale_x, scale_y = ScrW()/2048, ScrH()/1024
     * 		
     * 		// Create a new material with the proper scaling and shader
     * 		local matdata =
     * 		{
     * 			["$basetexture"]=html_mat:GetName(),
     * 			["$basetexturetransform"]="center 0 0 scale "..scale_x.." "..scale_y.." rotate 0 translate 0 0",
     * 			["$model"]=1
     * 		}
     * 		// Unique ID used for material name
     * 		local uid = string.Replace(html_mat:GetName(), "__vgui_texture_", "")
     * 		
     * 		// Create the model material
     * 		self.Mat = CreateMaterial("WebMaterial_"..uid, "VertexLitGeneric", matdata)
     * 	
     * 	end
     * 
     * 	// Render the model
     * 	self:DrawModel()
     * 	
     * 	// Reset the material override or else everything will have a HTML material!
     * 	render.ModelMaterialOverride(nil)
     * 
     * end
     * 
     * function ENT:OnRemove()
     * 	// Make sure the panel is removed too
     * 	if(self.Panel) then self.Panel:Remove() end
     * end
     * 
     * // Defines a new entity which can display a web page on a TV screen. 
     */
    public GetHTMLMaterial(): IMaterial;
    
    /**
     * Returns the internal name of the panel. 
     * @returns name 
     */
    public GetName(): string;
    
    /**
     * Returns the number of lines in a {{Type|RichText}}. You must wait a couple frames before calling this after using {{ClassFunction|Panel|AppendText}} or {{ClassFunction|Panel|SetText}}, otherwise it will return the number of text lines before the text change.
     * 
     * **Note:**
     * >Even though this function can be called on any panel, it will only work with {{Type|RichText}}
     * 
     * [[Category:RichText]] 
     * @returns The number of lines. 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(200, 224)
     * TextFrame:Center()
     * TextFrame:SetTitle("Generic Frame")
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Throw some text in the panel
     * richtext:SetText("This is a block of text demonstrating how line wrapping and panel size relates to the number of lines shown inside of a RichText panel.")
     * 
     * // Keep track of PerformLayout calls
     * richtext.layoutCount = 0
     * 
     * // Custom function for this example
     * function richtext:NumLinesExample()
     * 	print("PerformLayout called "..self.layoutCount.." times: "..richtext:GetNumLines().." line(s) returned")	
     * end
     * 
     * // Print # of lines before any layouts
     * richtext:NumLinesExample()
     * 
     * // Render update
     * function richtext:PerformLayout()
     * 
     * 	self.layoutCount = self.layoutCount + 1
     * 	self:NumLinesExample()	// Print current # of lines
     * 
     * end
     * 
     * // Creates a rich text panel with a block of text and prints out the number of text lines before and after ''PerformLayout'' is called. 
     */
    public GetNumLines(): number;
    
    /**
     * Returns the parent of the panel, returns nil if there is no parent. 
     * @returns The parent of given panel 
     */
    public GetParent(): Panel;
    
    /**
     * Returns the position of the panel relative to its {{ClassFunction|Panel|GetParent}}.
     * 
     * If you require the panel's position '''and''' size, consider using {{ClassFunction|Panel|GetBounds}} instead.
     * 
     * If you need the position in screen space, see {{ClassFunction|Panel|LocalToScreen}}. 
     * @returns [X coordinate, relative to this panels parents top left corner., Y coordinate, relative to this panels parents top left corner.] 
     * !TupleReturn
     */
    public GetPos(): [number, number];
    
    /**
     * Returns a table of all children of the panel object that are selected. This is recursive, and the returned table will include tables for any child objects that also have children. This means that not all first-level members in the returned table will be of type {{Type|Panel}}. 
     * @returns A table of any child objects that are selected, including tables for children of the child objects (These tables may also contain table members, as the method is recursive). 
     */
    public GetSelectedChildren(): table;
    
    /**
     * Returns the panel object (''self'') if it has been enabled as a selection canvas. This is achieved using {{ClassFunction|Panel|SetSelectionCanvas}}. 
     * @returns The panel object this method was called on if enabled as a selection canvas, otherwise ''nil''. 
     */
    public GetSelectionCanvas(): Panel;
    
    /**
     * Returns the size of the panel.
     * 
     * If you require both the panel's position and size, consider using {{ClassFunction|Panel|GetBounds}} instead. 
     * @returns [width, height] 
     * !TupleReturn
     */
    public GetSize(): [number, number];
    
    /**
     * Returns the table for the derma skin currently being used by this panel object. 
     * @returns The derma skin table currently being used by this object. 
     */
    public GetSkin(): table;
    
    /**
     * Returns the internal Lua table of the panel. 
     * @returns A table containing all the members of given panel object. 
     */
    public GetTable(): table;
    
    /**
     * Returns the height of the panel. 
     * @returns height 
     */
    public GetTall(): number;
    
    /**
     * Returns the panel's text (where applicable).
     * 
     * This method returns a maximum of 1023 bytes, except for {{Type|DTextEntry}}. 
     * @returns The panel's text. 
     */
    public GetText(): string;
    
    /**
     * Gets the left and top text margins of a text-based panel object, such as a {{Type|DButton}} or {{Type|DLabel}}. This is set with {{ClassFunction|Panel|SetTextInset}}.
     * 
     * [[Category:Label]] 
     * @returns [The left margin of the text, in pixels., The top margin of the text, in pixels.] 
     * !TupleReturn
     */
    public GetTextInset(): [number, number];
    
    /**
     * Gets the size of the text within a {{Type|Label}} derived panel.
     * 
     * **Bug [#2576](https://github.com/Facepunch/garrysmod-issues/issues/2576):**
     * >This can return 0 incorrectly.
     * 
     * [[Category:Label]] 
     * @returns [The width of the text in the DLabel., The height of the text in the DLabel.] 
     * !TupleReturn
     */
    public GetTextSize(): [number, number];
    
    /**
     * Gets valid receiver slot of currently dragged panel. 
     * @returns [The panel this was called on if a valid receiver slot exists, otherwise false., The slot table.] 
     * !TupleReturn
     */
    public GetValidReceiverSlot(): [Panel, table];
    
    /**
     * Returns the value the panel holds.
     * 
     * In engine is only implemented for {{Type|CheckButton}}, {{Type|Label}} and {{Type|TextEntry}} as a string and for those elements has a hard coded limit of 8092 characters. 
     * @returns The value the panel holds. 
     * @example
     * 
     * local TextEntry = vgui.Create( "TextEntry" )
     * TextEntry:SetText( "Hello world!" )
     * print( TextEntry:GetValue() )
     * 
     * // Returns the string typed in a TextEntry. 
     */
    public GetValue(): any;
    
    /**
     * Returns the width of the panel. 
     * @returns width 
     */
    public GetWide(): number;
    
    /**
     * Returns the Z position of the panel. 
     * @returns The Z order position of the panel. 
     */
    public GetZPos(): number;
    
    /**
     * Goes back one page in the HTML panel's history if available.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     */
    public GoBack(): void;
    
    /**
     * Goes forward one page in the HTML panel's history if available.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     */
    public GoForward(): void;
    
    /**
     * Goes to the page in the HTML panel's history at the specified relative offset.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     * @param offset  The offset in the panel's back/forward history, relative to the current page, that you would like to skip to. Because this is relative, 0 = current page while negative goes back and positive goes forward. For example, -2 will go back 2 pages in the history. 
     */
    public GoToHistoryOffset(offset: number): void;
    
    /**
     * Causes a {{Type|RichText}} element to scroll to the bottom of its text.
     * 
     * [[Category:RichText]] 
     */
    public GotoTextEnd(): void;
    
    /**
     * Causes a {{Type|RichText}} element to scroll to the top of its text.
     * 
     * **Bug [#2239](https://github.com/Facepunch/garrysmod-issues/issues/2239):**
     * >This does not work on the same frame as {{ClassFunction|Panel|SetText}}.
     * 
     * [[Category:RichText]] 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(250, 200)
     * TextFrame:Center()
     * TextFrame:SetTitle("#ServerBrowser_ServerWarningTitle")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Yellow colored localized text about player capacity
     * richtext:InsertColorChange(255, 255, 192, 255)
     * richtext:AppendText("#ServerBrowser_ServerWarning_MaxPlayers")
     * 
     * // Create a button that moves the text back to the start
     * local topbutton = vgui.Create("DButton", richtext)
     * topbutton:SetSize(60, 20)
     * topbutton:SetPos(160, 146)
     * topbutton:SetText("Back to Top")
     * 
     * // When clicked, go to the start of the text
     * topbutton.DoClick = function() richtext:GotoTextStart()	end
     * 
     * // Apply background color and font
     * function richtext:PerformLayout()
     * 	
     * 	self:SetFontInternal("Trebuchet18")
     * 	self:SetBGColor(Color(64, 64, 84))
     * 	
     * end
     * 
     * // Creates a RichText panel with a "Back to Top" button which scrolls the text to the start. 
     */
    public GotoTextStart(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Used by {{ClassFunction|Panel|ApplyGWEN}} to apply the ''CheckboxText'' property to a {{Type|DCheckBoxLabel}}. This does exactly the same as {{ClassFunction|Panel|GWEN_SetText}}, but exists to cater for the seperate GWEN properties. 
     * @param txt  The text to be applied to the DCheckBoxLabel. 
     */
    public GWEN_SetCheckboxText(txt: string): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Used by {{ClassFunction|Panel|ApplyGWEN}} to apply the ''ControlName'' property to a panel. This calls {{ClassFunction|Panel|SetName}}. 
     * @param name  The new name to apply to the panel. 
     */
    public GWEN_SetControlName(name: string): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Used by {{ClassFunction|Panel|ApplyGWEN}} to apply the ''Dock'' property to a  panel object. This calls {{ClassFunction|Panel|Dock}}. 
     * @param dockState  The dock mode to pass to the panel's ''Dock'' method. This reads a string and applies the approriate {{Enum|DOCK}}.
     * * ''Right'': Dock right.
     * * ''Left'': Dock left.
     * * ''Bottom'': Dock at the bottom.
     * * ''Top'': Dock at the top.
     * * ''Fill'': Fill the parent panel. 
     */
    public GWEN_SetDock(dockState: string): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Used by {{ClassFunction|Panel|ApplyGWEN}} to apply the ''HorizontalAlign'' property to a  panel object. This calls {{ClassFunction|Panel|SetContentAlignment}}. 
     * @param hAlign  The alignment, as a string, to pass to {{ClassFunction|Panel|SetContentAlignment}}. Accepts:
     * * ''Right'': Align mid-right.
     * * ''Left'': Align mid-left.
     * * ''Center'': Align mid-center. 
     */
    public GWEN_SetHorizontalAlign(hAlign: string): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Used by {{ClassFunction|Panel|ApplyGWEN}} to apply the ''Margin'' property to a  panel object. This calls {{ClassFunction|Panel|DockMargin}}. 
     * @param margins  A four-membered table containing the margins as numbers:
     * * {{FuncArg|number|left|The left margin.}}
     * * {{FuncArg|number|top|The top margin.}}
     * * {{FuncArg|number|right|The right margin.}}
     * * {{FuncArg|number|bottom|The bottom margin.}} 
     */
    public GWEN_SetMargin(margins: table): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Used by {{ClassFunction|Panel|ApplyGWEN}} to apply the ''Max'' property to a  {{Type|DNumberWang}}, {{Type|Slider}}, {{Type|DNumSlider}} or {{Type|DNumberScratch}}. This calls ''SetMax'' on one of the previously listed methods. 
     * @param maxValue  The maximum value the element is to permit. 
     */
    public GWEN_SetMax(maxValue: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Used by {{ClassFunction|Panel|ApplyGWEN}} to apply the ''Min'' property to a  {{Type|DNumberWang}}, {{Type|Slider}}, {{Type|DNumSlider}} or {{Type|DNumberScratch}}. This calls ''SetMin'' on one of the previously listed methods. 
     * @param minValue  The minimum value the element is to permit. 
     */
    public GWEN_SetMin(minValue: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Used by {{ClassFunction|Panel|ApplyGWEN}} to apply the ''Position'' property to a  panel object. This calls {{ClassFunction|Panel|SetPos}}. 
     * @param pos  A two-membered table containing the x and y coordinates as numbers:
     * * {{FuncArg|number|x|The x coordinate.}}
     * * {{FuncArg|number|y|The y coordinate.}} 
     */
    public GWEN_SetPosition(pos: table): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Used by {{ClassFunction|Panel|ApplyGWEN}} to apply the ''Size'' property to a  panel object. This calls {{ClassFunction|Panel|SetSize}}. 
     * @param size  A two-membered table containing the width and heights as numbers:
     * * {{FuncArg|number|w|The width.}}
     * * {{FuncArg|number|h|The height.}} 
     */
    public GWEN_SetSize(size: table): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Used by {{ClassFunction|Panel|ApplyGWEN}} to apply the ''Text'' property to a panel. 
     * @param txt  The text to be applied to the panel. 
     */
    public GWEN_SetText(txt: string): void;
    
    /**
     * Returns whenever the panel has child panels. 
     * @returns hasChilds 
     */
    public HasChildren(): boolean;
    
    /**
     * Returns if the panel is focused. 
     * @returns hasFocus 
     */
    public HasFocus(): boolean;
    
    /**
     * Returns if the panel or any of its children(sub children and so on) has the focus. 
     * @returns hasHierarchicalFocus 
     */
    public HasHierarchicalFocus(): boolean;
    
    /**
     * Returns whether the panel is a descendent of the given panel. 
     * @param parentPanel 
     * @returns True if the panel is contained within parentPanel. 
     */
    public HasParent(parentPanel: Panel): boolean;
    
    /**
     * Makes a panel invisible. 
     */
    public Hide(): void;
    
    /**
     * Called when the panel is created. This is called for each base type that the panel has. 
     * @example
     * 
     * local BASE = {}
     * function BASE:Init()
     * 	print("Base Init Called")
     * end
     * 
     * local PANEL = {}
     * function PANEL:Init()
     * 	print("Panel Init Called")
     * end
     * 
     * vgui.Register("MyBase", BASE, "DFrame")
     * vgui.Register("MyPanel", PANEL, "MyBase")
     * 
     * local panel = vgui.Create("MyPanel")
     * 
     * // Shows how this method is called recursively for each base type a panel has. 
     */
    protected Init(): void;
    
    /**
     * Marks the end of a clickable text segment in a {{Type|RichText}} element, started with {{ClassFunction|Panel|InsertClickableTextStart}}.
     * 
     * [[Category:RichText]] 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(250, 150)
     * TextFrame:Center()
     * TextFrame:SetTitle("RichText")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // First segment
     * richtext:InsertColorChange(255, 255, 255, 255)
     * richtext:AppendText("This is a Rich Text panel — a panel used in Source MP's default chat box and developer console.\n\nSee the ")
     * 
     * // Second segment
     * richtext:InsertColorChange(192, 192, 255, 255)
     * richtext:InsertClickableTextStart("OpenWiki")	// Make incoming text fire the "OpenWiki" value when clicked
     * richtext:AppendText("Garry's Mod Wiki")
     * richtext:InsertClickableTextEnd()	// End clickable text here
     * 
     * // Third segment
     * richtext:InsertColorChange(255, 255, 255, 255)
     * richtext:AppendText(" for information on how to use a Rich Text panel.")
     * 
     * // Background color
     * function richtext:PerformLayout() self:SetBGColor(Color(32, 32, 46)) end
     * 
     * // Handle any commands we get from the panel
     * function richtext:ActionSignal(signalName, signalValue)
     * 
     * 	// Some clickable text was clicked
     * 	if(signalName == "TextClicked") then
     * 	
     * 		// Open the wiki
     * 		if(signalValue == "OpenWiki") then
     * 		
     * 			<nowiki>gui.OpenURL("http://wiki.garrysmod.com/page/Category:RichText")</nowiki>
     * 		
     * 		end
     * 	
     * 	end
     * 
     * end
     * 
     * // Creates a panel with some information on RichText panels along with a click-able link to the {{Type|RichText}} page. 
     */
    public InsertClickableTextEnd(): void;
    
    /**
     * Starts the insertion of clickable text for a {{Type|RichText}} element. Any text appended with {{ClassFunction|Panel|AppendText}} between this call and {{ClassFunction|Panel|InsertClickableTextEnd}} will become clickable text.
     * 
     * The hook {{HookFunction|PANEL|ActionSignal}} is called when the text is clicked, with "TextClicked" as the signal name and ''signalValue'' as the signal value.
     * 
     * **Note:**
     * >The clickable text is a separate Derma panel which will not inherit the current font from the ''RichText''.
     * 
     * [[Category:RichText]] 
     * @param signalValue  The text passed as the action signal's value. 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(250, 150)
     * TextFrame:Center()
     * TextFrame:SetTitle("RichText")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // First segment
     * richtext:InsertColorChange(255, 255, 255, 255)
     * richtext:AppendText("This is a Rich Text panel — a panel used in Source MP's default chat box and developer console.\n\nSee the ")
     * 
     * // Second segment
     * richtext:InsertColorChange(192, 192, 255, 255)
     * richtext:InsertClickableTextStart("OpenWiki")	// Make incoming text fire the "OpenWiki" value when clicked
     * richtext:AppendText("Garry's Mod Wiki")
     * richtext:InsertClickableTextEnd()	// End clickable text here
     * 
     * // Third segment
     * richtext:InsertColorChange(255, 255, 255, 255)
     * richtext:AppendText(" for information on how to use a Rich Text panel.")
     * 
     * // Background color
     * function richtext:PerformLayout() self:SetBGColor(Color(32, 32, 46)) end
     * 
     * // Handle any commands we get from the panel
     * function richtext:ActionSignal(signalName, signalValue)
     * 
     * 	// Some clickable text was clicked
     * 	if (signalName == "TextClicked") then
     * 	
     * 		// Open the wiki
     * 		if (signalValue == "OpenWiki") then
     * 		
     * 			<nowiki>gui.OpenURL("http://wiki.garrysmod.com/page/Category:RichText")</nowiki>
     * 		
     * 		end
     * 	
     * 	end
     * 
     * end
     * 
     * // Creates a panel with some information on Rich Text panels along with a click-able link to the {{Type|RichText}} page. 
     */
    public InsertClickableTextStart(signalValue: string): void;
    
    /**
     * Inserts a color change in a {{Type|RichText}} element, which affects the color of all text added with {{ClassFunction|Panel|AppendText}} until another color change is applied.
     * [[Category:RichText]] 
     * @param r  The red value (0 - 255). 
     * @param g  The green value (0 - 255). 
     * @param b  The blue value (0 - 255). 
     * @param a  The alpha value (0 - 255). 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(200, 200)
     * TextFrame:Center()
     * TextFrame:SetTitle("Colored text")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * richtext:SetVerticalScrollbarEnabled(false)
     * 
     * // Text blocks
     * richtext:InsertColorChange(255, 255, 192, 255)
     * richtext:AppendText("This is an example of ")
     * 
     * richtext:InsertColorChange(0, 255, 0, 255)
     * richtext:AppendText("color coding ")
     * 
     * richtext:InsertColorChange(255, 255, 192, 255)
     * richtext:AppendText("different segments of text throughout a ")
     * 
     * richtext:InsertColorChange(255, 200, 0, 255)
     * richtext:AppendText("Rich Text panel.\n\n")
     * 
     * richtext:InsertColorChange(64, 0, 255, 255)
     * richtext:AppendText("Here is another line of text shown in the color ")
     * 
     * richtext:InsertColorChange(128, 0, 255, 255)
     * richtext:AppendText("purple.")
     * 
     * // When the panel is ready for layout, apply font and background color
     * function richtext:PerformLayout()
     * 	
     * 	self:SetFontInternal("Trebuchet18")
     * 	self:SetBGColor(Color(0, 16, 32))
     * 	
     * end
     * 
     * // Creates a RichText panel with color coding on certain segments of text.@example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(300, 200)
     * TextFrame:Center()
     * TextFrame:SetTitle("Randomly Colored Words")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * richtext:SetVerticalScrollbarEnabled(false)
     * 
     * local txt = "Here's a fun example involving word by word text coloring. "..
     * "Each word is separated by a space, colored, and appended to the Rich Text panel individually. "..
     * "The colors are randomly generated shades of red, orange, yellow, and pink."
     * 
     * local txt_tbl = string.Explode(" ", txt, false)
     * 
     * for _, word in pairs(txt_tbl) do
     * 
     * 	richtext:InsertColorChange(255, math.random(0, 255), math.random(0, 255), 255)
     * 	richtext:AppendText(word.." ")
     * 
     * end
     * 
     * function richtext:PerformLayout()
     * 	
     * 	self:SetFontInternal("GModNotify")
     * 	self:SetBGColor(Color(32, 16, 0))
     * 	
     * end
     * 
     * // Word by word coloring using {{LibraryFunction|string|Explode}} and random colors. 
     */
    public InsertColorChange(r: number, g: number, b: number, a: number): void;
    
    /**
     * Begins a text fade for a {{Type|RichText}} element where the last appended text segment is fully faded out after a specific amount of time, at a specific speed.
     * 
     * The alpha of the text at any given time is determined by the text's base alpha * ((''sustain'' - {{GlobalFunction|CurTime}}) / ''length'') where {{GlobalFunction|CurTime}} is added to ''sustain'' when this method is called.
     * 
     * [[Category:RichText]] 
     * @param sustain  The number of seconds the text remains visible. 
     * @param length  The number of seconds it takes the text to fade out.
     * 
     * If set '''lower''' than ''sustain'', the text will not begin fading out until (''sustain'' - ''length'') seconds have passed.
     * 
     * If set '''higher''' than ''sustain'', the text will begin fading out immediately at a fraction of the base alpha.
     * 
     * If set to '''-1''', the text doesn't fade out. 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(200, 200)
     * TextFrame:Center()
     * TextFrame:SetTitle("Fading Text")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Sample text
     * richtext:SetText("This is an example of a Rich Text panel using a fade-out with:\n\n6 seconds of sustain\n\n2 second fade-out length")
     * 	
     * // When the panel is ready for layout, begin the fade
     * function richtext:PerformLayout()
     * 	
     * 	self:SetFontInternal("Trebuchet18")
     * 	self:SetBGColor(Color(64, 64, 92))
     * 	
     * 	// Wait 6 seconds, then fade out in 2 seconds
     * 	self:InsertFade(6, 2)
     * 	
     * end
     * 
     * // Creates a Rich Text panel that sustains visibility for 6 seconds with a 2 second long fade-out.@example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(350, 100)
     * TextFrame:Center()
     * TextFrame:SetTitle("Kleiner says:")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)	
     * 
     * // Red text
     * richtext:InsertColorChange(200, 60, 32, 255)
     * richtext:SetVerticalScrollbarEnabled(false)
     * 	
     * local words = {"There's", "only", "one", "hedy..."}
     * local delay = 0
     * 
     * // Display each word in half second interval
     * for w, txt in pairs(words) do
     * 
     * 	if(w == 1) then delay = 0.2
     * 	else delay = (w-1)*0.45 end
     * 
     * 	timer.Simple(delay, function()
     * 	
     * 		richtext:AppendText(txt.." ")
     * 		richtext:InsertFade(2, 1)	// Sustain for 2 seconds while fading out after 1 second
     * 		
     * 		richtext:SetBGColor(Color(0, 0, 0))
     * 		richtext:SetFontInternal("DermaLarge")
     * 	
     * 	end)
     * 
     * end
     * 
     * // Kleiner read along
     * LocalPlayer():EmitSound("vo/k_lab2/kl_onehedy.wav")
     * 
     * // Create a Rich Text panel where Dr. Kleiner reads a fading message in sync with text. 
     */
    public InsertFade(sustain: number, length: number): void;
    
    /**
     * Invalidates the layout of this panel object and all its children. This will cause these objects to re-layout immediately, calling {{HookFunction|PANEL|PerformLayout}}. If you want to perform the layout in the next frame, you will have loop manually through all children, and call {{ClassFunction|Panel|InvalidateLayout}} on each. 
     * @param recursive [=false] If ''true'', the method will recursively invalidate the layout of all children. Otherwise, only immediate children are affected. 
     */
    public InvalidateChildren(recursive?: boolean): void;
    
    /**
     * Causes the panel to re-layout in the next frame. During the layout process  {{HookFunction|PANEL|PerformLayout}} will be called on the target panel.
     * 
     * You should avoid calling this function every frame.
     * 
     * **Bug [#2574](https://github.com/Facepunch/garrysmod-issues/issues/2574):**
     * >Using this on a panel after clicking on a docked element will cause docked elements to reorient themselves incorrectly. This can be fixed by assigning a unique {{LibraryFunction|Panel|SetZPos}} to each docked element. 
     * @param layoutNow [=false] If true the panel will re-layout instantly and not wait for the next frame. 
     */
    public InvalidateLayout(layoutNow?: boolean): void;
    
    /**
     * Invalidates the layout of the parent of this panel object. This will cause it to re-layout, calling {{HookFunction|PANEL|PerformLayout}}. 
     * @param layoutNow [=false] If ''true'', the re-layout will occur immediately, otherwise it will be performed in the next frame. 
     */
    public InvalidateParent(layoutNow?: boolean): void;
    
    /**
     * Determines whether the mouse cursor is hovered over one of this panel object's children. This is a reverse process using {{LibraryFunction|vgui|GetHoveredPanel}}, and looks upward to find the parent. 
     * @param immediate [=false] Set to true to check only the immediate children of given panel ( first level ) 
     * @returns Whether or not one of this panel object's children is being hovered over. 
     */
    public IsChildHovered(immediate?: boolean): boolean;
    
    /**
     * Returns whether this panel is draggable ( if user is able to drag it ) or not. 
     * @returns Whether this panel is draggable ( if user is able to drag it ) or not. 
     */
    public IsDraggable(): boolean;
    
    /**
     * Returns whether this panel is currently being dragged or not. 
     * @returns Whether this panel is currently being dragged or not. 
     */
    public IsDragging(): boolean;
    
    /**
     * Returns whether the the panel is enabled or disabled.
     * 
     * See {{ClassFunction|Panel|SetEnabled}} for a function that makes the panel enabled or disabled. 
     * @returns Whether the panel is enabled or disabled. 
     */
    public IsEnabled(): boolean;
    
    /**
     * Returns whether the mouse cursor is hovering over this panel or not
     * 
     * Uses {{LibraryFunction|vgui|GetHoveredPanel}} internally.
     * 
     * Requires {{ClassFunction|Panel|SetMouseInputEnabled}} to be set to true. 
     * @returns true if the panel is hovered 
     */
    public IsHovered(): boolean;
    
    /**
     * Returns true if the panel can receive keyboard input. 
     * @returns keyboardInputEnabled 
     */
    public IsKeyboardInputEnabled(): boolean;
    
    /**
     * Determines whether or not a {{Type|HTML}} or {{Type|DHTML}} element is currently loading a page. 
     * @returns Whether or not the (D)HTML object is loading. 
     */
    public IsLoading(): boolean;
    
    /**
     * Returns if the panel is going to be deleted in the next frame. 
     * @returns markedForDeletion 
     */
    public IsMarkedForDeletion(): boolean;
    
    /**
     * Returns true if the panel can receive mouse input. 
     * @returns mouseInputEnabled 
     */
    public IsMouseInputEnabled(): boolean;
    
    /**
     * Determines whether or not a text-based panel object, such as a {{Type|DTextEntry}}, is in multi-line mode. This is set with {{ClassFunction|Panel|SetMultiline}}.
     * 
     * [[Category:TextEntry]] 
     * @returns Whether the object is in multi-line mode or not. 
     */
    public IsMultiline(): boolean;
    
    /**
     * Returns whether the panel contains the given panel, recursively. 
     * @param childPanel 
     * @returns True if the panel contains childPanel. 
     */
    public IsOurChild(childPanel: Panel): boolean;
    
    /**
     * Determines if the panel object is selectable (like icons in the Spawn Menu, holding {{Key|Shift}}). This is set with {{ClassFunction|Panel|SetSelectable}}. 
     * @returns Whether the panel is selectable or not. 
     */
    public IsSelectable(): boolean;
    
    /**
     * Returns if the panel object is selected (like icons in the Spawn Menu, holding {{Key|Shift}}). This can be set in Lua using {{ClassFunction|Panel|SetSelected}}. 
     * @returns Whether the panel object is selected or not. Always returns false if the object is not selectable. This can be modified using {{ClassFunction|Panel|SetSelectable}}. 
     */
    public IsSelected(): boolean;
    
    /**
     * Determines if the panel object is a selection canvas or not. This is set with {{ClassFunction|Panel|SetSelectionCanvas}}. 
     * @returns The value (if any) set by {{ClassFunction|Panel|SetSelectionCanvas}}. 
     */
    public IsSelectionCanvas(): any;
    
    /**
     * Returns if the panel is valid and not marked for deletion. 
     * @returns True if the object is valid. 
     */
    public IsValid(): boolean;
    
    /**
     * Returns if the panel is visible. 
     * @returns isVisible 
     */
    public IsVisible(): boolean;
    
    /**
     * Remove the focus from the panel. 
     */
    public KillFocus(): void;
    
    /**
     * Redefines the panel object's {{ClassFunction|Panel|SetPos}} method to operate using frame-by-frame linear interpolation (Lerp). When the panel's position is changed, it will move to the target position at the speed defined. You can undo this with {{ClassFunction|Panel|DisableLerp}}.
     * 
     * Unlike the other panel animation functions, such as {{ClassFunction|Panel|MoveTo}}, this animation method will not operate whilst the game is paused. This is because it relies on {{GlobalFunction|FrameTime}}. 
     * @param speed  The speed at which to move the panel. This is affected by the value of ''easeOut''. Recommended values are:
     * * '''0.1 - 10''' when ''easeOut'' is ''false''.
     * * '''0.1 - 1''' when ''easeOut'' is ''true''. 
     * @param easeOut  This causes the panel object to 'jump' at the target, slowing as it approaches. This affects the ''speed'' value significantly, see above. 
     */
    public LerpPositions(speed: number, easeOut: boolean): void;
    
    /**
     * **Deprecated!**
     * 
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Similar to {{ClassFunction|Panel|LoadControlsFromString}} but loads controls from a file.
     * 
     * [[Category:EditablePanel]] 
     * @param path  The path to load the controls from. 
     */
    public LoadControlsFromFile(path: string): void;
    
    /**
     * **Deprecated!**
     * 
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Loads controls(positions, etc) from given data. This is what the default options menu uses.
     * 
     * [[Category:EditablePanel]] 
     * @param data  The data to load controls from. Format unknown. 
     */
    public LoadControlsFromString(data: string): void;
    
    /**
     * Called after {{ClassFunction|Panel|SetCookieName}} is called on this panel to apply the just loaded cookie values for this panel. 
     * @example
     * 
     * function PANEL:LoadCookies()
     * 
     * 	local value = self:GetCookieNumber( "SavedCookieName", 0 )
     * 	print( value )
     * 
     * 	// Do your stuff with the loaded value
     * 
     * end
     * 
     * // 
     */
    protected LoadCookies(): void;
    
    /**
     * Loads a .gwen file (created by GWEN Designer) and calls {{ClassFunction|Panel|LoadGWENString}} with the contents of the loaded file.
     * 
     * Used to load panel controls from a file. 
     * @param filename  The file to open. The path is relative to garrysmod/garrysmod/. 
     * @param path [="GAME"] The path used to look up the file.
     * 
     * * "GAME" Structured like base folder (garrysmod/), searches all the mounted content (main folder, addons, mounted games etc)
     * * "LUA" or "lsv" - All Lua folders (lua/) including gamesmodes and addons
     * * "DATA" Data folder (garrysmod/data)
     * * "MOD" Strictly the game folder (garrysmod/), ignores mounting. 
     */
    public LoadGWENFile(filename: string, path?: string): void;
    
    /**
     * Loads controls for the panel from a JSON string. 
     * @param str  JSON string containing information about controls to create. 
     */
    public LoadGWENString(str: string): void;
    
    /**
     * Sets a new image to be loaded by a {{Type|TGAImage}}.
     * 
     * [[Category:TGAImage]] 
     * @param imageName  The file path. 
     * @param strPath  The PATH to search in. See [[File Search Paths]].
     * 
     * This isn't used internally. 
     */
    public LoadTGAImage(imageName: string, strPath: string): void;
    
    /**
     * Returns the cursor position local to the position of the panel (usually the upper-left corner). 
     * @returns [The x coordinate, The y coordinate] 
     * @example
     * 
     * TestLabel = vgui.Create("DLabel")
     * TestLabel:SetSize(100, 20)
     * TestLabel:Center()
     * TestLabel:SetPaintBackgroundEnabled(true)
     * TestLabel:SetColor(Color(255, 0, 0))
     * 
     * local x, y = 0, 0
     * 
     * function TestLabel:PerformLayout()
     * 
     * 	x, y = self:LocalCursorPos()
     * 
     * 	self:SetText(" X: "..x.." , Y: "..y)
     * 	
     * end
     * 
     * // Create and center a label panel and update its text with the local cursor position. 
     * !TupleReturn
     */
    public LocalCursorPos(): [number, number];
    
    /**
     * Gets the absolute screen position of the position specified relative to the panel.
     * 
     * See also {{ClassFunction|Panel|ScreenToLocal}}.
     * 
     * {{Warning|This function uses a cached value for the screen position of the panel, computed at the end of the last VGUI Think/Layout pass.
     * 
     * ie. inaccurate results may be returned if the panel or any of its ancestors have been repositioned outside of {{HookFunction|PANEL|Think}} or {{HookFunction|PANEL|PerformLayout}} within the last frame.}}
     * 
     * **Note:**
     * >If the panel uses {{ClassFunction|Panel|Dock}}, this function will return 0, 0 when the panel was created. The position will be updated in the next frame. 
     * @param posX  The X coordinate of the position on the panel to translate. 
     * @param posY  The Y coordinate of the position on the panel to translate. 
     * @returns [The X coordinate relative to the screen., The Y coordinate relative to the screen.] 
     * !TupleReturn
     */
    public LocalToScreen(posX: number, posY: number): [number, number];
    
    /**
     * Focuses the panel and enables it to receive input.
     * 
     * This automatically calls {{ClassFunction|Panel|SetMouseInputEnabled}} and {{ClassFunction|Panel|SetKeyboardInputEnabled}} and sets them to true. 
     */
    public MakePopup(): void;
    
    /**
     * Allows the panel to receive mouse input even if the mouse cursor is outside the bounds of the panel. 
     * @param doCapture  Set to true to enable, set to false to disable. 
     */
    public MouseCapture(doCapture: boolean): void;
    
    /**
     * Places the panel above the passed panel with the specified offset. 
     * @param panel  Panel to position relatively to. 
     * @param offset [=0] The align offset. 
     */
    public MoveAbove(panel: Panel, offset?: number): void;
    
    /**
     * Places the panel below the passed panel with the specified offset. 
     * @param panel  Panel to position relatively to. 
     * @param offset [=0] The align offset. 
     */
    public MoveBelow(panel: Panel, offset?: number): void;
    
    /**
     * Moves the panel by the specified coordinates using animation. 
     * @param moveX  The number of pixels to move by in the horizontal (x) direction. 
     * @param moveY  The number of pixels to move by in the vertical (y) direction. 
     * @param time  The time (in seconds) in which to perform the animation. 
     * @param delay [=0] The delay (in seconds) before the animation begins. 
     * @param ease [=-1] The easing of the start and/or end speed of the animation. See {{ClassFunction|Panel|NewAnimation}} for how this works. 
     * @param callback [=nil] The function to be called once the animation is complete. Arguments are:
     * * {{FuncArg|table|animData|The {{Struct|AnimationData}} that was used.}}
     * * {{FuncArg|Panel|pnl|The panel object that was moved.}} 
     */
    public MoveBy(moveX: number, moveY: number, time: number, delay?: number, ease?: number, callback?: Function): void;
    
    /**
     * Places the panel left to the passed panel with the specified offset. 
     * @param panel  Panel to position relatively to. 
     * @param offset [=0] The align offset. 
     */
    public MoveLeftOf(panel: Panel, offset?: number): void;
    
    /**
     * Places the panel right to the passed panel with the specified offset. 
     * @param panel  Panel to position relatively to. 
     * @param offset [=0] The align offset. 
     */
    public MoveRightOf(panel: Panel, offset?: number): void;
    
    /**
     * Moves the panel to the specified position using animation. 
     * @param posX  The target x coordinate of the panel. 
     * @param posY  The target y coordinate of the panel. 
     * @param time  The time to perform the animation within. 
     * @param delay [=0] The delay before the animation starts. 
     * @param ease [=-1] The easing of the start and/or end speed of the animation. See {{ClassFunction|Panel|NewAnimation}} for how this works. 
     * @param callback [=] The function to be called once the animation finishes. Arguments are:
     * * {{FuncArg|table|animData|The {{Struct|AnimationData}} that was used.}}
     * * {{FuncArg|Panel|pnl|The panel object that was moved.}} 
     */
    public MoveTo(posX: number, posY: number, time: number, delay?: number, ease?: number, callback?: Function): void;
    
    /**
     * Moves this panel object in front of the specified sibling (child of the same parent) in the render order, and shuffles up the Z-positions of siblings now behind. 
     * @param siblingPanel  The panel to move this one in front of. Must be a child of the same parent panel. 
     * @returns ''false'' if the passed panel is not a sibling, otherwise ''nil''. 
     */
    public MoveToAfter(siblingPanel: Panel): boolean;
    
    /**
     * Moves the panel object behind all other panels on screen. If the panel has been made a pop-up with {{ClassFunction|Panel|MakePopup}}, it will still draw in front of any panels that haven't. 
     */
    public MoveToBack(): void;
    
    /**
     * Moves this panel object behind the specified sibling (child of the same parent) in the render order, and shuffles up the {{ClassFunction|Panel|SetZPos}} of siblings now in front. 
     * @param siblingPanel  The panel to move this one behind. Must be a child of the same parent panel. 
     * @returns ''false'' if the passed panel is not a sibling, otherwise ''nil''. 
     */
    public MoveToBefore(siblingPanel: Panel): boolean;
    
    /**
     * Moves the panel in front of all other panels on screen. Unless the panel has been made a pop-up using {{ClassFunction|Panel|MakePopup}}, it will still draw behind any that have. 
     * @example
     * 
     * // Regular message
     * local popup1 = vgui.Create("DFrame")
     * popup1:SetSize(400, 300)
     * popup1:Center()
     * popup1:MakePopup()
     * popup1:SetTitle("This is a normal window.")
     * 
     * // Warning message
     * local popup2 = vgui.Create("DFrame")
     * popup2:SetSize(300, 100)
     * popup2:Center()
     * popup2:MakePopup()
     * popup2:SetTitle("Warning!")
     * 
     * // Warning label
     * local warning = vgui.Create("DLabel", popup2)
     * warning:SetSize(280, 80)
     * warning:Center()
     * warning:SetText("The server will be shutting down in 5 minutes!")
     * warning:SetFont("GModNotify")
     * warning:SetWrap(true)
     * 
     * // Move the warning message to front constantly
     * function popup2:Think()
     * 	self:MoveToFront()
     * end
     * 
     * // Creates two frame panels where one acts normal and the other acts as a persistent warning window that will move in front of all other panels until it is closed. 
     */
    public MoveToFront(): void;
    
    /**
     * Creates a new animation for the panel object.
     * 
     * Methods that use this function:
     * * {{ClassFunction|Panel|MoveTo}}
     * * {{ClassFunction|Panel|SizeTo}}
     * * {{ClassFunction|Panel|SlideUp}}
     * * {{ClassFunction|Panel|SlideDown}}
     * * {{ClassFunction|Panel|ColorTo}}
     * * {{ClassFunction|Panel|AlphaTo}}
     * * {{ClassFunction|Panel|MoveBy}}
     * * {{ClassFunction|Panel|LerpPositions}} 
     * @param length  The length of the animation in seconds. 
     * @param delay [=0] The delay before the animation starts. 
     * @param ease [=-1] The power/index to use for easing.
     * *Positive values greater than 1 will ease in; the higher the number, the sharper the curve's gradient (less linear).
     * *A value of 1 removes all easing.
     * *Positive values between 0 and 1 ease out; values closer to 0 increase the curve's gradient (less linear).
     * *A value of 0 will break the animation and should be avoided.
     * *Any value less than zero will ease in/out; the value has no effect on the gradient. 
     * @param callback [=nil] The function to be called when the animation ends. Arguments passed are:
     * * {{FuncArg|table|animTable|The {{Struct|AnimationData}} that was used.}}
     * * {{FuncArg|Panel|tgtPanel|The panel object that was animated.}} 
     * @returns Partially filled {{Struct|AnimationData}} with members: 
     * *{{FuncArg|number|EndTime|Equal to ''length'' and ''delay'' arguments added together, plus either the {{GlobalFunction|SysTime}} if there is no other animation queued or the end time of the last animation in the queue.}}
     * *{{FuncArg|number|StartTime|Equal to the ''delay'' argument, plus either the {{GlobalFunction|SysTime}} if there is no other animation queued or the end time of the last animation in the queue.}}
     * *{{FuncArg|number|Ease|Equal to the ''ease'' argument.}}
     * *{{FuncArg|function|OnEnd|Equal to the ''callback'' argument.}} 
     * @example
     * 
     * local frame = vgui.Create( "DFrame" )
     * frame:SetSize( 500, 500 )
     * frame:Center()
     * frame:MakePopup()
     * 
     * local butt = frame:Add( "DButton" )
     * butt:SetPos( 5, 30 )
     * butt:SetSize( 100, 40 )
     * 
     * function butt:doAnim()
     * 	local anim = self:NewAnimation( 10, 0, 1, function( anim, pnl )
     * 		self:doAnim()
     * 	end )
     * 
     * 	anim.Think = function( anim, pnl, fraction )
     * 		local radius = 200
     * 		pnl:SetPos( 250 + math.sin( Lerp( fraction, -math.pi, math.pi ) ) * radius - pnl:GetWide() / 2,
     * 					250 + math.cos( Lerp( fraction, -math.pi, math.pi ) ) * radius - pnl:GetTall() / 2 )
     * 
     * 		pnl:SetText( "Frac: " .. fraction .. "\nTime: " .. ( SysTime() - anim.StartTime ) )
     * 	end
     * end
     * butt:doAnim()
     * 
     * // Example on how to use this function, makes a button go around in a circle in a DFrame. 
     */
    public NewAnimation(length: number, delay?: number, ease?: number, callback?: Function): AnimationData;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     * @param objectName 
     */
    public NewObject(objectName: string): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     * @param objectName 
     * @param callbackName 
     */
    public NewObjectCallback(objectName: string, callbackName: string): void;
    
    /**
     * Sets whether this panel's drawings should be clipped within the parent panel's bounds.
     * 
     * See also {{GlobalFunction|DisableClipping}} and {{LibraryFunction|surface|DisableClipping}}. 
     * @param clip  Whether to clip or not. 
     */
    public NoClipping(clip: boolean): void;
    
    /**
     * Returns the number of children of the panel object that are selected. This is equivalent to calling {{ClassFunction|Panel|IsSelected}} on all child objects and counting the number of returns that are ''true''. 
     * @returns The number of child objects that are currently selected. This does not include the parent object you are calling the method from. 
     */
    public NumSelectedChildren(): number;
    
    /**
     * Called by HTML panels when the target URL of the frame has changed, this happens when you hover over a link. 
     * @param targetURL  New target URL. 
     */
    protected OnChangeTargetURL(targetURL: string): void;
    
    /**
     * Called by HTML panels when the title of the loaded page has been changed. 
     * @param newTitle  The new title of the page. 
     */
    protected OnChangeTitle(newTitle: string): void;
    
    /**
     * Called whenever a child was parented to the panel.
     * 
     * **Bug [#2759](https://github.com/Facepunch/garrysmod-issues/issues/2759):**
     * >This is called before the panel's metatable is set. 
     * @param child  The child which was added. 
     */
    protected OnChildAdded(child: Panel): void;
    
    /**
     * Called whenever a child of the panel is about to removed. 
     * @param child  The child which is about to be removed. 
     */
    protected OnChildRemoved(child: Panel): void;
    
    /**
     * Called by HTML panels when the page attempts to open a new child view (such as a popup or new tab). 
     * @param sourceURL  The URL of the page requesting to create a child. 
     * @param targetURL  The URL of the requested child. 
     * @param isPopup  True if the requested view is a popup. 
     */
    protected OnChildViewCreated(sourceURL: string, targetURL: string, isPopup: boolean): void;
    
    /**
     * Called whenever the cursor entered the panels bounds. 
     */
    protected OnCursorEntered(): void;
    
    /**
     * Called whenever the cursor left the panels bounds. 
     */
    protected OnCursorExited(): void;
    
    /**
     * Called whenever the cursor was moved with the panels bounds. 
     * @param cursorX  The new x position of the cursor relative to the panels origin. 
     * @param cursorY  The new y position of the cursor relative to the panels origin. 
     */
    protected OnCursorMoved(cursorX: number, cursorY: number): void;
    
    /**
     * Called by HTML panels when the panel's DOM has been set up. You can run JavaScript in here. 
     * @param url  The URL of the current page. 
     */
    protected OnDocumentReady(url: string): void;
    
    /**
     * We're being dropped on something
     * We can create a new panel here and return it, so that instead of dropping us - it drops the new panel instead! We remain where we are!
     * 
     * Only works for panels derived from DDragBase. 
     * @returns The panel to drop instead of us. By default you should return self. 
     */
    protected OnDrop(): Panel;
    
    /**
     * Called whenever the panel gained or lost focus.
     * 
     * **Note:**
     * >{{ClassFunction|Panel|HasFocus}} will only be updated on the next frame and will return the "old" value at the time this hook is run. Same goes for {{LibraryFunction|vgui|GetKeyboardFocus}}. 
     * @param gained  Is the focus was gained ( true ) or lost ( false ) 
     */
    protected OnFocusChanged(gained: boolean): void;
    
    /**
     * Called whenever a keyboard key was pressed while the panel is focused.
     * 
     * **Bug [#2886](https://github.com/Facepunch/garrysmod-issues/issues/2886):**
     * >This is not run for ESC/"cancelselect" binding. 
     * @param keyCode  They key code of the pressed key, see {{Enum|KEY}}. 
     */
    protected OnKeyCodePressed(keyCode: KEY): void;
    
    /**
     * Called whenever a keyboard key was released while the panel is focused.
     * 
     * **Bug [#2886](https://github.com/Facepunch/garrysmod-issues/issues/2886):**
     * >This is not run for TILDE/"toggleconsole" binding. 
     * @param keyCode  They key code of the released key, see {{Enum|KEY}}. 
     */
    protected OnKeyCodeReleased(keyCode: KEY): void;
    
    /**
     * Called whenever a mouse key was pressed while the panel is focused. 
     * @param keyCode  They key code of the key pressed, see {{Enum|MOUSE}}. 
     */
    protected OnMousePressed(keyCode: MOUSE): void;
    
    /**
     * Called whenever a mouse key was released while the panel is focused. 
     * @param keyCode  They key code of the key released, see {{Enum|MOUSE}}. 
     */
    protected OnMouseReleased(keyCode: MOUSE): void;
    
    /**
     * Called whenever the mouse wheel was used. 
     * @param scrollDelta  The scroll delta, indicating how much the user turned the mouse wheel. 
     */
    protected OnMouseWheeled(scrollDelta: number): void;
    
    /**
     * Called when the panel is about to be removed. 
     */
    protected OnRemove(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Called by {{LibraryFunction|dragndrop|StartDragging}} when the panel starts being dragged. 
     */
    protected OnStartDragging(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Called by {{ClassFunction|Panel|DragMouseRelease}} when the panel object is released after being dragged. 
     */
    protected OnStopDragging(): void;
    
    /**
     * [[Category:HTML]][[Category:Awesomium]]Instructs a HTML control to download and parse a HTML script using the passed URL. 
     * @param URL  URL to open 
     * @example
     * 
     * local frame = vgui.Create( "DFrame" )
     * frame:SetTitle( "HTML Example" )
     * frame:SetSize( ScrW() * 0.75, ScrH() * 0.75 )
     * frame:Center()
     * frame:MakePopup()
     * 
     * local html = vgui.Create( "HTML", frame )
     * html:Dock( FILL )
     * html:OpenURL( "wiki.garrysmod.com" )
     * 
     * // Displays the Garry's Mod wiki page.@example
     * 
     * local frame = vgui.Create( "DFrame" )
     * frame:SetTitle( "HTML Example" )
     * frame:SetSize( ScrW() * 0.75, ScrH() * 0.75 )
     * frame:Center()
     * frame:MakePopup()
     * 
     * local html = vgui.Create( "HTML", frame )
     * html:Dock( FILL )
     * html:OpenURL( "asset://garrysmod/html/loading.html" )
     * 
     * // Displays the default loading screen from the html folder. 
     */
    public OpenURL(URL: string): void;
    
    /**
     * Called whenever the panel should be drawn. 
     * 
     * You can create panels with a customized appearance by overriding their Paint() function, which will prevent the default appearance from being drawn.
     * 
     * **Note:**
     * >Render operations from the {{Lib|surface}} (and consequentially the {{Lib|draw}}) are always offset by the global position of this panel, as seen in the example below 
     * @param width  The panel's width. 
     * @param height  The panel's height. 
     * @returns Returning true prevents the background from being drawn. 
     * @example
     * 
     * local panel = vgui.Create( "DPanel" )
     * panel:SetSize( 100, 100 )
     * panel:SetPos( ScrW() / 2 - 50, ScrH() / 2 - 50 )
     * 
     * function panel:Paint( w, h )
     *     draw.RoundedBox( 8, 0, 0, w, h, Color( 0, 0, 0 ) )
     * end
     * 
     * // Creates a DPanel and overrides its Paint() function to draw a 100x100 pixel black rounded box in the center of the screen. 
     */
    protected Paint(width: number, height: number): boolean;
    
    /**
     * Paints a ghost copy of the panel at the given position. 
     * @param posX  The x coordinate to draw the panel from. 
     * @param posY  The y coordinate to draw the panel from. 
     */
    public PaintAt(posX: number, posY: number): void;
    
    /**
     * Paints the panel at its current position. To use this you must call {{ClassFunction|Panel|SetPaintedManually}}(true). 
     * @example
     * 
     * local frame = vgui.Create( "DFrame" )
     * frame:SetTitle( "PaintManual Test" )
     * frame:SetSize( 500, 500 )
     * frame:SetPaintedManually( true )
     * 
     * hook.Add( "PostDrawTranslucentRenderables", "PaintManual Test", function()
     * 	if IsValid(frame) then
     * 		local eyePos = Entity(1):EyePos()
     * 		local forward = Entity(1):GetForward()
     * 		local forwardAngle = forward:Angle()
     * 
     * 		cam.Start3D2D(eyePos + (forward * 250), Angle(0, forwardAngle.y - 90, forwardAngle.r + 90), 0.2)
     * 			frame:PaintManual()
     * 		cam.End3D2D()
     * 	end
     * end )
     * 
     * // Paints a simple panel inside a 3D rendering context. 
     */
    public PaintManual(): void;
    
    /**
     * Called whenever the panel and all its children were drawn, return true to override the default drawing. 
     * @param width  The panels current width. 
     * @param height  The panels current height. 
     * @returns Should we disable default PaintOver rendering? This is useful in case with Derma panels that use Derma hooks. 
     */
    protected PaintOver(width: number, height: number): boolean;
    
    /**
     * Parents the panel to the HUD.
     * Makes it invisible on the escape-menu and disables controls. 
     * @example
     * 
     * Panel:ParentToHUD()
     * 
     * // 
     */
    public ParentToHUD(): void;
    
    /**
     * {{Warning|Due to privacy concerns, this function has been disabled}}
     * 
     * Only works for TextEntries.
     * 
     * Pastes the contents of the clipboard into the TextEntry.
     * 
     * **Note:**
     * >Tab characters will be dropped from the pasted text
     * 
     * [[Category:TextEntry]] 
     */
    public Paste(): void;
    
    /**
     * Called whenever the panels layout was invalidated. This means all child panels must be re-positioned to fit the possibly new size of this panel.
     * 
     * {{Warning|Do '''NOT''' call this function directly. Use {{ClassFunction|Panel|InvalidateLayout}} instead!}} 
     * @param width  The panels current width. 
     * @param height  The panels current height. 
     */
    protected PerformLayout(width: number, height: number): void;
    
    /**
     * Sets the width and position of a {{Type|DLabel}} and places the passed panel object directly to the right of it. Returns the ''y'' value of the bottom of the tallest object. The panel on which this method is run is not relevant; only the passed objects are affected. 
     * @param lblWidth  The width to set the label to. 
     * @param x  The horizontal (x) position at which to place the label. 
     * @param y  The vertical (y) position at which to place the label. 
     * @param lbl  The label to resize and position. 
     * @param panelObj  The panel object to place to the right of the label. 
     * @returns The distance from the top of the parent panel to the bottom of the tallest object (the ''y'' position plus the height of the label or passed panel, depending on which is tallest). 
     */
    public PositionLabel(lblWidth: number, x: number, y: number, lbl: Panel, panelObj: Panel): number;
    
    /**
     * Only works on elements defined with {{LibraryFunction|derma|DefineControl}} and only if the panel has '''AllowAutoRefresh''' set to true.
     * 
     * Called after {{LibraryFunction|derma|DefineControl}} is called with panel's class name.
     * 
     * See also {{HookFunction|PANEL|PreAutoRefresh}} 
     */
    protected PostAutoRefresh(): void;
    
    /**
     * **Deprecated:**
     * >Only used in deprecated Derma controls.
     * 
     * Sends a command to the panel.
     * [[Category:Slider]] 
     * @param messageName  The name of the message. 
     * @param valueType  The type of the variable to post. 
     * @param value  The value to post. 
     */
    public PostMessage(messageName: string, valueType: string, value: string): void;
    
    /**
     * Only works on elements defined with {{LibraryFunction|derma|DefineControl}} and only if the panel has '''AllowAutoRefresh''' set to true.
     * 
     * Called when {{LibraryFunction|derma|DefineControl}} is called with this panel's class name before applying changes to this panel.
     * 
     * See also {{HookFunction|PANEL|PostAutoRefresh}} 
     */
    protected PreAutoRefresh(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Installs Lua defined functions into the panel. 
     */
    public Prepare(): void;
    
    /**
     * Enables the queue for panel animations. If enabled, the next new animation will begin after all current animations have ended. This must be called before {{ClassFunction|Panel|NewAnimation}} to work, and only applies to the next new animation. If you want to queue many, you must call this before each. 
     */
    public Queue(): void;
    
    /**
     * Causes a {{Type|SpawnIcon}} to rebuild its model image.
     * [[Category:ModelImage]][[Category:SpawnIcon]] 
     */
    public RebuildSpawnIcon(): void;
    
    /**
     * Re-renders a spawn icon with customized cam data.
     * 
     * **Note:**
     * >This function does '''not''' accept the standard {{Struct|CamData}}.
     * 
     * [[Category:ModelImage]][[Category:SpawnIcon]] 
     * @param data  A four-membered table containing the information needed to re-render:
     * * {{FuncArg|Vector|cam_pos|The relative camera position the model is viewed from.}}
     * * {{FuncArg|Angle|cam_ang|The camera angle the model is viewed from.}}
     * * {{FuncArg|number|cam_fov|The camera's field of view (FOV).}}
     * * {{FuncArg|Entity|ent|The entity object of the model.}}
     * See the example below for how to retrieve these values. 
     * @example
     * 
     * function PANEL:RenderIcon()
     * 	
     * 	local ent = self.ModelPanel:GetEntity()
     * 	
     * 	local tab = {}
     * 	tab.ent		= ent
     * 	tab.cam_pos = self.ModelPanel:GetCamPos()
     * 	tab.cam_ang = self.ModelPanel:GetLookAng()
     * 	tab.cam_fov = self.ModelPanel:GetFOV()
     * 
     * 	self.SpawnIcon:RebuildSpawnIconEx( tab )
     * end
     * 
     * // The ''RenderIcon'' method used by {{Type|IconEditor}}. ''SpawnIcon'' is a {{Type|SpawnIcon}} and ''ModelPanel'' is a {{Type|DAdjustableModelPanel}}. 
     */
    public RebuildSpawnIconEx(data: table): void;
    
    /**
     * Allows the panel to receive drag and drop events. 
     * @param name  Name of DnD panels to receive. This is set by {{ClassFunction|Panel|Droppable}} 
     * @param func  This function is called whenever a panel with valid name is hovering above and dropped on this panel. It has next arguments:
     * * {{FuncArg|Panel|pnl|The receiver panel}}
     * * {{FuncArg|table|tbl|A table of panels dropped onto receiver panel}}
     * * {{FuncArg|boolean|dropped|False if hovering over, true if dropped onto}}
     * * {{FuncArg|number|menuIndex|Index of clicked menu item from third argument of {{ClassFunction|Panel|Receiver}}}}
     * * {{FuncArg|number|x|Cursor pos, relative to the receiver}}
     * * {{FuncArg|number|y|Cursor pos, relative to the receiver}} 
     * @param menu  A table of strings that will act as a menu if drag'n'drop was performed with a right click 
     */
    public Receiver(name: string, func: Function, menu: table): void;
    
    /**
     * Refreshes the HTML panel's current page.
     * [[Category:HTML]]
     * [[Category:Awesomium]] 
     * @param ignoreCache [=false] If true, the refresh will ignore cached content similar to "ctrl+f5" in most browsers. 
     */
    public Refresh(ignoreCache?: boolean): void;
    
    /**
     * Marks a panel for deletion so it will be deleted on the next frame.
     * 
     * Will automatically call {{ClassFunction|Panel|InvalidateParent}}. 
     */
    public Remove(): void;
    
    /**
     * Attempts to obtain focus for this panel. 
     */
    public RequestFocus(): void;
    
    /**
     * Resets all text fades in a {{Type|RichText}} element made with {{ClassFunction|Panel|InsertFade}}.
     * [[Category:RichText]] 
     * @param hold  True to reset fades, false otherwise. 
     * @param expiredOnly  Any value equating to ''true'' will reset fades only on text segments that are completely faded out. 
     * @param newSustain  The new sustain value of each faded text segment. Set to -1 to keep the old sustain value. 
     * @example
     * 
     * // Window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(200, 100)
     * TextFrame:Center()
     * TextFrame:SetTitle("ResetAllFades")
     * TextFrame:MakePopup()
     * 
     * // Rich Text panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Append text and start fading a few frames after creation (won't work otherwise)
     * timer.Simple(0.05, function()
     * 
     * 	richtext:SetBGColor(Color(32, 32, 32))
     * 	richtext:SetFontInternal("GModNotify")
     * 
     * 	richtext:AppendText("This is ")
     * 	richtext:InsertFade(5, 2)
     * 	
     * 	richtext:AppendText("a test...")
     * 	richtext:InsertFade(5, 1)
     * 	
     * end)
     * 
     * // 5 seconds after creation, reset all the fades
     * timer.Simple(5, function()
     * 
     * 	richtext:ResetAllFades(true, false, -1)
     * 
     * end)
     * 
     * // Creates a RichText panel where two text segments slowly fade out and get reset to full alpha 5 seconds after being created. 
     */
    public ResetAllFades(hold: boolean, expiredOnly: boolean, newSustain: number): void;
    
    /**
     * Runs/Executes a string as JavaScript code in [[:Category:DHTML|DHTML]] panel.
     * **Note:**
     * >This function does '''NOT''' evaluate expression (i.e. allow you to pass variables from JavaScript (JS) to Lua context).
     * Because a return value is nil/no value (a.k.a. void).
     * If you wish to pass/return values from JS to Lua, you may want to use {{LibraryFunction|DHTML|AddFunction}} function to accomplish that job. 
     * @param js  Specify JavaScript code to be executed. 
     * @example
     * 
     * // First we create a container, in this case it is a full-screen Derma Frame window.
     * local dframe = vgui.Create( 'DFrame' )
     * dframe:SetSize( ScrW(), ScrH() )
     * dframe:SetTitle( "Garry's Mod Wiki" )
     * dframe:Center()
     * dframe:MakePopup() // Enable keyboard and mouse interaction for DFrame panel.
     * 
     * // Create a new DHTML panel as a child of dframe, and dock-fill it.
     * local dhtml = vgui.Create( 'DHTML', dframe )
     * dhtml:Dock( FILL )
     * // Navigate to Garry's Mod wikipedia website.
     * dhtml:OpenURL( 'https://wiki.garrysmod.com/index.php' )
     * // Run JavaScript code.
     * dhtml:RunJavascript( [[document.body.innerHTML = 'HTML changed from Lua using JavaScript!';]] )
     * 
     * // This does not throw an error/exception, but instead returns nil/no value.
     * // That means you can't pass/return values from JavaScript back to Lua context using this function.
     * local number = dhtml:Call( '22;' )
     * print( number )
     * 
     * // Shows how to change [http://www.w3schools.com/jsref/prop_html_innerhtml.asp document.body.innerHTML] property by calling this function on [[:Category:DHTML|DHTML]] panel. 
     */
    public RunJavascript(js: string): void;
    
    /**
     * Saves the current state (caret position and the text inside) of a {{Type|TextEntry}} as an undo state.
     * 
     * See also {{ClassFunction|Panel|Undo}}.
     * 
     * [[Category:TextEntry]] 
     */
    public SaveUndoState(): void;
    
    /**
     * Translates global screen coordinate to coordinates relative to the panel.
     * 
     * See also {{ClassFunction|Panel|LocalToScreen}}.
     * 
     * {{Warning|This function uses a cached value for the screen position of the panel, computed at the end of the last VGUI Think/Layout pass.
     * 
     * ie. inaccurate results may be returned if the panel or any of its ancestors have been repositioned outside of {{HookFunction|PANEL|Think}} or {{HookFunction|PANEL|PerformLayout}} within the last frame.}} 
     * @param screenX  The x coordinate of the screen position to be translated. 
     * @param screenY  The y coordinate of the screed position be to translated. 
     * @returns [Relativeposition X, Relativeposition Y] 
     * !TupleReturn
     */
    public ScreenToLocal(screenX: number, screenY: number): [number, number];
    
    /**
     * Selects all items within a panel or object. For text-based objects, selects all text.
     * 
     * [[Category:TextEntry]] 
     */
    public SelectAll(): void;
    
    /**
     * If called on a text entry, clicking the text entry for the first time will automatically select all of the text ready to be copied by the user.
     * [[Category:TextEntry]] 
     */
    public SelectAllOnFocus(): void;
    
    /**
     * Selects all the text in a panel object. Will not select non-text items; for this, use {{ClassFunction|Panel|SelectAll}}.
     * 
     * [[Category:TextEntry]] 
     */
    public SelectAllText(): void;
    
    /**
     * Deselects all items in a panel object. For text-based objects, this will deselect all text.
     * 
     * [[Category:TextEntry]] 
     */
    public SelectNone(): void;
    
    /**
     * Sets the achievement to be displayed by {{Type|AchievementIcon}}.[[Category:AchievementIcon]] 
     * @param id  Achievement number ID 
     */
    public SetAchievement(id: number): void;
    
    /**
     * **Deprecated:**
     * >Only used in deprecated Derma controls.
     * 
     * Used in {{Type|Button}} to call a function when the button is clicked and in {{Type|Slider}} when the value changes.
     * [[Category:Button]]
     * [[Category:Slider]] 
     * @param func  Function to call when the {{Type|Button}} is clicked or the {{Type|Slider}} value is changed.
     * 
     * Arguments given are:
     * * {{FuncArg|Panel|self|The panel itself}}
     * * {{FuncArg|string|action|"Command" on button press, "SliderMoved" on slider move.}}
     * * {{FuncArg|number|val|The new value of the {{Type|Slider}}. Will always equal 0 for buttons.}}
     * * {{FuncArg|number||Always equals 0.}} 
     */
    public SetActionFunction(func: Button | Slider | Slider): void;
    
    /**
     * Configures a text input to allow user to type characters that are not included in the US-ASCII (7-bit ASCII) character set.
     * 
     * Characters not included in US-ASCII are multi-byte characters in UTF-8. They can be accented characters, non-Latin characters and special characters.
     * 
     * [[Category:TextEntry]] 
     * @param allowed  Set to true in order not to restrict input characters. 
     * @example
     * 
     * if vgui.CreateStdRestrict == nil then
     * 	vgui.CreateStdRestrict = vgui.Create
     * end
     * function vgui.Create( classname, parent, name )
     * 	local vgui_elt = vgui.CreateStdRestrict(classname, parent, name)
     * 	if classname == "DTextEntry" or classname == "RichText" or classname == "TextEntry" then
     * 		vgui_elt:SetAllowNonAsciiCharacters(true)
     * 	end
     * 	return vgui_elt
     * end
     * 
     * // Replaces the default vgui.Create() function to always allow non US-ASCII characters for text inputs. 
     */
    public SetAllowNonAsciiCharacters(allowed: boolean): void;
    
    /**
     * Sets the alpha multiplier for the panel 
     * @param alpha  The alpha value in the range of 0-255. 
     */
    public SetAlpha(alpha: number): void;
    
    /**
     * Enables or disables animations for the panel object by overriding the {{HookFunction|PANEL|AnimationThink}} hook to nil and back. 
     * @param enable  Whether to enable or disable animations. 
     */
    public SetAnimationEnabled(enable: boolean): void;
    
    /**
     * Sets whenever the panel should be removed if the parent was removed. 
     * @param autoDelete  Whenever to delete if the parent was removed or not. 
     */
    public SetAutoDelete(autoDelete: boolean): void;
    
    /**
     * Sets the background color of a panel such as a {{Type|RichText}}, {{Type|Label}} or {{Type|DColorCube}}.
     * 
     * **Note:**
     * >This doesn't apply to all VGUI elements and its function varies between them
     * 
     * For {{Type|DLabel}} elements, you must use {{ClassFunction|Panel|SetPaintBackgroundEnabled}}( true ) before applying the color.
     * 
     * This will not work on setup of the panel - you should use this function in a hook like {{HookFunction|PANEL|ApplySchemeSettings}} or {{HookFunction|PANEL|PerformLayout}}. 
     * @param r_or_color  The red channel of the color, or a {{Struct|Color}}. If you pass the latter, the following three arguments are ignored. 
     * @param g  The green channel of the color. 
     * @param b  The blue channel of the color. 
     * @param a  The alpha channel of the color. 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(300, 100)
     * TextFrame:Center()
     * TextFrame:SetTitle("Windows XP Blue Screen")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Sample text
     * richtext:SetText("A problem has been detected and Windows has been shut down to prevent damage to your computer.\n\nMOTHERBOARD_FRIED")
     * 
     * // When the panel is ready for layout, set the background color to blue
     * function richtext:PerformLayout()
     * 	
     * 	self:SetBGColor(Color(0, 0, 255))
     * 	
     * end
     * 
     * // Creates a RichText panel that mimics a [http://en.wikipedia.org/wiki/Blue_Screen_of_Death blue screen of death]. 
     */
    public SetBGColor(r_or_color: number, g: number, b: number, a: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Sets the background color of the panel. 
     * @param r  The red channel of the color. 
     * @param g  The green channel of the color. 
     * @param b  The blue channel of the color. 
     * @param a  The alpha channel of the color. 
     */
    public SetBGColorEx(r: number, g: number, b: number, a: number): void;
    
    /**
     * Sets the position of the caret (or text cursor) in a text-based panel object.
     * 
     * [[Category:TextEntry]] 
     * @param offset  Caret position/offset from the start of text. A value of ''0'' places the caret before the first character. 
     */
    public SetCaretPos(offset: number): void;
    
    /**
     * Sets the action signal command that's fired when a {{Type|Button}} is clicked. The hook {{HookFunction|PANEL|ActionSignal}} is called as the click response.
     * 
     * This has no effect on buttons unless it has had its ''AddActionSignalTarget'' method called (an internal function not available by default in Garry's Mod LUA).
     * 
     * A better alternative is calling {{ClassFunction|Panel|Command}} when a {{Type|DButton}} is clicked. 
     * @example
     * 
     * // Create a regular Frame panel
     * TestFrame = vgui.Create("Frame")
     * TestFrame:SetSize(200, 200)
     * TestFrame:Center()
     * TestFrame:MakePopup()
     * TestFrame:SetVisible(true)
     * 
     * local lbl = vgui.Create("DLabel", TestFrame)
     * lbl:Dock(FILL)
     * lbl:DockMargin(10, 10, 10, 10)
     * lbl:SetText("Click the white button in the upper right corner of this window.")
     * lbl:SetFont("ChatFont")
     * lbl:SetWrap(true)
     * 
     * // Create a background panel so we can see the Frame's internal buttons
     * local bg = vgui.Create("DPanel", TestFrame)
     * bg:Dock(FILL)
     * bg:SetBackgroundColor(Color(64, 64, 64, 192))
     * bg:MoveToBack()
     * 
     * // Loop through Frame's internal components
     * for _, child in pairs(TestFrame:GetChildren()) do
     * 
     * 	// Disable frame sizing
     * 	if(string.find(child:GetName(), "Grip")) then
     * 	
     * 		child:SetMouseInputEnabled(false)
     * 		
     * 	// Fire the "Testing" command when we click the white button
     * 	elseif(child:GetName() == "frame_close") then
     * 	
     * 		child:SetCommand("Testing")
     * 		
     * 	end
     * 	
     * end
     * 
     * function TestFrame:ActionSignal(signalName, signalValue)
     * 	
     * 	// Show the signal name
     * 	lbl:SetText("Received command: \""..signalName.."\"")
     * 
     * end
     * 
     * // Creates an engine-based {{Type|Frame}} panel and changes the command that's fired when you click the white close button (by default the command is set to "Close"). 
     */
    public SetCommand(): void;
    
    /**
     * Sets the alignment of the contents.
     * 
     * [[Category:Label]]
     * [[Category:DLabel]] 
     * @param alignment  The direction of the content, based on the number pad.
     * <table>
     * <tr><td>{{Key|7}}: '''top-left'''</td><td>{{Key|8}}: '''top-center'''</td><td>{{Key|9}}: '''top-right'''</td></tr>
     * <tr><td>{{Key|4}}: '''middle-left'''</td><td>{{Key|5}}: '''center'''</td><td>{{Key|6}}: '''middle-right'''</td></tr>
     * <tr><td>{{Key|1}}: '''bottom-left'''</td><td>{{Key|2}}: '''bottom-center'''</td><td>{{Key|3}}: '''bottom-right'''</td></tr>
     * </table>
     * [[File:DLabel_SetContentAlignment.gif]] 
     */
    public SetContentAlignment(alignment: number): void;
    
    /**
     * {{Warning|This function does not exist on all panels}}
     * 
     * Sets this panel's convar. When the convar changes this panel will update automatically.
     * 
     * For developer implementation, see {{GlobalFunction|Derma_Install_Convar_Functions}}. 
     * @param convar  The console variable to check. 
     * @example
     * 
     * local checkbox = vgui.Create( "DCheckBoxLabel", myFrame )
     * checkbox:SetConVar( "sv_cheats" )
     * checkbox:SetText( "Enable cheats?" )
     * checkbox:SetPos( 5, 25 )
     * checkbox:SizeToContents()
     * 
     * // Makes a checkbox linked to the '''sv_cheats''' convar. 
     */
    public SetConVar(convar: string): void;
    
    /**
     * Stores a string in the named cookie using {{ClassFunction|Panel|GetCookieName}} as prefix.
     * 
     * You can also retrieve and modify this cookie by using the {{Lib|cookie}}. Cookies are stored in this format:
     * <code>panelCookieName.cookieName</code>
     * 
     * {{Warning|The panel's cookie name MUST be set for this function to work. See {{ClassFunction|Panel|SetCookieName}}.}} 
     * @param cookieName  The unique name used to retrieve the cookie later. 
     * @param value  The value to store in the cookie. This can be retrieved later as a {{Type|string}} or {{Type|number}}. 
     */
    public SetCookie(cookieName: string, value: string): void;
    
    /**
     * Sets the panel's cookie name. Calls {{HookFunction|PANEL|LoadCookies}} if defined. 
     * @param name  The panel's cookie name. Used as prefix for {{ClassFunction|Panel|SetCookie}} 
     */
    public SetCookieName(name: string): void;
    
    /**
     * Sets the appearance of the cursor. 
     * @param cursor  The cursor to be set. Can be one of the following:
     * 
     * * arrow
     * * beam
     * * hourglass
     * * waitarrow
     * * crosshair
     * * up
     * * sizenwse
     * * sizenesw
     * * sizewe
     * * sizens
     * * sizeall
     * * no
     * * hand
     * * blank
     * 
     * Set to anything else to set it to "none", the default fallback. Do note that a value of "none" does not, as one might assume, result in no cursor being drawn - hiding the cursor requires a value of "blank" instead. 
     */
    public SetCursor(cursor: string): void;
    
    /**
     * Sets the drag parent.
     * 
     * Drag parent means that when we start to drag this panel, we'll really start dragging the defined parent. 
     * @param parent  The panel to set as drag parent. 
     */
    public SetDragParent(parent: Panel): void;
    
    /**
     * Sets the visibility of the language selection box in a TextEntry when typing in non-English mode.
     * 
     * See {{ClassFunction|Panel|SetDrawLanguageIDAtLeft}} for a function that changes the position of the language selection box.
     * 
     * [[Category:TextEntry]] 
     * @param visible  true to make it visible, false to hide it. 
     */
    public SetDrawLanguageID(visible: boolean): void;
    
    /**
     * Sets where to draw the language selection box.
     * 
     * See {{ClassFunction|Panel|SetDrawLanguageID}} for a function that hides or shows the language selection box.
     * 
     * [[Category:TextEntry]] 
     * @param left  true = left, false = right 
     */
    public SetDrawLanguageIDAtLeft(left: boolean): void;
    
    /**
     * Makes the panel render in front of all others, including the spawn menu and main menu.
     * 
     * Priority is given based on the last call, so of two panels that call this method, the second will draw in front of the first.
     * 
     * **Note:**
     * >This only makes the panel '''draw''' above other panels. If there's another panel that would have otherwise covered it, users will not be able to interact with it. 
     * @param drawOnTop [=false] Whether or not to draw the panel in front of all others. 
     */
    public SetDrawOnTop(drawOnTop?: boolean): void;
    
    /**
     * Sets the target area for dropping when an object is being dragged around this panel using the {{Lib|dragndrop}}. 
     * 
     * This draws a target box of the specified size and position, until {{ClassFunction|Panel|DragHoverEnd}} is called. It uses {{ClassFunction|Panel|DrawDragHover}} to draw this area. 
     * @param x  The x coordinate of the top-left corner of the drop area. 
     * @param y  The y coordinate of the top-left corner of the drop area. 
     * @param width  The width of the drop area. 
     * @param height  The height of the drop area. 
     */
    public SetDropTarget(x: number, y: number, width: number, height: number): void;
    
    /**
     * Sets the enabled state of a disable-able panel object, such as a {{Type|DButton}} or {{Type|DTextEntry}}.
     * 
     * See {{ClassFunction|Panel|IsEnabled}} for a function that retrieves the "enabled" state of a panel. 
     * @param enable  Whether to enable or disable the panel object. 
     */
    public SetEnabled(enable: boolean): void;
    
    /**
     * Adds a shadow falling to the bottom right corner of the panel's text. This has no effect on panels that do not derive from Label.
     * 
     * [[Category:Label]] 
     * @param distance  The distance of the shadow from the panel. 
     * @param Color  The color of the shadow. Uses the {{Struct|Color}}. 
     */
    public SetExpensiveShadow(distance: number, Color: Color): void;
    
    /**
     * Sets the foreground color of a panel.
     * 
     * For a {{Type|Label}} or {{Type|RichText}}, this is the color of its text.
     * 
     * This function calls {{ClassFunction|Panel|SetFGColorEx}} internally. 
     * 
     * **Note:**
     * >This doesn't apply to all VGUI elements (such as {{Type|DLabel}}) and its function varies between them 
     * @param r_or_color  The red channel of the color, or a {{Struct|Color}}. If you pass the latter, the following three arguments are ignored. 
     * @param g  The green channel of the color. 
     * @param b  The blue channel of the color. 
     * @param a  The alpha channel of the color. 
     * @example
     * 
     * local label = vgui.Create( "Label" )
     * 
     * label:SetFGColor( Color( 255, 255, 255, 255 ) )
     * 
     * // Creates a {{Type|Label}} and sets its text color to white.@example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(200, 50)
     * TextFrame:Center()
     * TextFrame:SetTitle("This is a color test")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Sample text
     * richtext:SetText("Here is some light green text.")
     * 
     * // When the panel is ready for layout, make the text light green
     * function richtext:PerformLayout()
     * 	self:SetFGColor(Color(153, 255, 153))
     * end
     * 
     * // Sets the foreground color of a {{Type|RichText}} to match the chat box format. 
     */
    public SetFGColor(r_or_color: number, g: number, b: number, a: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Sets the foreground color of the panel.
     * 
     * For labels, this is the color of their text. 
     * @param r  The red channel of the color. 
     * @param g  The green channel of the color. 
     * @param b  The blue channel of the color. 
     * @param a  The alpha channel of the color. 
     */
    public SetFGColorEx(r: number, g: number, b: number, a: number): void;
    
    /**
     * {{Stub}}
     * 
     * Sets the panel that owns this FocusNavGroup to be the root in the focus traversal hierarchy.
     * 
     * [[Category:EditablePanel]] 
     * @param state 
     */
    public SetFocusTopLevel(state: boolean): void;
    
    /**
     * Sets the font used to render this panel's text.
     * 
     * To retrieve the font used by a panel, call {{ClassFunction|Panel|GetFont}}.
     * 
     * [[Category:Label]]
     * [[Category:TextEntry]]
     * [[Category:RichText]] 
     * @param fontName  The name of the font.
     * 
     * See [[Default_Fonts|here]] for a list of existing fonts.
     * Alternatively, use {{LibraryFunction|surface|CreateFont}} to create your own custom font. 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(200, 100)
     * TextFrame:Center()
     * TextFrame:SetTitle("This is a font test")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Sample text
     * richtext:SetText("This is a sample of text using the chat box font.")
     * 
     * // Ensure font and text color changes are applied
     * function richtext:PerformLayout()
     * 
     * 	self:SetFontInternal("ChatFont")
     * 	self:SetFGColor(Color(255, 255, 255))
     * 	
     * end
     * 
     * // Sets the font of a {{Type|RichText}} element to match the chat box font. 
     */
    public SetFontInternal(fontName: string): void;
    
    /**
     * Sets the height of the panel. 
     * @param height  The height to be set. 
     */
    public SetHeight(height: number): void;
    
    /**
     * [[Category:HTML]][[Category:Awesomium]]Allows you to set HTML code within a panel. 
     * @param HTML_code  The code to set. 
     * @example
     * 
     * local HTML = vgui.Create( "HTML", DPanel )
     * HTML:SetHTML( "<p>Put HTML code here</p>" )
     * HTML:SetSize( 390, 400 )
     * 
     * // 
     */
    public SetHTML(HTML_code: string): void;
    
    /**
     * Allows or disallows the panel to receive keyboard focus and input. This is recursively applied to all children. 
     * @param enable  Whether keyboard input should be enabled for this panel. 
     */
    public SetKeyboardInputEnabled(enable: boolean): void;
    
    /**
     * **Deprecated:**
     * >Alias of {{ClassFunction|Panel|SetKeyboardInputEnabled}}
     * 
     * Enables or disables the keyboard input for the panel. 
     * @param keyboardInput  Whether to enable or disable keyboard input. 
     */
    public SetKeyBoardInputEnabled(keyboardInput: boolean): void;
    
    /**
     * Sets the minimum dimensions of the panel or object.
     * 
     * You can restrict either or both values.
     * 
     * Calling the function without arguments will remove the minimum size. 
     * @param minW [=nil] The minimum width of the object. 
     * @param minH [=nil] The minimum height of the object. 
     * @example
     * 
     * local frame = vgui.Create( "DFrame" )
     * frame:SetSize( 800, 600 )
     * frame:SetSizable( true )
     * frame:SetMinimumSize( nil, 300 )
     * frame:MakePopup()
     * 
     * // Restricting height but not width 
     */
    public SetMinimumSize(minW?: number, minH?: number): void;
    
    /**
     * [[Category:ModelImage]][[Category:SpawnIcon]]Sets the model to be displayed by {{Type|SpawnIcon}}.[[Category:SpawnIcon]] 
     * @param ModelPath  The path of the model to set 
     * @param skin [=0] The skin to set 
     * @param bodygroups [=""] The body groups to set. Each single-digit number in the string represents a separate bodygroup. '''This make it impossible to set any body group to a value higher than 9!''' 
     */
    public SetModel(ModelPath: string, skin?: number, bodygroups?: string): void;
    
    /**
     * Enables or disables the mouse input for the panel. 
     * @param mouseInput  Whenever to enable or disable mouse input. 
     */
    public SetMouseInputEnabled(mouseInput: boolean): void;
    
    /**
     * Enables or disables the multi-line functionality of a text object, such as a {{Type|DTextEntry}}.
     * 
     * [[Category:TextEntry]] 
     * @param multiline  Whether to enable multiline or not. 
     */
    public SetMultiline(multiline: boolean): void;
    
    /**
     * Sets the internal name of the panel. 
     * @param name  The new name of the panel. 
     */
    public SetName(name: string): void;
    
    /**
     * Sets whenever all the default background of the panel should be drawn or not. 
     * @param paintBackground  Whenever to draw the background or not. 
     */
    public SetPaintBackgroundEnabled(paintBackground: boolean): void;
    
    /**
     * Sets whenever all the default border of the panel should be drawn or not. 
     * @param paintBorder  Whenever to draw the border or not. 
     */
    public SetPaintBorderEnabled(paintBorder: boolean): void;
    
    /**
     * Enables or disables painting of the panel manually with {{ClassFunction|Panel|PaintManual}}. 
     * @param paintedManually  True if the panel should be painted manually. 
     */
    public SetPaintedManually(paintedManually: boolean): void;
    
    /**
     * **Deprecated:**
     * >This function does nothing.
     * 
     * This function does nothing. 
     */
    public SetPaintFunction(): void;
    
    /**
     * Sets the parent of the panel. 
     * @param parent  The new parent of the panel. 
     */
    public SetParent(parent: Panel): void;
    
    /**
     * Used by {{Type|AvatarImage}} to load an avatar for given player.[[Category:AvatarImage]] 
     * @param player  The player to use avatar of. 
     * @param size  The size of the avatar to use. Acceptable sizes are 32, 64, 184. 
     */
    public SetPlayer(player: Player, size: number): void;
    
    /**
     * If this panel object has been made a popup with {{ClassFunction|Panel|MakePopup}}, this method will prevent it from drawing in front of other panels when it receives input focus. 
     * @param stayAtBack  If ''true'', the popup panel will not draw in front of others when it gets focus, for example when it is clicked. 
     */
    public SetPopupStayAtBack(stayAtBack: boolean): void;
    
    /**
     * Sets the position of the panel.
     * 
     * This will trigger {{HookFunction|PANEL|PerformLayout}}. You should avoid calling this function in {{HookFunction|PANEL|PerformLayout}} to avoid infinite loops.
     * 
     * **Note:**
     * >If you wish to position and re-size panels without much guesswork and have them look good on different screen resolutions, you may find {{ClassFunction|Panel|Dock}} useful 
     * @param posX  The x coordinate of the position. 
     * @param posY  The y coordinate of the position. 
     */
    public SetPos(posX: number, posY: number): void;
    
    /**
     * Sets whenever the panel should be rendered in the next screenshot. 
     * @param renderInScreenshot  Whenever to render or not. 
     */
    public SetRenderInScreenshots(renderInScreenshot: boolean): void;
    
    /**
     * Sets whether the panel object can be selected or not (like icons in the Spawn Menu, holding {{Key|Shift}}). If enabled, this will affect the function of a {{Type|DButton}} whilst {{Key|Shift}} is pressed. {{ClassFunction|Panel|SetSelected}} can be used to select/deselect the object. 
     * @param selectable  Whether the panel object should be selectable or not. 
     */
    public SetSelectable(selectable: boolean): void;
    
    /**
     * Sets the selected state of a selectable panel object. This functionality is set with {{ClassFunction|Panel|SetSelectable}} and checked with {{ClassFunction|Panel|IsSelectable}}. 
     * @param selected [=false] Whether the object should be selected or deselected. {{ClassFunction|Panel|IsSelected}} can be used to determine the selected state of the object. 
     */
    public SetSelected(selected?: boolean): void;
    
    /**
     * Enables the panel object for selection (much like the spawn menu). 
     * @param selCanvas  Any value other than ''nil'' or ''false'' will enable the panel object for selection. It is recommended to pass ''true''. 
     */
    public SetSelectionCanvas(selCanvas: any): void;
    
    /**
     * Sets the size of the panel.
     * 
     * **Note:**
     * >If you wish to position and re-size panels without much guesswork and have them look good on different screen resolutions, you may find {{ClassFunction|Panel|Dock}} useful 
     * @param width  The width of the panel. 
     * @param height  The height of the panel. 
     */
    public SetSize(width: number, height: number): void;
    
    /**
     * Sets the derma skin that the panel object will use, and refreshes all panels with {{LibraryFunction|derma|RefreshSkins}}. 
     * @param skinName  The name of the skin to use. The default derma skin is ''Default''. 
     */
    public SetSkin(skinName: string): void;
    
    /**
     * [[Category:ModelImage]][[Category:SpawnIcon]]Sets the [[Silkicons|silkicon]] of a panel object such as a {{Type|SpawnIcon}} and {{Type|ModelImage}}. 
     * @param icon  The [[Silkicons|silkicon]] to use. 
     */
    public SetSpawnIcon(icon: string): void;
    
    /**
     * Used by {{Type|AvatarImage}} panels to load an avatar by its 64-bit Steam ID (community ID).[[Category:AvatarImage]] 
     * @param steamid  The 64bit SteamID of the player to load avatar of 
     * @param size  The size of the avatar to use. Acceptable sizes are 32, 64, 184. 
     * @example
     * 
     * // Returns a random 64-bit Steam ID between STEAM_0:0:1 and STEAM_0:1:100000000
     * function GetRandomSteamID()
     * 	return "7656119"..tostring(7960265728+math.random(1, 200000000))
     * end
     * 
     * // Create the Steam User Grid
     * // Arg1: the size of each avatar
     * // Arg2: the size to load each avatar (16, 32, 64, 84, 128, 184)
     * function CreateSteamUserGrid(av_size, av_res)
     * 
     * 	// Remove this block of code if you do not mind loading thousands of avatars
     * 	if(av_size < 64) then
     * 		Error("Avatar size cannot be less than 64 square pixels.\n")
     * 		return
     * 	end
     * 	
     * 	// Delete existing grid
     * 	if(SteamUserGrid) then SteamUserGrid:Remove() end
     * 	
     * 	// The amount of avatars we can fit width-wise and height-wise
     * 	local w_count = math.floor(ScrW()/av_size)
     * 	local h_count = math.floor((ScrH()-25)/av_size)	// 25 = frame header size
     * 		
     * 	// Container panel
     * 	SteamUserGrid = vgui.Create("DFrame")
     * 	SteamUserGrid:SetSize(w_count*av_size, (h_count*av_size)+25)
     * 	SteamUserGrid:Center()
     * 	SteamUserGrid:SetTitle("Randomly Generated Grid of Steam Users")
     * 	SteamUserGrid:MakePopup()
     * 	
     * 	// Loop variables
     * 	local avatar, random_id
     * 	
     * 	// Create enough avatars to fill up screen without overflowing
     * 	for i = 0, (w_count*h_count)-1 do
     * 	
     * 		random_id = GetRandomSteamID()
     * 		
     * 		// Add avatar to container panel
     * 		avatar = vgui.Create("AvatarImage", SteamUserGrid)
     * 		
     * 		// Layout the avatars in a grid
     * 		avatar:SetPos((i%w_count)*av_size, 25+math.floor(i/w_count)*av_size)
     * 		
     * 		// Load the avatar image
     * 		avatar:SetSteamID(random_id, av_res)
     * 
     * 		avatar:SetSize(av_size, av_size)
     * 		
     * 		// Open user's Steam page on avatar click
     * 		avatar.OnMousePressed = function(self)
     * 			
     * 			local url = <nowiki>"http://steamcommunity.com/profiles/"</nowiki>..random_id
     * 			
     * 			gui.OpenURL(url)
     * 			
     * 		end
     * 		
     * 	end
     * 	
     * end
     * 
     * // Creates a grid of randomly generated Steam avatars which link to their corresponding Steam user pages. 
     */
    public SetSteamID(steamid: string, size: number): void;
    
    /**
     * {{Stub}}
     * 
     * Possibly related to in which order pressing TAB should "select/highlight" the panels, presumably used on text entries and buttons. 
     * @param position 
     */
    public SetTabPosition(position: number): void;
    
    /**
     * Sets height of a panel. An alias of {{ClassFunction|Panel|SetHeight}}. 
     * @param height  Desired height to set 
     */
    public SetTall(height: number): void;
    
    /**
     * Removes the panel after given time in seconds.
     * **Note:**
     * >This function will not work if {{HookFunction|PANEL|AnimationThink}} is overridden, unless {{ClassFunction|Panel|AnimationThinkInternal}} is called every frame. 
     * @param delay  Delay in seconds after which the panel should be removed. 
     */
    public SetTerm(delay: number): void;
    
    /**
     * Sets the text value of a panel object containing text, such as a {{Type|Label}}, {{Type|TextEntry}} or  {{Type|RichText}} and their derivatives, such as {{Type|DLabel}}, {{Type|DTextEntry}} or {{Type|DButton}}.
     * 
     * {{Warning|When used on a {{Type|Label}} or its derivatives ( {{Type|DLabel}} and {{Type|DButton}} ), it will automatically call {{ClassFunction|Panel|InvalidateLayout}}, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.}}
     * [[Category:Label]]
     * [[Category:DLabel]]
     * [[Category:TextEntry]]
     * [[Category:RichText]]
     * [[Category:DTree_Node]] 
     * @param text  The text value to set. 
     * @example
     * 
     * // Window frame for the RichText
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(250, 150)
     * TextFrame:Center()
     * TextFrame:SetTitle("#VAC_ConnectionRefusedTitle") // Results in "Connection Refused - VAC"
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Set the text to the message you get when VAC banned
     * richtext:SetText("#VAC_ConnectionRefusedDetail")
     * 
     * // Creates a {{Type|RichText}} element and sets the text to a localized string; the default VAC rejection message. 
     */
    public SetText(text: string): void;
    
    /**
     * Sets the left and top text margins of a text-based panel object, such as a {{Type|DButton}} or {{Type|DLabel}}.
     * 
     * [[Category:Label]] 
     * @param insetX  The left margin for the text, in pixels. This will only affect centered text if the margin is greater than its x-coordinate. 
     * @param insetY  The top margin for the text, in pixels. 
     */
    public SetTextInset(insetX: number, insetY: number): void;
    
    /**
     * Sets the height of a {{Type|RichText}} element to accommodate the text inside.
     * 
     * **Note:**
     * >This function internally relies on {{ClassFunction|Panel|GetNumLines}}, so it should be called at least a couple frames after modifying the text using {{ClassFunction|Panel|AppendText}}
     * 
     * [[Category:RichText]] 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(250, 210)
     * TextFrame:Center()
     * TextFrame:SetTitle("No set height")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:SetPos(10, 30)
     * richtext:SetWidth(230)
     * 
     * // Block of text
     * richtext:AppendText("#ServerBrowser_ServerWarning_MaxPlayers")
     * 
     * function richtext:PerformLayout() self:SetBGColor(Color(0, 0, 0)) end
     * 
     * // Set to full height after 2 seconds
     * timer.Simple(2, function()
     * 
     * 	richtext:SetToFullHeight()
     * 	
     * 	TextFrame:SetTitle("Full set height")
     * 	
     * end)
     * 
     * // Creates a {{Type|RichText}} panel with no set height. The proper height is applied 2 seconds after being created in order to show the difference. 
     */
    public SetToFullHeight(): void;
    
    /**
     * Sets the tooltip to be displayed when a player hovers over the panel object with their cursor. 
     * @param str  The text to be displayed in the tooltip. Set false to disable it. 
     * @example
     * 
     * local frame = vgui.Create("DFrame")
     * frame:SetSize(96, 96)
     * frame:Center()
     * frame:MakePopup(true)
     * 
     * local icon = frame:Add("SpawnIcon")
     * icon:SetPos(0, 20)
     * icon:SetSize(64, 64)
     * icon:SetModel("models/props_junk/watermelon01.mdl")
     * icon:SetTooltip(false) // disable tooltip for this panel
     * 
     * // To disable tooltip set first argument to false 
     */
    public SetTooltip(str: string): void;
    
    /**
     * **Deprecated:**
     * >Alias of {{ClassFunction|Panel|SetTooltip}}. 
     */
    public SetToolTip(): void;
    
    /**
     * Sets the panel to be displayed as a tooltip when a player hovers over the panel object with their cursor. Note that it will not override the default {{Type|DTooltip}} panel.
     * 
     * **Note:**
     * >{{ClassFunction|Panel|SetTooltip}} will override this functionality. 
     * @param tooltipPanel [=nil] The panel to use as the tooltip. 
     * @example
     * 
     * local pnl = vgui.Create( "DFrame" )
     * pnl:SetSize( 500, 500 )
     * pnl:Center()
     * pnl:MakePopup()
     * 
     * local p = vgui.Create( "Panel" )
     * p:SetSize( 100, 100 )
     * p:SetVisible( false )
     * p.Paint = function( s, w, h ) draw.RoundedBox( 0, 0, 0, w, h, Color( 255, 0, 0 ) ) end
     * 
     * local c = vgui.Create( "DButton", p )
     * c:SetText( "test" )
     * c:SetSize( 50, 50 )
     * c:SetPos( 5, 5 )
     * 
     * local b = pnl:Add( "DButton" )
     * b:Dock( TOP )
     * //b:SetTooltip( "test" ) // This will stop SetTooltipPanel from working.
     * b:SetTooltipPanel( p )
     * 
     * // Example usage of this function 
     */
    public SetTooltipPanel(tooltipPanel?: Panel): void;
    
    /**
     * **Deprecated:**
     * >Alias of {{ClassFunction|Panel|SetTooltipPanel}}. 
     */
    public SetToolTipPanel(): void;
    
    /**
     * [[Category:DLabelURL]][[Category:URLLabel]]Sets the URL of a link-based panel such as {{Type|DLabelURL}}. 
     * @param url  The URL to set. This '''must''' begin with ''<nowiki>http://</nowiki>''. 
     */
    public SetURL(url: string): void;
    
    /**
     * Sets the visibility of the vertical scrollbar.
     * 
     * Works for {{Type|RichText}} and {{Type|TextEntry}}.
     * 
     * [[Category:RichText]]
     * [[Category:TextEntry]] 
     * @param display [=false] True to display the vertical text scroll bar, false to hide it. 
     */
    public SetVerticalScrollbarEnabled(display?: boolean): void;
    
    /**
     * Sets the "visibility" of the panel. 
     * @param visible  The visibility of the panel. 
     */
    public SetVisible(visible: boolean): void;
    
    /**
     * Sets width of a panel. An alias of {{ClassFunction|Panel|SetWidth}}. 
     * @param width  Desired width to set 
     */
    public SetWide(width: number): void;
    
    /**
     * Sets the width of the panel. 
     * @param width  The width of the panel. 
     */
    public SetWidth(width: number): void;
    
    /**
     * This makes it so that when you're hovering over this panel you can `click` on the world. Your viewmodel will aim etc.
     * 
     * **Bug [#3467](https://github.com/Facepunch/garrysmod-issues/issues/3467):**
     * >This function doesn't scale with custom FOV specified by {{HookFunction|GM|CalcView}} or {{HookFunction|WEAPON|TranslateFOV}}. 
     * @param enabled 
     */
    public SetWorldClicker(enabled: boolean): void;
    
    /**
     * Sets whether text wrapping should be enabled or disabled on {{Type|Label}} and {{Type|DLabel}} panels.
     * Use {{ClassFunction|DLabel|SetAutoStretchVertical}} to automatically correct vertical size; {{ClassFunction|Panel|SizeToContents}} will not set the correct height. 
     * @param wrap  True to enable text wrapping, false otherwise. 
     * @example
     * 
     * // Background panel
     * BGPanel = vgui.Create("DPanel")
     * BGPanel:SetSize(300, 130)
     * BGPanel:Center()
     * BGPanel:SetBackgroundColor(Color(0, 0, 0))
     * 		
     * // Label with no text wrapping
     * local lbl_nowrap = vgui.Create("DLabel", BGPanel)
     * lbl_nowrap:SetPos(10, 10)
     * lbl_nowrap:SetSize(280, 50)		
     * lbl_nowrap:SetFont("GModNotify")
     * lbl_nowrap:SetText("This is a label that has text wrapping disabled.")
     * 
     * lbl_nowrap:SetWrap(false)
     * 
     * // Label with text wrapping
     * local lbl_wrap = vgui.Create("DLabel", BGPanel)
     * lbl_wrap:SetPos(10, 70)
     * lbl_wrap:SetSize(280, 50)
     * lbl_wrap:SetFont("GModNotify")
     * lbl_wrap:SetText("This is a label that has text wrapping enabled.")
     * 
     * lbl_wrap:SetWrap(true)
     * 
     * // Creates two labels in a panel and sets the text wrapping to false and true respectively. 
     */
    public SetWrap(wrap: boolean): void;
    
    /**
     * Sets the panels z position which determines the rendering order.
     * 
     * Panels with lower z positions appear behind panels with higher z positions.
     * 
     * This also controls in which order panels docked with {{ClassFunction|Panel|Dock}} appears. 
     * @param zIndex  The z position of the panel.
     * 
     * Can't be lower than -32768 or higher than 32767. 
     */
    public SetZPos(zIndex: number): void;
    
    /**
     * Makes a panel visible. 
     */
    public Show(): void;
    
    /**
     * Uses animation to resize the panel to the specified size. 
     * @param sizeW [=0] The target width of the panel. Use -1 to retain the current width. 
     * @param sizeH [=0] The target height of the panel. Use -1 to retain the current height. 
     * @param time [=] The time to perform the animation within. 
     * @param delay [=0] The delay before the animation starts. 
     * @param ease [=-1] Easing of the start and/or end speed of the animation. See {{ClassFunction|Panel|NewAnimation}} for how this works. 
     * @param callback [=] The function to be called once the animation finishes. Arguments are:
     * * {{FuncArg|table|animData|The {{Struct|AnimationData}} that was used.}}
     * * {{FuncArg|Panel|pnl|The panel object that was resized.}} 
     */
    public SizeTo(sizeW?: number, sizeH?: number, time?: number, delay?: number, ease?: number, callback?: Function): void;
    
    /**
     * Uses animation to resize the panel to the specified size. 
     * @param time  The time to perform the animation within. 
     * @param callback  The function to be called once the animation finishes. Arguments are:
     * * {{FuncArg|table|animData|The {{Struct|AnimationData}} that was used.}}
     * * {{FuncArg|Panel|pnl|The panel object that was resized.}} 
     */
    public SizeTo(time: number, callback: Function): void;
    
    /**
     * Resizes the panel to fit the bounds of its children.
     * 
     * **Note:**
     * >Your panel must have its layout updated ({{ClassFunction|Panel|InvalidateLayout}}) for this function to work properly. 
     * @param sizeW  Resize with width of the panel. 
     * @param sizeH  Resize the height of the panel. 
     * @example
     * 
     * local Frame = vgui.Create( "DFrame" )
     * Frame:SetSize( 300, 400 )
     * Frame:Center()
     * Frame:MakePopup()
     * Frame:SetSizable( true )
     * 
     * // with :InvalidateLayout(true)
     * local backgroundPanel = vgui.Create( "DPanel", Frame )
     * backgroundPanel:Dock( TOP )
     * backgroundPanel:DockPadding( 4, 4, 4, 4 )
     * backgroundPanel:DockMargin( 0, 0, 0, 4 )
     * 
     * local button1 = vgui.Create( "DButton", backgroundPanel )
     * button1:Dock( TOP )
     * button1:DockMargin( 0, 0, 0, 4 )
     * button1:SetTall( 60 )
     * button1:SetText( "c1" )
     * 
     * local button2 = vgui.Create( "DButton", backgroundPanel )
     * button2:Dock( TOP )
     * button2:SetTall( 60 )
     * button2:SetText( "c2" )
     * 
     * backgroundPanel:InvalidateLayout( true )
     * backgroundPanel:SizeToChildren( false, true )
     * 
     * // now w/o :InvalidateLayout
     * local backgroundPanel = vgui.Create( "DPanel", Frame )
     * backgroundPanel:Dock( TOP )
     * backgroundPanel:DockPadding( 4, 4, 4, 4 )
     * 
     * local button1 = vgui.Create( "DButton", backgroundPanel )
     * button1:Dock( TOP )
     * button1:DockMargin( 0, 0, 0, 4 )
     * button1:SetTall( 60 )
     * button1:SetText( "c1" )
     * 
     * local button2 = vgui.Create( "DButton", backgroundPanel )
     * button2:Dock( TOP )
     * button2:SetTall( 60 )
     * button2:SetText( "c2" )
     * 
     * backgroundPanel:SizeToChildren( false, true )
     * 
     * // Using {{ClassFunction|Panel|InvalidateLayout}} 
     */
    public SizeToChildren(sizeW: boolean, sizeH: boolean): void;
    
    /**
     * Resizes the panel so that its width and height fit all of the content inside.
     * 
     * **Note:**
     * >Only works on {{Type|Label}} derived panels such as {{Type|DLabel}} by default, and on any panel that manually implemented the {{ClassFunction|Panel|SizeToContents}} method, such as {{Type|DNumberWang}} and {{Type|DImage}}.
     * 
     * {{Warning|You must call this function '''AFTER''' setting text/font, adjusting child panels or otherwise altering the panel.}}
     * 
     * [[Category:DImage]]
     * [[Category:DImageButton]]
     * [[Category:DNumberWang]]
     * [[Category:DListView]] 
     */
    public SizeToContents(): void;
    
    /**
     * Resizes the panel object's width to accommodate all child objects/contents.
     * 
     * Only works on {{Type|Label}} derived panels such as {{Type|DLabel}} by default, and on any panel that manually implemented {{ClassFunction|Panel|GetContentSize}} method.
     * 
     * **Note:**
     * >You must call this function '''AFTER''' setting text/font or adjusting child panels. 
     * @param addVal [=0] The number of extra pixels to add to the width. Can be a negative number, to reduce the width. 
     */
    public SizeToContentsX(addVal?: number): void;
    
    /**
     * Resizes the panel object's height to accommodate all child objects/contents.
     * 
     * Only works on {{Type|Label}} derived panels such as {{Type|DLabel}} by default, and on any panel that manually implemented {{ClassFunction|Panel|GetContentSize}} method.
     * 
     * **Note:**
     * >You must call this function '''AFTER''' setting text/font or adjusting child panels. 
     * @param addVal [=0] The number of extra pixels to add to the height. 
     */
    public SizeToContentsY(addVal?: number): void;
    
    /**
     * Slides the panel in from above. 
     * @param Length  Time to complete the animation. 
     */
    public SlideDown(Length: number): void;
    
    /**
     * Slides the panel out to the top. 
     * @param Length  Time to complete the animation. 
     */
    public SlideUp(Length: number): void;
    
    /**
     * Begins a box selection, enables mouse capture for the panel object, and sets the start point of the selection box to the mouse cursor's position, relative to this object. For this to work, either the object or its parent must be enabled as a selection canvas. This is set using {{ClassFunction|Panel|SetSelectionCanvas}}. 
     */
    public StartBoxSelection(): void;
    
    /**
     * Stops all panel animations by clearing its animation list. This also clears all delayed animations. 
     */
    public Stop(): void;
    
    /**
     * Resizes the panel object's height so that its bottom is aligned with the top of the passed panel. An offset greater than zero will reduce the panel's height to leave a gap between it and the passed panel. 
     * @param tgtPanel  The panel to align the bottom of this one with. 
     * @param offset [=0] The gap to leave between this and the passed panel. Negative values will cause the panel's height to increase, forming an overlap. 
     */
    public StretchBottomTo(tgtPanel: Panel, offset?: number): void;
    
    /**
     * Resizes the panel object's width so that its right edge is aligned with the left of the passed panel. An offset greater than zero will reduce the panel's width to leave a gap between it and the passed panel. 
     * @param tgtPanel  The panel to align the right edge of this one with. 
     * @param offset [=0] The gap to leave between this and the passed panel. Negative values will cause the panel's width to increase, forming an overlap. 
     */
    public StretchRightTo(tgtPanel: Panel, offset?: number): void;
    
    /**
     * Sets the dimensions of the panel to fill its parent. It will only stretch in directions that aren't nil. 
     * @param offsetLeft  The left offset to the parent. 
     * @param offsetTop  The top offset to the parent. 
     * @param offsetRight  The right offset to the parent. 
     * @param offsetBottom  The bottom offset to the parent. 
     */
    public StretchToParent(offsetLeft: number, offsetTop: number, offsetRight: number, offsetBottom: number): void;
    
    /**
     * Called every frame while {{ClassFunction|Panel|IsVisible}} is true. 
     */
    protected Think(): void;
    
    /**
     * Toggles the selected state of a selectable panel object. This functionality is set with {{ClassFunction|Panel|SetSelectable}} and checked with {{ClassFunction|Panel|IsSelectable}}. To check whether the object is selected or not, {{ClassFunction|Panel|IsSelected}} is used. 
     */
    public ToggleSelection(): void;
    
    /**
     * Toggles the visibility of a panel and all its children. 
     */
    public ToggleVisible(): void;
    
    /**
     * Restores the last saved state (caret position and the text inside) of a {{Type|TextEntry}}. Should act identically to pressing CTRL+Z in a {{Type|TextEntry}}.
     * 
     * See also {{ClassFunction|Panel|SaveUndoState}}.
     * 
     * [[Category:TextEntry]] 
     */
    public Undo(): void;
    
    /**
     * Recursively deselects this panel object and all of its children. This will cascade to all child objects at every level below the parent. 
     */
    public UnselectAll(): void;
    
    /**
     * Forcibly updates the panels' HTML Material, similar to when Paint is called on it.
     * This is only useful if the panel is not normally visible, i.e the panel exists purely for its HTML Material.
     * **Note:**
     * >Only works on with panels that have a HTML Material. See {{ClassFunction|Panel|GetHTMLMaterial}} for more details.
     * 
     * **Note:**
     * >A good place to call this is in the {{HookFunction|GM|PreRender}} hook
     * 
     * [[Category:HTML]][[Category:Awesomium]] 
     */
    public UpdateHTMLTexture(): void;
    
    /**
     * **Deprecated:**
     * >Use {{ClassFunction|Panel|IsValid}} instead.
     * 
     * Returns if a given panel is valid or not. 
     * @returns Whether the panel is valid or not, true being it is, false being it isn't. 
     */
    public Valid(): boolean;
}

/**
 */
declare class PanelList extends Panel {

}

/**
 * Path object for a NextBot NPC. Returned by {{GlobalFunction|Path}}. 
 */
declare class PathFollower {
    /**
     * If you created your path with type "Chase" this functions should be used in place of {{ClassFunction|PathFollower|Update}} to cause the bot to chase the specified entity. 
     * @param bot  The bot to update along the path 
     * @param ent  The entity we want to chase 
     */
    public Chase(bot: NextBot, ent: Entity): void;
    
    /**
     * Compute shortest path from bot to 'goal' via A* algorithm. 
     * @param from  The nextbot we're generating for 
     * @param to  To point 
     * @param generator [=nil] A funtion that allows you to alter the path generation. See example below for the default function. 
     * @returns 
     * 
     * * If returns true, path was found to the goal position.
     * * If returns false, path may either be invalid (use IsValid() to check), or valid but doesn't reach all the way to the goal. 
     * @example
     * 
     * path:Compute( self, pos, function( area, fromArea, ladder, elevator, length )
     * 	if ( !IsValid( fromArea ) ) then
     * 
     * 		// first area in path, no cost
     * 		return 0
     * 	
     * 	else
     * 	
     * 		if ( !self.loco:IsAreaTraversable( area ) ) then
     * 			// our locomotor says we can't move here
     * 			return -1
     * 		end
     * 
     * 		// compute distance traveled along path so far
     * 		local dist = 0
     * 
     * 		if ( IsValid( ladder ) ) then
     * 			dist = ladder:GetLength()
     * 		elseif ( length > 0 ) then
     * 			// optimization to avoid recomputing length
     * 			dist = length
     * 		else
     * 			dist = ( area:GetCenter() - fromArea:GetCenter() ):GetLength()
     * 		end
     * 
     * 		local cost = dist + fromArea:GetCostSoFar()
     * 
     * 		// check height change
     * 		local deltaZ = fromArea:ComputeAdjacentConnectionHeightChange( area )
     * 		if ( deltaZ >= self.loco:GetStepHeight() ) then
     * 			if ( deltaZ >= self.loco:GetMaxJumpHeight() ) then
     * 				// too high to reach
     * 				return -1
     * 			end
     * 
     * 			// jumping is slower than flat ground
     * 			local jumpPenalty = 5
     * 			cost = cost + jumpPenalty * dist
     * 		elseif ( deltaZ < -self.loco:GetDeathDropHeight() ) then
     * 			// too far to drop
     * 			return -1
     * 		end
     * 
     * 		return cost
     * 	end
     * end )
     * 
     * // The default path generator. You '''do not have''' to provide the PathFollower.Compute any generator functions if you want to use the default generator. 
     */
    public Compute(from: NextBot, to: Vector, generator?: Function): boolean;
    
    /**
     * Draws the path. This is meant for debugging - and uses debug overlay. 
     */
    public Draw(): void;
    
    /**
     * Returns the first segment of the path. 
     * @returns A table with {{Struct|PathSegment}}. 
     */
    public FirstSegment(): PathSegment;
    
    /**
     * Returns the age since the path was built 
     * @returns Path age 
     */
    public GetAge(): number;
    
    /**
     * Returns all of the segments of the given path. 
     * @returns A table of tables with {{Struct|PathSegment}}. 
     */
    public GetAllSegments(): table[];
    
    /**
     * The closest position along the path to a position 
     * @param position  The point we're querying for 
     * @returns The closest position on the path 
     */
    public GetClosestPosition(position: Vector): Vector;
    
    /**
     * Returns the current goal data. Can return nil if the current goal is invalid, for example immediately after {{ClassFunction|PathFollower|Update}}. 
     * @returns A table with {{Struct|PathSegment}}. 
     */
    public GetCurrentGoal(): PathSegment;
    
    /**
     * Returns the cursor data 
     * @returns A table with 3 keys:
     * {{FuncArg|number|curvature}}
     * 
     * {{FuncArg|Vector|forward}}
     * 
     * {{FuncArg|Vector|pos}} 
     */
    public GetCursorData(): table;
    
    /**
     * Returns the current progress along the path 
     * @returns The current progress 
     */
    public GetCursorPosition(): number;
    
    /**
     * Returns the path end position 
     * @returns The end position 
     */
    public GetEnd(): Vector;
    
    /**
     * @returns 
     */
    public GetHindrance(): Entity;
    
    /**
     * Returns the total length of the path 
     * @returns The length of the path 
     */
    public GetLength(): number;
    
    /**
     * Returns the vector position of distance along path 
     * @param distance  The distance along the path to query 
     * @returns The position 
     * @example
     * 
     * path:GetPositionOnPath( path:GetCursorPosition() )
     * 
     * // Gets the current position on the path as a {{Type|Vector}}. 
     */
    public GetPositionOnPath(distance: number): Vector;
    
    /**
     * Returns the path start position 
     * @returns The start position 
     */
    public GetStart(): Vector;
    
    /**
     * Invalidates the current path 
     */
    public Invalidate(): void;
    
    /**
     * Returns true if the path is valid 
     * @returns Wether the path is valid or not. 
     */
    public IsValid(): boolean;
    
    /**
     * Returns the last segment of the path. 
     * @returns A table with {{Struct|PathSegment}}. 
     */
    public LastSegment(): PathSegment;
    
    /**
     * Moves the cursor by give distance.
     * 
     * For a function that sets the distance, see {{ClassFunction|PathFollower|MoveCursorTo}}. 
     * @param distance  The distance to move the cursor (in relative world units) 
     */
    public MoveCursor(distance: number): void;
    
    /**
     * Sets the cursor position to given distance.
     * 
     * For relative distance, see {{ClassFunction|PathFollower|MoveCursor}}. 
     * @param distance  The distance to move the cursor (in world units) 
     */
    public MoveCursorTo(distance: number): void;
    
    /**
     * Moves the cursor of the path to the closest position compared to given vector. 
     * @param pos 
     * @param type [=0] Seek type
     * 
     * 0 = SEEK_ENTIRE_PATH - Search the entire path length
     * 
     * 1 = SEEK_AHEAD - Search from current cursor position forward toward end of path
     * 
     * 2 = SEEK_BEHIND - Search from current cursor position backward toward path start 
     * @param alongLimit [=0] 
     */
    public MoveCursorToClosestPosition(pos: Vector, type?: number, alongLimit?: number): void;
    
    /**
     * Moves the cursor to the end of the path 
     */
    public MoveCursorToEnd(): void;
    
    /**
     * Moves the cursor to the end of the path 
     */
    public MoveCursorToStart(): void;
    
    /**
     * Resets the age which is retrieved by {{ClassFunction|PathFollower|GetAge}} to 0. 
     */
    public ResetAge(): void;
    
    /**
     * How close we can get to the goal to call it done 
     * @param distance  The distance we're setting it to 
     */
    public SetGoalTolerance(distance: number): void;
    
    /**
     * Sets minimum range movement goal must be along path 
     * @param mindist  The minimum look ahead distance 
     */
    public SetMinLookAheadDistance(mindist: number): void;
    
    /**
     * Move the bot along the path. 
     * @param bot  The bot to update along the path 
     */
    public Update(bot: NextBot): void;
}

/**
 * A PhysCollide holds collision data from VPhysics. These objects can be used to run (currently quite limited) collision tests, but do not represent actual physics objects.
 * 
 * Created by {{GlobalFunction|CreatePhysCollideBox}} or {{GlobalFunction|CreatePhysCollidesFromModel}}. 
 * !CustomConstructor CreatePhysCollideBox */
declare class PhysCollide {
    /**
     * Creates a new {{Type|PhysCollide}} from the given bounds.
     * 
     * **Bug [#3568](https://github.com/Facepunch/garrysmod-issues/issues/3568):**
     * >This fails to create planes or points - no components of the mins or maxs can be the same. 
     * @param mins  Min corner of the box. This is not automatically ordered with the maxs and must contain the smallest vector components. See {{GlobalFunction|OrderVectors}}. 
     * @param maxs  Max corner of the box. This is not automatically ordered with the mins and must contain the largest vector components. 
     * @example
     * 
     * AddCSLuaFile()
     * 
     * DEFINE_BASECLASS( "base_anim" )
     * 
     * ENT.PrintName = "Cube"
     * ENT.Spawnable = true
     * 
     * ENT.Mins = Vector( -16, -16, -16 )
     * ENT.Maxs = Vector(  16,  16,  16 )
     * 
     * function ENT:Initialize()
     *     self.PhysCollide = CreatePhysCollideBox( self.Mins, self.Maxs )
     *     self:SetCollisionBounds( self.Mins, self.Maxs )
     * 
     *     if SERVER then
     *         self:PhysicsInitBox( self.Mins, self.Maxs )
     *         self:SetSolid( SOLID_VPHYSICS )
     *         self:PhysWake()
     *     end
     * 
     *     if CLIENT then
     *         self:SetRenderBounds( self.Mins, self.Maxs )
     *     end
     * 
     *     self:EnableCustomCollisions( true )
     *     self:DrawShadow( false )
     * end
     * 
     * // Handles collisions against traces. This includes player movement.
     * function ENT:TestCollision( startpos, delta, isbox, extents )
     *     if not IsValid( self.PhysCollide ) then
     *         return
     *     end
     * 
     *     // TraceBox expects the trace to begin at the center of the box, but TestCollision is bad
     *     local max = extents
     *     local min = -extents
     *     max.z = max.z - min.z
     *     min.z = 0
     * 
     *     local hit, norm, frac = self.PhysCollide:TraceBox( self:GetPos(), self:GetAngles(), startpos, startpos + delta, min, max )
     * 
     *     if not hit then
     *         return
     *     end
     * 
     *     return { 
     *         HitPos = hit,
     *         Normal  = norm,
     *         Fraction = frac,
     *     }
     * end
     * 
     * function ENT:Draw()
     *     render.DrawWireframeBox( self:GetPos(), self:GetAngles(), self.Mins, self.Maxs, Color( 255, 0, 0 ), true )
     * end
     * 
     * // A box that interacts correctly with VPhysics objects and player movement. 
     */
    public constructor(mins: Vector, maxs: Vector);
    
    /**
     * Destroys the {{Type|PhysCollide}} object. 
     */
    public Destroy(): void;
    
    /**
     * Checks whether this {{Type|PhysCollide}} object is valid or not.
     * 
     * You should just use {{GlobalFunction|IsValid}} instead. 
     * @returns Is valid or not. 
     */
    public IsValid(): boolean;
    
    /**
     * Performs a trace against this PhysCollide with the given parameters. This can be used for both line traces and box traces. 
     * @param origin  The origin for the PhysCollide during the trace 
     * @param angles  The angles for the PhysCollide during the trace 
     * @param rayStart  The start position of the trace 
     * @param rayEnd  The end position of the trace 
     * @param rayMins  The mins of the trace's bounds 
     * @param rayMaxs  The maxs of the trace's bounds 
     * @returns [Hit position of the trace. This is false if the trace did not hit., Hit normal of the trace, Fraction of the trace. This is calculated from the distance between startPos, hitPos, and endPos.] 
     * !TupleReturn
     */
    public TraceBox(origin: Vector, angles: Angle, rayStart: Vector, rayEnd: Vector, rayMins: Vector, rayMaxs: Vector): [Vector, Vector, number];
}

/**
 * The physenv library allows you to control the physics environment created by the engine, and lets you modify constants such as gravity and maximum velocity. 
 */
declare namespace physenv {
    /**
     * Adds surface properties to the game's physics environment.
     * 
     * **Bug [#2604](https://github.com/Facepunch/garrysmod-issues/issues/2604):**
     * >The game has a limit of 128 surface properties - this includes properties loaded automatically from [https://github.com/Facepunch/garrysmod/blob/master/garrysmod/scripts/surfaceproperties.txt surfaceproperties.txt]. Due to this, there's only a small amount of open slots that can be registered with GMod's provided surfaceproperties.txt. 
     * @param properties  The properties to add. 
     * @example
     * 
     * physenv.AddSurfaceData([["scout_baseball"
     * {
     * 	"base"		"rubber"
     * 
     * 	"bulletimpact"	"Weapon_Baseball.HitWorld"
     * 	"scraperough"	"Grenade.ScrapeRough"
     * 	"scrapesmooth"	"Grenade.ScrapeSmooth"
     * 	"impacthard"	"Weapon_Baseball.HitWorld"
     * 	"impactsoft"	"Weapon_Baseball.HitWorld"
     * 	"rolling"	"Grenade.Roll"
     * }]])
     * 
     * // Adds the "" surface property from TF2. 
     */
    function AddSurfaceData(properties: string): void;
    
    /**
     * Returns the air density. 
     * @returns airDensity 
     */
    function GetAirDensity(): number;
    
    /**
     * Gets the global gravity. 
     * @returns gravity 
     */
    function GetGravity(): Vector;
    
    /**
     * Gets the current performance settings in table form. 
     * @returns Performance settings. See {{Struct|PhysEnvPerformanceSettings}} 
     */
    function GetPerformanceSettings(): PhysEnvPerformanceSettings;
    
    /**
     * Sets the air density. 
     * @param airDensity  The new air density. 
     */
    function SetAirDensity(airDensity: number): void;
    
    /**
     * Sets the directional gravity, does not work on players. 
     * @param gravity  The new gravity. 
     */
    function SetGravity(gravity: Vector): void;
    
    /**
     * Sets the performance settings. 
     * @param performanceSettings  The new performance settings. See {{Struct|PhysEnvPerformanceSettings}} 
     */
    function SetPerformanceSettings(performanceSettings: PhysEnvPerformanceSettings): void;
}

/**
 * This is the object returned by {{ClassFunction|Entity|GetPhysicsObject}} and {{ClassFunction|Entity|GetPhysicsObjectNum}}.
 * 
 * It represents a physics object. 
 */
declare class PhysObj {
    /**
     * Adds the specified velocity to the current. 
     * @param angularVelocity  Additional velocity. 
     */
    public AddAngleVelocity(angularVelocity: Vector): void;
    
    /**
     * Adds one or more bit flags. 
     * @param flags  Bitflag, see {{Enum|FVPHYSICS}}. 
     */
    public AddGameFlag(flags: FVPHYSICS): void;
    
    /**
     * Adds the specified velocity to the current. 
     * @param velocity  Additional velocity. 
     */
    public AddVelocity(velocity: Vector): void;
    
    /**
     * {{Stub}}Rotates the object so that it's angles are aligned to the ones inputted. 
     * @param from 
     * @param to 
     * @returns 
     */
    public AlignAngles(from: Angle, to: Angle): Angle;
    
    /**
     * Applies the specified force to the physics object. (in Newtons)
     * 
     * **Note:**
     * >This will not work on players, use {{ClassFunction|Entity|SetVelocity}} instead. 
     * @param force  The force to be applied. 
     * @example
     * 
     * function ENT:Initialize()
     *     self:SetModel("models/hunter/blocks/cube1x1x1.mdl")
     * 	self:PhysicsInit(SOLID_VPHYSICS)
     * 	self:SetSolid(SOLID_VPHYSICS)
     * 	self:SetMoveType(MOVETYPE_VPHYSICS)
     * 
     *     if phys:IsValid() then
     *         phys:EnableGravity(false) // This is required. Since we are creating our own gravity.
     *         phys:Wake()
     *     end
     * end
     * 
     * function ENT:PhysicsUpdate(phys)
     *     local phys = self:GetPhysicsObject()
     *     phys:ApplyForceCenter(Vector(0,0,phys:GetMass()*-9.80665))
     * end
     * 
     * // An entity that Simulates it's own gravity by applying a force downward on the entity based on the force equation.
     * 
     * (Force = mass * acceleration)
     * 
     * Since, by default, entities already have gravity. The default gravity must be turned off by adding "phys:EnableGravity(false)" in the entities Initialize function so that the default gravity doesn't interfere with our custom gravity.
     * 
     * NOTE: We can get the mass of the entity by using the GetMass() function.
     * 
     * **Note:**
     * > -9.80665 (meters / second^2)  Is the approximate acceleration of objects on Earth due to gravity. (It is negative because gravity pushes things downwards.) 
     */
    public ApplyForceCenter(force: Vector): void;
    
    /**
     * Applies the specified force on the physics object at the specified position 
     * @param force  The force to be applied. 
     * @param position  The position in world coordinates where the force is applied to the physics object. 
     * @example
     * 
     * local tr = Entity(1):GetEyeTrace()
     * if IsValid(tr.Entity) then
     * 	local phys = tr.Entity:GetPhysicsObjectNum(tr.PhysicsBone)
     * 	
     * 	local pushvec = tr.Normal * -100000
     * 	local pushpos = tr.HitPos
     * 	
     * 	phys:ApplyForceOffset(pushvec, pushpos)
     * end
     * 
     * // Pull what the player is looking at towards him. 
     */
    public ApplyForceOffset(force: Vector, position: Vector): void;
    
    /**
     * Applies specified torque to the physics object. 
     * @param torque  The torque to be applied in kg * degrees / s. 
     */
    public ApplyTorqueCenter(torque: Vector): void;
    
    /**
     * Calculates the force and torque on the center of mass for an offset force impulse. The outputs can be directly passed to {{ClassFunction|PhysObj|ApplyForceCenter}} and {{ClassFunction|PhysObj|ApplyTorqueCenter}}, respectively. 
     * @param force  The initial force 
     * @param pos  The location of the force in world coordinates 
     * @returns [The calculated force on the physics object's center of mass, The calculated torque on the physics object's center of mass] 
     * !TupleReturn
     */
    public CalculateForceOffset(force: Vector, pos: Vector): [Vector, Vector];
    
    /**
     * Calculates the linear and angular velocities on the center of mass for an offset force impulse. The outputs can be directly passed to {{ClassFunction|PhysObj|AddVelocity}} and {{ClassFunction|PhysObj|AddAngleVelocity}}, respectively. 
     * @param force  The initial force 
     * @param pos  The location of the force in world coordinates 
     * @returns [The calculated linear velocity from the force on the physics object's center of mass, The calculated angular velocity from the force on the physics object's center of mass] 
     * !TupleReturn
     */
    public CalculateVelocityOffset(force: Vector, pos: Vector): [Vector, Vector];
    
    /**
     * Removes one of more specified flags. 
     * @param flags  Bitflag, see {{Enum|FVPHYSICS}}. 
     */
    public ClearGameFlag(flags: FVPHYSICS): void;
    
    /**
     * Allows you to move a PhysObj to a point and angle in 3D space. 
     * @param shadowparams  The parameters for the shadow. See example code to see how its used. 
     * @example
     * 
     * function ENT:Initialize()
     *  
     * 	self:StartMotionController()
     * 	self.ShadowParams = {}
     *  
     * end
     * function ENT:PhysicsSimulate( phys, deltatime )
     *  
     * 	phys:Wake()
     *  
     * 	self.ShadowParams.secondstoarrive = 1 // How long it takes to move to pos and rotate accordingly - only if it could move as fast as it want - damping and max speed/angular will make this invalid (Cannot be 0! Will give errors if you do)
     * 	self.ShadowParams.pos = Vector( 0, 0, 0 ) // Where you want to move to
     * 	self.ShadowParams.angle = Angle( 0, 0, 0 ) // Angle you want to move to
     * 	self.ShadowParams.maxangular = 5000 //What should be the maximal angular force applied
     * 	self.ShadowParams.maxangulardamp = 10000 // At which force/speed should it start damping the rotation
     * 	self.ShadowParams.maxspeed = 1000000 // Maximal linear force applied
     * 	self.ShadowParams.maxspeeddamp = 10000// Maximal linear force/speed before  damping
     * 	self.ShadowParams.dampfactor = 0.8 // The percentage it should damp the linear/angular force if it reaches it's max amount
     * 	self.ShadowParams.teleportdistance = 200 // If it's further away than this it'll teleport (Set to 0 to not teleport)
     * 	self.ShadowParams.deltatime = deltatime // The deltatime it should use - just use the PhysicsSimulate one
     *  
     * 	phys:ComputeShadowControl(self.ShadowParams)
     *  
     * end
     * 
     * // Move a PhysObj to vector 0 0 0 with angles 0 0 0. 
     */
    public ComputeShadowControl(shadowparams: table): void;
    
    /**
     * Sets whether the physics object should collide with anything or not, including world.
     * 
     * {{Warning|This function currently has major problems with player collisions, and as such should be avoided at all costs.
     * 
     * A better alternative to this function would be using {{ClassFunction|Entity|SetCollisionGroup}}( COLLISION_GROUP_WORLD ).}} 
     * @param enable  True to enable, false to disable. 
     */
    public EnableCollisions(enable: boolean): void;
    
    /**
     * Sets whenever the physics object should be affected by drag. 
     * @param enable  True to enable, false to disable. 
     */
    public EnableDrag(enable: boolean): void;
    
    /**
     * Sets whenever the physobject should be affected by gravity 
     * @param enable  True to enable, false to disable. 
     */
    public EnableGravity(enable: boolean): void;
    
    /**
     * Sets whether the physobject should be able to move or not.
     * 
     * This is the exact method the Physics Gun uses to freeze props. If a motion-disabled physics object is grabbed with the physics gun, the object will be able to move again. To disallow this, use {{HookFunction|GM|PhysgunPickup}}. 
     * @param enable  True to enable, false to disable. 
     */
    public EnableMotion(enable: boolean): void;
    
    /**
     * Returns the mins and max of the physics object. 
     * @returns [Mins, Maxs] 
     * !TupleReturn
     */
    public GetAABB(): [Vector, Vector];
    
    /**
     * Returns the angles of the physics object. 
     * @returns The angles of the physics object. 
     */
    public GetAngles(): Angle;
    
    /**
     * Gets the angular velocity of the object in degrees per second. 
     * @returns The angular velocity 
     */
    public GetAngleVelocity(): Vector;
    
    /**
     * Returns the contents flag of the {{Type|PhysObj}}. 
     * @returns The {{Enum|CONTENTS}}. 
     */
    public GetContents(): CONTENTS;
    
    /**
     * Returns the linear and angular damping of the physics object. 
     * @returns [The linear damping, The angular damping] 
     * !TupleReturn
     */
    public GetDamping(): [number, number];
    
    /**
     * Returns the kinetic energy of the physobject. 
     * @returns The kinetic energy 
     */
    public GetEnergy(): number;
    
    /**
     * Returns the parent entity of the physics object. 
     * @returns parent 
     */
    public GetEntity(): Entity;
    
    /**
     * Returns the directional inertia of the physics object. 
     * @returns directionalInertia 
     */
    public GetInertia(): Vector;
    
    /**
     * Returns 1 divided by the inertia. 
     * @returns The inverted inertia 
     */
    public GetInvInertia(): number;
    
    /**
     * Returns 1 divided by the physics object's mass. 
     * @returns The inverted mass. 
     */
    public GetInvMass(): number;
    
    /**
     * Returns the mass of the physics object. 
     * @returns The mass in kilograms. 
     */
    public GetMass(): number;
    
    /**
     * Returns the center of mass of the physics object as a local vector. 
     * @returns The center of mass of the physics object. 
     */
    public GetMassCenter(): Vector;
    
    /**
     * Returns the physical material of the physics object. 
     * @returns The physical material 
     */
    public GetMaterial(): string;
    
    /**
     * Returns the physics mesh of the object which is used for physobj-on-physobj collision. 
     * @returns Table of {{Struct|MeshVertex}}s where each three vertices represent a triangle. Returns nil if the physics object is a sphere. 
     */
    public GetMesh(): MeshVertex[];
    
    /**
     * Returns all convex physics meshes of the object. See {{LibraryFunction|Entity|PhysicsInitMultiConvex}} for more information. 
     * @returns Table of {{Struct|MeshVertex}}s where each {{Struct|MeshVertex}} is an independent convex mesh and each three vertices represent a triangle. Returns nil if the physics object is a sphere. 
     */
    public GetMeshConvexes(): MeshVertex[];
    
    /**
     * Returns the name of the physics object. 
     * @returns The name of the physics object. 
     */
    public GetName(): string;
    
    /**
     * Returns the position of the physics object. 
     * @returns The position 
     */
    public GetPos(): Vector;
    
    /**
     * {{NextUpdate}}
     * 
     * Returns the position and angle of the physics object as a 3x4 matrix ({{Type|VMatrix}} is 4x4 so the fourth row goes unused). The first three columns store the angle as a [https://en.wikipedia.org/wiki/Rotation_matrix rotation matrix], and the fourth column stores the position vector. 
     * @returns The position and angle matrix. 
     */
    public GetPositionMatrix(): VMatrix;
    
    /**
     * Returns the rotation damping of the physics object. 
     * @returns The rotation damping 
     */
    public GetRotDamping(): number;
    
    /**
     * Returns the angles of the {{Type|PhysObj}} shadow. See {{ClassFunction|PhysObj|UpdateShadow}}. 
     * @returns The angles of the {{Type|PhysObj}} shadow. 
     */
    public GetShadowAngles(): PhysObj;
    
    /**
     * Returns the position of the {{Type|PhysObj}} shadow. See {{ClassFunction|PhysObj|UpdateShadow}}. 
     * @returns The position of the {{Type|PhysObj}} shadow. 
     */
    public GetShadowPos(): PhysObj;
    
    /**
     * Returns the speed damping of the physics object. 
     * @returns speedDamping 
     */
    public GetSpeedDamping(): number;
    
    /**
     * Returns the stress of the entity. 
     * @returns exertedStress 
     */
    public GetStress(): number;
    
    /**
     * Returns the surface area of the physics object in source-units². 
     * @returns The surface area 
     */
    public GetSurfaceArea(): number;
    
    /**
     * Returns the absolute directional velocity of the physobject. 
     * @returns velocity 
     */
    public GetVelocity(): Vector;
    
    /**
     * Returns the world velocity of a point in world coordinates about the object. 
     * @param point 
     * @returns 
     */
    public GetVelocityAtPoint(point: Vector): Vector;
    
    /**
     * Returns the volume in source units³. 
     * @returns volume 
     */
    public GetVolume(): number;
    
    /**
     * Returns whenever the specified flag(s) is/are set. 
     * @param flags  Bitflag, see {{Enum|FVPHYSICS}}. 
     * @returns If flag was set or not 
     */
    public HasGameFlag(flags: FVPHYSICS): boolean;
    
    /**
     * Returns whether the physics object is "sleeping".
     * 
     * See {{ClassFunction|PhysObj|Sleep}} for more information. 
     * @returns Whether the physics object is sleeping. 
     */
    public IsAsleep(): boolean;
    
    /**
     * Returns whenever the entity is able to collide or not. 
     * @returns isCollisionEnabled 
     */
    public IsCollisionEnabled(): boolean;
    
    /**
     * Returns whenever the entity is affected by drag. 
     * @returns dragEnabled 
     */
    public IsDragEnabled(): boolean;
    
    /**
     * Returns whenever the entity is affected by gravity. 
     * @returns gravitated 
     */
    public IsGravityEnabled(): boolean;
    
    /**
     * Returns if the physics object can move itself (by velocity, acceleration) 
     * @returns motionEnabled 
     */
    public IsMotionEnabled(): boolean;
    
    /**
     * Returns whenever the entity is able to move. 
     * @returns movable 
     */
    public IsMoveable(): boolean;
    
    /**
     * Returns whenever the physics object is penetrating another physics object. 
     * @returns isPenetrating 
     */
    public IsPenetrating(): boolean;
    
    /**
     * Returns if the physics object is valid/not NULL. 
     * @returns isValid 
     */
    public IsValid(): boolean;
    
    /**
     * Mapping a vector in local frame of the physics object to world frame.
     * 
     * **Note:**
     * >this function does translation and rotation, with translation done first. 
     * @param LocalVec  A vector in the physics object's local frame 
     * @returns The corresponding vector in world frame 
     */
    public LocalToWorld(LocalVec: Vector): Vector;
    
    /**
     * Rotate a vector from the local frame of the physics object to world frame.
     * 
     * **Note:**
     * >This function only rotates the vector, without any translation operation. 
     * @param LocalVec  A vector in the physics object's local frame 
     * @returns The corresponding vector in world frame 
     * @example
     * 
     * print( "Angle of the PhysObj: ", PhysObj:GetAngles() )
     * print( "Vector in world frame: ", PhysObj:LocalToWorld( Vector( 1, 2, 3 ) ) )
     * 
     * // Given the angle of the physics object is angle ( 0.045, 89.952, 89.99 ) ( This can be derived by PhysObj:GetAngles() ), convert the vector ( 1 ,2, 3 ) in this physics object's local frame into world frame. 
     */
    public LocalToWorldVector(LocalVec: Vector): Vector;
    
    /**
     * Prints debug info about the state of the physics object to the console. 
     * @example
     * 
     * Entity(1):GetEyeTrace().Entity:GetPhysicsObject():OutputDebugInfo()
     * 
     * // Outputs physics info about the entity the player is looking at to the console. 
     */
    public OutputDebugInfo(): void;
    
    /**
     * Call this when the collision filter conditions change due to this object's state (e.g. changing solid type or collision group) 
     */
    public RecheckCollisionFilter(): void;
    
    /**
     * A convinience function for {{ClassFunction|Angle|RotateAroundAxis}}. 
     * @param dir  Direction, around which we will rotate 
     * @param ang  Amount of rotation, in degrees 
     * @returns The resulting angle 
     * @example
     * 
     * local phys = Entity(1):GetEyeTrace().Entity:GetPhysicsObject() // Our physics object
     * 
     * print( phys:RotateAroundAxis( Vector( 1, 0, 0 ), 20 ) )
     * 
     * local a = phys:GetAngles()
     * a:RotateAroundAxis( Vector( 1, 0, 0 ), 20 )
     * print( a )
     * 
     * // Shows that it is the same as {{ClassFunction|Angle|RotateAroundAxis}}. 
     */
    public RotateAroundAxis(dir: Vector, ang: number): Angle;
    
    /**
     * Sets the amount of [https://en.wikipedia.org/wiki/Drag_(physics) drag] to apply to a physics object when attempting to rotate. 
     * @param coefficient  [https://en.wikipedia.org/wiki/Drag_coefficient Drag coefficient]. The bigger this value is, the slower the angles will change. 
     */
    public SetAngleDragCoefficient(coefficient: number): void;
    
    /**
     * Sets the angles of the physobject. 
     * @param angles  The new angles of the physobject. 
     */
    public SetAngles(angles: Angle): void;
    
    /**
     * Sets the buoyancy ratio of the physics object. (How well it floats in water) 
     * @param buoyancy  Buoyancy ratio, where 0 is not buoyant at all (like a rock), and 1 is very buoyant (like wood) 
     */
    public SetBuoyancyRatio(buoyancy: number): void;
    
    /**
     * Sets the contents flag of the {{Type|PhysObj}}. 
     * @param contents  The {{Enum|CONTENTS}}. 
     */
    public SetContents(contents: CONTENTS): void;
    
    /**
     * Sets the linear and angular damping of the physics object. 
     * @param linearDamping  Linear damping. 
     * @param angularDamping  Angular damping. 
     */
    public SetDamping(linearDamping: number, angularDamping: number): void;
    
    /**
     * Modifies how much drag (air resistance) affects the object. 
     * @param drag  The drag coefficient
     * It can be positive or negative. 
     */
    public SetDragCoefficient(drag: number): void;
    
    /**
     * Sets the directional inertia. 
     * @param directionalInertia  The directional inertia of the object.
     * 
     * A value of Vector(0,0,0) makes the physobject go invalid. 
     */
    public SetInertia(directionalInertia: Vector): void;
    
    /**
     * Sets the mass of the physics object. 
     * @param mass  The mass in kilograms. 
     */
    public SetMass(mass: number): void;
    
    /**
     * Sets the material of the physobject.
     * 
     * **Note:**
     * >Impact sounds will only change if this is called on client 
     * @param materialName  The name of the phys material to use. From this list: [https://developer.valvesoftware.com/wiki/Material_surface_properties Valve Developer] 
     * @example
     * 
     * local tbl = {
     * 	"gmod_ice", // Makes the entity slide around
     * 	"gmod_bouncy", // Makes the entity bouncy
     * 	"gmod_silent", // Makes the entity not play sounds on impact
     * 	"flesh" // Makes the entity play flesh sounds on impact
     * }
     * 
     * local phys = SomeEntity:GetPhysicsObject()
     * 
     * if ( IsValid( phys ) ) then
     * 
     * 	phys:SetMaterial( table.Random( tbl ) )
     * 
     * end
     * 
     * // Randomize the physical properties of an entity 
     */
    public SetMaterial(materialName: string): void;
    
    /**
     * Sets the position of the physobject. 
     * @param position  The new position of the physobject. 
     * @param teleport [=false] 
     */
    public SetPos(position: Vector, teleport?: boolean): void;
    
    /**
     * Sets the velocity of the physics object for the next iteration. 
     * @param velocity  The new velocity of the phyiscs object. 
     */
    public SetVelocity(velocity: Vector): void;
    
    /**
     * Sets the velocity of the physics object. 
     * @param velocity  The new velocity of the physics object. 
     */
    public SetVelocityInstantaneous(velocity: Vector): void;
    
    /**
     * Makes the physics object "sleep".
     * 
     * The physics object will no longer be moving unless it is "woken up" by either a collision with another moving object, or by {{ClassFunction|PhysObj|Wake}}. This is an optimization feature of the physics engine. 
     */
    public Sleep(): void;
    
    /**
     * Unlike {{ClassFunction|PhysObj|SetPos}} and {{ClassFunction|PhysObj|SetAngles}}, this allows the movement of a physobj while leaving physics interactions intact.
     * 
     * This is used internally by the motion controller of the Gravity Gun , the +use pickup and the Physics Gun, and entities such as the crane.
     * 
     * **Note:**
     * >This is the ideal function to move a physics shadow created with {{ClassFunction|Entity|PhysicsInitShadow}} or {{ClassFunction|Entity|MakePhysicsObjectAShadow}}. 
     * @param targetPosition  The position we should move to. 
     * @param targetAngles  The angle we should rotate towards. 
     * @param frameTime  The frame time to use for this movement, can be generally filled with {{GlobalFunction|FrameTime}} or {{HookFunction|ENTITY|PhysicsSimulate}} with the deltaTime. 
     * 
     * Can be set to 0 when you need to update the physics object just once. 
     */
    public UpdateShadow(targetPosition: Vector, targetAngles: Angle, frameTime: number): void;
    
    /**
     * Wakes the physics object.
     * 
     * See {{ClassFunction|PhysObj|Sleep}} for more information. 
     */
    public Wake(): void;
    
    /**
     * Converts a vector to a relative to the physics object coordinate system. 
     * @param vec  The vector in world space coordinates. 
     * @returns The vector local to {{ClassFunction|PhysObj|GetPos}}. 
     */
    public WorldToLocal(vec: Vector): Vector;
    
    /**
     * Rotate a vector from the world frame to the local frame of the physics object.
     * 
     * **Note:**
     * >This function only rotates the vector, without any translation operation. 
     * @param WorldVec  A vector in the world frame 
     * @returns The corresponding vector relative to the PhysObj 
     */
    public WorldToLocalVector(WorldVec: Vector): Vector;
}

/**
 * The player library is used to get the Lua objects that represent players in-game. 
 */
declare namespace player {
    /**
     * Similar to the serverside command "bot", this function creates a new Player bot with the given name. This bot will not obey to the usual "bot_*" commands, and it's the same bot base used in TF2 and CS:S.
     * 
     * The best way to control the behaviour of a Player bot right now is to use the {{HookFunction|GM|StartCommand}} hook and modify its input serverside.
     * 
     * **Note:**
     * >Despite this Player being fake, it has to be removed from the server by using {{ClassFunction|Player|Kick}} and '''NOT''' {{ClassFunction|Entity|Remove}}.
     * Also keep in mind that these bots still use player slots, so you won't be able to spawn them in singleplayer!
     * 
     * **Note:**
     * >Any Bot created using this method will be considered UnAuthed by Garry's Mod 
     * @param botName  The name of the bot, using an already existing name will append brackets at the end of it with a number pertaining it.
     * 
     * Example: "Bot name test", "Bot name test(1)". 
     * @returns The newly created Player bot. Returns NULL if there's no Player slots available to host it. 
     * @example
     * 
     * local listBots = {}
     * 
     * function CreateBot()
     * 
     *     if ( !game.SinglePlayer() && #player.GetAll() < game.MaxPlayers() ) then 
     * 
     *         local num = #listBots
     * 
     *         listBots[ num ] = player.CreateNextBot("Bot_" .. ( num + 1 ) )
     * 
     * 	    return listBots[ num ]
     * 
     *     else
     * 
     * 	    print( "Can't create bot!" )
     * 
     *     end
     * 
     * end
     * 
     * // Create a bot if that is possible. 
     */
    function CreateNextBot(botName: string): Player;
    
    /**
     * Gets all the current players in the server (not including connecting clients).
     * 
     * **Note:**
     * >This function returns bots as well as human players. See {{LibraryFunction|player|GetBots}} and  {{LibraryFunction|player|GetHumans}}. 
     * @returns All {{Type|Player}}s currently in the server. 
     * @example
     * 
     * PrintTable( player.GetAll() )
     * 
     * // Prints all the players currently in the server.@example
     * 
     * print(#player.GetAll())
     * 
     * // Prints the number of players in the server. The same output can be achieved more efficiently with {{LibraryFunction|player|GetCount}}. 
     */
    function GetAll(): table;
    
    /**
     * Returns a table of all bots on the server. 
     * @returns A table only containing bots ( AI / non human players ) 
     */
    function GetBots(): Player[];
    
    /**
     * Gets the player with the specified connection ID.
     * 
     * Connection ID can be retrieved via {{LibraryFunction|gameevent|Listen}} events.
     * 
     * For a function that returns a player based on their {{ClassFunction|Entity|EntIndex}}, see {{GlobalFunction|Entity}}.
     * 
     * For a function that returns a player based on their {{ClassFunction|Player|UserID}}, see {{GlobalFunction|Player}}. 
     * @param connectionID  The connection ID to find the player by. 
     * @returns Player if one is found, nil otherwise 
     */
    function GetByID(connectionID: number): Player;
    
    /**
     * Gets the player with the specified SteamID. 
     * @param steamID  The {{ClassFunction|Player|SteamID}} to find the player by. 
     * @returns Player if one is found, false otherwise. 
     */
    function GetBySteamID(steamID: string): Player;
    
    /**
     * Gets the player with the specified SteamID64. 
     * @param steamID64  The {{ClassFunction|Player|SteamID64}} to find the player by. Also accepts numbers. 
     * @returns Player if one is found, false otherwise. 
     */
    function GetBySteamID64(steamID64: string): Player;
    
    /**
     * Gets the player with the specified uniqueID (not recommended way to identify players).
     * 
     * {{Warning|It is highly recommended to use {{LibraryFunction|player|GetBySteamID}} or {{LibraryFunction|player|GetBySteamID64}} instead as this function can have collisions ( be same for different people ) while SteamID is guaranteed to unique to each player.}} 
     * @param uniqueID  The {{ClassFunction|Player|UniqueID}} to find the player by. 
     * @returns Player if one is found, false otherwise. 
     */
    function GetByUniqueID(uniqueID: string): Player;
    
    /**
     * Gives you the player count.
     * Similar to #{{LibraryFunction|player|GetAll}} but with much better performance. 
     * @returns Number of players 
     */
    function GetCount(): number;
    
    /**
     * Returns a table of all human ( non bot/AI ) players.
     * 
     * Unlike {{LibraryFunction|player|GetAll}}, this does not include bots. 
     * @returns A table of all human ( non bot/AI ) players. 
     */
    function GetHumans(): Player[];
}

/**
 * This is a list of all methods only available for players. It is also possible to call {{Type|Entity}} functions on the Player. 
 * !CustomConstructor Player */
declare class Player extends Entity {
    /**
     * Returns the player with the matching {{ClassFunction|Player|UserID}}.
     * 
     * For a function that returns a player based on their {{ClassFunction|Entity|EntIndex}}, see {{GlobalFunction|Entity}}.
     * 
     * For a function that returns a player based on their connection ID, see {{LibraryFunction|player|GetByID}}. 
     * @param playerIndex  The player index. 
     */
    public constructor(playerIndex: number);
    
    /**
     * Returns the player's AccountID aka 32bit SteamID.
     * 
     * For bots and in singleplayer, this will return no value. 
     * @returns Player's 32bit SteamID aka AccountID. 
     */
    public AccountID(): number;
    
    /**
     * Adds an entity to the players clean up list.
     * 
     * NOTE: This function is only available in Sandbox and its derivatives. 
     * @param type  Cleanup type 
     * @param ent  Entity to add 
     */
    public AddCleanup(type: string, ent: Entity): void;
    
    /**
     * Adds an entity to the total count of entities of same class.
     * 
     * **Note:**
     * >This function is only available in Sandbox and its derivatives 
     * @param str  Entity type 
     * @param ent  Entity 
     */
    public AddCount(str: string, ent: Entity): void;
    
    /**
     * Add a certain amount to the player's death count 
     * @param count  number of deaths to add 
     */
    public AddDeaths(count: number): void;
    
    /**
     * Add a certain amount to the player's frag count (or kills count) 
     * @param count  number of frags to add 
     */
    public AddFrags(count: number): void;
    
    /**
     * Adds a entity to the players list of frozen objects. 
     * @param ent  Entity 
     * @param physobj  Physics object belonging to ent 
     */
    public AddFrozenPhysicsObject(ent: Entity, physobj: PhysObj): void;
    
    /**
     * Sets up the voting system for the player.
     * This is a really barebone system. By calling this a vote gets started, when the player presses 0-9 the callback function gets called along with the key the player pressed. Use the draw callback to draw the vote panel. 
     * @param name  Name of the vote 
     * @param timeout  Time until the vote expires 
     * @param vote_callback  The function to be run when the player presses 0-9 while a vote is active. 
     * @param draw_callback  Used to draw the vote panel. 
     * @example
     * 
     * function AfterChoice(num) // This is callback after we press number (Argument #3)
     * 	chat.AddText("Your rate is "..num..". Thanks!") 
     * 	return true // Return true to close vote
     * end
     * 
     * function VisualVote() // This is drawing function (Argument #4)
     *     draw.RoundedBox(4,ScrW()/2-300,ScrH()/2-25,600,50,Color(0,0,0,200))
     *     draw.SimpleText("Rate our server by scale of zero to nine. Use number line to vote.","Trebuchet24",ScrW()/2,ScrH()/2,Color(255,255,255),1,1)
     * end
     * 
     * LocalPlayer():AddPlayerOption("SelectWeapon",30,AfterChoice,VisualVote) // Creates new vote
     * 
     * // Simple example. Prints player's choice in chat. 
     */
    public AddPlayerOption(name: string, timeout: number, vote_callback: Function, draw_callback: Function): void;
    
    /**
     * Plays a sequence directly from a sequence number, similar to {{ClassFunction|Player|AnimRestartGesture}}. This function has the advantage to play sequences that haven't been bound to an existing {{Enum|ACT}} 
     * @param slot  Gesture slot using {{Enum|GESTURE_SLOT}} 
     * @param sequenceId  The sequence ID to play, can be retrieved with {{ClassFunction|Entity|LookupSequence}}. 
     * @param cycle  The cycle to start the animation at, ranges from 0 to 1. 
     * @param autokill [=false] If the animation should not loop. true = stops the animation, false = the animation keeps playing. 
     */
    public AddVCDSequenceToGestureSlot(slot: GESTURE_SLOT, sequenceId: number, cycle: number, autokill?: boolean): void;
    
    /**
     * Checks if the player is alive. 
     * @returns Whether the player is alive 
     * @example
     * 
     * for k, v in pairs( player.GetAll() ) do
     *    if ( v:Alive() ) then
     *       v:Kill()
     *    end
     * end
     * 
     * // Loops through all the players and kills alive ones. 
     */
    public Alive(): boolean;
    
    /**
     * Sets if the player can toggle his flashlight. Function exists on both the server and client but has no effect when ran on the client. 
     * @param canFlashlight  True allows flashlight toggling 
     */
    public AllowFlashlight(canFlashlight: boolean): void;
    
    /**
     * Lets the player spray his decal without delay 
     * @param allow  Allow or disallow 
     */
    public AllowImmediateDecalPainting(allow: boolean): void;
    
    /**
     * Resets player gesture in selected slot. 
     * @param slot  Slot to reset. See the {{Enum|GESTURE_SLOT}}. 
     */
    public AnimResetGestureSlot(slot: GESTURE_SLOT): void;
    
    /**
     * Restart a gesture on a player, within a gesture slot.
     * 
     * {{Warning|This is not automatically networked. This function has to be called on the client to be seen by said client.}} 
     * @param slot  Gesture slot using {{Enum|GESTURE_SLOT}} 
     * @param activity  The activity ( see {{Enum|ACT}} ) or sequence that should be played 
     * @param autokill [=false] Whether the animation should be automatically stopped. true = stops the animation, false = the animation keeps playing/looping 
     * @example
     * 
     * function SWEP:Initialize()
     * 	self:SetHoldType("pistol")
     * end
     * 
     * function SWEP:PrimaryAttack()
     * 
     * 	// Weapon attack delay
     * 	self:SetNextPrimaryFire(CurTime()+0.5)
     * 
     * 	// Get entity in front of us
     * 	local tr = util.TraceLine(util.GetPlayerTrace(self.Owner))
     * 	
     * 	local ent = tr.Entity
     * 	
     * 	// If there's an enemy under 50 units in front of us
     * 	if(IsValid(ent) && self.Owner:GetShootPos():Distance(tr.HitPos) < 50) then
     * 	
     * 		// Play the melee attack animation
     * 		self.Owner:AnimRestartGesture(GESTURE_SLOT_ATTACK_AND_RELOAD, ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE, true)
     * 		
     * 		// Create damage info (server-side)
     * 		if SERVER then
     * 		
     * 			local dmg = DamageInfo()		
     * 			dmg:SetDamage(math.random(5, 10))
     * 			dmg:SetAttacker(self.Owner)
     * 			dmg:SetInflictor(self)
     * 			dmg:SetDamageForce(self.Owner:GetAimVector()*300)
     * 			dmg:SetDamagePosition(tr.HitPos)
     * 			dmg:SetDamageType(DMG_CLUB)
     * 		
     * 			// Apply damage to enemy
     * 			ent:TakeDamageInfo(dmg)
     * 			
     * 		end
     * 		
     * 		// Play impact sound
     * 		ent:EmitSound("physics/flesh/flesh_impact_bullet"..math.random(1, 5)..".wav")
     * 		
     * 		// Make viewmodel pistol whip effect
     * 		self.Owner:ViewPunch(Angle(0, 45, 0))
     * 		
     * 	else
     * 	
     * 		// Typical pistol shot code goes here
     * 		// Some can be found in 'weapon_base/shared.lua'
     * 	
     * 	end
     * 	
     * end
     * 
     * // Defines part of a SWEP with pistol whipping functionality by using a pistol hold type and AnimRestartGesture for the melee attack animation. 
     */
    public AnimRestartGesture(slot: GESTURE_SLOT, activity: ACT, autokill?: boolean): void;
    
    /**
     * Restarts the main animation on the player, has the same effect as calling {{ClassFunction|Entity|SetCycle}}( 0 ). 
     */
    public AnimRestartMainSequence(): void;
    
    /**
     * Sets the sequence of the animation playing in the given gesture slot. 
     * @param slot  The gesture slot. See {{Enum|GESTURE_SLOT}} 
     * @param sequenceID  Sequence ID to set. 
     */
    public AnimSetGestureSequence(slot: GESTURE_SLOT, sequenceID: number): void;
    
    /**
     * Sets the weight of the animation playing in the given gesture slot. 
     * @param slot  The gesture slot. See {{Enum|GESTURE_SLOT}} 
     * @param weight  The weight this slot should be set to. Value must be ranging from 0 to 1. 
     */
    public AnimSetGestureWeight(slot: GESTURE_SLOT, weight: number): void;
    
    /**
     * Returns the player's armor. 
     * @returns The player's armor. 
     * @example
     * 
     * for _, v in pairs( player.GetAll( ) ) do
     *     if v:Armor( ) == 0 then
     *          v:SetArmor( 100 )
     *     end
     * end
     * 
     * // Loops through all the players and checks if they have any armor, if they do not, then sets their armor to 100. 
     */
    public Armor(): number;
    
    /**
     * Bans the player from the server for a certain amount of minutes. 
     * @param minutes  Duration of the ban in minutes (0 is permanent) 
     * @param kick [=false] Whether to kick the player after banning then or not 
     * @example
     * 
     * Entity(1):Ban( 1440, true )
     * 
     * // Kicks and bans the player for a day. 
     */
    public Ban(minutes: number, kick?: boolean): void;
    
    /**
     * Returns true if the player's flashlight hasn't been disabled by {{ClassFunction| Player|AllowFlashlight}} 
     * @returns canFlashlight 
     */
    public CanUseFlashlight(): boolean;
    
    /**
     * Prints a string to the chatbox of the client.
     * 
     * {{Warning|Just like the {{Lib|usermessage}}, this function is affected by the 255 byte limit!}} 
     * @param message  String to be printed 
     * @example
     * 
     * for k, ply in pairs(player.GetAll()) do
     * 	ply:ChatPrint("Hello World")
     * end
     * 
     * // Prints "Hello World" to chat of all players 
     */
    public ChatPrint(message: string): void;
    
    /**
     * Checks if the limit is hit or not. If it is, it will throw a notification saying so. 
     * @param limitType  Limit type. In unmodified Sandbox possible values are:
     * * "props"
     * * "ragdolls"
     * * "vehicles"
     * * "effects"
     * * "balloons"
     * * "cameras"
     * * "npcs"
     * * "sents"
     * * "dynamite"
     * * "lamps"
     * * "lights"
     * * "wheels"
     * * "thrusters"
     * * "hoverballs"
     * * "buttons"
     * * "emitters" 
     * @returns Returns true if limit is not hit, false if it is hit 
     */
    public CheckLimit(limitType: string): boolean;
    
    /**
     * Runs the concommand on the player. This does not work on bots.
     * 
     * If you wish to directly modify the movement input of bots, use {{HookFunction|GM|StartCommand}} instead.
     * 
     * **Note:**
     * >Some commands/convars are blocked from being ran/changed using this function, usually to prevent harm/annoyance to clients. For a list of blocked commands, see [[Blocked ConCommands]]. 
     * @param command  command to run 
     * @example
     * 
     * ply:ConCommand("kill")
     * 
     * // Kills the player using the concommand 
     */
    public ConCommand(command: string): void;
    
    /**
     * Creates the player's ragdoll entity.
     * 
     * This is normally used when a player dies, to create their death ragdoll.
     * 
     * The ragdoll will be created with the player's properties such as [[Entity/GetPos|Position]], [[Entity/GetAngles|Angles]], [[Player/GetPlayerColor|PlayerColor]], [[Entity/GetVelocity|Velocity]] and [[Entity/GetModel|Model]].
     * 
     * You can retrieve the entity this creates with {{ClassFunction|Player|GetRagdollEntity}}. 
     */
    public CreateRagdoll(): void;
    
    /**
     * Disables a players crosshair. 
     * @example
     * 
     * Player(2):CrosshairDisable()
     * 
     * // Disables the players crosshair. 
     */
    public CrosshairDisable(): void;
    
    /**
     * Enables crosshair of player. 
     */
    public CrosshairEnable(): void;
    
    /**
     * Returns whether the player is crouching or not 
     * @returns Whether the player is crouching 
     */
    public Crouching(): boolean;
    
    /**
     * Returns the player's death count 
     * @returns The number of deaths the player has had. 
     * @example
     * 
     * function GM:PlayerDeathThink( ply, ent, att )
     * 
     * 	if ply:Deaths() >= 10 then
     * 
     * 		return false
     * 
     * 	end
     * 
     *    return true
     * 
     * end
     * 
     * // If the player's deaths are over 10, then they cannot spawn. 
     */
    public Deaths(): number;
    
    /**
     * Prints the players' name and position to the console. 
     */
    public DebugInfo(): void;
    
    /**
     * Detonates all tripmines belonging to the player. 
     */
    public DetonateTripmines(): void;
    
    /**
     * Sends a third person animation event to the player.
     * 
     * Calls {{HookFunction|GM|DoAnimationEvent}} with [[Enums/PLAYERANIMEVENT |PLAYERANIMEVENT_CUSTOM_GESTURE]] as the event, data as the given data. 
     * @param data  The data to send. 
     */
    public DoAnimationEvent(data: number): void;
    
    /**
     * Starts the player's attack animation. The attack animation is determined by the weapon's HoldType.
     * 
     * Similar to other animation event functions, calls {{HookFunction|GM|DoAnimationEvent}} with [[Enums/PLAYERANIMEVENT |PLAYERANIMEVENT_ATTACK_PRIMARY]] as the event and no extra data. 
     */
    public DoAttackEvent(): void;
    
    /**
     * Sends a specified third person animation event to the player.
     * 
     * Calls {{HookFunction|GM|DoAnimationEvent}} with specified arguments. 
     * @param event  The event to send. See {{Enum|PLAYERANIMEVENT}}. 
     * @param data  The data to send alongside the event. 
     */
    public DoCustomAnimEvent(event: PLAYERANIMEVENT, data: number): void;
    
    /**
     * Sends a third person reload animation event to the player.
     * 
     * Similar to other animation event functions, calls {{HookFunction|GM|DoAnimationEvent}} with [[Enums/PLAYERANIMEVENT |PLAYERANIMEVENT_RELOAD]] as the event and no extra data. 
     */
    public DoReloadEvent(): void;
    
    /**
     * Sends a third person secondary fire animation event to the player.
     * 
     * Similar to other animation event functions, calls {{HookFunction|GM|DoAnimationEvent}} with [[Enums/PLAYERANIMEVENT |PLAYERANIMEVENT_ATTACK_SECONDARY]] as the event and no extra data. 
     */
    public DoSecondaryAttack(): void;
    
    /**
     * Show/Hide the player's weapon's viewmodel. 
     * @param draw  Should draw 
     * @param vm [=0] Which view model to show/hide, 0-2. 
     */
    public DrawViewModel(draw: boolean, vm?: number): void;
    
    /**
     * Show/Hide the player's weapon's worldmodel. 
     * @param draw  Should draw 
     */
    public DrawWorldModel(draw: boolean): void;
    
    /**
     * Drops the players' weapon of a specific class. 
     * @param classRef  The class to drop. 
     */
    public DropNamedWeapon(classRef: string): void;
    
    /**
     * Drops any object the player is currently holding with either gravitygun or +Use (E key) 
     */
    public DropObject(): void;
    
    /**
     * Forces the player to drop the specified weapon 
     * @param weapon  Weapon to be dropped 
     * @example
     * 
     * local ply = Entity( 1 )
     * for k, v in pairs( ply:GetWeapons( ) ) do
     * 	ply:DropWeapon( v )
     * end
     * 
     * // Drops all the player's weapons 
     */
    public DropWeapon(weapon: Weapon): void;
    
    /**
     * Enters the player into specified vehicle 
     * @param vehicle  Vehicle the player will enter 
     * @example
     * 
     * local jeep = ply:GetEyeTrace().Entity
     * ply:EnterVehicle(jeep)
     * 
     * // Enters the player into the vehicle they're looking at 
     */
    public EnterVehicle(vehicle: Vehicle): void;
    
    /**
     * Equips the player with the HEV suit.
     * 
     * Allows the player to zoom, walk slowly, sprint, pickup armor batteries, use the health and armor stations and also shows the HUD.
     * 
     * The player also emits a flatline sound on death, which can be overridden with {{HookFunction|GM|PlayerDeathSound}}.
     * 
     * The player is automatically equipped with the suit on spawn, if you wish to stop that, use {{ClassFunction|Player|RemoveSuit}}. 
     */
    public EquipSuit(): void;
    
    /**
     * Makes the player exit the vehicle if they're in one. 
     * @example
     * 
     * Entity(1):ExitVehicle()
     * 
     * // Make player 1 leave his vehicle if he's driving one. 
     */
    public ExitVehicle(): void;
    
    /**
     * Enables/Disables the player's flashlight 
     * @param isOn  Turns the flashlight on/off 
     */
    public Flashlight(isOn: boolean): void;
    
    /**
     * Returns true if the player's flashlight is on. 
     * @returns Whether the player's flashlight is on. 
     */
    public FlashlightIsOn(): boolean;
    
    /**
     * Returns the amount of kills a player has. 
     * @returns kills 
     * @example
     * 
     * print(Player2(1):Frags())
     * 
     * // Prints the players frags in console. 
     */
    public Frags(): number;
    
    /**
     * Freeze the player. Frozen players cannot move, look around, or attack. Key bindings are still called. Similar to {{ClassFunction|Player|Lock}} but the player can still take damage.
     * 
     * Adds or removes the [[Enums/FL|FL_FROZEN]] flag from the player. 
     * @param frozen [=false] Whether the player should be frozen. 
     * @example
     * 
     * for k, v in pairs(player.GetAll()) do
     *     v:Freeze( true )
     * end
     * 
     * // Freezes all players 
     */
    public Freeze(frozen?: boolean): void;
    
    /**
     * Returns the player's active weapon. 
     * @returns The weapon the player is currently has equipped. 
     * @example
     * 
     * print(ply:GetActiveWeapon():GetClass())
     * 
     * // Prints the player's active weapon's class name. 
     */
    public GetActiveWeapon(): Weapon;
    
    /**
     * Returns the direction that the player is aiming. 
     * @returns The direction vector of players aim 
     * @example
     * 
     * local pl = player.GetByID( 1 )
     * pl:SetVelocity( pl:GetAimVector() * 1000 )
     * 
     * // Launches the player in the direction they're facing. 
     */
    public GetAimVector(): Vector;
    
    /**
     * Returns true if the players' model is allowed to rotate around the pitch and roll axis. 
     * @returns Allowed 
     */
    public GetAllowFullRotation(): boolean;
    
    /**
     * Returns whether the player is allowed to use his weapons in a vehicle or not. 
     * @returns Whether the player is allowed to use his weapons in a vehicle or not. 
     */
    public GetAllowWeaponsInVehicle(): boolean;
    
    /**
     * Gets the amount of ammo the player has. 
     * @param ammotype  The ammunition type. Can be either {{Type|number}} ammo ID or {{Type|string}} ammo name. 
     * @returns The amount of ammo player has in reserve. 
     * @example
     * 
     * function GetAmmoForCurrentWeapon( ply )
     * 	if ( !IsValid( ply ) ) then return -1 end
     * 
     * 	local wep = ply:GetActiveWeapon()
     * 	if ( !IsValid( wep ) ) then return -1 end
     *  
     * 	return ply:GetAmmoCount( wep:GetPrimaryAmmoType() )
     * end
     * 
     * // A function that returns the ammo for the weapon the player is currently holding.@example
     * 
     * print(Entity(1):GetAmmoCount( 3 ))
     * print(Entity(1):GetAmmoCount( "3" ))
     * print(Entity(1):GetAmmoCount( "pistol" ) )
     * 
     * // Example usage. "pistol" ammo type has ID of 3. 
     */
    public GetAmmoCount(ammotype: number | string): number;
    
    /**
     * Gets if the player will be pushed out of nocollided players. 
     * @returns pushed 
     */
    public GetAvoidPlayers(): boolean;
    
    /**
     * Returns true if the player is able to walk using the (default) alt key. 
     * @returns AbleToWalk 
     */
    public GetCanWalk(): boolean;
    
    /**
     * Determines whenever the player is allowed to use the zoom functionality. 
     * @returns canZoom 
     */
    public GetCanZoom(): boolean;
    
    /**
     * Returns the player's class id. 
     * @returns The player's class id. 
     */
    public GetClassID(): number;
    
    /**
     * Gets total count of entities of same class.
     * 
     * **Note:**
     * >This function is only available in Sandbox and its derivatives 
     * @param type  Entity type to get count of. 
     * @param minus [=0] If specified, it will reduce the counter by this value. Works only serverside. 
     */
    public GetCount(type: string, minus?: number): void;
    
    /**
     * Gets the crouched walk speed. 
     * @returns Speed 
     */
    public GetCrouchedWalkSpeed(): number;
    
    /**
     * Returns the last command which was sent by the specified player. Can only be used in a [[:Category:Predicted_Hooks|Predicted Hook]].
     * 
     * **Note:**
     * >When called clientside in singleplayer during {{HookFunction|WEAPON|Think}}, it will return nothing as the hook is not technically predicted in that instance. See the note on the page.
     * 
     * **Bug [#3302](https://github.com/Facepunch/garrysmod-issues/issues/3302):**
     * >This will fail in {{HookFunction|GM|StartCommand}}. 
     * @returns Last user commands 
     */
    public GetCurrentCommand(): CUserCmd;
    
    /**
     * Gets the '''actual''' view offset which equals the difference between the players actual position and their view when standing.
     * 
     * Do not confuse with {{ClassFunction|Player|GetViewOffset}} and {{ClassFunction|Player|GetViewOffsetDucked}} 
     * @returns The actual view offset. 
     */
    public GetCurrentViewOffset(): Vector;
    
    /**
     * Gets the entity the player is currently driving. 
     * @returns DriveEntity 
     */
    public GetDrivingEntity(): Entity;
    
    /**
     * Returns driving mode of the player. See [[Entity Driving]]. 
     * @returns The drive mode ID or 0 if player doesn't use the drive system. 
     */
    public GetDrivingMode(): number;
    
    /**
     * Returns a player's duck speed (in seconds) 
     * @returns duckspeed 
     */
    public GetDuckSpeed(): number;
    
    /**
     * Returns a table with information of what the player is looking at.
     * 
     * The results of this function are cached every frame.
     * 
     * See also {{ClassFunction|Player|GetEyeTraceNoCursor}} 
     * @returns Trace information, see {{Struct|TraceResult}} 
     * @example
     * 
     * print( Entity( 1 ):GetEyeTrace().Entity )
     * 
     * // Prints the entity the player is looking at. 
     */
    public GetEyeTrace(): TraceResult;
    
    /**
     * Returns the trace according to the players view direction, ignoring their mouse ( Holding C and moving the mouse in Sandbox ).
     * 
     * The results of this function are cached every frame.
     * 
     * See also {{ClassFunction|Player|GetEyeTrace}} 
     * @returns Trace result. See {{Struct|TraceResult}} 
     */
    public GetEyeTraceNoCursor(): TraceResult;
    
    /**
     * Returns the FOV of the player.
     * 
     * **Bug [#2474](https://github.com/Facepunch/garrysmod-issues/issues/2474):**
     * >This returns an int on the server and a float on the client. 
     * @returns FOV 
     */
    public GetFOV(): number;
    
    /**
     * Returns the steam "relationship" towards the player. 
     * @returns Should return one of four different things depending on their status on your friends list: "friend", "blocked", "none" or "requested". 
     * @example
     * 
     * print(ply:GetFriendStatus())
     * 
     * // Prints the steam relationship towards another player 
     */
    public GetFriendStatus(): string;
    
    /**
     * Gets the hands entity of a player 
     * @returns The hands entity if players has one 
     */
    public GetHands(): Entity;
    
    /**
     * Returns the widget the player is hovering with his mouse. 
     * @returns The hovered widget. 
     */
    public GetHoveredWidget(): Entity;
    
    /**
     * Gets the bottom base and the top base size of the player's hull. 
     * @returns [Player's hull bottom base size, Player's hull top base size] 
     * @example
     * 
     * for k,v in pairs(player.GetAll()) do
     * 
     * 	local bottom, top = v:GetHull()
     * 
     * 	print(bottom)
     * 
     * 	print(top)
     * 
     * end
     * 
     * // Prints bases' size of the hull of all players. 
     * !TupleReturn
     */
    public GetHull(): [Vector, Vector];
    
    /**
     * Gets the bottom base and the top base size of the player's crouch hull. 
     * @returns [Player's crouch hull bottom base size, Player's crouch hull top base size] 
     * @example
     * 
     * for k,v in pairs(player.GetAll()) do
     * 
     * 	local bottom, top = v:GetHullDuck()
     * 
     * 	print(bottom)
     * 
     * 	print(top)
     * 
     * end
     * 
     * // Prints bases' size of the crouch hull of all players. 
     * !TupleReturn
     */
    public GetHullDuck(): [Vector, Vector];
    
    /**
     * Retrieves the value of a client-side {{Type|ConVar}}. The {{Type|ConVar}} must have a [[Enums/FCVAR|FCVAR_USERINFO]] flag for this to work.
     * 
     * {{Warning|The returned value is truncated to 31 bytes.}} 
     * @param cVarName  The name of the client-side {{Type|ConVar}} 
     * @returns The value of the {{Type|ConVar}} 
     * @example
     * 
     * if CLIENT then
     * 	CreateConVar( "Apple", "ILikeApples", FCVAR_USERINFO )
     * else
     * 	MsgN( Entity( 1 ):GetInfo( "Apple" ) )
     * end
     * 
     * // Creates clientside {{Type|ConVar}} 'Apple' and retrieves value of it. 
     */
    public GetInfo(cVarName: string): string;
    
    /**
     * Retrieves the numeric value of a client-side convar, returns nil if value is not convertible to a number. The {{Type|ConVar}} must have a [[Enums/FCVAR|FCVAR_USERINFO]] flag for this to work. 
     * @param cVarName  The name of the {{Type|ConVar}} to query the value of 
     * @param defaultVal  Default value if we failed to retrieve the number. 
     * @returns The value of the {{Type|ConVar}} or the default value 
     * @example
     * 
     * if CLIENT then
     * 	CreateConVar( "Apple", "1", FCVAR_USERINFO )
     * else
     * 	MsgN( Entity( 1 ):GetInfoNum( "Apple" ) )
     * end
     * 
     * // Creates clientside {{Type|ConVar}} 'Apple' and retrieves value of it.@example
     * 
     * if CLIENT then
     * 	CreateConVar( "Apple", "1", FCVAR_USERINFO )
     * else
     * 	MsgN( type( Entity( 1 ):GetInfoNum( "Apple", 1 ) ) )
     * 	MsgN( type( Entity( 1 ):GetInfo( "Apple" ) ) )
     * end
     * 
     * // Shows difference between {{ClassFunction|Player|GetInfo}} and {{ClassFunction|Player|GetInfoNum}}. 
     */
    public GetInfoNum(cVarName: string, defaultVal: number): number;
    
    /**
     * Returns the jump power of the player 
     * @returns Jump power 
     * @example
     * 
     * print( LocalPlayer():GetJumpPower() )
     * 
     * // Prints local player's jump power 
     */
    public GetJumpPower(): number;
    
    /**
     * Returns the timescale multiplier of the player movement. 
     * @returns The timescale multiplier, defaults to 1. 
     */
    public GetLaggedMovementValue(): number;
    
    /**
     * Returns the player's maximum movement speed. 
     * @returns The maximum movement speed the player can go at. 
     */
    public GetMaxSpeed(): number;
    
    /**
     * Returns the player's name, this is an alias of {{ClassFunction|Player|Nick}}.
     * 
     * **Note:**
     * >This function overrides {{ClassFunction|Entity|GetName}} (in the Lua metatable, not in c++), keep it in mind when dealing with {{LibraryFunction|ents|FindByName}} or any engine function which requires the mapping name. 
     * @returns The player's name.
     * 
     * **Bug [#3178](https://github.com/Facepunch/garrysmod-issues/issues/3178):**
     * >This is limited to 31 characters even though Steam names can have 32. 
     * @example
     * 
     * print( Entity(1):GetName() )
     * 
     * // Prints the player's name 
     */
    public GetName(): string;
    
    /**
     * Returns whenever the player is set not to collide with their teammates. 
     * @returns noCollideWithTeammates 
     */
    public GetNoCollideWithTeammates(): boolean;
    
    /**
     * Returns the the observer mode of the player 
     * @returns Observe mode of that player, see {{Enum|OBS_MODE}}. 
     */
    public GetObserverMode(): OBS_MODE;
    
    /**
     * Returns the entity the player is currently observing.
     * 
     * Set using {{ClassFunction|Player|SpectateEntity}}. 
     * @returns The entity the player is currently spectating, or [[Global_Variables|NULL]] if the player has no target. 
     */
    public GetObserverTarget(): Entity;
    
    /**
     * Returns a '''P'''layer '''Data''' key-value pair from the SQL database. (sv.db when called on server,  cl.db when called on client)
     * 
     * Internally uses the {{Lib|sql}}.
     * 
     * {{Warning|This function internally uses {{ClassFunction|Player|UniqueID}}, which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information.}}
     * 
     * **Note:**
     * >PData is not networked from servers to clients! 
     * @param key  Name of the PData key 
     * @param defaultVal [=nil] Default value if PData key doesn't exist. 
     * @returns The data in the SQL database or the default value given. 
     * @example
     * 
     * player.GetByID( 1 ):GetPData( "money", 0 )
     * 
     * // Reads the key "money" from player 1's PData 
     */
    public GetPData(key: string, defaultVal?: any): string;
    
    /**
     * Returns a player model's color. The part of the model that is colored is determined by the model itself, and is different for each model. The format is Vector(r,g,b), and each color should be between 0 and 1. 
     * @returns color 
     */
    public GetPlayerColor(): Vector;
    
    /**
     * Returns a table containing player information. 
     * @returns A table containing player information. 
     * @example
     * 
     * PrintTable( Entity( 1 ):GetPlayerInfo() ) // A player
     * PrintTable( Entity( 2 ):GetPlayerInfo() ) // A bot
     * 
     * // Example output for a bot and a player. 
     */
    public GetPlayerInfo(): table;
    
    /**
     * Returns the preferred carry angles of an object, if any are set.
     * 
     * Calls {{HookFunction|GM|GetPreferredCarryAngles}} with the target entity and returns the carry angles. 
     * @param carryEnt  Entity to retrieve the carry angles of. 
     * @returns Carry angles or nil if the entity has no preferred carry angles. 
     */
    public GetPreferredCarryAngles(carryEnt: Entity): Angle;
    
    /**
     * Returns the widget entity the player is using.
     * 
     * Having a pressed widget stops the player from firing his weapon to allow input to be passed onto the widget. 
     * @returns The pressed widget. 
     */
    public GetPressedWidget(): Entity;
    
    /**
     * **Deprecated:**
     * >You should use {{ClassFunction|Player|GetViewPunchAngles}} instead.
     * 
     * Returns players screen punch effect angle. 
     * @returns The punch angle 
     */
    public GetPunchAngle(): Angle;
    
    /**
     * Returns players death ragdoll. The ragdoll is created by {{ClassFunction|Player|CreateRagdoll}}. 
     * @returns The ragdoll.
     * 
     * Unlike normal clientside ragdolls (C_ClientRagdoll), this will be a C_HL2MPRagdoll on the client, and hl2mp_ragdoll on the server. 
     */
    public GetRagdollEntity(): Entity;
    
    /**
     * Returns the render angles for the player. 
     * @returns The render angles of the player. Only '''yaw''' part of the angle seems to be present. 
     */
    public GetRenderAngles(): Angle;
    
    /**
     * Returns the amount of speed the player runs at. 
     * @returns runspeed 
     * @example
     * 
     * print(Player(2):GetRunSpeed())
     * 
     * // Prints the players run speed in the code. 
     */
    public GetRunSpeed(): number;
    
    /**
     * Returns the position of a Player's view
     * 
     * **Note:**
     * >This is the same as calling {{ClassFunction|Entity|EyePos}} on the player. 
     * @returns aim pos 
     * @example
     * 
     * print( player.GetByID( 1 ):GetShootPos() )
     * 
     * // Gets player 1's shoot position, and prints it to console@example
     * 
     * // run on client
     * print(LocalPlayer():GetEyeTrace().StartPos)
     * print(LocalPlayer():GetShootPos())
     * print(LocalPlayer():EyePos())
     * 
     * // Prints the position of your player's camera, but using 3 different functions.
     * 
     * This example demonstrates that it doesn't matter whichever of these functions you use, you will get the SAME result. 
     */
    public GetShootPos(): Vector;
    
    /**
     * Returns the maximum height player can step onto. 
     * @returns The maximum height player can get up onto without jumping, in hammer units. 
     */
    public GetStepSize(): number;
    
    /**
     * Returns the number of seconds that the player has been timing out for. You can check if a player is timing out with {{ClassFunction|Player|IsTimingOut}}. 
     * @returns Timeout seconds. 
     */
    public GetTimeoutSeconds(): number;
    
    /**
     * Returns TOOL table of players current tool, or of the one specified. 
     * @param mode [=nil] Classname of the tool to retrieve. ( Filename of the tool in gmod_tool/stools/ ) 
     * @returns TOOL table, or nil if the table wasn't found or the player doesn't have a tool gun. 
     */
    public GetTool(mode?: string): table;
    
    /**
     * Returns a player's unduck speed (in seconds) 
     * @returns unduck speed 
     */
    public GetUnDuckSpeed(): number;
    
    /**
     * Returns the player's user group. 
     * @returns The user group of the player. 
     */
    public GetUserGroup(): string;
    
    /**
     * Gets the vehicle the player is driving, returns NULL ENTITY if the player is not driving. 
     * @returns vehicle 
     */
    public GetVehicle(): Vehicle;
    
    /**
     * Returns the entity the player is using to see from (such as the player itself, the camera, or another entity). 
     * @returns The entity the player is using to see from 
     * @example
     * 
     * print( Entity( 1 ):GetViewEntity() )
     * 
     * // Will print what entity the first player uses to look through. 
     */
    public GetViewEntity(): Entity;
    
    /**
     * Returns the player's view model entity by the index.
     * Each player has 3 view models by default, but only the first one is used.
     * 
     * To use the other viewmodels in your SWEP, see {{ClassFunction|Entity|SetWeaponModel}}.
     * 
     * **Note:**
     * >In the Client [[States|realm]], other players' viewmodels are not available unless they are being spectated. 
     * @param index [=0] optional index of the view model to return, can range from 0 to 2 
     * @returns The view model entity 
     */
    public GetViewModel(index?: number): Entity;
    
    /**
     * Returns the view offset of the player which equals the difference between the players actual position and their view.
     * 
     * See also {{ClassFunction|Player|GetViewOffsetDucked}}. 
     * @returns New view offset, must be local vector to players {{ClassFunction|Entity|GetPos}} 
     */
    public GetViewOffset(): Vector;
    
    /**
     * Returns the view offset of the player which equals the difference between the players actual position and their view when ducked.
     * 
     * See also {{ClassFunction|Player|GetViewOffset}}. 
     * @returns New crouching view offset, must be local vector to players {{ClassFunction|Entity|GetPos}} 
     */
    public GetViewOffsetDucked(): Vector;
    
    /**
     * Returns players screen punch effect angle. 
     * @returns The punch angle 
     */
    public GetViewPunchAngles(): Angle;
    
    /**
     * Returns a player's walk speed 
     * @returns walk speed 
     */
    public GetWalkSpeed(): number;
    
    /**
     * Returns the weapon for the specified class 
     * @param className  Class name of weapon 
     * @returns The weapon for the specified class. 
     * @example
     * 
     * print( Entity(1):GetWeapon( "gmod_tool" ) )
     * 
     * // Prints the weapon if the player has the toolgun 
     */
    public GetWeapon(className: string): Weapon;
    
    /**
     * Returns a player's weapon color. The part of the model that is colored is determined by the model itself, and is different for each model. The format is Vector(r,g,b), and each color should be between 0 and 1. 
     * @returns color 
     */
    public GetWeaponColor(): Vector;
    
    /**
     * Returns a table of the player's weapons.
     * 
     * **Bug [#3052](https://github.com/Facepunch/garrysmod-issues/issues/3052):**
     * >The table returned is not continuous so the # operator, {{GlobalFunction|ipairs}}, and a numeric-for loop shouldn't be used with it. Use {{LibraryFunction|table|Count}} to get the correct count, instead. 
     * @returns All the weapons the player currently has. 
     * @example
     * 
     * print(table.Count(Player(1):GetWeapons()))
     * 
     * // Prints how many weapons the player has. 
     */
    public GetWeapons(): table;
    
    /**
     * Gives the player a weapon.
     * 
     * **Note:**
     * >While this function is meant for weapons/pickupables only, it is '''not''' restricted to weapons. Any entity can be spawned using this function, including NPCs and SENTs. 
     * @param weaponClassName  Class name of weapon to give the player 
     * @param bNoAmmo [=false] Set to true to not give any ammo on weapon spawn. (Reserve ammo set by DefaultClip) 
     * @returns The weapon given to the player, if one was given. It will return NULL if the player already has the weapon, or the weapon entity (entity with given classname) doesn't exist. 
     * @example
     * 
     * Entity( 1 ):Give( "gmod_tool" )
     * 
     * // Gives the player a toolgun@example
     * 
     * Entity( 1 ):StripWeapons()
     * Entity( 1 ):StripAmmo()
     * 
     * local w = Entity( 1 ):Give( "weapon_base", true )
     * 
     * // Removes all weapons and ammo from a player and gives a weapon_base SWEP with no ammo in it. 
     */
    public Give(weaponClassName: string, bNoAmmo?: boolean): Weapon;
    
    /**
     * Gives ammo to a player 
     * @param amount  Amount of ammo 
     * @param type  Type of ammo.
     * 
     * This can also be a number for ammo ID, useful for custom ammo types.
     * 
     * You can find a list of default ammo types [[Default_Ammo_Types|here]]. 
     * @param hidePopup [=false] Hide display popup when giving the ammo 
     * @returns Ammo given. 
     * @example
     * 
     * player.GetByID(1):GiveAmmo( 200, "Pistol", true )
     * 
     * // Give the player 200 rounds for the pistol, hiding the popup. 
     */
    public GiveAmmo(amount: number, type: string, hidePopup?: boolean): number;
    
    /**
     * Disables god mode on the player. 
     * @example
     * 
     * for _, v in pairs(player.GetAll()) do
     *     v:GodDisable()
     * end
     * 
     * // Disables god mode on all players. 
     */
    public GodDisable(): void;
    
    /**
     * Enables god mode on the player. 
     * @example
     * 
     * for k, v in pairs(player.GetAll()) do
     *     v:GodEnable()
     * end
     * 
     * // Enable god mode on all players 
     */
    public GodEnable(): void;
    
    /**
     * Returns whether the player has god mode or not, contolled by {{ClassFunction|Player|GodEnable}} and {{ClassFunction|Player|GodDisable}}.
     * 
     * **Bug [#2038](https://github.com/Facepunch/garrysmod-issues/issues/2038):**
     * >This is not synced between the client and server. This will cause the client to always return false even in godmode. 
     * @returns Whether the player has god mode or not. 
     */
    public HasGodMode(): boolean;
    
    /**
     * Returns if the player has the specified weapon 
     * @param className  Class name of the weapon 
     * @returns True if the player has the weapon 
     * @example
     * 
     * print(player.GetByID(1):HasWeapon("weapon_physgun"))
     * 
     * // prints if the player has the physgun 
     */
    public HasWeapon(className: string): boolean;
    
    /**
     * Returns if the player is in a vehicle 
     * @returns Whether the player is in a vehicle. 
     */
    public InVehicle(): boolean;
    
    /**
     * Returns the player's IP address and connection port in ip:port form 
     * @returns The player's IP address and connection port 
     * @example
     * 
     * print( Entity( 1 ):IPAddress() )
     * 
     * // Prints the player's IP and port 
     */
    public IPAddress(): string;
    
    /**
     * Returns whether the player is an admin or not 
     * @returns True if the player is an admin 
     * @example
     * 
     * hook.Add("PlayerSpawn", "PrintIfAdmin", function( ply )
     *     if ( ply:IsAdmin() ) then 
     *        print( "It's true, " .. ply:Nick() .. " is an admin")
     *     else
     *        print( "It's false, " .. ply:Nick() .. " is not an admin")
     *     end
     * end )
     * 
     * // Every time a player spawns, print in the console whether they are an admin.<!-- Untested yet, will test in a few minutes --> 
     */
    public IsAdmin(): boolean;
    
    /**
     * Returns if the player is an bot or not 
     * @returns True if the player is a bot. 
     */
    public IsBot(): boolean;
    
    /**
     * Returns true from the point when the player is sending client info but not fully in the game until they disconnect. 
     * @returns isConnected 
     */
    public IsConnected(): boolean;
    
    /**
     * Used to find out if a player is currently 'driving' an entity (by which we mean 'right click > drive' ). 
     * @returns A value representing whether or not the player is 'driving' an entity. 
     * @example
     * 
     * local plys = player.GetAll()
     * for _, ply in pairs( plys ) do
     *     
     *     if ( ply:IsDrivingEntity() ) then
     *         ply:Kill()
     *     end
     *     
     * end
     * 
     * // Kills every player currently 'driving' an entity. 
     */
    public IsDrivingEntity(): boolean;
    
    /**
     * Returns whether the players movement is currently frozen, contolled by {{ClassFunction|Player|Freeze}}. 
     * @returns Whether the players movement is currently frozen or not. 
     */
    public IsFrozen(): boolean;
    
    /**
     * Returns whether the player identity was confirmed by the steam network. 
     * @returns Whether the player has been fully authenticated or not.
     * 
     * This will always be true for singleplayer and the listen server host.
     * This will always be false for bots. 
     */
    public IsFullyAuthenticated(): boolean;
    
    /**
     * Returns if a player is the host of the current session. 
     * @returns True if the player is the listen server host, false otherwise.
     * 
     * This will always be true in single player, and false on a dedicated server. 
     */
    public IsListenServerHost(): boolean;
    
    /**
     * Returns whether or not the player is muted locally. 
     * @returns whether or not the player is muted locally. 
     */
    public IsMuted(): boolean;
    
    /**
     * Returns true if the player is playing a taunt. 
     * @returns Whether the player is playing a taunt. 
     */
    public IsPlayingTaunt(): boolean;
    
    /**
     * Returns whenever the player is heard by the local player. 
     * @returns isSpeaking 
     */
    public IsSpeaking(): boolean;
    
    /**
     * Returns whether the player is currently sprinting or not. 
     * @returns Is the player sprinting or not 
     */
    public IsSprinting(): boolean;
    
    /**
     * Returns whenever the player is equipped with the suit item.
     * 
     * **Bug [#3449](https://github.com/Facepunch/garrysmod-issues/issues/3449):**
     * >This will only work for the local player clientside. 
     * @returns Is the suit equipped or not. 
     */
    public IsSuitEquipped(): boolean;
    
    /**
     * Returns whether the player is a superadmin. 
     * @returns True if the player is a superadmin. 
     */
    public IsSuperAdmin(): boolean;
    
    /**
     * Returns true if the player is timing out (i.e. is losing connection), false otherwise. 
     * @returns isTimingOut 
     */
    public IsTimingOut(): boolean;
    
    /**
     * Returns whether the player is typing in their chat.
     * 
     * This may not work properly if the server uses a custom chatbox. 
     * @returns Whether the player is typing in their chat or not. 
     */
    public IsTyping(): boolean;
    
    /**
     * Returns true/false if the player is in specified group or not. 
     * @param groupname  Group to check the player for. 
     * @returns isInUserGroup 
     * @example
     * 
     * if ( Player(2):IsUserGroup("superadmin") ) then
     *     print("yes, I'm awesome!")
     * end
     * 
     * // Prints in the players chat "yes, I'm awesome!" if he's in the superadmin group. 
     */
    public IsUserGroup(groupname: string): boolean;
    
    /**
     * Returns if the player can be heard by the local player. 
     * @returns isAudible 
     */
    public IsVoiceAudible(): boolean;
    
    /**
     * Returns if the player is in the context menu.
     * 
     * **Note:**
     * >Although this is shared, it will only work properly on the CLIENT for the local player. Using this serverside or on other players will return false. 
     * @returns Is the player world clicking or not. 
     */
    public IsWorldClicking(): boolean;
    
    /**
     * Gets whether a key is down. This is not networked to other players, meaning only the local client can see the keys they are pressing. 
     * @param key  The key, see {{Enum|IN}} 
     * @returns isDown 
     * @example
     * 
     * hook.Add("Tick", "KeyDown_Test", function()
     *     if (Entity(1):KeyDown(IN_FORWARD)) then
     *         print("Player is pressing forward!")
     *     end
     * end)
     * 
     * // Prints whenever the first player is holding forward key 
     */
    public KeyDown(key: IN): boolean;
    
    /**
     * Gets whether a key was down one tick ago. 
     * @param key  The key, see {{Enum|IN}} 
     * @returns Is key down 
     */
    public KeyDownLast(key: IN): boolean;
    
    /**
     * Gets whether a key was just pressed this tick 
     * @param key  Corresponds to an {{Enum|IN}} 
     * @returns Was pressed or not 
     * @example
     * 
     * hook.Add( "Tick", "CheckPlayer1Forward", function()
     *    if( Entity( 1 ):KeyPressed( IN_FORWARD )) then
     *         print( "Ent1 just started moving forward!" )
     *     end
     * end )
     * 
     * // Prints whenever the first player first starts pressing W 
     */
    public KeyPressed(key: IN): boolean;
    
    /**
     * Gets whether a key was just released this tick 
     * @param key  The key, see {{Enum|IN}} 
     * @returns Was released or not 
     * @example
     * 
     * hook.Add( "Tick", "CheckPlayer1Forward", function()
     *    if Entity( 1 ):KeyReleased( IN_FORWARD ) then print("Ent1 just stopped moving forward!") end
     * end)
     * 
     * // Prints whenever the first player first stops pressing W 
     */
    public KeyReleased(key: IN): boolean;
    
    /**
     * Kicks the player from the server. 
     * @param reason [="No reason given"] Reason to show for disconnection.
     * 
     * **Bug [#3559](https://github.com/Facepunch/garrysmod-issues/issues/3559):**
     * >This will be shortened to ~256 chars. If the string > ~512 chars, the kick will fail. 
     * @example
     * 
     * ply:Kick( "Goodbye" )
     * 
     * // Kick a player with reason "Goodbye" 
     */
    public Kick(reason?: string): void;
    
    /**
     * Kills a player and calls {{HookFunction|GM|PlayerDeath}}. 
     */
    public Kill(): void;
    
    /**
     * Kills a player without notifying the rest of the server.
     * 
     * This will call {{HookFunction|GM|PlayerSilentDeath}} instead of {{HookFunction|GM|PlayerDeath}}. 
     * @example
     * 
     * Player(2):KillSilent()
     * 
     * // Silently kills the player. 
     */
    public KillSilent(): void;
    
    /**
     * This allows the server to mitigate the lag of the player by moving back all the entities that can be lag compensated to the time the player attacked with his weapon.
     * 
     * This technique is most commonly used on things that hit other entities instantaneously, such as traces.
     * 
     * **Note:**
     * >{{ClassFunction|Entity|FireBullets}} calls this function internally.
     * 
     * Lag compensation only works for players and entities that have been enabled with {{ClassFunction|Entity|SetLagCompensated}}
     * 
     * Despite being defined shared, it can only be used server side in a [[:Category:Predicted_Hooks|Predicted Hook]].
     * 
     * {{Warning|This function NEEDS to be disabled after you're done with it or it will break the movement of the entities affected!}} 
     * @param lagCompensation  The state of the lag compensation, true to enable and false to disable. 
     * @example
     * 
     * function SWEP:PrimaryAttack()
     * 
     * 	local tracedata = {}
     * 	tracedata.start = self.Owner:GetShootPos()
     * 	tracedata.endpos = self.Owner:GetShootPos() + self.Owner:GetAimVector() * 75
     * 	tracedata.filter = self.Owner
     * 	tracedata.mins =  Vector( -8 , -8 , -8 )
     * 	tracedata.maxs =  Vector( 8 , 8 , 8 )
     * 	
     * 	// It is recommended to use an IsPlayer check in case the weapon is being used by an NPC.
     * 	if ( self.Owner:IsPlayer() ) then
     * 		self.Owner:LagCompensation( true )
     * 	end
     * 	
     * 	local tr = util.TraceHull( tracedata )
     * 	
     * 	if ( self.Owner:IsPlayer() ) then
     * 		self.Owner:LagCompensation( false )
     * 	end
     * 	
     * 	if tr.Hit then
     * 		print( tr.Entity )	//your code here
     * 	end
     * 	
     * 	self:SetNextPrimaryFire( CurTime() + 0.5 )
     * end
     * 
     * // Do a crowbar-like melee trace, enabling lag compensation before doing so. 
     */
    public LagCompensation(lagCompensation: boolean): void;
    
    /**
     * Returns the hitgroup where the player was last hit. 
     * @returns Hitgroup, see {{Enum|HITGROUP}} 
     */
    public LastHitGroup(): HITGROUP;
    
    /**
     * Shows "limit hit" notification in sandbox.
     * 
     * **Note:**
     * >This function is only available in Sandbox and its derivatives 
     * @param type  Type of hit limit 
     * @example
     * 
     * for id, ply in pairs( player.GetAll() ) do
     *        ply:LimitHit( "test" )
     * end
     * 
     * // Sends a fake "limit hit" notification 
     */
    public LimitHit(type: string): void;
    
    /**
     * Stops a player from using any inputs, such as moving, turning, or attacking. Key binds are still called. Similar to {{ClassFunction|Player|Freeze}} but the player takes no damage.
     * 
     * Adds the [[Enums/FL|FL_FROZEN]] and [[Enums/FL|FL_GODMODE]] flags to the player. 
     */
    public Lock(): void;
    
    /**
     * Returns the position of a Kinect bone. 
     * @param bone  Bone to get the position of. Must be from 0 to 19. 
     * @returns Position of the bone. 
     */
    public MotionSensorPos(bone: number): Vector;
    
    /**
     * Returns the players name. Identical to {{ClassFunction|Player|Nick}} and {{ClassFunction|Player|GetName}}. 
     * @returns Player's Steam name.
     * 
     * **Bug [#3178](https://github.com/Facepunch/garrysmod-issues/issues/3178):**
     * >This is limited to 31 characters even though Steam names can have 32. 
     * @example
     * 
     * print(Player(1):Name())
     * 
     * // Prints the players name in console. 
     */
    public Name(): string;
    
    /**
     * Returns the player's nickname. 
     * @returns Player's Steam name
     * 
     * **Bug [#3178](https://github.com/Facepunch/garrysmod-issues/issues/3178):**
     * >This is limited to 31 characters even though Steam names can have 32. 
     * @example
     * 
     * print( Entity(1):Nick() )
     * 
     * // Prints the player's nickname 
     */
    public Nick(): string;
    
    /**
     * Returns the packet loss of the client. It is not networked so it only returns 0 when run clientside. 
     * @returns name=packetsLost 
     */
    public PacketLoss(): number;
    
    /**
     * Unfreezes the props player is looking at. This is essentially the same as pressing reload with the physics gun, including double press for unfreeze all. 
     * @returns Number of props unfrozen. 
     */
    public PhysgunUnfreeze(): number;
    
    /**
     * This makes the player hold ( same as pressing {{Key|E}} on a small prop ) the provided entity.
     * 
     * **Note:**
     * >Don't get this confused with picking up items like ammo or health kits
     * 
     * **Note:**
     * >This picks up the passed entity regardless of its mass or distance from the player 
     * @param entity  Entity to pick up. 
     * @example
     * 
     * function PlayerPickupObject(ply, obj)
     * 	if ( obj:IsPlayerHolding() ) then return end
     * 	ply:PickupObject( obj )
     * end
     * 
     * // An extra function to make sure the object isn't held before being picked up. 
     */
    public PickupObject(entity: Entity): void;
    
    /**
     * Returns the player's ping to server. 
     * @returns The player's ping. 
     */
    public Ping(): number;
    
    /**
     * Plays the correct step sound according to what the player is staying on. 
     * @param volume  Volume for the sound, in range from 0 to 1 
     */
    public PlayStepSound(volume: number): void;
    
    /**
     * Displays a message either in their chat, console, or center of the screen. See also {{GlobalFunction|PrintMessage}}.
     * 
     * **Note:**
     * >When called serverside, this uses the archaic user message system (the {{Lib|umsg}}) and hence is limited to &asymp;250 characters.
     * 
     * **Note:**
     * >''HUD_PRINTCENTER'' will not work when this is called clientside. 
     * @param type  Which type of message should be sent to the player ({{Enum|HUD}}) 
     * @param message  Message to be sent to the player 
     * @example
     * 
     * Entity(1):PrintMessage(HUD_PRINTTALK, "I'm new here.")
     * 
     * // Prints into the first players chat: "I'm new here." 
     */
    public PrintMessage(type: HUD, message: string): void;
    
    /**
     * Removes all ammo from a certain player 
     */
    public RemoveAllAmmo(): void;
    
    /**
     * Removes all weapons and ammo from the player. 
     */
    public RemoveAllItems(): void;
    
    /**
     * Removes the amount of the specified ammo from the player. 
     * @param ammoCount  The amount of ammunition to remove. 
     * @param ammoName  The name of the ammunition to remove from. This can also be a {{Type|number}} ammoID. 
     */
    public RemoveAmmo(ammoCount: number, ammoName: string): void;
    
    /**
     * Removes a '''P'''layer '''Data''' key-value pair from the SQL database. (sv.db when called on server,  cl.db when called on client)
     * 
     * Internally uses the {{Lib|sql}}.
     * 
     * {{Warning|This function internally uses {{ClassFunction|Player|UniqueID}}, which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information.}} 
     * @param key  Key to remove 
     * @returns true is succeeded, false otherwise 
     * @example
     * 
     * player.GetByID( 1 ):RemovePData( "money" )
     * 
     * // Deletes the key "money" from player 1 
     */
    public RemovePData(key: string): boolean;
    
    /**
     * Strips the player's suit item. 
     */
    public RemoveSuit(): void;
    
    /**
     * Resets both normal and duck hulls to their default values. 
     */
    public ResetHull(): void;
    
    /**
     * Forces the player to say whatever the first argument is. Works on bots too.
     * 
     * **Note:**
     * >This function ignores the default chat message cooldown 
     * @param text  The text to force the player to say. 
     * @param teamOnly [=false] Whether to send this message to our own team only. 
     */
    public Say(text: string, teamOnly?: boolean): void;
    
    /**
     * Fades the screen 
     * @param flags  Fade flags defined with {{Enum|SCREENFADE}}. 
     * @param clr [=color_white] The color of the screenfade 
     * @param fadeTime [=] Fade(in/out) effect transition time ( From no fade to full fade and vice versa ) 
     * @param fadeHold [=] Fade effect hold time 
     * @example
     * 
     * hook.Add( "PlayerHurt", "hurt_effect_fade", function( ply )
     * 	ply:ScreenFade( SCREENFADE.IN, Color( 255, 0, 0, 128 ), 0.3, 0 )
     * end )
     * 
     * // Flashes the screen red to nothing over 0.3 seconds when a player gets hurt. 
     */
    public ScreenFade(flags: SCREENFADE, clr?: number, fadeTime?: number, fadeHold?: number): void;
    
    /**
     * Sets the active weapon of the player by its class name.
     * 
     * {{Warning|This will switch the weapon out of prediction, causing delay on the client and {{HookFunction|WEAPON|Deploy}} to be called out of prediction. Try using {{ClassFunction|CUserCmd|SelectWeapon}} or {{LibraryFunction|input|SelectWeapon}}, instead.}}
     * 
     * **Note:**
     * >This will trigger the weapon switch event and associated animations. To switch weapons silently, use {{ClassFunction|Player|SetActiveWeapon}}. 
     * @param className  The class name of the weapon to switch to.
     * 
     * The player must already have this weapon. You can use {{ClassFunction|Player|Give}} if not. 
     * @example
     * 
     * Entity(1):SelectWeapon("gmod_tool")
     * 
     * // Force the player to switch to toolgun@example
     * 
     * local weapons = Entity( 1 ):GetWeapons()
     * local weapon = weapons[ math.random( #weapons ) ]
     * 
     * Entity( 1 ):SelectWeapon( weapon:GetClass() )
     * 
     * // Selects a random weapon from the player's inventory and switches to it. 
     */
    public SelectWeapon(className: string): void;
    
    /**
     * Sends a hint to a player.
     * 
     * **Note:**
     * >This function is only available in Sandbox and its derivatives. Since this adds ''#Hint_'' to the beginning of each message, you should only use it with default hint messages, or those cached with {{LibraryFunction|language|Add}}. For hints with custom text, look at {{LibraryFunction|notification|AddLegacy}} 
     * @param name  Name/class/index of the hint. The text of the hint will contain this value. ( "#Hint_" .. name ) An example is ''PhysgunFreeze''. 
     * @param delay  Delay in seconds before showing the hint 
     */
    public SendHint(name: string, delay: number): void;
    
    /**
     * Executes a simple Lua string on the player. 
     * 
     * '''Note:''' The string is limited to 254 bytes. Consider using the [[Net Library Usage|net library]] for more advanced server-client interaction. 
     * @param script  The script to execute. 
     * @example
     * 
     * local pl = Entity( 1 )
     * pl:SendLua( "print( 'Hello World' )" )
     * 
     * // Sends "Hello World" to the client's console. 
     */
    public SendLua(script: string): void;
    
    /**
     * Sets the player's active weapon. You should use {{ClassFunction|CUserCmd|SelectWeapon}} or {{ClassFunction|Player|SelectWeapon}}, instead in most cases.
     * 
     * **Note:**
     * >This function will not trigger the weapon switch event or associated equip animations. You can achieve this using {{ClassFunction|Player|SelectWeapon}} with {{ClassFunction|Entity|GetClass}}.
     * 
     * **Note:**
     * >This will not call {{HookFunction|GM|PlayerSwitchWeapon}}. 
     * @param weapon  The weapon to equip. 
     */
    public SetActiveWeapon(weapon: Weapon): void;
    
    /**
     * Set if the players' model is allowed to rotate around the pitch and roll axis. 
     * @param Allowed  Allowed to rotate 
     */
    public SetAllowFullRotation(Allowed: boolean): void;
    
    /**
     * Allows player to use his weapons in a vehicle. You need to call this before entering a vehicle.
     * 
     * **Bug [#1277](https://github.com/Facepunch/garrysmod-issues/issues/1277):**
     * >Shooting in a vehicle fires two bullets.
     * 
     * **Bug [#3261](https://github.com/Facepunch/garrysmod-issues/issues/3261):**
     * >Weapon viewpunch does not decay while in a vehicle, leading to incorrect aim angles. 
     * @param allow  Show we allow player to use his weapons in a vehicle or not. 
     */
    public SetAllowWeaponsInVehicle(allow: boolean): void;
    
    /**
     * Sets the amount of the specified ammo for the player. 
     * @param ammoCount  The amount of ammunition to set. 
     * @param ammoType  The ammunition type. Can be either {{Type|number}} ammo ID or {{Type|string}} ammo name. 
     */
    public SetAmmo(ammoCount: number, ammoType: number | string): void;
    
    /**
     * Sets the player armor to the argument. 
     * @param Amount  The amount that the player armor is going to be set to. 
     */
    public SetArmor(Amount: number): void;
    
    /**
     * Pushes the player away from another player whenever it's inside the other players bounding box. 
     * @param avoidPlayers  Avoid or not avoid. 
     */
    public SetAvoidPlayers(avoidPlayers: boolean): void;
    
    /**
     * Set if the player should be allowed to walk using the (default) alt key. 
     * @param abletowalk  True allows the player to walk. 
     */
    public SetCanWalk(abletowalk: boolean): void;
    
    /**
     * Sets whether the player can use the HL2 suit zoom ("+zoom" bind) or not. 
     * @param canZoom  Whether to make the player able or unable to zoom. 
     */
    public SetCanZoom(canZoom: boolean): void;
    
    /**
     * Sets the player's class id. 
     * @param classID  The class id the player is being set with. 
     */
    public SetClassID(classID: number): void;
    
    /**
     * Sets the crouched walk speed multiplier.
     * 
     * Doesn't work for values above 1. 
     * @param speed  The walk speed multiplier that crouch speed should be. 
     * @example
     * 
     * Entity(1):SetCrouchedWalkSpeed( 1 )
     * 
     * // Set the crouch speed to be as fast as the players walk speed. 
     */
    public SetCrouchedWalkSpeed(speed: number): void;
    
    /**
     * Sets the '''actual''' view offset which equals the difference between the players actual position and their view when standing.
     * 
     * Do not confuse with {{ClassFunction|Player|SetViewOffset}} and {{ClassFunction|Player|SetViewOffsetDucked}} 
     * @param viewOffset  The new view offset. 
     */
    public SetCurrentViewOffset(viewOffset: Vector): void;
    
    /**
     * Sets a player's death count 
     * @param deathcount  Number of deaths (positive or negative) 
     */
    public SetDeaths(deathcount: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Sets the driving entity and driving mode.
     * 
     * Use {{LibraryFunction|drive|PlayerStartDriving}} instead, see [[Entity Driving]]. 
     * @param drivingMode  The driving mode index. 
     */
    public SetDrivingEntity(drivingMode: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Sets the driving entity and driving mode.
     * 
     * Use {{LibraryFunction|drive|PlayerStartDriving}} instead, see [[Entity Driving]]. 
     * @param drivingEntity [=NULL] The entity the player should drive. 
     * @param drivingMode [=] The driving mode index. 
     */
    public SetDrivingEntity(drivingEntity?: Entity, drivingMode?: number): void;
    
    /**
     * Applies the specified sound filter to the player. 
     * @param soundFilter  The index of the sound filter to apply.
     * Pick from the [https://developer.valvesoftware.com/wiki/Dsp_presets list of DSP's]. 
     * @param fastReset  If set to true the sound filter will be removed faster. 
     */
    public SetDSP(soundFilter: number, fastReset: boolean): void;
    
    /**
     * Sets how quickly a player ducks.
     * 
     * **Bug [#2722](https://github.com/Facepunch/garrysmod-issues/issues/2722):**
     * >This will not work for values >{{eq}} 1. 
     * @param duckSpeed  How quickly the player will duck. 
     */
    public SetDuckSpeed(duckSpeed: number): void;
    
    /**
     * Sets the angle of the player's view (may rotate body too if angular difference is large) 
     * @param angle  Angle to set the view to 
     * @example
     * 
     * local ply = LocalPlayer() // Or any player
     * local vec1 = Vector(0,0,0) // Where we're looking at
     * local vec2 = ply:GetShootPos() // The player's eye pos
     * ply:SetEyeAngles((vec1 - vec2):Angle()) // Sets to the angle between the two vectors
     * 
     * // Points a player at Vector(0,0,0) 
     */
    public SetEyeAngles(angle: Angle): void;
    
    /**
     * Set a player's FOV (Field Of View) over a certain amount of time. 
     * @param fov  the angle of perception (FOV). Set to 0 to return to default user FOV. ( Which is ranging from 75 to 90, depending on user settings ) 
     * @param time  the time it takes to transition to the FOV expressed in a floating point. 
     */
    public SetFOV(fov: number, time: number): void;
    
    /**
     * Sets a player's frags (kills) 
     * @param fragcount  Number of frags (positive or negative) 
     * @example
     * 
     * player.GetByID( 1 ):SetFrags( 9001 )
     * 
     * // Sets the frags of player 1 to 9001 
     */
    public SetFrags(fragcount: number): void;
    
    /**
     * Sets the hands entity of a player.
     * 
     * The hands entity is an entity introduced in Garry's Mod 13 and it's used to show the player's hands attached to the viewmodel.
     * This is similar to the approach used in L4D and CS:GO, for more information on how to implement this system in your gamemode visit [[Using Viewmodel Hands]]. 
     * @param hands  The hands entity to set 
     */
    public SetHands(hands: Entity): void;
    
    /**
     * Sets the widget that is currently hovered by the player's mouse. 
     * @param widget [=NULL] The widget entity that the player is hovering. 
     */
    public SetHoveredWidget(widget?: Entity): void;
    
    /**
     * Sets the mins and maxs of the AABB of the players collision.
     * 
     * **Bug [#3365](https://github.com/Facepunch/garrysmod-issues/issues/3365):**
     * >Setting both the mins and maxs to {{GlobalFunction|Vector}}(0,0,0) will crash the game. 
     * @param hullMins  The min coordinates of the hull. 
     * @param hullMaxs  The max coordinates of the hull. 
     */
    public SetHull(hullMins: Vector, hullMaxs: Vector): void;
    
    /**
     * Sets the mins and maxs of the AABB of the players collision when ducked. 
     * @param hullMins  The min coordinates of the hull. 
     * @param hullMaxs  The max coordinates of the hull. 
     */
    public SetHullDuck(hullMins: Vector, hullMaxs: Vector): void;
    
    /**
     * Sets the jump power, eg. the velocity the player will applied to when he jumps. 
     * @param jumpPower  The new jump velocity. 
     */
    public SetJumpPower(jumpPower: number): void;
    
    /**
     * Slows down the player movement simulation by the timescale, this is used internally in the HL2 weapon stripping sequence.
     * 
     * It achieves such behavior by multiplying the {{GlobalFunction|FrameTime}} by the specified timescale at the start of the movement simulation and then restoring it afterwards.
     * 
     * **Note:**
     * >This is reset to 1 on spawn
     * 
     * **Note:**
     * >There is no weapon counterpart to this, you'll have to hardcode the multiplier in the weapon or call {{ClassFunction|Weapon|SetNextPrimaryFire}} / {{ClassFunction|Weapon|SetNextSecondaryFire}} manually from a [[:Category:Predicted_Hooks|Predicted Hook]] 
     * @param timescale  The timescale multiplier. 
     */
    public SetLaggedMovementValue(timescale: number): void;
    
    /**
     * Sets the maximum speed which the player can move at. 
     * @param walkSpeed  The maximum speed. 
     */
    public SetMaxSpeed(walkSpeed: number): void;
    
    /**
     * Sets if the player should be muted locally. 
     * @param mute  Mute or unmute. 
     * @example
     * 
     * for k, v in pairs(player.GetAll()) do
     * 	v:SetMuted(true)
     * end
     * 
     * // Mutes all players on the server 
     */
    public SetMuted(mute: boolean): void;
    
    /**
     * Sets whenever the player should not collide with their teammates.
     * 
     * **Bug [#2757](https://github.com/Facepunch/garrysmod-issues/issues/2757):**
     * >This only works with {{ClassFunction|Player|Team}} IDs 1-4. This also has major collision issues. 
     * @param shouldNotCollide  True to disable, false to enable collision. 
     */
    public SetNoCollideWithTeammates(shouldNotCollide: boolean): void;
    
    /**
     * Sets the players visibility towards NPCs. 
     * @param visibility  The visibility. 
     */
    public SetNoTarget(visibility: boolean): void;
    
    /**
     * Sets the players observer mode. 
     * @param observeMode  Observe mode using {{Enum|OBS_MODE}}. 
     */
    public SetObserverMode(observeMode: OBS_MODE): void;
    
    /**
     * Writes a '''P'''layer '''Data''' key-value pair to the SQL database. (sv.db when called on server,  cl.db when called on client)
     * 
     * Internally uses the {{Lib|sql}}.
     * 
     * {{Warning|This function internally uses {{ClassFunction|Player|UniqueID}}, which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information.}}
     * 
     * **Note:**
     * >PData is not networked from servers to clients! 
     * @param key  Name of the PData key 
     * @param value  Value to write to the key ('''must''' be an SQL valid data type, such as a string or integer) 
     * @returns Whether the operation was successful or not 
     * @example
     * 
     * player.GetByID( 1 ):SetPData( "money", 100 )
     * 
     * // Sets the key "money" from player 1's PData to 100 
     */
    public SetPData(key: string, value: any): boolean;
    
    /**
     * Sets the player model's color. The part of the model that is colored is determined by the model itself, and is different for each model. 
     * @param Color  This is the color to be set. The format is Vector(r,g,b), and each color should be between 0 and 1. 
     * @example
     * 
     * function GM:PlayerSpawn( ply )
     * 	ply:SetPlayerColor( Vector(1,0,0) )
     * end
     * 
     * // When a player spawns their color will be red.@example
     * 
     * local function SetColor( ply, color )
     * 	ply:SetPlayerColor( Vector( color.r / 255, color.g / 255, color.b / 255 ) )
     * end
     * 
     * // A function you could use to set the player's color to a {{GlobalFunction|Color}} rather than a {{Type|Vector}} 
     */
    public SetPlayerColor(Color: Vector): void;
    
    /**
     * Sets the widget that is currently in use by the player's mouse.
     * 
     * Having a pressed widget stops the player from firing his weapon to allow input to be passed onto the widget. 
     * @param pressedWidget [=NULL] The widget the player is currently using. 
     */
    public SetPressedWidget(pressedWidget?: Entity): void;
    
    /**
     * Sets the render angles of a player. 
     * @param ang  The new render angles to set 
     */
    public SetRenderAngles(ang: Angle): void;
    
    /**
     * Sets the run speed eg. the speed when sprinting. 
     * @param runSpeed  The new run speed. 
     */
    public SetRunSpeed(runSpeed: number): void;
    
    /**
     * Sets the maximum height a player can step onto without jumping. 
     * @param stepHeight  The new maximum height the player can step onto without jumping 
     */
    public SetStepSize(stepHeight: number): void;
    
    /**
     * Sets whenever to suppress the pickup notification for the player. 
     * @param doSuppress  Whenever to suppress the notice or not. 
     */
    public SetSuppressPickupNotices(doSuppress: boolean): void;
    
    /**
     * Sets the player to the chosen team. 
     * @param Team  The team that the player is being set to. 
     * @example
     * 
     * function ChangeMyTeam( ply, cmd, args )
     *     ply:SetTeam( args[1] )
     *     ply:Spawn()
     * end
     * concommand.Add( "set_team", ChangeMyTeam )
     * 
     * // Sets the players team to the first argument when writing "set_team" into the console and respawns the player afterwards, ex. "set_team 1". 
     */
    public SetTeam(Team: number): void;
    
    /**
     * Sets how quickly a player un-ducks 
     * @param UnDuckSpeed  How quickly the player will un-duck 
     */
    public SetUnDuckSpeed(UnDuckSpeed: number): void;
    
    /**
     * Sets up the players view model hands. Calls {{HookFunction|GM|PlayerSetHandsModel}} to set the model of the hands. 
     * @param ent  If the player is spectating an entity, this should be the entity the player is spectating, so we can use its hands model instead. 
     */
    public SetupHands(ent: Entity): void;
    
    /**
     * Sets the usergroup of the player. 
     * @param groupName  The user group of the player. 
     * @example
     * 
     * Entity(1):SetUserGroup("superadmin")
     * print(Entity(1):GetUserGroup())
     * 
     * // Make the player superadmin and print their group. 
     */
    public SetUserGroup(groupName: string): void;
    
    /**
     * Attaches the players view to the position and angles of the specified entity. 
     * @param viewEntity  The entity to attach the player view to. 
     */
    public SetViewEntity(viewEntity: Entity): void;
    
    /**
     * Sets the '''desired''' view offset which equals the difference between the players actual position and their view when standing.
     * 
     * If you want to set '''actual''' view offset, use {{ClassFunction|Player|SetCurrentViewOffset}}
     * 
     * See also {{ClassFunction|Player|SetViewOffsetDucked}} for '''desired''' view offset when crouching. 
     * @param viewOffset  The new desired view offset when standing. 
     */
    public SetViewOffset(viewOffset: Vector): void;
    
    /**
     * Sets the '''desired''' view offset which equals the difference between the players actual position and their view when crouching.
     * 
     * If you want to set '''actual''' view offset, use {{ClassFunction|Player|SetCurrentViewOffset}}
     * 
     * See also {{ClassFunction|Player|SetViewOffset}} for '''desired''' view offset when standing. 
     * @param viewOffset  The new desired view offset when crouching. 
     */
    public SetViewOffsetDucked(viewOffset: Vector): void;
    
    /**
     * Sets client's view punch. See {{ClassFunction|Player|ViewPunch}} 
     * @param punchAngle  The angle to set. 
     */
    public SetViewPunchAngles(punchAngle: Angle): void;
    
    /**
     * Sets the walk speed eg. the speed when normally walking.
     * 
     * **Bug [#2030](https://github.com/Facepunch/garrysmod-issues/issues/2030):**
     * >Using a speed of 0 can lead to prediction errors. 
     * @param walkSpeed  The new walk speed. 
     */
    public SetWalkSpeed(walkSpeed: number): void;
    
    /**
     * Sets the player weapon's color. The part of the model that is colored is determined by the model itself, and is different for each model. 
     * @param Color  This is the color to be set. The format is Vector(r,g,b), and each color should be between 0 and 1. 
     */
    public SetWeaponColor(Color: Vector): void;
    
    /**
     * Polls the engine to request if the player should be drawn at the time the function is called. 
     * @returns shouldDraw 
     */
    public ShouldDrawLocalPlayer(): boolean;
    
    /**
     * Sets whether the player's current weapon should drop on death.
     * 
     * '''NOTE!''' This seems to be reset to false when player dies. 
     * @param drop  Whether to drop the player's current weapon or not 
     */
    public ShouldDropWeapon(drop: boolean): void;
    
    /**
     * Opens the player steam profile page in the steam overlay browser. 
     */
    public ShowProfile(): void;
    
    /**
     * Signals the entity that it was dropped by the gravity gun. 
     * @param ent  Entity that was dropped. 
     */
    public SimulateGravGunDrop(ent: Entity): void;
    
    /**
     * Signals the entity that it was picked up by the gravity gun. This call is only required if you want to simulate the situation of picking up objects. 
     * @param ent  The entity picked up 
     */
    public SimulateGravGunPickup(ent: Entity): void;
    
    /**
     * Sets the spectate mode of the player. 
     * @param spectateMode  Spectate mode, see {{Enum|OBS_MODE}}. 
     */
    public Spectate(spectateMode: OBS_MODE): void;
    
    /**
     * Makes the player spectate the entity
     * 
     * To get the applied spectated entity, use {{ClassFunction|Player|GetObserverTarget}}().
     * 
     * **Bug [#3267](https://github.com/Facepunch/garrysmod-issues/issues/3267):**
     * >The player's position will not update while spectating, causing area portals and other map optimisations to not work properly. You can fix this by setting the player's position to the spectated entity's each tick. 
     * @param entity  Entity to spectate. 
     * @example
     * 
     * local ent = ents.Create( "prop_physics" )
     * ent:SetModel( "models/hunter/misc/sphere025x025.mdl" )
     * ent:SetPos( Vector( 0, 0, 0 ) )
     * ent:Spawn()
     *  
     * for _, ply in pairs( player.GetAll() ) do
     * 	ply:Spectate( OBS_MODE_CHASE )
     * 	ply:SpectateEntity( ent )
     * 	ply:StripWeapons()
     * 
     * 	timer.Simple( 5, function()
     * 		ply:UnSpectate()
     * 		ply:Spawn()
     * 	end )
     * end
     * 
     * // Creates a entity, spectates it and after 5 seconds, stops spectating it. 
     */
    public SpectateEntity(entity: Entity): void;
    
    /**
     * Makes a player spray their decal. 
     * @param sprayOrigin  The location to spray from 
     * @param sprayEndPos  The location to spray to 
     * @example
     * 
     * ply:SprayDecal(ply:EyePos(),ply:EyePos() + ply:GetAimVector()*5000)
     * 
     * // Makes the player spray their decal 5000 units away. 
     */
    public SprayDecal(sprayOrigin: Vector, sprayEndPos: Vector): void;
    
    /**
     * Disables the sprint on the player.
     * 
     * **Bug [#2390](https://github.com/Facepunch/garrysmod-issues/issues/2390):**
     * >Not working - use {{ClassFunction|Player|SetRunSpeed}} or {{ClassFunction|CMoveData|SetMaxSpeed}} in a {{HookFunction|GM|Move}} hook, instead. 
     * @example
     * 
     * player.GetByID( 1 ):SprintDisable()
     * 
     * // Stops and prevents player with ID 1 from sprinting 
     */
    public SprintDisable(): void;
    
    /**
     * Enables the sprint on the player.
     * 
     * **Bug [#2390](https://github.com/Facepunch/garrysmod-issues/issues/2390):**
     * >Not working - use {{ClassFunction|Player|SetRunSpeed}} or {{ClassFunction|CMoveData|SetMaxSpeed}} in a {{HookFunction|GM|Move}} hook, instead. 
     * @example
     * 
     * player.GetByID( 1 ):SprintEnable()
     * 
     * // Allows the player with ID 1 to use the sprint ({{Key|SHIFT}} by default) feature. 
     */
    public SprintEnable(): void;
    
    /**
     * **Deprecated:**
     * >This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.
     * 
     * Doesn't appear to do anything. 
     * @example
     * 
     * local vDelay = 0
     * local prevDown = 0
     * hook.Add( "StartCommand", "TestFunc", function( ply, cmd )
     *     if ( cmd:KeyDown( IN_FORWARD ) and prevDown == false ) then
     *         vDelay = CurTime() + 0.4
     *     elseif ( cmd:KeyDown( IN_FORWARD ) ) then
     *         if ( vDelay < CurTime() )then
     *             cmd:SetButtons( bit.bor( cmd:GetButtons(), IN_SPEED ) )
     *         end
     *     end
     * 	prevDown = cmd:KeyDown(IN_FORWARD)
     * end )
     * 
     * // An example alternative to this function. 
     */
    public StartSprinting(): void;
    
    /**
     * **Deprecated:**
     * >This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.
     * 
     * When used in a {{HookFunction|GM|SetupMove}} hook, this function will force the player to walk, as well as preventing the player from sprinting. 
     * @example
     * 
     * hook.Add( "SetupMove", "TestFunc", function( ply, mv, cmd )
     * 	ply:StartWalking()
     * end )
     * 
     * // Example usage, forces the player to walk. (+walk console command) 
     */
    public StartWalking(): void;
    
    /**
     * Returns the player's SteamID. In singleplayer, this will be STEAM_ID_PENDING serverside.
     * 
     * For Bots this will return "BOT" on the server and on the client it returns "NULL". 
     * @returns SteamID 
     * @example
     * 
     * for k, v in pairs( player.GetAll() ) do
     *      print( "[" .. v:EntIndex() .. "]", v:Name(), v:SteamID( ) )
     * end
     * 
     * // Prints the EntityID, Name and SteamID of all players 
     */
    public SteamID(): string;
    
    /**
     * Returns the player's 64bit SteamID aka CommunityID.
     * 
     * In singleplayer, this will return no value serverside.
     * 
     * For bots, this will return 90071996842377216 (equivalent to STEAM_0:0:0) for the first bot to join.
     * 
     * For each additional bot, the number increases by 1. So the next bot will be 90071996842377217 (STEAM_0:1:0) then 90071996842377218 (STEAM_0:0:1) and so on.
     * 
     * On the client it returns no value for bots. 
     * @returns Player's 64bit SteamID aka CommunityID. 
     * @example
     * 
     * print(ply:SteamID64())
     * 
     * // Prints the 64bit SteamID of player 
     */
    public SteamID64(): string;
    
    /**
     * **Deprecated:**
     * >This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.
     * 
     * When used in a {{HookFunction|GM|SetupMove}} hook, this function will prevent the player from sprinting.
     * 
     * When +walk is engaged, the player will still be able to sprint to half speed (normal run speed) as opposed to full sprint speed without this function. 
     * @example
     * 
     * hook.Add( "SetupMove", "TestFunc", function( ply, mv, cmd )
     * 	ply:StopSprinting()
     * end )
     * 
     * // Example usage, disables sprinting at all times. 
     */
    public StopSprinting(): void;
    
    /**
     * **Deprecated:**
     * >This appears to be a direct binding to internal functionality that is overridden by the engine every frame so calling these functions may not have any or expected effect.
     * 
     * When used in a {{HookFunction|GM|SetupMove}} hook, this function behaves unexpectedly by preventing the player from sprinting similar to {{ClassFunction|Player|StopSprinting}}. 
     * @example
     * 
     * hook.Add( "SetupMove", "TestFunc", function( ply, mv, cmd )
     * 	ply:StopWalking()
     * end )
     * 
     * // Disables Sprinting, not Walking. 
     */
    public StopWalking(): void;
    
    /**
     * Turns off the zoom mode of the player. (+zoom console command)
     * 
     * Basically equivalent of entering "-zoom" into player's console. 
     */
    public StopZooming(): void;
    
    /**
     * Removes all ammo from the player. 
     */
    public StripAmmo(): void;
    
    /**
     * Removes the specified weapon class from a certain player 
     * @param weapon  The weapon class to remove 
     * @example
     * 
     * player.GetByID( 1 ):StripWeapon("weapon_crowbar")
     * 
     * // Removes the crowbar from the player with the ID 1 
     */
    public StripWeapon(weapon: string): void;
    
    /**
     * Removes all weapons from a certain player 
     */
    public StripWeapons(): void;
    
    /**
     * Prevents a hint from showing up.
     * 
     * **Note:**
     * >This function is only available in Sandbox and its derivatives 
     * @param name  Hint name/class/index to prevent from showing up 
     */
    public SuppressHint(name: string): void;
    
    /**
     * Attempts to switch the player weapon to the one specified in the "cl_defaultweapon" convar, if the player does not own the specified weapon nothing will happen.
     * 
     * If you want to switch to a specific weapon, use: {{ClassFunction|Player|SetActiveWeapon}} 
     */
    public SwitchToDefaultWeapon(): void;
    
    /**
     * Returns the player's team ID.
     * 
     * Returns 0 clientside when the game is not fully loaded. 
     * @returns The player's team's index number, as in the {{Enum|TEAM}} or a custom team defined in {{LibraryFunction|team|SetUp}}. 
     * @example
     * 
     * print(team.GetName( Entity( 1 ):Team() ) )
     * 
     * // Prints the name of the player's team 
     */
    public Team(): TEAM;
    
    /**
     * Returns the time in second since the player connected. 
     * @returns connectTime 
     */
    public TimeConnected(): number;
    
    /**
     * Performs a trace hull and applies damage to the entities hit, returns the first entity hit. 
     * @param startPos  The start position of the hull trace. 
     * @param endPos  The end position of the hull trace. 
     * @param mins  The minimum coordinates of the hull. 
     * @param maxs  The maximum coordinates of the hull. 
     * @param damage  The damage to be applied. 
     * @param damageFlags  Bitflag specifying the damage type, see {{Enum|DMG}}. 
     * @param damageForce  The force to be applied to the hit object. 
     * @param damageAllNPCs  Whether to apply damage to all hit NPCs or not. 
     * @returns The hit entity 
     */
    public TraceHullAttack(startPos: Vector, endPos: Vector, mins: Vector, maxs: Vector, damage: number, damageFlags: Vector, damageForce: number, damageAllNPCs: boolean): Entity;
    
    /**
     * Translates {{Enum|ACT}} according to the holdtype of players currently held weapon. 
     * @param act  The initial {{Enum|ACT}} 
     * @returns Translated {{Enum|ACT}} 
     */
    public TranslateWeaponActivity(act: ACT): ACT;
    
    /**
     * Unfreezes all objects the player has frozen with their Physics Gun. Same as double pressing R while holding Physics Gun. 
     */
    public UnfreezePhysicsObjects(): void;
    
    /**
     * {{Warning|'''This function has collisions,''' where more than one player has the same UniqueID. It is '''highly''' recommended to use {{ClassFunction|Player|AccountID}}, {{ClassFunction|Player|SteamID}} or {{ClassFunction|Player|SteamID64}} instead, which are guaranteed to be unique to each player.}}
     * 
     * Returns a 32 bit integer that remains constant for a player across joins/leaves and across different servers. This can be used when a string is inappropriate - e.g. in a database primary key.
     * 
     * **Note:**
     * >In Singleplayer, this function will always return 1. 
     * @returns The player's Unique ID 
     * @example
     * 
     * Entity( 1 ):UniqueID()
     * 
     * // Gets the Unique ID of a player.@example
     * 
     * local ply = Entity( 1 )
     * local uniqueid = util.CRC( "gm_" .. ply:SteamID() .. "_gm" )
     * print( uniqueid )
     * 
     * // Functional equivalent of this function. 
     */
    public UniqueID(): number;
    
    /**
     * Returns a table that will stay allocated for the specific player between connects until the server shuts down. Note, that this table is not synchronized between client and server. 
     * @param key  Unique table key. 
     * @returns The table that contains any info you have put in it. 
     * @example
     * 
     * local table = Entity( 1 ):UniqueIDTable( "mytable" )
     * table.MyValue = "test"
     * 
     * // Somewhere else
     * local table = Entity( 1 ):UniqueIDTable( "mytable" )
     * print( table.MyValue )
     * local table = Entity( 1 ):UniqueIDTable( "mytable_other" )
     * print( table.MyValue )
     * 
     * // Example usage 
     */
    public UniqueIDTable(key: any): table;
    
    /**
     * Unlocks the player movement if locked previously. 
     * 
     * Will disable godmode for the player if locked previously. 
     */
    public UnLock(): void;
    
    /**
     * Stops the player from spectating another entity. 
     */
    public UnSpectate(): void;
    
    /**
     * Returns the player's ID.
     * You can use {{GlobalFunction|Player}}() to get the player by their ID. 
     * @returns The player's user ID 
     */
    public UserID(): number;
    
    /**
     * Simulates a push on the client's screen. 
     * @param PunchAngle  The angle in which to push the player's screen. 
     * @example
     * 
     * player:ViewPunch(Angle(-10, 0, 0))
     * 
     * // Knocks the player's camera upward 
     */
    public ViewPunch(PunchAngle: Angle): void;
    
    /**
     * Resets the player's view punch ( {{ClassFunction|Player|ViewPunch}} ) effect back to normal. 
     * @param tolerance [=0] Reset all ViewPunch below this threshold. 
     */
    public ViewPunchReset(tolerance?: number): void;
    
    /**
     * Returns the players voice volume, how loud the player's voice communication currently is, as a normal number. Doesn't work on local player unless the voice_loopback convar is set to 1. 
     * @returns The voice volume. 
     */
    public VoiceVolume(): number;
}

/**
 * A list of hooks available in player classes. Target the player by using
 *  self.Player
 * 
 * {{ClassFields
 * |Fields=
 * {{ClassField|Player|Player|The player for which a hook is called.}}
 * }} 
 */
declare class PLAYER {
    /**
     * The player for which a hook is called. 
     */
    Player: Player;
    
    /**
     * Called from {{HookFunction|GM|FinishMove}}.
     * 
     * {{Warning|This hook will not work if the current gamemode overrides {{HookFunction|GM|FinishMove}} and does not call this hook.}}
     * 
     * **Note:**
     * >This hook is run after the {{LibraryFunction|drive|FinishMove}} has been called. 
     * @param mv 
     * @returns Return true to prevent default action 
     */
    public FinishMove(mv: CMoveData): boolean;
    
    /**
     * Called on player spawn to determine which hand model to use 
     * @returns A table containing info about view model hands model to be set. See examples. 
     * @example
     * 
     * function PLAYER:GetHandsModel()
     * 
     * 	// return { model = "models/weapons/c_arms_cstrike.mdl", skin = 1, body = "0100000" }
     * 
     * 	local playermodel = player_manager.TranslateToPlayerModelName( self.Player:GetModel() )
     * 	return player_manager.TranslatePlayerHands( playermodel )
     * 
     * end
     * 
     * // Default action of player_default class 
     */
    public GetHandsModel(): table;
    
    /**
     * Called when the class object is created 
     */
    public Init(): void;
    
    /**
     * Called on spawn to give the player their default loadout 
     */
    public Loadout(): void;
    
    /**
     * Called from {{HookFunction|GM|Move}}.
     * 
     * {{Warning|This hook will not work if the current gamemode overrides {{HookFunction|GM|Move}} and does not call this hook.}}
     * 
     * **Note:**
     * >This hook is run after the {{LibraryFunction|drive|Move}} has been called. 
     * @param mv  Movement information 
     * @returns Return true to prevent default action 
     */
    public Move(mv: CMoveData): boolean;
    
    /**
     * Called after the viewmodel has been drawn 
     * @param viewmodel  The viewmodel 
     * @param weapon  The weapon 
     */
    public PostDrawViewModel(viewmodel: Entity, weapon: Entity): void;
    
    /**
     * Called before the viewmodel is drawn 
     * @param viewmodel  The viewmodel 
     * @param weapon  The weapon 
     */
    public PreDrawViewModel(viewmodel: Entity, weapon: Entity): void;
    
    /**
     * Called when we need to set player model from the class.
     * 
     * **Note:**
     * >This will only be called if you have not overridden {{HookFunction|GM|PlayerSetModel}} or call this function from it or anywhere else using {{LibraryFunction|player_manager|RunClass}} 
     */
    public SetModel(): void;
    
    /**
     * Setup the network table accessors.
     * 
     * **Bug [#892](https://github.com/Facepunch/garrysmod-issues/issues/892):**
     * >This is only called for the local player clientside. 
     * @example
     * 
     * function PLAYER:SetupDataTables()
     * 	self.Player:NetworkVar( "Int", 0, "Money" )
     * end
     * 
     * // Example usage. 
     */
    public SetupDataTables(): void;
    
    /**
     * Called when the player spawns 
     */
    public Spawn(): void;
    
    /**
     * Called from {{HookFunction|GM|CreateMove}}.
     * 
     * {{Warning|This hook will not work if the current gamemode overrides {{HookFunction|GM|SetupMove}} and does not call this hook.}}
     * 
     * **Note:**
     * >This hook is run after the {{LibraryFunction|drive|StartMove}} has been called. 
     * @param mv 
     * @param cmd 
     * @returns Return true to prevent default action 
     */
    public StartMove(mv: CMoveData, cmd: CUserCmd): boolean;
    
    /**
     * Called when the player changes their weapon to another one causing their viewmodel model to change 
     * @param viewmodel  The viewmodel that is changing 
     * @param old  The old model 
     * @param newVal  The new model 
     */
    public ViewModelChanged(viewmodel: Entity, old: string, newVal: string): void;
}

/**
 * The player_manager library lets you manage players, such as setting their models or creating player classes. 
 */
declare namespace player_manager {
    /**
     * Assigns view model hands to player model. 
     * @param name  Player model name 
     * @param model  Hands model 
     * @param skin  Skin to apply to the hands 
     * @param bodygroups  Bodygroups to apply to the hands 
     * @example
     * 
     * player_manager.AddValidHands( "hostage01", "models/weapons/c_arms_cstrike.mdl", 0, "10000000" )
     * player_manager.AddValidHands( "hostage02", "models/weapons/c_arms_cstrike.mdl", 0, "10000000" )
     * player_manager.AddValidHands( "hostage03", "models/weapons/c_arms_cstrike.mdl", 0, "10000000" )
     * player_manager.AddValidHands( "hostage04", "models/weapons/c_arms_cstrike.mdl", 0, "10000000" )
     * 
     * // Adds CS:S hands for hostage playermodels 
     */
    function AddValidHands(name: string, model: string, skin: number, bodygroups: string): void;
    
    /**
     * Associates a simplified name with a path to a valid player model.
     * 
     * Only used internally. 
     * @param name  Simplified name 
     * @param model  Valid PlayerModel path 
     */
    function AddValidModel(name: string, model: string): void;
    
    /**
     * Returns the entire list of valid player models. 
     */
    function AllValidModels(): void;
    
    /**
     * Clears a player's class association by setting their ClassID to 0 
     * @param ply  Player to clear class from 
     */
    function ClearPlayerClass(ply: Player): void;
    
    /**
     * Gets a players class 
     * @param ply  Player to get class 
     * @returns The players class 
     */
    function GetPlayerClass(ply: Player): string;
    
    /**
     * Applies basic class variables when the player spawns.
     * 
     * Called from {{HookFunction|GM|PlayerSpawn}} in the base gamemode. 
     * @param ply  Player to setup 
     * @example
     * 
     * function OnPlayerSpawn( ply )
     * 
     *  local class = LookupPlayerClass( ply )
     *  if ( !class ) then return end
     * 
     *  ply:SetWalkSpeed( class.WalkSpeed )
     *  ply:SetRunSpeed( class.RunSpeed )
     *  ply:SetCrouchedWalkSpeed( class.CrouchedWalkSpeed )
     *  ply:SetDuckSpeed( class.DuckSpeed )
     *  ply:SetUnDuckSpeed( class.UnDuckSpeed )
     *  ply:SetJumpPower( class.JumpPower )
     *  ply:AllowFlashlight( class.CanUseFlashlight )
     *  ply:SetMaxHealth( class.MaxHealth )
     *  ply:SetHealth( class.StartHealth )
     *  ply:SetArmor( class.StartArmor )
     *  ply:ShouldDropWeapon( class.DropWeaponOnDie )
     *  ply:SetNoCollideWithTeammates( class.TeammateNoCollide )
     *  ply:SetAvoidPlayers( class.AvoidPlayers )
     * 
     * end
     * 
     * // Source for player_manager.OnPlayerSpawn (from lua/includes/modules/player_manager.lua) 
     */
    function OnPlayerSpawn(ply: Player): void;
    
    /**
     * Register a class metatable to be assigned to players later 
     * @param name  Class name 
     * @param table  Class metatable 
     * @param base  Base class name 
     * @example
     * 
     * local PLAYER = {}
     * 
     * PLAYER.DisplayName = "Default Class"
     * 
     * ...
     * 
     * player_manager.RegisterClass( "player_default", PLAYER, nil )
     * 
     * // A quick look at registering a class table@example
     * 
     * PrintTable(baseclass.Get( "player_default" ))
     * 
     * // You can retrieve the data you've set when registering the table using baseclass.Get( "<classname>" ) 
     */
    function RegisterClass(name: string, table: table, base: string): void;
    
    /**
     * Execute a named function within the player's set class 
     * @param ply  Player to execute function on. 
     * @param funcName  Name of function. 
     * @param arguments  Optional arguments. Can be of any type. 
     * @returns The values returned by the called function. 
     * @example
     * 
     * function GM:PlayerLoadout( ply )
     * 
     * 	player_manager.RunClass( ply, "Loadout" )
     *  
     * end
     * 
     * // Run the player's class 'Loadout' function when PlayerLoadout is called@example
     * 
     * local PLAYER = {}
     * PLAYER.DisplayName = "Hooman"
     * PLAYER.WalkSpeed = 200
     * PLAYER.greet = function( tbl ) // create a function named 'greet'
     * // the first argument passed is the source table
     * // which includes the classID, the player entity, and the function itself
     * 	local ply = tbl.Player // here we extract the player entity from the table
     *     ply:ChatPrint("Hello "..ply:Nick().." !") // tell the player
     * end
     * 
     * // link it to the spawn hook, so each time a player (re-)spawns, he will be greeted with a hello
     * hook.Add("PlayerSpawn","greet",function(ply)
     * 	player_manager.RunClass( ply, "greet" )
     * end)
     * 
     * // Call a greeting function within the playerclass system. 
     */
    function RunClass(ply: Player, funcName: string, ...arguments: (any)[]): any;
    
    /**
     * Sets a player's class 
     * @param ply  Player to set class 
     * @param classname  Name of class to set 
     */
    function SetPlayerClass(ply: Player, classname: string): void;
    
    /**
     * Retrieves correct hands for given player model. By default returns citizen hands. 
     * @param name  Player model name 
     * @returns A table with following contents:
     * * {{Type|string}} model - Model of hands
     * * {{Type|number}} skin - Skin of hands
     * * {{Type|string}} body - Bodygroups of hands 
     */
    function TranslatePlayerHands(name: string): table;
    
    /**
     * Returns the valid model path for a simplified name. 
     * @param shortName  The short name of the model. 
     * @returns The valid model path for the short name. 
     * @example
     * 
     * print(player_manager.TranslatePlayerModel("alyx"))
     * 
     * // Print the valid model path for "Alyx". 
     */
    function TranslatePlayerModel(shortName: string): string;
    
    /**
     * Returns the simplified name for a valid model path of a player model.
     * 
     * Opposite of {{LibraryFunction|player_manager|TranslatePlayerModel}}. 
     * @param model  The model path to a player model 
     * @returns The simplified name for that model 
     */
    function TranslateToPlayerModelName(model: string): string;
}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * A preset editor, which can be opened by {{Type|ControlPresets}}.
 * 
 * This control only exists in Sandbox derived gamemodes. 
 */
declare class PresetEditor extends DFrame {

}

/**
 * The presets library lets you add and modify the pre-set options for scripted tools (selected via the white bar at the top of each tools control panel). 
 */
declare namespace presets {
    /**
     * Adds preset to a preset group. 
     * @param groupname  The preset group name, usually it's tool class name. 
     * @param name  Preset name, must be unique. 
     * @param values  A table of preset console commands. 
     * @example
     * 
     * presets.Add( "face", "Open Eyes", {
     * 	faceposer_flex0	= "1",
     * 	faceposer_flex1	= "1",
     * 	faceposer_flex2	= "0",
     * 	faceposer_flex3	= "0",
     * 	faceposer_flex4	= "0",
     * 	faceposer_flex5	= "0",
     * 	faceposer_flex6	= "0",
     * 	faceposer_flex7	= "0",
     * 	faceposer_flex8	= "0",
     * 	faceposer_flex9	= "0"
     * } )
     * 
     * // A simple faceposer preset. 
     */
    function Add(groupname: string, name: string, values: table): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Used internally to tell the player that the name they tried to use in their preset is not acceptable. 
     */
    function BadNameAlert(): void;
    
    /**
     * Returns whether a preset with given name exists or not 
     * @param type  The preset group name, usually it's tool class name. 
     * @param name  Name of the preset to test 
     * @returns true if the preset does exist 
     */
    function Exists(type: string, name: string): boolean;
    
    /**
     * Returns a table with preset names and values from a single preset group. 
     * @param groupname  Preset group name. 
     * @returns All presets in specified group. 
     */
    function GetTable(groupname: string): table;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Used internally to ask the player if they want to override an already existing preset. 
     * @param callback 
     */
    function OverwritePresetPrompt(callback: Function): void;
    
    /**
     * Removes a preset entry from a preset group. 
     * @param groupname  Preset group to remove from 
     * @param name  Name of preset to remove 
     */
    function Remove(groupname: string, name: string): void;
    
    /**
     * Renames preset. 
     * @param groupname  Preset group name 
     * @param oldname  Old preset name 
     * @param newname  New preset name 
     */
    function Rename(groupname: string, oldname: string, newname: string): void;
}

/**
 * A client side projected texture, created by {{GlobalFunction|ProjectedTexture}}. 
 * !CustomConstructor ProjectedTexture */
declare class ProjectedTexture {
    /**
     * Creates a new {{Type|ProjectedTexture}}. 
     * @example
     * 
     * function ENT:Initialize()
     * 	local lamp = ProjectedTexture() // Create a projected texture
     * 	self.lamp = lamp // Assign it to the entity table so it may be accessed later
     * 
     * 	// Set it all up
     * 	lamp:SetTexture( "effects/flashlight001" )
     * 	lamp:SetFarZ( 500 ) // How far the light should shine
     * 
     * 	lamp:SetPos( self:GetPos() ) // Initial position and angles
     * 	lamp:SetAngles( self:GetAngles() )
     * 	lamp:Update()
     * end
     * 
     * function ENT:OnRemove()
     * 	if ( IsValid( self.lamp ) ) then
     * 		self.lamp:Remove()
     * 	end
     * end
     * 
     * function ENT:Think()
     * 	// Keep updating the light so it's attached to our entity
     * 	// you might want to call other functions here, you can do animations here as well
     * 	if ( IsValid( self.lamp ) ) then
     * 		self.lamp:SetPos( self:GetPos() )
     * 		self.lamp:SetAngles( self:GetAngles() )
     * 		self.lamp:Update()
     * 	end
     * end
     * 
     * // Creates a simple ProjectedTexture attached to a [[Scripted Entities|Scripted Entity]].
     * 
     * Note that this code must be ran on clientside only, not shared. 
     */
    public constructor();
    
    /**
     * Returns the angle of the ProjectedTexture, which were previously set by {{ClassFunction|ProjectedTexture|SetAngles}} 
     * @returns The angles of the ProjectedTexture. 
     */
    public GetAngles(): Angle;
    
    /**
     * Returns the brightness of the ProjectedTexture, which was previously set by {{ClassFunction|ProjectedTexture|SetBrightness}} 
     * @returns The brightness of the ProjectedTexture. 
     */
    public GetBrightness(): number;
    
    /**
     * Returns the color of the ProjectedTexture, which was previously set by {{ClassFunction|ProjectedTexture|SetColor}} 
     * @returns {{Struct|Color}}, the color of the ProjectedTexture. 
     */
    public GetColor(): Color;
    
    /**
     * {{NextUpdate}}
     * Returns the constant attenuation of the projected texture, which can also be set by {{ClassFunction|ProjectedTexture|SetConstantAttenuation}}. 
     * @returns The constant attenuation 
     */
    public GetConstantAttenuation(): number;
    
    /**
     * Returns whether shadows are enabled for this ProjectedTexture, which was previously set by {{ClassFunction|ProjectedTexture|SetEnableShadows}} 
     * @returns Whether shadows are enabled. 
     */
    public GetEnableShadows(): boolean;
    
    /**
     * Returns the projection distance of the ProjectedTexture, which was previously set by {{ClassFunction|ProjectedTexture|SetFarZ}} 
     * @returns The projection distance of the ProjectedTexture. 
     */
    public GetFarZ(): number;
    
    /**
     * Returns the horizontal FOV of the ProjectedTexture, which was previously set by {{ClassFunction|ProjectedTexture|SetHorizontalFOV}} or {{ClassFunction|ProjectedTexture|SetFOV}} 
     * @returns The horizontal FOV of the ProjectedTexture. 
     */
    public GetHorizontalFOV(): number;
    
    /**
     * {{NextUpdate}}
     * Returns the linear attenuation of the projected texture, which can also be set by {{ClassFunction|ProjectedTexture|SetLinearAttenuation}}. 
     * @returns The linear attenuation. 
     */
    public GetLinearAttenuation(): number;
    
    /**
     * Returns the NearZ value of the ProjectedTexture, which was previously set by {{ClassFunction|ProjectedTexture|SetNearZ}} 
     * @returns NearZ of the ProjectedTexture. 
     */
    public GetNearZ(): number;
    
    /**
     * Returns the current orthographic settings of the Projected Texture. To set these values, use {{ClassFunction|ProjectedTexture|SetOrthographic}}. 
     * @returns [Whether or not this projected texture is orthographic. When false, nothing else is returned., left, top, right, bottom] 
     * !TupleReturn
     */
    public GetOrthographic(): [boolean, number, number, number, number];
    
    /**
     * Returns the position of the ProjectedTexture, which was previously set by {{ClassFunction|ProjectedTexture|SetPos}} 
     * @returns The position of the ProjectedTexture. 
     */
    public GetPos(): Vector;
    
    /**
     * {{NextUpdate}}
     * Returns the quadratic attenuation of the projected texture, which can also be set by {{ClassFunction|ProjectedTexture|SetQuadraticAttenuation}}. 
     * @returns The quadratic attenuation 
     */
    public GetQuadraticAttenuation(): number;
    
    /**
     * Returns the texture of the ProjectedTexture, which was previously set by {{ClassFunction|ProjectedTexture|SetTexture}} 
     * @returns The texture of the ProjectedTexture. 
     */
    public GetTexture(): ITexture;
    
    /**
     * Returns the texture frame of the ProjectedTexture, which was previously set by {{ClassFunction|ProjectedTexture|SetTextureFrame}} 
     * @returns The texture frame. 
     */
    public GetTextureFrame(): number;
    
    /**
     * Returns the vertical FOV of the ProjectedTexture, which was previously set by {{ClassFunction|ProjectedTexture|SetVerticalFOV}} or {{ClassFunction|ProjectedTexture|SetFOV}} 
     * @returns The vertical FOV of the ProjectedTexture. 
     */
    public GetVerticalFOV(): number;
    
    /**
     * Returns true if the projected texture is valid (i.e. has not been removed), false otherwise.
     * 
     * Instead of calling this directly it's a good idea to call {{GlobalFunction|IsValid}} in case the variable is nil.
     * 
     * ```IsValid( ptexture )```
     * 
     * This not only checks whether the projected texture is valid - but also checks whether it's nil. 
     * @returns Whether the projected texture is valid. 
     */
    public IsValid(): boolean;
    
    /**
     * Removes the projected texture. After calling this, {{ClassFunction|ProjectedTexture|IsValid}} will return false, and any hooks with the projected texture as the identifier will be automatically deleted. 
     */
    public Remove(): void;
    
    /**
     * Sets the angles (direction) of the projected texture.
     * 
     * You must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect. 
     * @param angle 
     */
    public SetAngles(angle: Angle): void;
    
    /**
     * Sets the brightness of the projected texture.
     * 
     * You must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect. 
     * @param brightness  The brightness to give the projected texture. 
     */
    public SetBrightness(brightness: number): void;
    
    /**
     * Sets the color of the projected texture.
     * 
     * You must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect. 
     * @param color  Must be a {{Struct|Color}}.
     * 
     * Unlike other projected textures, this color can only go up to 255. 
     */
    public SetColor(color: Color): void;
    
    /**
     * {{NextUpdate}}
     * Sets the constant attenuation of the projected texture.
     * 
     * See also {{ClassFunction|ProjectedTexture|SetLinearAttenuation}} and {{ClassFunction|ProjectedTexture|SetQuadraticAttenuation}}.
     * 
     * You must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect. 
     * @param constAtten 
     */
    public SetConstantAttenuation(constAtten: number): void;
    
    /**
     * Enable or disable shadows cast from the projected texture.
     * 
     * **Note:**
     * >as with all types of projected textures (including the player's flashlight and env_projectedtexture), there can only be 8 projected textures with shadows enabled in total. This limit can be increased with the launch parameter:
     * -numshadowtextures limit
     * where limit is the new limit. Naturally, many projected lights with shadows enabled will drastically decrease framerate.
     * 
     * You must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect. 
     * @param newState 
     */
    public SetEnableShadows(newState: boolean): void;
    
    /**
     * Sets the distance at which the projected texture ends.
     * 
     * You must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect. 
     * @param farZ 
     */
    public SetFarZ(farZ: number): void;
    
    /**
     * Sets the angle of projection.
     * 
     * You must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect. 
     * @param fov  Must be higher than 0 and lower than 180 
     */
    public SetFOV(fov: number): void;
    
    /**
     * Sets the horizontal angle of projection without affecting the vertical angle.
     * 
     * You must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect. 
     * @param hFOV  The new horizontal Field Of View for the projected texture. Must be in range between 0 and 180. 
     */
    public SetHorizontalFOV(hFOV: number): void;
    
    /**
     * {{NextUpdate}}
     * Sets the linear attenuation of the projected texture.
     * 
     * See also {{ClassFunction|ProjectedTexture|SetConstantAttenuation}} and {{ClassFunction|ProjectedTexture|SetQuadraticAttenuation}}.
     * 
     * The default value of linear attenuation when the projected texture is created is 100. (others are 0, as you are not supposed to mix them)
     * 
     * You must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect. 
     * @param linearAtten 
     */
    public SetLinearAttenuation(linearAtten: number): void;
    
    /**
     * Sets the distance at which the projected texture begins its projection.
     * 
     * You must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect.
     * 
     * **Note:**
     * >Setting this to 0 will disable the projected texture completely! This may be useful if you want to disable a projected texture without actually removing it
     * 
     * **Note:**
     * >This seems to affect the rendering of shadows - a higher Near Z value will have shadows begin to render closer to their casting object. Comparing a low Near Z value (like 1) with a normal one (12) or high one (1000) is the easiest way to understand this artifact 
     * @param nearZ 
     */
    public SetNearZ(nearZ: number): void;
    
    /**
     * Changes the current projected texture between orthographic and perspective projection.
     * 
     * You must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect. 
     * @param orthographic  When false, all other arguments are ignored and the texture is reset to perspective projection. 
     * @param left  The amount of units left from the projected texture's origin to project. 
     * @param top  The amount of units upwards from the projected texture's origin to project. 
     * @param right  The amount of units right from the projected texture's origin to project. 
     * @param bottom  The amount of units downwards from the projected texture's origin to project. 
     * @example
     * 
     * ProjectedTexture:SetOrthographic( false )
     * ProjectedTexture:Update()
     * 
     * // Set the projected texture back to perspective projection. 
     */
    public SetOrthographic(orthographic: boolean, left: number, top: number, right: number, bottom: number): void;
    
    /**
     * Move the Projected Texture to the specified position.
     * 
     * You must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect. 
     * @param position 
     */
    public SetPos(position: Vector): void;
    
    /**
     * {{NextUpdate}}
     * Sets the quadratic attenuation of the projected texture.
     * 
     * See also {{ClassFunction|ProjectedTexture|SetLinearAttenuation}} and {{ClassFunction|ProjectedTexture|SetConstantAttenuation}}.
     * 
     * You must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect. 
     * @param quadAtten 
     */
    public SetQuadraticAttenuation(quadAtten: number): void;
    
    /**
     * Sets the texture to be projected.
     * 
     * You must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect. 
     * @param texture  The name of the texture. Can also be an {{Type|ITexture}}. 
     */
    public SetTexture(texture: string): void;
    
    /**
     * For animated textures, this will choose which frame in the animation will be projected.
     * 
     * You must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect. 
     * @param frame  The frame index to use. 
     */
    public SetTextureFrame(frame: number): void;
    
    /**
     * Sets the vertical angle of projection without affecting the horizontal angle.
     * 
     * You must call {{ClassFunction|ProjectedTexture|Update}} after using this function for it to take effect. 
     * @param vFOV  The new vertical Field Of View for the projected texture. Must be in range between 0 and 180. 
     */
    public SetVerticalFOV(vFOV: number): void;
    
    /**
     * Updates the Projected Light and applies all previously set parameters. 
     */
    public Update(): void;
}

/**
 * The properties library gives you access to the menu that shows up when right clicking entities while holding C. 
 */
declare namespace properties {
    /**
     * Add properties to the properties module 
     * @param name  A unique name used to identify the property 
     * @param propertyData  A table that defines the property. Uses the {{Struct|PropertyAdd}}. 
     * @example
     * 
     * properties.Add( "ignite", {
     * 	MenuLabel = "#ignite", // Name to display on the context menu
     * 	Order = 999, // The order to display this property relative to other properties
     * 	MenuIcon = "icon16/fire.png", // The icon to display next to the property
     * 
     * 	Filter = function( self, ent, ply ) // A function that determines whether an entity is valid for this property
     * 		if ( !IsValid( ent ) ) then return false end
     * 		if ( ent:IsPlayer() ) then return false end
     * 		if ( !CanEntityBeSetOnFire( ent ) ) then return false end
     * 		if ( !gamemode.Call( "CanProperty", ply, "ignite", ent ) ) then return false end
     * 
     * 		return !ent:IsOnFire() 
     * 	end,
     * 	Action = function( self, ent ) // The action to perform upon using the property ( Clientside )
     * 
     * 		self:MsgStart()
     * 			net.WriteEntity( ent )
     * 		self:MsgEnd()
     * 
     * 	end,
     * 	Receive = function( self, length, player ) // The action to perform upon using the property ( Serverside )
     * 		local ent = net.ReadEntity()
     * 		if ( !self:Filter( ent, player ) ) then return end
     * 		
     * 		ent:Ignite( 360 )
     * 	end 
     * } )
     * 
     * // Defines a property that can be used to ignite entities (from Sandbox) 
     */
    function Add(name: string, propertyData: PropertyAdd): void;
    
    /**
     * {{NextUpdate}}
     * Returns true if given entity can be targeted by the player via the properties system.
     * 
     * This should be used serverside in your properties to prevent abuse by clientside scripting. 
     * @param ent  The entity to test 
     * @param ply  If given, will also perform a distance check based on the entity's Orientated Bounding Box. 
     * @returns True if entity can be targeted, false otherwise 
     */
    function CanBeTargeted(ent: Entity, ply: Player): boolean;
    
    /**
     * Returns an entity player is hovering over with his cursor. 
     * @param pos  Eye position of local player, {{ClassFunction|Entity|EyePos}} 
     * @param aimVec  Aim vector of local player, {{ClassFunction|Player|GetAimVector}} 
     * @returns The hovered entity 
     */
    function GetHovered(pos: Vector, aimVec: Vector): Entity;
    
    /**
     * Checks if player hovers over any entities and open a properties menu for it. 
     * @param eyepos  The eye pos of a player 
     * @param eyevec  The aim vector of a player 
     */
    function OnScreenClick(eyepos: Vector, eyevec: Vector): void;
    
    /**
     * Opens properties menu for given entity. 
     * @param ent  The entity to open menu for 
     * @param tr  The trace that is passed as second argument to Action callback of a property 
     */
    function OpenEntityMenu(ent: Entity, tr: table): void;
}

/**
 * Used in sandbox tools 
 */
declare class PropSelect extends ContextBase {

}

/**
 * **This is an internal function or feature.**
 * >This means you will be able to use it, but you really shouldn't.
 * 
 * Currently broken? 
 */
declare class RadioButton {

}

/**
 * The render library is a powerful set of functions that let you control how the world and its contents are rendered. It can also be used to draw some 3D clientside effects such as beams, boxes and spheres. 
 */
declare namespace render {
    /**
     * Adds a beam segment to the beam started by {{LibraryFunction|render|StartBeam}}. 
     * @param startPos  Beam start position. 
     * @param width  The width of the beam. 
     * @param textureEnd  The end coordinate of the texture used. 
     * @param color  The color to be used. Uses the {{Struct|Color}}. 
     */
    function AddBeam(startPos: Vector, width: number, textureEnd: number, color: Color): void;
    
    /**
     * Blurs the render target ( or a given texture ) 
     * @param rendertarget  The texture to blur 
     * @param blurx  Horizontal amount of blur 
     * @param blury  Vertical amount of blur 
     * @param passes  Amount of passes to go through 
     */
    function BlurRenderTarget(rendertarget: ITexture, blurx: number, blury: number, passes: number): void;
    
    /**
     * {{Warning|This function is broken and does absolutely nothing}} 
     * @param mat [=nil] &nbsp; 
     */
    function BrushMaterialOverride(mat?: IMaterial): void;
    
    /**
     * Captures a part of the current render target and returns the data as a binary string in the given format.
     * 
     * Since the pixel buffer clears itself every frame, this will return a black screen outside of [[:Category:Render_Hooks|render hooks]]. To capture the user's final view, use {{HookFunction|GM|PostRender}}. This will not capture the Steam overlay or third-party injections (such as the Discord overlay, Overwolf, and advanced cheats) on the user's screen.
     * 
     * **Bug [#2571](https://github.com/Facepunch/garrysmod-issues/issues/2571):**
     * >This sets the alpha channel incorrectly in PNG mode, causing the foreground to be rendered almost completely transparent. 
     * @param captureData  Parameters of the capture. See {{Struct|RenderCaptureData}}. 
     * @returns binaryData 
     * @example
     * 
     * local ScreenshotRequested = false
     * function RequestAScreenshot()
     * 	ScreenshotRequested = true
     * end
     * 
     * // For the sake of this example, we use a console command to request a screenshot
     * concommand.Add( "make_screenshot", RequestAScreenshot )
     * 
     * hook.Add( "PostRender", "example_screenshot", function()
     * 	if ( !ScreenshotRequested ) then return end
     * 	ScreenshotRequested = false
     * 
     * 	local data = render.Capture( {
     * 		format = "jpeg",
     * 		quality = 70, //100 is max quality, but 70 is good enough.
     * 		h = ScrH(),
     * 		w = ScrW(),
     * 		x = 0,
     * 		y = 0,
     * 	} )
     * 	local f = file.Open( "Image.jpg", "wb", "DATA" )
     * 	f:Write( data )
     * 	f:Close()
     * end )
     * 
     * // How you could use this to save a picture of your screen. 
     */
    function Capture(captureData: RenderCaptureData): string;
    
    /**
     * Dumps the current render target and allows the pixels to be accessed by {{LibraryFunction|render|ReadPixel}}. 
     */
    function CapturePixels(): void;
    
    /**
     * Clears the current render target and the specified buffers.
     * 
     * **Bug [#2085](https://github.com/Facepunch/garrysmod-issues/issues/2085):**
     * >This sets the alpha incorrectly for {{Lib|surface}} draw calls for render targets. 
     * @param r  Red component to clear to. 
     * @param g  Green component to clear to. 
     * @param b  Blue component to clear to. 
     * @param a  Alpha component to clear to. 
     * @param clearDepth [=false] Clear the depth. 
     * @param clearStencil [=false] Clear the stencil. 
     */
    function Clear(r: number, g: number, b: number, a: number, clearDepth?: boolean, clearStencil?: boolean): void;
    
    /**
     * Clears the current rendertarget for obeying the current stencil buffer conditions. 
     * @param r  Value of the red channel to clear the current rt with. 
     * @param g  Value of the green channel to clear the current rt with. 
     * @param b  Value of the blue channel to clear the current rt with. 
     * @param a  Value of the alpha channel to clear the current rt with. 
     * @param depth  Clear the depth buffer. 
     * @example
     * 
     * hook.Add( "PostDrawOpaqueRenderables", "Stencil Tutorial Example", function()
     * 
     * 	// Reset everything to known good
     * 	render.SetStencilWriteMask( 0xFF )
     * 	render.SetStencilTestMask( 0xFF )
     * 	render.SetStencilReferenceValue( 0 )
     * 	render.SetStencilCompareFunction( STENCIL_ALWAYS )
     * 	render.SetStencilPassOperation( STENCIL_KEEP )
     * 	render.SetStencilFailOperation( STENCIL_KEEP )
     * 	render.SetStencilZFailOperation( STENCIL_KEEP )
     * 	render.ClearStencil()
     * 
     * 	// Enable stencils
     * 	render.SetStencilEnable( true )
     * 	// Set the reference value to 1. This is what the compare function tests against
     * 	render.SetStencilReferenceValue( 1 )
     * 	// Refuse to write things to the screen unless that pixel's value is 1
     * 	render.SetStencilCompareFunction( STENCIL_EQUAL )
     * 	// Write a 1 to the centre third of the screen. Because we cleared it earlier, everything is currently 0
     * 	local w, h = ScrW() / 3, ScrH() / 3
     * 	local x_start, y_start = w, h
     * 	local x_end, y_end = x_start + w, y_start + h
     * 	render.ClearStencilBufferRectangle( x_start, y_start, x_end, y_end, 1 )
     * 
     * 	// Tell the render library to clear the screen, but obeying the stencil test function.
     * 	// This means it will only clear the centre third.
     * 	render.ClearBuffersObeyStencil(0, 148, 133, 255, false);
     * 
     * 	// Let everything render normally again
     * 	render.SetStencilEnable( false )
     * end )
     * 
     * // Clearing a section of the screen via the stencil buffer 
     */
    function ClearBuffersObeyStencil(r: number, g: number, b: number, a: number, depth: boolean): void;
    
    /**
     * Resets the depth buffer.
     * 
     * **Bug [#3317](https://github.com/Facepunch/garrysmod-issues/issues/3317):**
     * >This function also clears the stencil buffer. Use {{LibraryFunction|render|Clear}} in the meantime. 
     */
    function ClearDepth(): void;
    
    /**
     * Clears a render target
     * 
     * It uses {{LibraryFunction|render|Clear}} then {{LibraryFunction|render|SetRenderTarget}} on the modified render target. 
     * @param texture 
     * @param color  The color, see {{Struct|Color}} 
     */
    function ClearRenderTarget(texture: ITexture, color: Color): void;
    
    /**
     * Resets all values in the stencil buffer to zero. 
     * @example
     * 
     * hook.Add( "PostDrawOpaqueRenderables", "Stencil Tutorial Example", function()
     * 
     * 	// Reset everything to known good
     * 	render.SetStencilWriteMask( 0xFF )
     * 	render.SetStencilTestMask( 0xFF )
     * 	render.SetStencilReferenceValue( 0 )
     * 	render.SetStencilCompareFunction( STENCIL_ALWAYS )
     * 	render.SetStencilPassOperation( STENCIL_KEEP )
     * 	render.SetStencilFailOperation( STENCIL_KEEP )
     * 	render.SetStencilZFailOperation( STENCIL_KEEP )
     * 
     * 	// Enable stencils
     * 	render.SetStencilEnable( true )
     * 	// Set the reference value to 1. This is what the compare function tests against
     * 	render.SetStencilReferenceValue( 1 )
     * 	// Refuse to write things to the screen unless that pixel's value is 1
     * 	render.SetStencilCompareFunction( STENCIL_EQUAL )
     * 	// Set the entire screen to 0
     * 	render.ClearStencil()
     * 
     * 	// Attempt to draw our entities. Nothing will draw, because nothing in the buffer is 1.
     * 	for _, ent in pairs( ents.FindByClass( "sent_stencil_test" ) ) do
     * 		ent:DrawModel()
     * 	end
     * 
     * 	// Let everything render normally again
     * 	render.SetStencilEnable( false )
     * end )
     * 
     * // A silly example that shows that nothing will render if you clear the stencil buffer. (From 
     * [https://github.com/Lexicality/stencil-tutorial Lex's Stencil Tutorial]) 
     */
    function ClearStencil(): void;
    
    /**
     * Sets the stencil value in a specified rect.
     * 
     * This is '''not''' affected by {{LibraryFunction|render|SetStencilWriteMask}} 
     * @param originX  X origin of the rectangle. 
     * @param originY  Y origin of the rectangle. 
     * @param endX  The end X coordinate of the rectangle. 
     * @param endY  The end Y coordinate of the rectangle. 
     * @param stencilValue  Value to set cleared stencil buffer to. 
     * @example
     * 
     * hook.Add( "PostDrawOpaqueRenderables", "Stencil Tutorial Example", function()
     * 
     * 	// Reset everything to known good
     * 	render.SetStencilWriteMask( 0xFF )
     * 	render.SetStencilTestMask( 0xFF )
     * 	render.SetStencilReferenceValue( 0 )
     * 	render.SetStencilCompareFunction( STENCIL_ALWAYS )
     * 	render.SetStencilPassOperation( STENCIL_KEEP )
     * 	render.SetStencilFailOperation( STENCIL_KEEP )
     * 	render.SetStencilZFailOperation( STENCIL_KEEP )
     * 	render.ClearStencil()
     * 
     * 	// Enable stencils
     * 	render.SetStencilEnable( true )
     * 	// Set the reference value to 1. This is what the compare function tests against
     * 	render.SetStencilReferenceValue( 1 )
     * 	// Refuse to write things to the screen unless that pixel's value is 1
     * 	render.SetStencilCompareFunction( STENCIL_EQUAL )
     * 	// Write a 1 to the centre third of the screen. Because we cleared it earlier, everything is currently 0
     * 	local w, h = ScrW() / 3, ScrH() / 3
     * 	local x_start, y_start = w, h
     * 	local x_end, y_end = x_start + w, y_start + h
     * 	render.ClearStencilBufferRectangle( x_start, y_start, x_end, y_end, 1 )
     * 
     * 	// Draw our entities. They will only draw in the area cleared above
     * 	for _, ent in pairs( ents.FindByClass( "sent_stencil_test" ) ) do
     * 		ent:DrawModel()
     * 	end
     * 
     * 	// Let everything render normally again
     * 	render.SetStencilEnable( false )
     * end )
     * 
     * // A basic stencil operation that limits rendering to the centre of the screen 
     */
    function ClearStencilBufferRectangle(originX: number, originY: number, endX: number, endY: number, stencilValue: number): void;
    
    /**
     * Calculates the lighting caused by dynamic lights for the specified surface. 
     * @param position  The position to sample from. 
     * @param normal  The normal of the surface. 
     * @returns A vector representing the light at that point. 
     */
    function ComputeDynamicLighting(position: Vector, normal: Vector): Vector;
    
    /**
     * Calculates the light color of a certain surface. 
     * @param position  The position of the surface to get the light from. 
     * @param normal  The normal of the surface to get the light from. 
     * @returns A vector representing the light at that point. 
     */
    function ComputeLighting(position: Vector, normal: Vector): Vector;
    
    /**
     * Copies the currently active Render Target to the specified texture. 
     * @param Target  The texture to copy to 
     * @example
     * 
     * function render.CopyTexture( from, to )
     * 
     * 	local OldRT = render.GetRenderTarget()
     * 
     * 		render.SetRenderTarget( from )
     * 		render.CopyRenderTargetToTexture( to )
     * 
     * 	render.SetRenderTarget( OldRT )
     * 
     * end
     * 
     * // This is how it's used in {{LibraryFunction|render|CopyTexture}} 
     */
    function CopyRenderTargetToTexture(Target: ITexture): void;
    
    /**
     * Copies the contents of one texture to another. Only works with rendertargets. 
     * @param texture_from 
     * @param texture_to 
     */
    function CopyTexture(texture_from: ITexture, texture_to: ITexture): void;
    
    /**
     * Changes the cull mode. 
     * @param cullMode  Cullmode, see {{Enum|MATERIAL_CULLMODE}} 
     */
    function CullMode(cullMode: MATERIAL_CULLMODE): void;
    
    /**
     * Set's the depth range of the upcoming render. 
     * @param depthmin  The minimum depth of the upcoming render. 0.0 = render normally; 1.0 = render nothing 
     * @param depthmax  The maximum depth of the upcoming render. 0.0 = render everything (through walls); 1.0 = render normally 
     * @example
     * 
     * local depthmin = 1.0
     * 
     * function GM:PreDrawOpaqueRenderables(bDrawingDepth, bDrawingSkybox)
     * 
     * 	render.DepthRange(depthmin, 1.0)
     * 	
     * 	if(depthmin > 0.0) then
     * 		depthmin = depthmin - 0.001
     * 	end
     * 	
     * end
     * 
     * // Perform a downward screen wipe effect on all opaque objects once the client connects.@example
     * 
     * local depthmin = 1.0
     * local spawn_copies = {}	// The shadow copies
     * 
     * function GM:PreDrawOpaqueRenderables(bDrawingDepth, bDrawingSkybox)
     * 
     * 	render.DepthRange(depthmin, 1.0)
     * 	
     * 	if(!spawn_copies) then return false end
     * 	
     * 	if(depthmin > 0.0) then
     * 		depthmin = depthmin - 0.001
     * 	else
     * 	
     * 		local alpha = 0
     * 		local valid_copies = 0
     * 		
     * 		// Fade out the shadow copies and remove them
     * 		for _, spawncopy in pairs(spawn_copies) do
     * 			if(IsValid(spawncopy)) then
     * 				alpha = spawncopy:GetColor().a
     * 				if(alpha > 0) then
     * 					spawncopy:SetColor(Color(255, 255, 255, alpha-1))
     * 				else
     * 					spawncopy:Remove()
     * 				end
     * 				valid_copies = valid_copies + 1
     * 			end
     * 		end
     * 		
     * 		// Nullify table since we aren't using it any more
     * 		if(valid_copies == 0) then
     * 			spawn_copies = nil
     * 		end
     * 			
     * 	end
     * 	
     * end
     * 
     * function GM:OnEntityCreated(ent)
     * 
     * 	if(!spawn_copies) then return end
     * 	
     * 	// Prevents infinite loop and other errors
     * 	if(ent:GetClass() != "class C_BaseFlex" &&
     * 		ent:GetRenderGroup() == RENDERGROUP_OPAQUE &&
     * 		ent:GetClass() != "gmod_hands") then
     * 	
     * 		local mdl = ent:GetModel()
     * 		
     * 		// Check that the entity is a model and not a brush
     * 		if(mdl && string.find(mdl, ".mdl")) then
     * 		
     * 			local spawncopy = ClientsideModel(mdl)
     * 			
     * 			// A material with $ignorez set to 1 works best here
     * 			spawncopy:SetMaterial("models/overlay_rendertarget")
     * 			spawncopy:AddEffects(EF_BONEMERGE)
     * 			spawncopy:SetParent(ent)
     * 			spawncopy:SetRenderMode(RENDERMODE_TRANSALPHA)
     * 			spawncopy:SetColor(Color(255, 255, 255, 92))
     * 			table.insert(spawn_copies, spawncopy)
     * 			
     * 		end
     * 		
     * 	end
     * 	
     * end
     * 
     * // Same effect as above but with a dark shadow skin present where the model is being drawn. 
     */
    function DepthRange(depthmin: number, depthmax: number): void;
    
    /**
     * Draws textured beam.
     * 
     * {{RenderingContext|Function|3D}} 
     * @param startPos  Beam start position. 
     * @param endPos  Beam end position. 
     * @param width  The width of the beam. 
     * @param textureStart  The start coordinate of the texture used. 
     * @param textureEnd  The end coordinate of the texture used. 
     * @param color  The color to be used. Uses the {{Struct|Color}}. 
     */
    function DrawBeam(startPos: Vector, endPos: Vector, width: number, textureStart: number, textureEnd: number, color: Color): void;
    
    /**
     * Draws a box in 3D space.
     * 
     * {{RenderingContext|Function|3D}} 
     * @param position  Origin of the box. 
     * @param angles  Orientation of the box. 
     * @param mins  Start position of the box, relative to origin. 
     * @param maxs  End position of the box, relative to origin. 
     * @param color  The color of the box. Uses the {{Struct|Color}}. 
     * @param writeZ  Should this render call write to the depth buffer. 
     */
    function DrawBox(position: Vector, angles: Angle, mins: Vector, maxs: Vector, color: Color, writeZ: boolean): void;
    
    /**
     * Draws a line in 3D space.
     * 
     * {{RenderingContext|Function|3D}} 
     * @param startPos  Line start position in world coordinates. 
     * @param endPos  Line end position in world coordinates. 
     * @param color  The color to be used. Uses the {{Struct|Color}}. 
     * @param writeZ [=false] Whether or not to consider the Z buffer. If false, the line will be drawn over everything currently drawn, if true, the line will be drawn with depth considered, as if it were a regular object in 3D space.
     * 
     * **Bug [#1086](https://github.com/Facepunch/garrysmod-issues/issues/1086):**
     * >Enabling this option will cause the line to ignore the color's alpha. 
     */
    function DrawLine(startPos: Vector, endPos: Vector, color: Color, writeZ?: boolean): void;
    
    /**
     * Draws 2 connected triangles.
     * 
     * {{RenderingContext|Function|3D}} 
     * @param vert1  First vertex. 
     * @param vert2  The second vertex. 
     * @param vert3  The third vertex. 
     * @param vert4  The fourth vertex. 
     * @param color [=Color( 255, 255, 255 )] The color of the quad. See {{GlobalFunction|Color}} 
     */
    function DrawQuad(vert1: Vector, vert2: Vector, vert3: Vector, vert4: Vector, color?: table): void;
    
    /**
     * Draws a quad.
     * 
     * {{RenderingContext|Function|3D}} 
     * @param position  Origin of the sprite. 
     * @param normal  The face direction of the quad. 
     * @param width  The width of the quad. 
     * @param height  The height of the quad. 
     * @param color  The color of the quad. Uses the {{Struct|Color}}. 
     * @param rotation  The rotation of the quad in degrees. 
     * @example
     * 
     * local mat = Material( "sprites/sent_ball" )
     * local mat2 = Material( "models/wireframe" )
     * hook.Add("PostDrawTranslucentRenderables", "DrawQuadEasyExample", function()
     * 
     * 	// Draw a rotating circle under local player
     * 	render.SetMaterial( mat )
     * 	local pos = LocalPlayer():GetPos()
     * 	render.DrawQuadEasy( pos + Vector( 0, 0, 1 ), Vector( 0, 0, 1 ), 64, 64, Color( 255, 255, 255, 200 ), ( CurTime() * 50 ) % 360 )
     * 
     * 	// Draw 3 rotating wireframe quads where local player is looking at
     * 	render.SetMaterial( mat2 )
     * 	local tr = LocalPlayer():GetEyeTrace()
     * 	render.DrawQuadEasy( tr.HitPos + tr.HitNormal, tr.HitNormal, 64, 64, Color( 255, 255, 255 ), ( CurTime() * 50 ) % 360 )
     * 
     * 	local dir = tr.HitNormal:Angle()
     * 	dir:RotateAroundAxis( tr.HitNormal, ( CurTime() * 50 ) % 360 )
     * 	dir = dir:Up()
     * 
     * 	// We need to call this function twice, once for each side
     * 	render.DrawQuadEasy( tr.HitPos + tr.HitNormal * 32, dir, 64, 64, Color( 255, 255, 255 ), 0 )
     * 	render.DrawQuadEasy( tr.HitPos + tr.HitNormal * 32, -dir, 64, 64, Color( 255, 255, 255 ), 0 )
     * end )
     * 
     * // Example usage of this function. 
     */
    function DrawQuadEasy(position: Vector, normal: Vector, width: number, height: number, color: Color, rotation: number): void;
    
    /**
     * Draws the the current material set by {{LibraryFunction|render|SetMaterial}} to the whole screen.
     * 
     * {{RenderingContext|Function|2D}} 
     */
    function DrawScreenQuad(): void;
    
    /**
     * Draws the the current material set by {{LibraryFunction|render|SetMaterial}} to the area specified.
     * 
     * {{RenderingContext|Function|2D}} 
     * @param startX  X start position of the rect. 
     * @param startY  Y start position of the rect. 
     * @param width  Width of the rect. 
     * @param height  Height of the rect. 
     */
    function DrawScreenQuadEx(startX: number, startY: number, width: number, height: number): void;
    
    /**
     * Draws a sphere in 3D space. The material previously set with {{LibraryFunction|render|SetMaterial}} will be applied the sphere's surface.
     * 
     * See also {{LibraryFunction|render|DrawWireframeSphere}} for a wireframe equivalent.
     * 
     * {{RenderingContext|Function|3D}} 
     * @param position  Position of the sphere. 
     * @param radius  Radius of the sphere. Negative radius will make the sphere render inwards rather than outwards. 
     * @param longitudeSteps  The number of longitude steps. This controls the quality of the sphere. Higher quality will lower performance significantly. 50 is a good number to start with. 
     * @param latitudeSteps  The number of latitude steps. This controls the quality of the sphere. Higher quality will lower performance significantly. 50 is a good number to start with. 
     * @param color [={{GlobalFunction|Color}}( 255, 255, 255 )] The color of the sphere. Uses the {{Struct|Color}}. 
     * @example
     * 
     * hook.Add( "PostDrawTranslucentRenderables", "test", function()
     * 
     * 	//[[
     * 		when you draw a sphere, you have to specify what material the sphere is
     * 		going to have before rendering it, render.SetColorMaterial()
     * 		just sets it to a white material so we can recolor it easily.
     * 	]]
     * 	render.SetColorMaterial()
     * 
     * 	// The position to render the sphere at, in this case, the looking position of the local player
     * 	local pos = LocalPlayer():GetEyeTrace().HitPos
     * 
     * 	// Draw the sphere!
     * 	render.DrawSphere( pos, 50, 30, 30, Color( 0, 175, 175, 100 ) )
     * 
     * end )
     * 
     * // This will draw a blue, half-translucent sphere (force field) at the position local player is looking. 
     */
    function DrawSphere(position: Vector, radius: number, longitudeSteps: number, latitudeSteps: number, color?: Color): void;
    
    /**
     * Draws a sprite in 3d space.
     * 
     * {{RenderingContext|Function|3D}} 
     * @param position  Position of the sprite. 
     * @param width  Width of the sprite. 
     * @param height  Height of the sprite. 
     * @param color  Color of the sprite. Uses the {{Struct|Color}}. 
     * @example
     * 
     * local pos,material,white = Vector(0,0,0), Material( "sprites/splodesprite" ),Color(255,255,255,255) //Define this sort of stuff outside of loops to make more efficient code.
     * hook.Add( "HUDPaint", "paintsprites", function()
     * 	cam.Start3D() // Start the 3D function so we can draw onto the screen.
     * 		render.SetMaterial( material ) // Tell render what material we want, in this case the flash from the gravgun
     * 		render.DrawSprite( pos, 16, 16, white) // Draw the sprite in the middle of the map, at 16x16 in it's original colour with full alpha.
     * 	cam.End3D()
     * end )
     * 
     * // Draw a sprite at the center of the map@example
     * 
     * local toDraw3d = {}
     * local sprites3d = 0
     * 
     * local toDraw2d = {}
     * local sprites2d = 0
     * 
     * local material = Material("sprites/light_ignorez")
     * 
     * function draw.VectorSprite(position, size, color, constantSize)
     * 	if (not isvector(position)) then
     * 		error("bad argument #1 to draw.DrawVectorSprite (Vector expected, got " .. type(position) .. ")")
     * 	end
     * 
     * 	if (not isnumber(size)) then
     * 		error("bad argument #2 to draw.DrawVectorSprite (number expected, got " .. type(size) .. ")")
     * 	end
     * 
     * 	if (not IsColor(color)) then
     * 		error("bad argument #3 to draw.DrawVectorSprite (Color expected, got " .. type(color) .. ")")
     * 	end
     * 
     * 	local tbl = {position, size, color}
     * 
     * 	if (constantSize) then
     * 		sprites2d = sprites2d + 1
     * 		toDraw2d[sprites2d] = tbl
     * 	else
     * 		sprites3d = sprites3d + 1
     * 		toDraw3d[sprites3d] = tbl
     * 	end
     * end
     * 
     * local render_SetMaterial = render.SetMaterial
     * local render_DrawSprite = render.DrawSprite
     * hook.Add("PreDrawEffects", "draw.VectorSprite", function()
     * 	if (sprites3d ~= 0) then
     * 		render_SetMaterial(material)
     * 
     * 		for i = 1, sprites3d do
     * 			local info = toDraw3d[i]
     * 			toDraw3d[i] = nil // Clear the table every frame
     * 
     * 			render_DrawSprite(info[1], info[2], info[2], info[3])
     * 		end
     * 
     * 		sprites3d = 0
     * 	end
     * end)
     * 
     * local surface_SetMaterial = surface.SetMaterial
     * local surface_SetDrawColor = surface.SetDrawColor
     * local surface_DrawTexturedRect = surface.DrawTexturedRect
     * hook.Add("DrawOverlay", "draw.VectorSprite", function()
     * 	if (sprites2d ~= 0) then
     * 		surface_SetMaterial(material)
     * 
     * 		for i = 1, sprites2d do
     * 			local info = toDraw2d[i]
     * 			toDraw2d[i] = nil
     * 
     * 			local pos2d = info[1]:ToScreen()
     * 
     * 			if pos2d.visible then
     * 				surface_SetDrawColor(info[3])
     * 				surface_DrawTexturedRect(pos2d.x, pos2d.y, info[2], info[2])
     * 			end
     * 		end
     * 
     * 		sprites2d = 0
     * 	end
     * end)
     * 
     * // Function that displays a sprite at the given position, without the need of a specific rendering context
     * 
     * draw.VectorSprite({{Type|Vector}} position, {{Type|number}} size, {{Struct|Color}} color, {{Type|boolean}} constantSize) 
     */
    function DrawSprite(position: Vector, width: number, height: number, color: Color): void;
    
    /**
     * Draws a texture over the whole screen.
     * 
     * {{RenderingContext|Function|2D}} 
     * @param tex  The texture to draw 
     */
    function DrawTextureToScreen(tex: ITexture): void;
    
    /**
     * Draws a textured rectangle.
     * 
     * {{RenderingContext|Function|2D}} 
     * @param tex  The texture to draw 
     * @param x  The x coordinate of the rectangle to draw. 
     * @param y  The y coordinate of the rectangle to draw. 
     * @param width  The width of the rectangle to draw. 
     * @param height  The height of the rectangle to draw. 
     */
    function DrawTextureToScreenRect(tex: ITexture, x: number, y: number, width: number, height: number): void;
    
    /**
     * Draws a wireframe box in 3D space.
     * 
     * {{RenderingContext|Function|3D}} 
     * @param position  Position of the box. 
     * @param angle  Angles of the box. 
     * @param mins  The lowest corner of the box. 
     * @param maxs  The highest corner of the box. 
     * @param color  The color of the box. Uses the {{Struct|Color}}. 
     * @param writeZ [=false] Sets whenever to write to the zBuffer. 
     */
    function DrawWireframeBox(position: Vector, angle: Angle, mins: Vector, maxs: Vector, color: Color, writeZ?: boolean): void;
    
    /**
     * Draws a wireframe sphere in 3d space.
     * 
     * {{RenderingContext|Function|3D}} 
     * @param position  Position of the sphere. 
     * @param radius  The size of the sphere. 
     * @param longitudeSteps  The amount of longitude steps. 
     * The larger this number is, the smoother the sphere is. 
     * @param latitudeSteps  The amount of latitude steps. 
     * The larger this number is, the smoother the sphere is. 
     * @param color [={{GlobalFunction|Color}}( 255, 255, 255 )] The color of the wireframe. Uses the {{Struct|Color}}. 
     * @param writeZ [=false] Whether or not to consider the Z buffer. If false, the wireframe will be drawn over everything currently drawn. If true, it will be drawn with depth considered, as if it were a regular object in 3D space. 
     * @example
     * 
     * hook.Add( "PostDrawTranslucentRenderables", "test", function()
     * 
     * 	// Set the draw material to solid white
     * 	render.SetColorMaterial()
     * 
     * 	// The position to render the sphere at, in this case, the looking position of the local player
     * 	local pos = LocalPlayer():GetEyeTrace().HitPos
     * 
     * 	local radius = 50
     * 	local wideSteps = 10
     * 	local tallSteps = 10
     * 
     * 	// Draw the sphere!
     * 	render.DrawSphere( pos, radius, wideSteps, tallSteps, Color( 0, 175, 175, 100 ) )
     * 
     * 	// Draw the wireframe sphere!
     * 	render.DrawWireframeSphere( pos, radius, wideSteps, tallSteps, Color( 255, 255, 255, 255 ) )
     * 
     * end )
     * 
     * // Draws a wireframe sphere over a normal sphere for an artistic effect. 
     */
    function DrawWireframeSphere(position: Vector, radius: number, longitudeSteps: number, latitudeSteps: number, color?: Color, writeZ?: boolean): void;
    
    /**
     * Sets the status of the clip renderer, returning previous state.
     * 
     * {{Warning|To prevent unintended rendering behavior of other mods/the game, you must reset the clipping state to its previous value.}}
     * 
     * **Bug [#3105](https://github.com/Facepunch/garrysmod-issues/issues/3105):**
     * >Reloading the map does not reset the previous value of this function. 
     * @param state  New clipping state. 
     * @returns Previous clipping state. 
     * @example
     * 
     * // Inside some rendering hook
     * 
     * local oldclip = render.EnableClipping( true )
     * 
     * // Your code here
     * 
     * render.EnableClipping( oldclip )
     * 
     * // Properly using the function.@example
     * 
     * function ENT:Draw()
     *     local normal = self:GetUp() // Everything "behind" this normal will be clipped
     *     local position = normal:Dot( self:GetPos() ) // self:GetPos() is the origin of the clipping plane
     * 
     *     local oldEC = render.EnableClipping( true )
     *     render.PushCustomClipPlane( normal, position )
     * 
     *     self:DrawModel()
     * 
     *     render.PopCustomClipPlane()
     *     render.EnableClipping( oldEC )
     * end
     * 
     * // Clips the lower half of your custom entity 
     */
    function EnableClipping(state: boolean): boolean;
    
    /**
     * Ends the beam mesh of a beam started with {{LibraryFunction|render|StartBeam}}. 
     */
    function EndBeam(): void;
    
    /**
     * Sets the color of the fog. 
     * @param red  Red channel of the fog color, 0 - 255. 
     * @param green  Green channel of the fog color, 0 - 255. 
     * @param blue  Blue channel of the fog color, 0 - 255. 
     */
    function FogColor(red: number, green: number, blue: number): void;
    
    /**
     * Sets the at which the fog reaches its max density. 
     * @param distance  The distance at which the fog reaches its max density.
     * 
     * **Note:**
     * >If used in {{HookFunction|GM|SetupSkyboxFog}}, this value '''must''' be scaled by the first argument of the hook 
     */
    function FogEnd(distance: number): void;
    
    /**
     * Sets the maximum density of the fog. 
     * @param maxDensity  The maximum density of the fog, 0-1. 
     */
    function FogMaxDensity(maxDensity: number): void;
    
    /**
     * Sets the mode of fog. 
     * @param fogMode  Fog mode, see {{Enum|MATERIAL_FOG}}. 
     */
    function FogMode(fogMode: MATERIAL_FOG): void;
    
    /**
     * Sets the distance at which the fog starts showing up. 
     * @param fogStart  The distance at which the fog starts showing up.
     * 
     * **Note:**
     * >If used in {{HookFunction|GM|SetupSkyboxFog}}, this value '''must''' be scaled by the first argument of the hook 
     */
    function FogStart(fogStart: number): void;
    
    /**
     * Returns the ambient color of the map. 
     * @returns color 
     */
    function GetAmbientLightColor(): Vector;
    
    /**
     * Returns the current alpha blending. 
     * @returns blend 
     */
    function GetBlend(): number;
    
    /**
     * @returns The bloom texture 
     */
    function GetBloomTex0(): ITexture;
    
    /**
     * @returns 
     */
    function GetBloomTex1(): ITexture;
    
    /**
     * Returns the current color modulation values as normals. 
     * @returns r 
     */
    function GetColorModulation(): number;
    
    /**
     * Returns the maximum available directX version. 
     * @returns dxLevel 
     */
    function GetDXLevel(): number;
    
    /**
     * Returns the current fog color. 
     * @returns [Red part of the color., Green part of the color, Blue part of the color] 
     * !TupleReturn
     */
    function GetFogColor(): [number, number, number];
    
    /**
     * Returns the fog start and end distance. 
     * @returns [Fog start distance set by {{LibraryFunction|render|FogStart}}, For end distance set by {{LibraryFunction|render|FogEnd}}, Fog Z distance set by {{LibraryFunction|render|SetFogZ}}] 
     * !TupleReturn
     */
    function GetFogDistances(): [number, number, number];
    
    /**
     * Returns the fog mode. 
     * @returns Fog mode, see {{Enum|MATERIAL_FOG}} 
     */
    function GetFogMode(): MATERIAL_FOG;
    
    /**
     * Returns the _rt_FullFrameDepth texture. Alias of _rt_PowerOfTwoFB 
     * @returns 
     */
    function GetFullScreenDepthTexture(): ITexture;
    
    /**
     * Gets the light exposure on the specified position. 
     * @param position  The position of the surface to get the light from. 
     * @returns lightColor 
     */
    function GetLightColor(position: Vector): Vector;
    
    /**
     * @returns 
     */
    function GetMoBlurTex0(): ITexture;
    
    /**
     * @returns 
     */
    function GetMoBlurTex1(): ITexture;
    
    /**
     * @returns 
     */
    function GetMorphTex0(): ITexture;
    
    /**
     * @returns 
     */
    function GetMorphTex1(): ITexture;
    
    /**
     * Returns the render target's power of two texture. 
     * @returns The power of two texture, which is '''_rt_poweroftwofb''' by default. 
     */
    function GetPowerOfTwoTexture(): ITexture;
    
    /**
     * Alias of {{LibraryFunction|render|GetPowerOfTwoTexture}}. 
     * @returns 
     */
    function GetRefractTexture(): ITexture;
    
    /**
     * Returns the currently active render target.
     * 
     * Instead of saving the current render target using this function and restoring to it later, it is generally better practice to use {{LibraryFunction|render|PushRenderTarget}} and {{LibraryFunction|render|PopRenderTarget}}. 
     * @returns The currently active Render Target 
     * @example
     * 
     * local oldRt = render.GetRenderTarget() // we'll save the old screen and draw on a new one!
     * local w, h = ScrW(), ScrH()
     * local customRt = GetRenderTarget( "some_unique_render_target_nameeeee", w, h, true )
     * 
     * render.SetRenderTarget( customRt )
     * render.Clear( 0, 0, 255, 255, true ) // fill the background with blue!
     * 
     * // draw all props on the blue background!
     * for key, prop in pairs(ents.FindByClass( "prop_physics" )) do
     *     prop:DrawModel()
     * end
     * 
     * // save the picture to the garrysmod/data folder.  ~format="jpg" will not work.
     * local data = render.Capture({ format = "jpeg", quality = 70, x = 0, y = 0, h = h, w = w })	
     * local pictureFile = file.Open( "RenderTargetsAreAwesome.jpg", "wb", "DATA" )	
     * pictureFile:Write( data )
     * pictureFile:Close()
     * 
     * render.SetRenderTarget( oldRt )
     * 
     * // Render something to a different render target, then restore the old render target@example
     * 
     * local w, h = ScrW(), ScrH()
     * local customRt = GetRenderTarget( "some_unique_render_target_nameeeee", w, h, true )
     * 
     * render.PushRenderTarget( customRt )
     *     render.Clear( 0, 0, 255, 255, true ) // fill the background with blue!
     * 
     *     // draw all props on the blue background!
     *     for key, prop in pairs(ents.FindByClass( "prop_physics" )) do
     *         prop:DrawModel()
     *     end
     * 
     *     // save the picture to the garrysmod/data folder.  ~format="jpg" will not work.
     *     local data = render.Capture({ format = "jpeg", quality = 70, x = 0, y = 0, h = h, w = w })	
     *     local pictureFile = file.Open( "RenderTargetsAreAwesome.jpg", "wb", "DATA" )	
     *     pictureFile:Write( data )
     *     pictureFile:Close()
     * render.PopRenderTarget()
     * 
     * // Same as above, but using {{LibraryFunction|render|PushRenderTarget}} and {{LibraryFunction|render|PopRenderTarget}} instead of {{LibraryFunction|render|GetRenderTarget}} and {{LibraryFunction|render|SetRenderTarget}} 
     */
    function GetRenderTarget(): ITexture;
    
    /**
     * Returns the _rt_ResolvedFullFrameDepth texture for SSAO depth. 
     * @returns 
     */
    function GetResolvedFullFrameDepth(): ITexture;
    
    /**
     * Obtain an {{Type|ITexture}} of the screen. You must call {{LibraryFunction|render|UpdateScreenEffectTexture}} in order to update this texture with the currently rendered scene.
     * 
     * This texture is mainly used within {{HookFunction|GM|RenderScreenspaceEffects}} 
     * @param textureIndex [=0] Max index is 3, but engine only creates the first two for you. 
     * @returns 
     * @example
     * 
     * print(render.GetScreenEffectTexture(0):GetName())
     * print(render.GetScreenEffectTexture(1):GetName())
     * 
     * // Print the texture name of the returned textures. 
     */
    function GetScreenEffectTexture(textureIndex?: number): ITexture;
    
    /**
     * @returns 
     */
    function GetSmallTex0(): ITexture;
    
    /**
     * @returns 
     */
    function GetSmallTex1(): ITexture;
    
    /**
     * <onlyinclude>Returns a floating point texture the same resolution as the screen.
     * 
     * **Note:**
     * >The {{ShaderLink|gmodscreenspace}} doesn't behave as expected when drawing a floating-point texture to an integer texture (e.g. the default render target). Use an UnlitGeneric material instead
     * 
     * </onlyinclude> 
     * @returns Render target named "__rt_supertexture1" 
     */
    function GetSuperFPTex(): ITexture;
    
    /**
     * {{:render/GetSuperFPTex}} 
     * @returns Render target named "__rt_supertexture2" 
     */
    function GetSuperFPTex2(): ITexture;
    
    /**
     * Performs a render trace and returns the color of the surface hit, this uses a low res version of the texture. 
     * @param startPos  The start position to trace from. 
     * @param endPos  The end position of the trace. 
     * @returns color 
     */
    function GetSurfaceColor(startPos: Vector, endPos: Vector): Vector;
    
    /**
     * Returns a vector representing linear tone mapping scale. 
     * @returns The vector representing linear tone mapping scale. 
     */
    function GetToneMappingScaleLinear(): Vector;
    
    /**
     * Sets the render material override for all next calls of {{ClassFunction|Entity|DrawModel}}. Also overrides {{LibraryFunction|render|MaterialOverrideByIndex}}. 
     * @param material  The material to use as override, use nil to disable. 
     */
    function MaterialOverride(material: IMaterial): void;
    
    /**
     * Similar to {{LibraryFunction|render|MaterialOverride}}, but overrides the materials per index.
     * 
     * {{LibraryFunction|render|MaterialOverride}} overrides effects of this function. 
     * @param index  Starts with 0, the index of the material to override 
     * @param material  The material to override with 
     */
    function MaterialOverrideByIndex(index: number, material: IMaterial): void;
    
    /**
     * Returns the maximum texture height the renderer can handle. 
     * @returns maxTextureHeight 
     */
    function MaxTextureHeight(): number;
    
    /**
     * Returns the maximum texture width the renderer can handle. 
     * @returns maxTextureWidth 
     */
    function MaxTextureWidth(): number;
    
    /**
     * Creates a new {{GlobalFunction|ClientsideModel}}, renders it at the specified pos/ang, and removes it. Can also be given an existing {{Type|CSEnt}} to reuse instead.
     * 
     * **Note:**
     * >This function is only meant to be used in a single render pass kind of scenario, if you need to render a model continuously, use a cached {{GlobalFunction|ClientsideModel}} and provide it as a second argument.
     * 
     * **Bug [#3307](https://github.com/Facepunch/garrysmod-issues/issues/3307):**
     * >Using this with a map model ({{LibraryFunction|game|GetWorld}}():[[Entity/GetModel|GetModel]]()) crashes the game. 
     * @param settings  Requires:
     * * {{FuncArg|string|model|The model to draw}}
     * * {{FuncArg|Vector|pos|The position to draw the model at}}
     * * {{FuncArg|Angle|angle|The angles to draw the model at}} 
     * @param ent [=nil] If provided, this entity will be reused instead of creating a new one with {{GlobalFunction|ClientsideModel}}. Note that the ent's model, position and angles will be changed, and {{ClassFunction|Entity|SetNoDraw}} will be set to true. 
     */
    function Model(settings: table, ent?: CSEnt): void;
    
    /**
     * Sets a material to override a model's default material. Similar to {{ClassFunction|Entity|SetMaterial}} except it uses an {{Type|IMaterial}} argument and it can be used to change materials on models which are part of the world geometry. 
     * @param material  The material override. 
     * @example
     * 
     * local error_mat = Material("models/error/new light1")
     * 
     * function GM:PreDrawOpaqueRenderables(bDrawingDepth, bDrawingSkybox)
     * 
     * 	render.ModelMaterialOverride(error_mat)
     * 	
     * end
     * 
     * // Sets the material of all opaque models to the red flashing "ERROR" texture. 
     */
    function ModelMaterialOverride(material: IMaterial): void;
    
    /**
     * Overrides the write behaviour of all next rendering operations towards the alpha channel of the current render target.
     * 
     * See also {{LibraryFunction|render|OverrideBlend}}.
     * 
     * **Note:**
     * >Doing {{Lib|surface}} draw calls with alpha set to 0 is a no-op and will never have any effect. 
     * @param enable  Enable or disable the override. 
     * @param shouldWrite  If the previous argument is true, sets whether the next rendering operations should write to the alpha channel or not. Has no effect if the previous argument is false. 
     * @example
     * 
     * render.PushRenderTarget( texture )
     * render.OverrideAlphaWriteEnable( true, true )
     * 
     * render.ClearDepth()
     * render.Clear( 0, 0, 0, 0 )
     * 
     * render.OverrideAlphaWriteEnable( false )
     * render.PopRenderTarget()
     * 
     * // Shows how you can use alpha channel with render targets. 
     */
    function OverrideAlphaWriteEnable(enable: boolean, shouldWrite: boolean): void;
    
    /**
     * Overrides the internal graphical functions used to determine the final color and alpha of a rendered texture.
     * 
     * See also {{LibraryFunction|render|OverrideAlphaWriteEnable}}.
     * 
     * **Note:**
     * >Doing {{Lib|surface}} draw calls with alpha set to 0 is a no-op and won't have an effect. 
     * @param enabled  true to enable, false to disable. No other arguments are required when disabling. 
     * @param srcBlend  The source color blend function {{Enum|BLEND}}. Determines how a rendered texture's final color should be calculated. 
     * @param destBlend  The destination color blend function {{Enum|BLEND}}. 
     * @param blendFunc  The blend mode used for drawing the color layer {{Enum|BLENDFUNC}}. 
     * @param srcBlendAlpha [=none] The source alpha blend function {{Enum|BLEND}}. Determines how a rendered texture's final alpha should be calculated. 
     * @param destBlendAlpha [=none] The destination alpha blend function {{Enum|BLEND}}. 
     * @param blendFuncAlpha [=none] The blend mode used for drawing the alpha layer {{Enum|BLENDFUNC}}. 
     */
    function OverrideBlend(enabled: boolean, srcBlend: BLEND, destBlend: BLEND, blendFunc: BLENDFUNC, srcBlendAlpha?: BLEND, destBlendAlpha?: BLEND, blendFuncAlpha?: BLENDFUNC): void;
    
    /**
     * **Deprecated:**
     * >Use {{LibraryFunction|render|OverrideBlend}} instead.
     * 
     * Overrides the internal graphical functions used to determine the final color and alpha of a rendered texture.
     * 
     * See also {{LibraryFunction|render|OverrideAlphaWriteEnable}}.
     * 
     * **Note:**
     * >Doing {{Lib|surface}} draw calls with alpha set to 0 is a no-op and will never have any effect. 
     * @param enabled  true to enable, false to disable. No other arguments are required when disabling. 
     * @param srcBlend  The source color blend function {{Enum|BLEND}}. Determines how a rendered texture's final color should be calculated. 
     * @param destBlend 
     * @param srcBlendAlpha [=nil] The source alpha blend function {{Enum|BLEND}}. Determines how a rendered texture's final alpha should be calculated. 
     * @param destBlendAlpha [=nil] 
     * @example
     * 
     * // Our sprite texture to render. Rendering this texture without
     * // render.OverrideBlendFunc will result in black borders around the lightning beam.
     * local lightningMaterial = Material("sprites/lgtning")
     * 
     * function GM:PreDrawTranslucentRenderables(isDrawingDepth, isDrawingSkybox)
     * 
     * 	if isDrawingDepth or isDrawSkybox then return end
     * 
     * 	local ply = Entity(1)
     * 
     * 	if !IsValid(ply) then return end
     * 
     * 	// Calculate a random UV to use for the lightning to give it some movement
     * 	local uv = math.Rand(0, 1)
     * 
     * 	// Enable blend override to interpret the color and alpha from the texture.
     * 	render.OverrideBlendFunc( true, BLEND_SRC_COLOR, BLEND_SRC_ALPHA, BLEND_ONE, BLEND_ZERO)
     * 
     * 	render.SetMaterial(lightningMaterial)
     * 
     * 	// Render a lightning beam along points randomly offset from a line above the player.
     * 	render.StartBeam(5)
     * 	render.AddBeam(ply:GetPos() + Vector(0,0,035), 20, uv, Color(255,255,255,255))
     * 	render.AddBeam(ply:GetPos() + Vector(0,0,135) + Vector(math.Rand(-20,20),math.Rand(-20,20),0), 20, uv*2, Color(255,255,255,255))
     * 	render.AddBeam(ply:GetPos() + Vector(0,0,235) + Vector(math.Rand(-20,20),math.Rand(-20,20),0), 20, uv*3, Color(255,255,255,255))
     * 	render.AddBeam(ply:GetPos() + Vector(0,0,335) + Vector(math.Rand(-20,20),math.Rand(-20,20),0), 20, uv*4, Color(255,255,255,255))
     * 	render.AddBeam(ply:GetPos() + Vector(0,0,435) + Vector(math.Rand(-20,20),math.Rand(-20,20),0), 20, uv*5, Color(255,255,255,255))
     * 	render.EndBeam()
     * 
     * 	 // Disable blend override
     * 	render.OverrideBlendFunc( false )
     * 
     * end
     * 
     * // In this example we draw a lightning bolt over our player's head.
     * 
     * We shouldn't really draw the lightning in the PreDrawTranslucentRenderables hook as this causes issues rendering transparent objects behind the lightning, but it's a quick example of how the function works. Normally it should be drawn in a custom lua effect's {{HookFunction|EFFECT|Render}}. 
     */
    function OverrideBlendFunc(enabled: boolean, srcBlend: BLEND, destBlend: number, srcBlendAlpha?: BLEND, destBlendAlpha?: number): void;
    
    /**
     * Overrides the write behaviour of all next rendering operations towards the color channel of the current render target. 
     * @param enable  Enable or disable the override. 
     * @param shouldWrite  If the previous argument is true, sets whether the next rendering operations should write to the color channel or not. Has no effect if the previous argument is false. 
     */
    function OverrideColorWriteEnable(enable: boolean, shouldWrite: boolean): void;
    
    /**
     * Overrides the write behaviour of all next rendering operations towards the depth buffer. 
     * @param enable  Enable or disable the override. 
     * @param shouldWrite  If the previous argument is true, sets whether the next rendering operations should write to the depth buffer or not. Has no effect if the previous argument is false. 
     */
    function OverrideDepthEnable(enable: boolean, shouldWrite: boolean): void;
    
    /**
     */
    function PerformFullScreenStencilOperation(): void;
    
    /**
     * Removes the current active clipping plane from the clip plane stack. 
     */
    function PopCustomClipPlane(): void;
    
    /**
     * Pops the current texture magnification filter from the filter stack.
     * 
     * See {{LibraryFunction|render|PushFilterMag}} 
     */
    function PopFilterMag(): void;
    
    /**
     * Pops the current texture minification filter from the filter stack.
     * 
     * See {{LibraryFunction|render|PushFilterMin}} 
     */
    function PopFilterMin(): void;
    
    /**
     * Pops the current flashlight mode from the flashlight mode stack. 
     */
    function PopFlashlightMode(): void;
    
    /**
     * Pops the last render target and viewport from the RT stack and sets them as the current render target and viewport.
     * 
     * This is should be called to restore the previous render target and viewport after a call to {{LibraryFunction|render|PushRenderTarget}}. 
     */
    function PopRenderTarget(): void;
    
    /**
     * Pushes a new clipping plane of the clip plane stack and sets it as active.
     * 
     * **Note:**
     * >A max of 2 clip planes are supported on Linux/POSIX, and 6 on Windows. 
     * @param normal  The normal of the clipping plane. 
     * @param distance  The distance of the plane from the world origin. You can use {{ClassFunction|Vector|Dot}} between the normal and any point on the plane to find this, see [[#Example|Example 1]]. 
     * @example
     * 
     * function ENT:Draw()
     *     local normal = self:GetUp() // Everything "behind" this normal will be clipped
     *     local position = normal:Dot( self:GetPos() ) // self:GetPos() is the origin of the clipping plane
     * 
     *     local oldEC = render.EnableClipping( true )
     *     render.PushCustomClipPlane( normal, position )
     * 
     *     self:DrawModel()
     * 
     *     render.PopCustomClipPlane()
     *     render.EnableClipping( oldEC )
     * end
     * 
     * // Clips the lower half of your custom entity 
     */
    function PushCustomClipPlane(normal: Vector, distance: number): void;
    
    /**
     * Pushes a texture filter onto the magnification texture filter stack. 
     * @param texFilterType  The texture filter type, see {{Enum|TEXFILTER}} 
     */
    function PushFilterMag(texFilterType: TEXFILTER): void;
    
    /**
     * Pushes a texture filter onto the minification texture filter stack. 
     * @param texFilterType  The texture filter type, see {{Enum|TEXFILTER}} 
     * @example
     * 
     * render.PushFilterMag( TEXFILTER.ANISOTROPIC )
     * render.PushFilterMin( TEXFILTER.ANISOTROPIC )
     * 
     * // Render stuff here
     * 
     * render.PopFilterMag()
     * render.PopFilterMin()
     * 
     * // Anisotropic Filtering (This is not antialiasing) 
     */
    function PushFilterMin(texFilterType: TEXFILTER): void;
    
    /**
     * Enables the flashlight projection for the upcoming rendering.
     * 
     * **Bug [#3029](https://github.com/Facepunch/garrysmod-issues/issues/3029):**
     * >This will leave models lit under specific conditions. 
     * @param enable [=false] Whether the flashlight mode should be enabled or disabled. 
     */
    function PushFlashlightMode(enable?: boolean): void;
    
    /**
     * Pushes the current render target and viewport to the RT stack then sets a new current render target and viewport. If the viewport is not specified, the dimensions of the render target are used instead.
     * 
     * This is similar to a call to {{LibraryFunction|render|SetRenderTarget}} and {{LibraryFunction|render|SetViewPort}} where the current render target and viewport have been saved beforehand, except the viewport isn't clipped to screen bounds.
     * 
     * See also {{LibraryFunction|render|PopRenderTarget}}.
     * 
     * **Note:**
     * >If you want to render to the render target in 2d mode and it is not the same size as the screen, use {{LibraryFunction|cam|Start2D}} and {{LibraryFunction|cam|End2D}}.
     * 
     * **Note:**
     * >If the render target is bigger than the screen, rendering done with the surface library will be clipped to the screen bounds unless you call {{LibraryFunction|surface|DisableClipping}} 
     * @param texture  The new render target to be used. 
     * @param x [=0] X origin of the viewport. 
     * @param y [=0] Y origin of the viewport. 
     * @param w [=texture:Width()] Width of the viewport. 
     * @param h [=texture:Height()] Height of the viewport 
     * @example
     * 
     * render.PushRenderTarget( texture )
     * render.OverrideAlphaWriteEnable( true, true )
     * 
     * render.ClearDepth()
     * render.Clear( 0, 0, 0, 0 )
     * 
     * render.OverrideAlphaWriteEnable( false )
     * render.PopRenderTarget()
     * 
     * // Shows how you can use alpha channel with render targets. 
     */
    function PushRenderTarget(texture: ITexture, x?: number, y?: number, w?: number, h?: number): void;
    
    /**
     * Reads the color of the specified pixel from the RenderTarget sent by {{LibraryFunction|render|CapturePixels}} 
     * @param x  The x coordinate. 
     * @param y  The y coordinate. 
     * @returns [r, g, b] 
     * !TupleReturn
     */
    function ReadPixel(x: number, y: number): [number, number, number];
    
    /**
     * This applies the changes made to map lighting using {{LibraryFunction|engine|LightStyle}}. 
     * @param DoStaticProps [=false] When true, this will also apply lighting changes to static props. This is really slow on large maps. 
     */
    function RedownloadAllLightmaps(DoStaticProps?: boolean): void;
    
    /**
     * Renders the HUD on the screen. 
     * @param x  X position for the HUD draw origin. 
     * @param y  Y position for the HUD draw origin. 
     * @param w  Width of the HUD draw. 
     * @param h  Height of the HUD draw. 
     */
    function RenderHUD(x: number, y: number, w: number, h: number): void;
    
    /**
     * Renders the scene with the specified viewData to the current active render target.
     * 
     * **Bug [#1330](https://github.com/Facepunch/garrysmod-issues/issues/1330):**
     * >Static props and LODs are rendered improperly due to incorrectly perceived distance. 
     * @param view [=nil] The view data to be used in the rendering. See {{Struct|ViewData}}. Any missing value is assumed to be that of the current view. Similarly, you can make a normal render by simply not passing this table at all. 
     * @example
     * 
     * local frame = vgui.Create( "DFrame" )
     * frame:SetSize( ScrW() - 100, ScrH() - 100 )
     * frame:Center()
     * frame:MakePopup()
     * 
     * function frame:Paint( w, h )
     * 
     * 	local x, y = self:GetPos()
     * 
     * 	render.RenderView( {
     * 		origin = Vector( 0, 0, 0 ),
     * 		angles = Angle( 0, 0, 0 ),
     * 		x = x, y = y,
     * 		w = w, h = h
     * 	} )
     * 
     * end
     * 
     * // How you could use this to draw the view on a derma panel. 
     */
    function RenderView(view?: ViewData): void;
    
    /**
     * Resets the model lighting to the specified color.
     * 
     * Calls {{LibraryFunction|render|SetModelLighting}} for every direction with given color. 
     * @param r  The red part of the color, 0-1 
     * @param g  The green part of the color, 0-1 
     * @param b  The blue part of the color, 0-1 
     */
    function ResetModelLighting(r: number, g: number, b: number): void;
    
    /**
     * Resets the HDR tone multiplier to the specified value.
     * 
     * This will only work on HDR maps, and the value will automatically fade to what it was ( or whatever {{LibraryFunction|render|SetGoalToneMappingScale}} is ) if called only once. 
     * @param scale  The value which should be used as multiplier. 
     */
    function ResetToneMappingScale(scale: number): void;
    
    /**
     * Sets the ambient lighting for any upcoming render operation. 
     * @param r  The red part of the color, 0-1. 
     * @param g  The green part of the color, 0-1. 
     * @param b  The blue part of the color, 0-1. 
     */
    function SetAmbientLight(r: number, g: number, b: number): void;
    
    /**
     * Sets the alpha blending for every upcoming render operation.
     * 
     * **Bug [#3166](https://github.com/Facepunch/garrysmod-issues/issues/3166):**
     * >This does not affect non-model render.Draw* functions. 
     * @param blending  Blending value from 0-1. 
     */
    function SetBlend(blending: number): void;
    
    /**
     * Sets the current drawing material to "color".
     * 
     * The material is defined as:
     *  "UnlitGeneric"
     *  {
     *  	"$basetexture" "color/white"
     *  	"$model" 		1
     *  	"$translucent" 	1
     *  	"$vertexalpha" 	1
     *  	"$vertexcolor" 	1
     *  } 
     * @example
     * 
     * render.SetMaterial( Material( "color" ) )
     * 
     * // Equivalent of this function 
     */
    function SetColorMaterial(): void;
    
    /**
     * Sets the current drawing material to "color_ignorez".
     * 
     * The material is defined as:
     *  "UnlitGeneric"
     *  {
     *  	"$basetexture" "color/white"
     *   	"$model" 		1
     *  	"$translucent" 	1
     *  	"$vertexalpha" 	1
     *  	"$vertexcolor" 	1
     *  	"$ignorez"		1
     *  } 
     * @example
     * 
     * render.SetMaterial( Material( "color_ignorez" ) )
     * 
     * // Equivalent of this function 
     */
    function SetColorMaterialIgnoreZ(): void;
    
    /**
     * Sets the color modulation. 
     * @param r  The red channel multiplier normal ranging from 0-1. 
     * @param g  The green channel multiplier normal ranging from 0-1. 
     * @param b  The blue channel multiplier normal ranging from 0-1. 
     */
    function SetColorModulation(r: number, g: number, b: number): void;
    
    /**
     * If the fog mode is set to [[Enums/MATERIAL_FOG|MATERIAL_FOG_LINEAR_BELOW_FOG_Z]], the fog will only be rendered below the specified height. 
     * @param fogZ  The fog Z. 
     */
    function SetFogZ(fogZ: number): void;
    
    /**
     * Sets the goal HDR tone mapping scale.
     * 
     * Use this in a rendering/think hook as it is reset every frame. 
     * @param scale  The target scale. 
     */
    function SetGoalToneMappingScale(scale: number): void;
    
    /**
     * Sets lighting mode when rendering something.
     * 
     * **Note:**
     * >'''Do not forget to restore the default value''' to avoid unexpected behavior, like the world and the HUD/UI being affected 
     * @param Mode  Lighting render mode
     * 
     * Possible values are:
     * * 0 - Default
     * * 1 - Total fullbright, similar to ''mat_fullbright 1'' but excluding some weapon view models
     * * 2 - Increased brightness(?), models look fullbright 
     * @example
     * 
     * local MATERIAL = Material("skybox/trainup")
     * 
     * hook.Add("PostDraw2DSkyBox", "Quaddrawer", function()
     * 	render.OverrideDepthEnable( true, false )
     * 	render.SetLightingMode(2)
     * 
     * 	cam.Start3D(Vector(0, 0, 0), EyeAngles())
     * 		render.SetMaterial(MATERIAL)
     * 		render.DrawQuadEasy(Vector(200,0,0), Vector(-1,0,0), 64, 64, Color(255,255,255), 180)
     * 	cam.End3D()
     * 
     * 	render.OverrideDepthEnable( false, false )
     * 	render.SetLightingMode(0)
     * end)
     * 
     * // Draws a fullbright quad on 2D skybox@example
     * 
     * local LightingModeChanged = false
     * hook.Add( "PreRender", "fullbright", function()
     * 	render.SetLightingMode( 1 )
     * 	LightingModeChanged = true
     * end )
     * 
     * local function EndOfLightingMod()
     * 	if LightingModeChanged then
     * 		render.SetLightingMode( 0 )
     * 		LightingModeChanged = false
     * 	end
     * end
     * hook.Add( "PostRender", "fullbright", EndOfLightingMod )
     * hook.Add( "PreDrawHUD", "fullbright", EndOfLightingMod )
     * 
     * // Display everything the same way as when you set ''mat_fullbright'' to 1. 
     */
    function SetLightingMode(Mode: number): void;
    
    /**
     * Sets the lighting origin.
     * 
     * **Bug [#2804](https://github.com/Facepunch/garrysmod-issues/issues/2804):**
     * >This does not work for prop_physics. 
     * @param lightingOrigin  The position from which the light should be "emitted". 
     */
    function SetLightingOrigin(lightingOrigin: Vector): void;
    
    /**
     * Sets the texture to be used as the lightmap in upcoming rendering operations. This is required when rendering meshes using a material with a lightmapped shader such as LightmappedGeneric.
     * 
     * {{RenderingContext|Function|3D}}
     * {{RenderingContext|Function|2D}} 
     * @param tex  The texture to be used as the lightmap. 
     * @example
     * 
     * // LightmappedGeneric material that we'll use for our mesh
     * local meshMat = Material( "concrete/concretefloor001a" )
     * 
     * // Mesh vertices (notice that it's not MeshVertex structure format, just something similar)
     * // Notice that we have 2 UV coordinates channels, one for texture, one for lightmap
     * local meshVertices = {
     * 
     * 	{ pos = Vector( 0, 0, 0 ), u0 = 0, v0 = 0, u1 = 0, v1 = 0, n = Vector( 1, 0, 0 ) },
     * 	{ pos = Vector( 0, 100, 0 ), u0 = 1, v0 = 0, u1 = 3, v1 = 0, n = Vector( 1, 0, 0 ) },
     * 	{ pos = Vector( 0, 100, -100 ), u0 = 1, v0 = 1, u1 = 3, v1 = 3, n = Vector( 1, 0, 0 ) },
     * 	{ pos = Vector( 0, 0, -100 ), u0 = 0, v0 = 1, u1 = 0, v1 = 3, n = Vector( 1, 0, 0 ) },
     * }
     * 
     * // Run this command while ingame to create the mesh at map origin
     * concommand.Add( "meshtest", function()
     * 
     * 	// Creating a render target to be used as lightmap texture
     * 	meshLightmap = GetRenderTarget( "test_mesh_lightmap", 128, 128, false )
     * 
     * 	// Filling the lightmap texture with some stuff for visualization
     * 	render.PushRenderTarget( meshLightmap )
     * 
     * 		cam.Start2D()
     * 
     * 			// Resetting lightmap to be monotone gray
     * 			render.Clear( 128, 128, 128, 255 )
     * 
     * 			// Drawing a dark rectangle
     * 			render.SetColorMaterial()
     * 			surface.SetDrawColor( 80, 80, 80, 255 )
     * 			surface.DrawRect( 32, 32, 64, 64 )
     * 
     * 			// And some color text, why not! Lightmaps support RGB color
     * 			draw.SimpleText( "This is lightmap", "DermaDefault", 64, 64, Color( 255, 0, 0, 255 ), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
     * 
     * 		cam.End2D()
     * 
     * 	render.PopRenderTarget()
     * 
     * 	// Creating the mesh. Don't forget to pass the material you're gonna use with it!
     * 	// Shader of the material defines some features of the mesh, vertex structure
     * 	// specifically (LightmappedGeneric requires each vertex to store 2 UV channels,
     * 	// for instance. This is important in this case)
     * 	myTestMesh = Mesh( meshMat )
     * 
     * 	// Creating the mesh
     * 	mesh.Begin( myTestMesh, MATERIAL_QUADS, 1 )
     * 
     * 		for i, vertex in pairs( meshVertices ) do
     * 
     * 			mesh.Position( vertex.pos )
     * 
     * 			// Texture coordinates go to channel 0
     * 			mesh.TexCoord( 0, vertex.u0, vertex.v0 )
     * 
     * 			// Lightmap texture coordinates go to channel 1
     * 			mesh.TexCoord( 1, vertex.u1, vertex.v1 )
     * 
     * 			mesh.Normal( vertex.n )
     * 			mesh.AdvanceVertex()
     * 		end
     * 
     * 	mesh.End()
     * end )
     * 
     * hook.Add( "PostDrawOpaqueRenderables", "LightmappedMeshTest", function()
     * 
     * 	if myTestMesh and myTestMesh ~= NULL then
     * 
     * 		render.SetMaterial( meshMat )
     * 		render.SetLightmapTexture( meshLightmap )
     * 
     * 		myTestMesh:Draw()
     * 	end
     * end )
     * 
     * // Creates a mesh with LightmappedGeneric material on it 
     */
    function SetLightmapTexture(tex: ITexture): void;
    
    /**
     * Sets up the local lighting for any upcoming render operation. Up to 4 local lights can be defined, with one of three different types (point, directional, spot).
     * 
     * Disables all local lights if called with no arguments. 
     * @param lights [={}] A table containing up to 4 tables for each light source that should be set up. Each of these tables should contain the properties of its associated light source, see {{Struct|LocalLight}}. 
     */
    function SetLocalModelLights(lights?: LocalLight): void;
    
    /**
     * Sets the material to be used in any upcoming render operation using the Lib library.
     * 
     * Not to be confused with {{LibraryFunction|surface|SetMaterial}}.
     * 
     * {{RenderingContext|Function|3D}}
     * {{RenderingContext|Function|2D}} 
     * @param mat  The material to be used. 
     */
    function SetMaterial(mat: IMaterial): void;
    
    /**
     * Sets up the ambient lighting for any upcoming render operation. Ambient lighting can be seen as a cube enclosing the object to be drawn, each of its faces representing a directional light source that shines towards the object. Thus, there is a total of six different light sources that can be configured separately.
     * 
     * Light color components are not restricted to a specific range (i.e. 0-255), instead, higher values will result in a brighter light. 
     * @param lightDirection  The light source to edit, see {{Enum|BOX}}. 
     * @param red  The red component of the light color. 
     * @param green  The green component of the light color. 
     * @param blue  The blue component of the light color. 
     */
    function SetModelLighting(lightDirection: BOX, red: number, green: number, blue: number): void;
    
    /**
     * Sets the render target to the specified rt. 
     * @param texture  The new render target to be used. 
     */
    function SetRenderTarget(texture: ITexture): void;
    
    /**
     * Sets the render target with the specified index to the specified rt. 
     * @param rtIndex  The index of the rt to set. 
     * @param texture  The new render target to be used. 
     */
    function SetRenderTargetEx(rtIndex: number, texture: ITexture): void;
    
    /**
     * Sets a scissoring rect which limits the drawing area. 
     * @param startX  X start coordinate of the scissor rect. 
     * @param startY  Y start coordinate of the scissor rect. 
     * @param endX  X end coordinate of the scissor rect. 
     * @param endY  Y end coordinate of the scissor rect. 
     * @param enable  Enable or disable the scissor rect. 
     * @example
     * 
     * render.SetScissorRect( 0, 0, 512, 512, true ) // Enable the rect
     * 	draw.RoundedBox( 4, 0, 0, ScrW(), ScrH(), color_white ) // Draw a white rectangle over the whole screen
     * render.SetScissorRect( 0, 0, 0, 0, false ) // Disable after you are done
     * 
     * // Shows how to use this function. This will cut the white rectangle from full screen to 512x512 box in top left corner 
     */
    function SetScissorRect(startX: number, startY: number, endX: number, endY: number, enable: boolean): void;
    
    /**
     * Sets the shadow color. 
     * @param red  The red channel of the shadow color. 
     * @param green  The green channel of the shadow color. 
     * @param blue  The blue channel of the shadow color. 
     */
    function SetShadowColor(red: number, green: number, blue: number): void;
    
    /**
     * Sets the shadow projection direction. 
     * @param shadowDirections  The new shadow direction. 
     */
    function SetShadowDirection(shadowDirections: Vector): void;
    
    /**
     * Sets the maximum shadow projection range. 
     * @param shadowDistance  The new maximum shadow distance. 
     */
    function SetShadowDistance(shadowDistance: number): void;
    
    /**
     * Sets whether any future render operations will ignore shadow drawing. 
     * @param newState 
     */
    function SetShadowsDisabled(newState: boolean): void;
    
    /**
     * Sets the compare function of the stencil.
     * 
     * Pixels which fail the stencil comparison function are not written to the render target. The operation to be performed on the stencil buffer values for these pixels can be set using {{LibraryFunction|render|SetStencilFailOperation}}.
     * 
     * Pixels which pass the stencil comparison function are written to the render target unless they fail the depth buffer test (where applicable). The operation to perform on the stencil buffer values for these pixels can be set using {{LibraryFunction|render|SetStencilPassOperation}} and {{LibraryFunction|render|SetStencilZFailOperation}}. 
     * @param compareFunction  Compare function, see {{Enum|STENCILCOMPARISONFUNCTION}}, and {{Enum|STENCIL}} for short. 
     */
    function SetStencilCompareFunction(compareFunction: STENCILCOMPARISONFUNCTION): void;
    
    /**
     * Sets whether stencil tests are carried out for each rendered pixel.
     * 
     * Only pixels passing the stencil test are written to the render target. 
     * @param newState  The new state. 
     * @example
     * 
     * hook.Add( "PostDrawOpaqueRenderables", "Stencil Tutorial Example", function()
     * 
     * 	// Reset everything to known good
     * 	render.SetStencilWriteMask( 0xFF )
     * 	render.SetStencilTestMask( 0xFF )
     * 	render.SetStencilReferenceValue( 0 )
     * 	render.SetStencilCompareFunction( STENCIL_ALWAYS )
     * 	render.SetStencilPassOperation( STENCIL_KEEP )
     * 	render.SetStencilFailOperation( STENCIL_KEEP )
     * 	render.SetStencilZFailOperation( STENCIL_KEEP )
     * 	render.ClearStencil()
     * 
     * 	// Enable stencils
     * 	render.SetStencilEnable( true )
     * 	// Set the reference value to 1. This is what the compare function tests against
     * 	render.SetStencilReferenceValue( 1 )
     * 	// Refuse to write things to the screen unless that pixel's value is 1
     * 	render.SetStencilCompareFunction( STENCIL_EQUAL )
     * 	// Write a 1 to the centre third of the screen. Because we cleared it earlier, everything is currently 0
     * 	local w, h = ScrW() / 3, ScrH() / 3
     * 	local x_start, y_start = w, h
     * 	local x_end, y_end = x_start + w, y_start + h
     * 	render.ClearStencilBufferRectangle( x_start, y_start, x_end, y_end, 1 )
     * 
     * 	// Draw our entities. They will only draw in the area cleared above
     * 	for _, ent in pairs( ents.FindByClass( "sent_stencil_test" ) ) do
     * 		ent:DrawModel()
     * 	end
     * 
     * 	// Let everything render normally again
     * 	render.SetStencilEnable( false )
     * end )
     * 
     * // A basic stencil operation that limits rendering to the centre of the screen 
     */
    function SetStencilEnable(newState: boolean): void;
    
    /**
     * Sets the operation to be performed on the stencil buffer values if the compare function was not successful.
     * Note that this takes place '''before''' depth testing. 
     * @param failOperation  Fail operation function, see {{Enum|STENCILOPERATION}} 
     * @example
     * 
     * hook.Add( "PostDrawOpaqueRenderables", "Stencil Tutorial Example", function()
     * 
     * 	// Reset everything to known good
     * 	render.SetStencilWriteMask( 0xFF )
     * 	render.SetStencilTestMask( 0xFF )
     * 	render.SetStencilReferenceValue( 0 )
     * 	// render.SetStencilCompareFunction( STENCIL_ALWAYS )
     * 	render.SetStencilPassOperation( STENCIL_KEEP )
     * 	// render.SetStencilFailOperation( STENCIL_KEEP )
     * 	render.SetStencilZFailOperation( STENCIL_KEEP )
     * 	render.ClearStencil()
     * 
     * 	// Enable stencils
     * 	render.SetStencilEnable( true )
     * 	// Set the reference value to 1. This is what the compare function tests against
     * 	render.SetStencilReferenceValue( 1 )
     * 	// Only draw things if their pixels are currently 1. Currently this is nothing.
     * 	render.SetStencilCompareFunction( STENCIL_EQUAL )
     * 	// If something fails to draw to the screen, set the pixels it would have drawn to 1
     * 	// This includes if it's behind something.
     * 	render.SetStencilFailOperation( STENCIL_REPLACE )
     * 
     * 	// Draw our entities. They will not draw, because everything is 0
     * 	for _, ent in pairs( ents.FindByClass( "sent_stencil_test" ) ) do
     * 		ent:DrawModel()
     * 	end
     * 
     * 	// If we were to re-draw our entities, we'd see them, but otherwise they're invisible.
     * 	// If we flush the screen, we can show the "holes" they've left in the stencil buffer
     * 	render.ClearBuffersObeyStencil(0, 148, 133, 255, false);
     * 
     * 	// Let everything render normally again
     * 	render.SetStencilEnable( false )
     * end )
     * 
     * // This is one of the most useful things stencils can do - not render something to the screen and then allow you to draw with the shape it would have been if it ''had'' rendered.
     * 
     * You can see in the output screenshot that a partially obscured entity will still write its entire shape to the stencil buffer. 
     */
    function SetStencilFailOperation(failOperation: STENCILOPERATION): void;
    
    /**
     * Sets the operation to be performed on the stencil buffer values if the compare function was successful. 
     * @param passOperation  Pass operation function, see {{Enum|STENCILOPERATION}} 
     * @example
     * 
     * hook.Add( "PostDrawOpaqueRenderables", "Stencil Tutorial Example", function()
     * 
     * 	// Reset everything to known good
     * 	render.SetStencilWriteMask( 0xFF )
     * 	render.SetStencilTestMask( 0xFF )
     * 	render.SetStencilReferenceValue( 0 )
     * 	// render.SetStencilCompareFunction( STENCIL_ALWAYS )
     * 	// render.SetStencilPassOperation( STENCIL_KEEP )
     * 	render.SetStencilFailOperation( STENCIL_KEEP )
     * 	render.SetStencilZFailOperation( STENCIL_KEEP )
     * 	render.ClearStencil()
     * 
     * 	// Enable stencils
     * 	render.SetStencilEnable( true )
     * 	// Set the reference value to 1. This is what the compare function tests against
     * 	render.SetStencilReferenceValue( 1 )
     * 	// Only draw things if their pixels are NOT 1. Currently this is everything.
     * 	render.SetStencilCompareFunction( STENCIL_NOTEQUAL )
     * 	// If something draws to the screen, set the pixels it draws to 1
     * 	render.SetStencilPassOperation( STENCIL_REPLACE )
     * 
     * 	// Draw our entities. They will draw as normal
     * 	for _, ent in pairs( ents.FindByClass( "sent_stencil_test" ) ) do
     * 		ent:DrawModel()
     * 	end
     * 
     * 	// At this point, we cannot draw on top of anything that we have already drawn.
     * 	// So, if we flush the screen, our entities will still be there.
     * 	render.ClearBuffersObeyStencil(0, 148, 133, 255, false);
     * 
     * 	// Let everything render normally again
     * 	render.SetStencilEnable( false )
     * end )
     * 
     * // This uses the pass operation to blank out everything but what we just drew 
     */
    function SetStencilPassOperation(passOperation: STENCILOPERATION): void;
    
    /**
     * Sets the reference value which will be used for all stencil operations. This is an unsigned integer. 
     * @param referenceValue  Reference value. 
     */
    function SetStencilReferenceValue(referenceValue: number): void;
    
    /**
     * Sets the unsigned 8-bit test bitflag mask to be used for any stencil testing. 
     * @param mask  The mask bitflag. 
     * @example
     * 
     * hook.Add( "PostDrawOpaqueRenderables", "Stencil Tutorial Example", function()
     * 	//[[
     *         To understand this tutorial you need to already understand the basics
     *          of binary and bitwise operations.
     * 
     *         It would also help to understand hexadecimal notation, since Lua
     *          doesn't have a bitmask input, but I will include binary notation in
     *          comments to help.
     * 	//]]
     * 
     * 	// Reset everything to known good
     * 	// render.SetStencilWriteMask( 0xFF )
     * 	// render.SetStencilTestMask( 0xFF )
     * 	render.SetStencilReferenceValue( 0 )
     * 	// render.SetStencilCompareFunction( STENCIL_ALWAYS )
     * 	render.SetStencilPassOperation( STENCIL_KEEP )
     * 	// render.SetStencilFailOperation( STENCIL_KEEP )
     * 	render.SetStencilZFailOperation( STENCIL_KEEP )
     * 	render.ClearStencil()
     * 
     * 	// Enable stencils
     * 	render.SetStencilEnable( true )
     * 	// Force everything to fail
     * 	render.SetStencilCompareFunction( STENCIL_NEVER )
     * 	// Save all the things we don't draw
     * 	render.SetStencilFailOperation( STENCIL_REPLACE )
     * 
     * 	// Set the reference value to 00011100
     * 	render.SetStencilReferenceValue( 0x1C )
     * 	// Set the write mask to 01010101
     * 	// Any writes to the stencil buffer will be bitwise ANDed with this mask.
     * 	// With our current reference value, the result will be 00010100.
     * 	render.SetStencilWriteMask( 0x55 )
     * 
     * 	// Fail to draw our entities.
     * 	for _, ent in pairs( ents.FindByClass( "sent_stencil_test" ) ) do
     * 		ent:DrawModel()
     * 	end
     * 
     * 	// Set the test mask to 11110011.
     * 	// Any time a pixel is read out of the stencil buffer it will be bitwise ANDed with this mask.
     * 	render.SetStencilTestMask( 0xF3 )
     * 	// Set the reference value to 00011100 & 01010101 & 11110011
     * 	render.SetStencilReferenceValue( 0x10 )
     * 	// Pass if the masked buffer value matches the unmasked reference value
     * 	render.SetStencilCompareFunction( STENCIL_EQUAL )
     * 
     * 	// Draw our entities
     * 	render.ClearBuffersObeyStencil( 0, 148, 133, 255, false );
     * 
     * 	// Let everything render normally again
     * 	render.SetStencilEnable( false )
     * end )
     * 
     * // A brief demonstration of masks@example
     * 
     * hook.Add( "PostDrawOpaqueRenderables", "Stencil Tutorial Example", function()
     * 	//[[
     *         To understand this tutorial you need to already understand the basics
     *          of binary and bitwise operations.
     * 
     *         It would also help to understand hexadecimal notation, since Lua
     *          doesn't have a bitmask input, but I will include binary notation in
     *          comments to help.
     * 	//]]
     * 
     * 	// Reset everything to known good
     * 	// render.SetStencilWriteMask( 0xFF )
     * 	// render.SetStencilTestMask( 0xFF )
     * 	render.SetStencilReferenceValue( 0 )
     * 	// render.SetStencilCompareFunction( STENCIL_ALWAYS )
     * 	render.SetStencilPassOperation( STENCIL_KEEP )
     * 	// render.SetStencilFailOperation( STENCIL_KEEP )
     * 	render.SetStencilZFailOperation( STENCIL_KEEP )
     * 	render.ClearStencil()
     * 
     * 	// Enable stencils
     * 	render.SetStencilEnable( true )
     * 
     * 	// Only write to the upper 4 bits of the stencil buffer
     * 	render.SetStencilWriteMask( 0xF0 )
     * 	// Wipe the stencil buffer to be 0001111. This is not affected by the write mask.
     * 	render.ClearStencilBufferRectangle( 0, 0, ScrW(), ScrH(), 0x0F )
     * 
     * 	// Always fail
     * 	render.SetStencilCompareFunction( STENCIL_NEVER )
     * 	// Don't read any bits from the stencil buffer
     * 	render.SetStencilTestMask( 0x00 )
     * 	// When an operation fails, read the current value from the stencil buffer, add
     * 	//  one to it and then write it back to the buffer
     * 	// This is not affected by the test mask, but it is affected by the write mask
     * 	// This means we will read 00001111, then write 00010000.
     * 	// However, due to the write mask, this won't affect the last four bits already
     * 	//  in the buffer, resulting in 00011111.
     * 	render.SetStencilFailOperation( STENCIL_INCR )
     * 
     * 	// Add something interesting to the stencil buffer
     * 	for _, ent in pairs( ents.FindByClass( "sent_stencil_test" ) ) do
     * 		ent:DrawModel()
     * 	end
     * 
     * 	// Go back to reading the full value from the stencil buffer
     * 	render.SetStencilTestMask( 0xFF )
     * 	// Set the reference value to 00011111
     * 	render.SetStencilReferenceValue( 0x1F )
     * 	// Render the result
     * 	render.SetStencilCompareFunction( STENCIL_EQUAL )
     * 	render.ClearBuffersObeyStencil( 0, 148, 133, 255, false );
     * 
     * 	// Let everything render normally again
     * 	render.SetStencilEnable( false )
     * end )
     * 
     * // A somewhat more complicated mask example 
     */
    function SetStencilTestMask(mask: number): void;
    
    /**
     * Sets the unsigned 8-bit write bitflag mask to be used for any writes to the stencil buffer. 
     * @param mask  The mask bitflag. 
     * @example
     * 
     * hook.Add( "PostDrawOpaqueRenderables", "Stencil Tutorial Example", function()
     * 	//[[
     *         To understand this tutorial you need to already understand the basics
     *          of binary and bitwise operations.
     * 
     *         It would also help to understand hexadecimal notation, since Lua
     *          doesn't have a bitmask input, but I will include binary notation in
     *          comments to help.
     * 	//]]
     * 
     * 	// Reset everything to known good
     * 	// render.SetStencilWriteMask( 0xFF )
     * 	// render.SetStencilTestMask( 0xFF )
     * 	render.SetStencilReferenceValue( 0 )
     * 	// render.SetStencilCompareFunction( STENCIL_ALWAYS )
     * 	render.SetStencilPassOperation( STENCIL_KEEP )
     * 	// render.SetStencilFailOperation( STENCIL_KEEP )
     * 	render.SetStencilZFailOperation( STENCIL_KEEP )
     * 	render.ClearStencil()
     * 
     * 	// Enable stencils
     * 	render.SetStencilEnable( true )
     * 	// Force everything to fail
     * 	render.SetStencilCompareFunction( STENCIL_NEVER )
     * 	// Save all the things we don't draw
     * 	render.SetStencilFailOperation( STENCIL_REPLACE )
     * 
     * 	// Set the reference value to 00011100
     * 	render.SetStencilReferenceValue( 0x1C )
     * 	// Set the write mask to 01010101
     * 	// Any writes to the stencil buffer will be bitwise ANDed with this mask.
     * 	// With our current reference value, the result will be 00010100.
     * 	render.SetStencilWriteMask( 0x55 )
     * 
     * 	// Fail to draw our entities.
     * 	for _, ent in pairs( ents.FindByClass( "sent_stencil_test" ) ) do
     * 		ent:DrawModel()
     * 	end
     * 
     * 	// Set the test mask to 11110011.
     * 	// Any time a pixel is read out of the stencil buffer it will be bitwise ANDed with this mask.
     * 	render.SetStencilTestMask( 0xF3 )
     * 	// Set the reference value to 00011100 & 01010101 & 11110011
     * 	render.SetStencilReferenceValue( 0x10 )
     * 	// Pass if the masked buffer value matches the unmasked reference value
     * 	render.SetStencilCompareFunction( STENCIL_EQUAL )
     * 
     * 	// Draw our entities
     * 	render.ClearBuffersObeyStencil( 0, 148, 133, 255, false );
     * 
     * 	// Let everything render normally again
     * 	render.SetStencilEnable( false )
     * end )
     * 
     * // A brief demonstration of masks@example
     * 
     * hook.Add( "PostDrawOpaqueRenderables", "Stencil Tutorial Example", function()
     * 	//[[
     *         To understand this tutorial you need to already understand the basics
     *          of binary and bitwise operations.
     * 
     *         It would also help to understand hexadecimal notation, since Lua
     *          doesn't have a bitmask input, but I will include binary notation in
     *          comments to help.
     * 	//]]
     * 
     * 	// Reset everything to known good
     * 	// render.SetStencilWriteMask( 0xFF )
     * 	// render.SetStencilTestMask( 0xFF )
     * 	render.SetStencilReferenceValue( 0 )
     * 	// render.SetStencilCompareFunction( STENCIL_ALWAYS )
     * 	render.SetStencilPassOperation( STENCIL_KEEP )
     * 	// render.SetStencilFailOperation( STENCIL_KEEP )
     * 	render.SetStencilZFailOperation( STENCIL_KEEP )
     * 	render.ClearStencil()
     * 
     * 	// Enable stencils
     * 	render.SetStencilEnable( true )
     * 
     * 	// Only write to the upper 4 bits of the stencil buffer
     * 	render.SetStencilWriteMask( 0xF0 )
     * 	// Wipe the stencil buffer to be 0001111. This is not affected by the write mask.
     * 	render.ClearStencilBufferRectangle( 0, 0, ScrW(), ScrH(), 0x0F )
     * 
     * 	// Always fail
     * 	render.SetStencilCompareFunction( STENCIL_NEVER )
     * 	// Don't read any bits from the stencil buffer
     * 	render.SetStencilTestMask( 0x00 )
     * 	// When an operation fails, read the current value from the stencil buffer, add
     * 	//  one to it and then write it back to the buffer
     * 	// This is not affected by the test mask, but it is affected by the write mask
     * 	// This means we will read 00001111, then write 00010000.
     * 	// However, due to the write mask, this won't affect the last four bits already
     * 	//  in the buffer, resulting in 00011111.
     * 	render.SetStencilFailOperation( STENCIL_INCR )
     * 
     * 	// Add something interesting to the stencil buffer
     * 	for _, ent in pairs( ents.FindByClass( "sent_stencil_test" ) ) do
     * 		ent:DrawModel()
     * 	end
     * 
     * 	// Go back to reading the full value from the stencil buffer
     * 	render.SetStencilTestMask( 0xFF )
     * 	// Set the reference value to 00011111
     * 	render.SetStencilReferenceValue( 0x1F )
     * 	// Render the result
     * 	render.SetStencilCompareFunction( STENCIL_EQUAL )
     * 	render.ClearBuffersObeyStencil( 0, 148, 133, 255, false );
     * 
     * 	// Let everything render normally again
     * 	render.SetStencilEnable( false )
     * end )
     * 
     * // A somewhat more complicated mask example 
     */
    function SetStencilWriteMask(mask: number): void;
    
    /**
     * Sets the operation to be performed on the stencil buffer values if the stencil test is passed but the depth buffer test fails. 
     * @param zFailOperation  Z fail operation function, see {{Enum|STENCILOPERATION}} 
     * @example
     * 
     * hook.Add( "PostDrawOpaqueRenderables", "Stencil Tutorial Example", function()
     * 
     * 	// Reset everything to known good
     * 	render.SetStencilWriteMask( 0xFF )
     * 	render.SetStencilTestMask( 0xFF )
     * 	render.SetStencilReferenceValue( 0 )
     * 	// render.SetStencilCompareFunction( STENCIL_ALWAYS )
     * 	render.SetStencilPassOperation( STENCIL_KEEP )
     * 	render.SetStencilFailOperation( STENCIL_KEEP )
     * 	// render.SetStencilZFailOperation( STENCIL_KEEP )
     * 	render.ClearStencil()
     * 
     * 	// Enable stencils
     * 	render.SetStencilEnable( true )
     * 	// Set the reference value to 1. This is what the compare function tests against
     * 	render.SetStencilReferenceValue( 1 )
     * 	// Always draw everything
     * 	render.SetStencilCompareFunction( STENCIL_ALWAYS )
     * 	// If something would draw to the screen but is behind something, set the pixels it draws to 1
     * 	render.SetStencilZFailOperation( STENCIL_REPLACE )
     * 
     * 	// Draw our entities. They will draw as normal
     * 	for _, ent in pairs( ents.FindByClass( "sent_stencil_test" ) ) do
     * 		ent:DrawModel()
     * 	end
     * 
     * 	// Now, only draw things that have their pixels set to 1. This is the hidden parts of the stencil tests.
     * 	render.SetStencilCompareFunction( STENCIL_EQUAL )
     * 	// Flush the screen. This will draw teal over all hidden sections of the stencil tests
     * 	render.ClearBuffersObeyStencil(0, 148, 133, 255, false);
     * 
     * 	// Let everything render normally again
     * 	render.SetStencilEnable( false )
     * end )
     * 
     * // This shows how to reveal hidden sections of entities, wallhack style 
     */
    function SetStencilZFailOperation(zFailOperation: STENCILOPERATION): void;
    
    /**
     * @param vec 
     */
    function SetToneMappingScaleLinear(vec: Vector): void;
    
    /**
     * Changes the view port position and size.
     * 
     * **Note:**
     * >This function will override values of {{GlobalFunction|ScrW}} and {{GlobalFunction|ScrH}} with the ones you set.
     * 
     * **Bug [#1424](https://github.com/Facepunch/garrysmod-issues/issues/1424):**
     * >Arguments are clamped to the client's screen bounds, disallowing render targets bigger than the screen. {{LibraryFunction|render|PushRenderTarget}} doesn't suffer from this. 
     * @param x  X origin of the view port. 
     * @param y  Y origin of the view port. 
     * @param w  Width of the view port. 
     * @param h  Height of the view port. 
     * @example
     * 
     * local oldW, oldH = ScrW(), ScrH()
     * local oldRT = render.GetRenderTarget()
     * 
     * render.SetRenderTarget(RTName)
     * render.Clear(0,0,0,255)
     * render.SetViewPort(0,0,32,32)
     * 	render.RenderView(CamData)
     * 	render.SetRenderTarget(oldRT)
     * render.SetViewPort(0,0,oldW,oldH)
     * 
     * // Renders a screen with a dimension of 32 X 32 and resets the render system to normal. 
     */
    function SetViewPort(x: number, y: number, w: number, h: number): void;
    
    /**
     * @param enable 
     */
    function SetWriteDepthToDestAlpha(enable: boolean): void;
    
    /**
     * Swaps the frame buffers/cycles the frame. In other words, this updates the screen.
     * 
     * If you take a really long time during a single frame render, it is a good idea to use this and let the user know that the game isn't stuck. 
     * @example
     * 
     * // Restore RT
     * render.SetRenderTarget( OldRT )
     * 
     * // Render our result buffer to the screen
     * matFSB:SetFloat( "$alpha", 1 )
     * matFSB:SetTexture( "$basetexture", texFSB )
     * 
     * render.SetMaterial( matFSB )
     * render.DrawScreenQuad()
     * 
     * cam.Start2D()
     * 	local add = ( i / ( math.pi*2 ) ) * ( 1 / passes )
     * 	local percent = string.format( "%.1f", ( mul - ( 1 / passes ) + add ) * 100 )
     * 	draw.DrawText( percent .. "%", "GModWorldtip", view.w - 100, view.h - 100, Color( 0, 0, 0, 255 ), TEXT_ALIGN_CENTER )
     * 	draw.DrawText( percent .. "%", "GModWorldtip", view.w - 101, view.h - 101, Color( 255, 255, 255, 255 ), TEXT_ALIGN_CENTER )
     * cam.End2D()
     * 
     * render.Spin()
     * 
     * // Code from [https://github.com/garrynewman/garrysmod/blob/master/garrysmod/lua/postprocess/super_dof.lua#L219-L236 Super DOF]; Push the current progress of rendering onto the screen and display a percentage of completion near the bottom right. 
     */
    function Spin(): void;
    
    /**
     * Start a new beam draw operation.
     * 
     * {{RenderingContext|Function|3D}} 
     * @param segmentCount  Amount of beam segments that are about to be drawn. 
     */
    function StartBeam(segmentCount: number): void;
    
    /**
     * Returns whether the game supports HDR, i.e. if the DirectX level is higher than or equal to 8. 
     * @returns supportsHDR 
     */
    function SupportsHDR(): boolean;
    
    /**
     * Returns if the current settings and the system allow the usage of pixel shaders 1.4. 
     * @returns Whether Pixel Shaders 1.4 are supported or not. 
     */
    function SupportsPixelShaders_1_4(): boolean;
    
    /**
     * Returns if the current settings and the system allow the usage of pixel shaders 2.0. 
     * @returns Whether Pixel Shaders 2.0 are supported or not. 
     */
    function SupportsPixelShaders_2_0(): boolean;
    
    /**
     * Returns if the current settings and the system allow the usage of vertex shaders 2.0. 
     * @returns Whether Vertex Shaders 2.0 are supported or not. 
     */
    function SupportsVertexShaders_2_0(): boolean;
    
    /**
     * Suppresses or enables any engine lighting for any upcoming render operation. 
     * @param suppressLighting  True to suppress false to enable. 
     */
    function SuppressEngineLighting(suppressLighting: boolean): void;
    
    /**
     * Enables HDR tone mapping which influences the brightness. 
     */
    function TurnOnToneMapping(): void;
    
    /**
     * Updates the texture returned by {{LibraryFunction|render|GetFullScreenDepthTexture}}.
     * 
     * Silently fails if {{LibraryFunction|render|SupportsPixelShaders_2_0}} returns false. 
     */
    function UpdateFullScreenDepthTexture(): void;
    
    /**
     * Updates the power of two texture. 
     * @returns Returns {{LibraryFunction|render|GetPowerOfTwoTexture}}. 
     */
    function UpdatePowerOfTwoTexture(): ITexture;
    
    /**
     * Pretty much alias of {{LibraryFunction|render|UpdatePowerOfTwoTexture}} but does not return the texture. 
     */
    function UpdateRefractTexture(): void;
    
    /**
     * Copies the entire screen to the screen effect texture, which can be acquired via {{LibraryFunction|render|GetScreenEffectTexture}}. This function is mainly intended to be used in {{HookFunction|GM|RenderScreenspaceEffects}} 
     */
    function UpdateScreenEffectTexture(): void;
}

/**
 * The resource library is used to control what files are sent to clients who join a server, this includes models, materials, sounds, text files but not Lua files. 
 */
declare namespace resource {
    /**
     * Adds the specified and all related files to the files the client should download.
     * 
     * For convenience, this function will automatically add any other files that are related to the selected one, and throw an error if it can't find them. For example, a .vmt file will automatically add the .vtf with the same name, and a .mdl file will automatically add all .vvd, .ani, .dx80.vtx, .dx90.vtx, .sw.vtx, .phy and .jpg files with the same name, with a separate error for each missing file. If you do not want it to do this, use [[resource/AddSingleFile|resource.AddSingleFile]].
     * 
     * **Note:**
     * >There's a 8192 downloadable file limit. If you need more, consider using Workshop addons - {{LibraryFunction|resource|AddWorkshop}}. You should also consider the fact that you have way too many downloads. This limit is shared among all resource.Add functions.
     * 
     * **Note:**
     * >Running this function using a path relative to the main garrysmod/ folder will not work for files in addons and gamemodes. Instead, the files must be added relative to their respective content folders. For example, a sound file from an addon would use the path "sound/[FILENAME_AND_EXTENSION]," despite the file being located in "addons/[ADDON_NAME]/sound/[FILENAME_AND_EXTENSION]" 
     * @param path  Virtual path of the file to be added, relative to garrysmod/. Do not add .bz2 to the filepath. Do not put gamemodes/<gamemodename>/content/ or addons/<addonname>/ into the path. 
     * @example
     * 
     * resource.AddFile( "materials/my/material.vmt" ) // Automatically adds materials/my/material.vtf
     * resource.AddFile( "models/my/model.mdl" ) // Automatically adds models/my/model.vtx and the rest
     * resource.AddFile( "sound/my/sound.wav" ) // Be careful, there's no S in the sound.
     * 
     * // Example of usage. 
     */
    function AddFile(path: string): void;
    
    /**
     * Adds the specified file to the files the client should download.
     * 
     * **Note:**
     * >There's a 8192 downloadable file limit. If you need more, consider using Workshop addons - {{LibraryFunction|resource|AddWorkshop}}. You should also consider the fact that you have way too many downloads. This limit is shared among all resource.Add functions. 
     * @param path  Path of the file to be added, relative to garrysmod/ 
     */
    function AddSingleFile(path: string): void;
    
    /**
     * Adds a workshop addon for the client to download before entering the server.
     * 
     * Having the raw files from a workshop item does not count as having already downloaded it.
     * 
     * So players who previously downloaded a map through Fast Download will have to re-download it if you use the workshop.
     * 
     * You should try to only add addons that have custom content ( models, sounds, etc ).
     * 
     * Gamemodes that are [[Gamemode_Creation#Gamemode_Text_File|workshop enabled]] are automatically added to this list - so there's no need to add them.
     * 
     * The server's current map is also automatically added, if it is loaded from a workshop addon.
     * 
     * {{Warning|This will not "install" the addon on your server, see [[Workshop for Dedicated Servers]] for installing Steam Workshop addons onto your servers}} 
     * @param workshopid  The workshop id of the file. This cannot be a collection. 
     * @example
     * 
     * resource.AddWorkshop( "104606562" )
     * 
     * // Adds the Achievement Viewer addon (workshop id 104606562).
     * 
     * Any clients that join will download this addon if they haven't previously downloaded it from the workshop or from the server (via the workshop).
     * 
     * You get the ID from the URL of the workshop addon.
     * 
     * For example, here's the URL of the Achievement Viewer addon's page:
     * 
     * http://steamcommunity.com/sharedfiles/filedetails/?id=104606562
     * 
     * The ID is 104606562. 
     */
    function AddWorkshop(workshopid: string): void;
}

/**
 * A very versatile text display element that's used to power the default chat and console.
 * 
 * Rich Text panels allows multicolored, highlight-able, and interactive text using individual text segment markup (segments are defined by the {{ClassFunction|Panel|AppendText}} method). 
 * @example
 * 
 * // Window frame for containing text
 * local frame = vgui.Create("DFrame")
 * frame:SetSize(200, 150)
 * frame:Center()
 * frame:MakePopup()
 * 
 * // Rich Text panel
 * local richtext = vgui.Create( "RichText", frame )
 * richtext:Dock( FILL )
 * 
 * // Text segment #1 (grayish color)
 * richtext:InsertColorChange(192, 192, 192, 255)
 * richtext:AppendText("This \nRichText \nis \n")
 * 
 * // Text segment #2 (light yellow)
 * richtext:InsertColorChange(255, 255, 224, 255)
 * richtext:AppendText("AWESOME\n\n")
 * 
 * // Text segment #3 (red ESRB notice localized string)
 * richtext:InsertColorChange(255, 64, 64, 255)
 * richtext:AppendText("#ServerBrowser_ESRBNotice")
 * 
 * // Creates a Rich Text frame with 3 text segments. 
 */
declare class RichText extends Panel {
    /**
     * Appends text to a {{Type|RichText}} element. This does not automatically add a new line.
     * 
     * [[Category:RichText]] 
     * @param txt  The text to append (add on). 
     */
    public AppendText(txt: string): void;
    
    /**
     * Appends text to a {{Type|RichText}} element. This does not automatically add a new line.
     * 
     * [[Category:RichText]] 
     * @param txt  The text to append (add on). 
     */
    public AppendText(txt: string): void;
    
    /**
     * Returns the number of lines in a {{Type|RichText}}. You must wait a couple frames before calling this after using {{ClassFunction|Panel|AppendText}} or {{ClassFunction|Panel|SetText}}, otherwise it will return the number of text lines before the text change.
     * 
     * **Note:**
     * >Even though this function can be called on any panel, it will only work with {{Type|RichText}}
     * 
     * [[Category:RichText]] 
     * @returns The number of lines. 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(200, 224)
     * TextFrame:Center()
     * TextFrame:SetTitle("Generic Frame")
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Throw some text in the panel
     * richtext:SetText("This is a block of text demonstrating how line wrapping and panel size relates to the number of lines shown inside of a RichText panel.")
     * 
     * // Keep track of PerformLayout calls
     * richtext.layoutCount = 0
     * 
     * // Custom function for this example
     * function richtext:NumLinesExample()
     * 	print("PerformLayout called "..self.layoutCount.." times: "..richtext:GetNumLines().." line(s) returned")	
     * end
     * 
     * // Print # of lines before any layouts
     * richtext:NumLinesExample()
     * 
     * // Render update
     * function richtext:PerformLayout()
     * 
     * 	self.layoutCount = self.layoutCount + 1
     * 	self:NumLinesExample()	// Print current # of lines
     * 
     * end
     * 
     * // Creates a rich text panel with a block of text and prints out the number of text lines before and after ''PerformLayout'' is called. 
     */
    public GetNumLines(): number;
    
    /**
     * Returns the number of lines in a {{Type|RichText}}. You must wait a couple frames before calling this after using {{ClassFunction|Panel|AppendText}} or {{ClassFunction|Panel|SetText}}, otherwise it will return the number of text lines before the text change.
     * 
     * **Note:**
     * >Even though this function can be called on any panel, it will only work with {{Type|RichText}}
     * 
     * [[Category:RichText]] 
     * @returns The number of lines. 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(200, 224)
     * TextFrame:Center()
     * TextFrame:SetTitle("Generic Frame")
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Throw some text in the panel
     * richtext:SetText("This is a block of text demonstrating how line wrapping and panel size relates to the number of lines shown inside of a RichText panel.")
     * 
     * // Keep track of PerformLayout calls
     * richtext.layoutCount = 0
     * 
     * // Custom function for this example
     * function richtext:NumLinesExample()
     * 	print("PerformLayout called "..self.layoutCount.." times: "..richtext:GetNumLines().." line(s) returned")	
     * end
     * 
     * // Print # of lines before any layouts
     * richtext:NumLinesExample()
     * 
     * // Render update
     * function richtext:PerformLayout()
     * 
     * 	self.layoutCount = self.layoutCount + 1
     * 	self:NumLinesExample()	// Print current # of lines
     * 
     * end
     * 
     * // Creates a rich text panel with a block of text and prints out the number of text lines before and after ''PerformLayout'' is called. 
     */
    public GetNumLines(): number;
    
    /**
     * Causes a {{Type|RichText}} element to scroll to the bottom of its text.
     * 
     * [[Category:RichText]] 
     */
    public GotoTextEnd(): void;
    
    /**
     * Causes a {{Type|RichText}} element to scroll to the bottom of its text.
     * 
     * [[Category:RichText]] 
     */
    public GotoTextEnd(): void;
    
    /**
     * Causes a {{Type|RichText}} element to scroll to the top of its text.
     * 
     * **Bug [#2239](https://github.com/Facepunch/garrysmod-issues/issues/2239):**
     * >This does not work on the same frame as {{ClassFunction|Panel|SetText}}.
     * 
     * [[Category:RichText]] 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(250, 200)
     * TextFrame:Center()
     * TextFrame:SetTitle("#ServerBrowser_ServerWarningTitle")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Yellow colored localized text about player capacity
     * richtext:InsertColorChange(255, 255, 192, 255)
     * richtext:AppendText("#ServerBrowser_ServerWarning_MaxPlayers")
     * 
     * // Create a button that moves the text back to the start
     * local topbutton = vgui.Create("DButton", richtext)
     * topbutton:SetSize(60, 20)
     * topbutton:SetPos(160, 146)
     * topbutton:SetText("Back to Top")
     * 
     * // When clicked, go to the start of the text
     * topbutton.DoClick = function() richtext:GotoTextStart()	end
     * 
     * // Apply background color and font
     * function richtext:PerformLayout()
     * 	
     * 	self:SetFontInternal("Trebuchet18")
     * 	self:SetBGColor(Color(64, 64, 84))
     * 	
     * end
     * 
     * // Creates a RichText panel with a "Back to Top" button which scrolls the text to the start. 
     */
    public GotoTextStart(): void;
    
    /**
     * Causes a {{Type|RichText}} element to scroll to the top of its text.
     * 
     * **Bug [#2239](https://github.com/Facepunch/garrysmod-issues/issues/2239):**
     * >This does not work on the same frame as {{ClassFunction|Panel|SetText}}.
     * 
     * [[Category:RichText]] 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(250, 200)
     * TextFrame:Center()
     * TextFrame:SetTitle("#ServerBrowser_ServerWarningTitle")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Yellow colored localized text about player capacity
     * richtext:InsertColorChange(255, 255, 192, 255)
     * richtext:AppendText("#ServerBrowser_ServerWarning_MaxPlayers")
     * 
     * // Create a button that moves the text back to the start
     * local topbutton = vgui.Create("DButton", richtext)
     * topbutton:SetSize(60, 20)
     * topbutton:SetPos(160, 146)
     * topbutton:SetText("Back to Top")
     * 
     * // When clicked, go to the start of the text
     * topbutton.DoClick = function() richtext:GotoTextStart()	end
     * 
     * // Apply background color and font
     * function richtext:PerformLayout()
     * 	
     * 	self:SetFontInternal("Trebuchet18")
     * 	self:SetBGColor(Color(64, 64, 84))
     * 	
     * end
     * 
     * // Creates a RichText panel with a "Back to Top" button which scrolls the text to the start. 
     */
    public GotoTextStart(): void;
    
    /**
     * Marks the end of a clickable text segment in a {{Type|RichText}} element, started with {{ClassFunction|Panel|InsertClickableTextStart}}.
     * 
     * [[Category:RichText]] 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(250, 150)
     * TextFrame:Center()
     * TextFrame:SetTitle("RichText")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // First segment
     * richtext:InsertColorChange(255, 255, 255, 255)
     * richtext:AppendText("This is a Rich Text panel — a panel used in Source MP's default chat box and developer console.\n\nSee the ")
     * 
     * // Second segment
     * richtext:InsertColorChange(192, 192, 255, 255)
     * richtext:InsertClickableTextStart("OpenWiki")	// Make incoming text fire the "OpenWiki" value when clicked
     * richtext:AppendText("Garry's Mod Wiki")
     * richtext:InsertClickableTextEnd()	// End clickable text here
     * 
     * // Third segment
     * richtext:InsertColorChange(255, 255, 255, 255)
     * richtext:AppendText(" for information on how to use a Rich Text panel.")
     * 
     * // Background color
     * function richtext:PerformLayout() self:SetBGColor(Color(32, 32, 46)) end
     * 
     * // Handle any commands we get from the panel
     * function richtext:ActionSignal(signalName, signalValue)
     * 
     * 	// Some clickable text was clicked
     * 	if(signalName == "TextClicked") then
     * 	
     * 		// Open the wiki
     * 		if(signalValue == "OpenWiki") then
     * 		
     * 			<nowiki>gui.OpenURL("http://wiki.garrysmod.com/page/Category:RichText")</nowiki>
     * 		
     * 		end
     * 	
     * 	end
     * 
     * end
     * 
     * // Creates a panel with some information on RichText panels along with a click-able link to the {{Type|RichText}} page. 
     */
    public InsertClickableTextEnd(): void;
    
    /**
     * Marks the end of a clickable text segment in a {{Type|RichText}} element, started with {{ClassFunction|Panel|InsertClickableTextStart}}.
     * 
     * [[Category:RichText]] 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(250, 150)
     * TextFrame:Center()
     * TextFrame:SetTitle("RichText")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // First segment
     * richtext:InsertColorChange(255, 255, 255, 255)
     * richtext:AppendText("This is a Rich Text panel — a panel used in Source MP's default chat box and developer console.\n\nSee the ")
     * 
     * // Second segment
     * richtext:InsertColorChange(192, 192, 255, 255)
     * richtext:InsertClickableTextStart("OpenWiki")	// Make incoming text fire the "OpenWiki" value when clicked
     * richtext:AppendText("Garry's Mod Wiki")
     * richtext:InsertClickableTextEnd()	// End clickable text here
     * 
     * // Third segment
     * richtext:InsertColorChange(255, 255, 255, 255)
     * richtext:AppendText(" for information on how to use a Rich Text panel.")
     * 
     * // Background color
     * function richtext:PerformLayout() self:SetBGColor(Color(32, 32, 46)) end
     * 
     * // Handle any commands we get from the panel
     * function richtext:ActionSignal(signalName, signalValue)
     * 
     * 	// Some clickable text was clicked
     * 	if(signalName == "TextClicked") then
     * 	
     * 		// Open the wiki
     * 		if(signalValue == "OpenWiki") then
     * 		
     * 			<nowiki>gui.OpenURL("http://wiki.garrysmod.com/page/Category:RichText")</nowiki>
     * 		
     * 		end
     * 	
     * 	end
     * 
     * end
     * 
     * // Creates a panel with some information on RichText panels along with a click-able link to the {{Type|RichText}} page. 
     */
    public InsertClickableTextEnd(): void;
    
    /**
     * Starts the insertion of clickable text for a {{Type|RichText}} element. Any text appended with {{ClassFunction|Panel|AppendText}} between this call and {{ClassFunction|Panel|InsertClickableTextEnd}} will become clickable text.
     * 
     * The hook {{HookFunction|PANEL|ActionSignal}} is called when the text is clicked, with "TextClicked" as the signal name and ''signalValue'' as the signal value.
     * 
     * **Note:**
     * >The clickable text is a separate Derma panel which will not inherit the current font from the ''RichText''.
     * 
     * [[Category:RichText]] 
     * @param signalValue  The text passed as the action signal's value. 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(250, 150)
     * TextFrame:Center()
     * TextFrame:SetTitle("RichText")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // First segment
     * richtext:InsertColorChange(255, 255, 255, 255)
     * richtext:AppendText("This is a Rich Text panel — a panel used in Source MP's default chat box and developer console.\n\nSee the ")
     * 
     * // Second segment
     * richtext:InsertColorChange(192, 192, 255, 255)
     * richtext:InsertClickableTextStart("OpenWiki")	// Make incoming text fire the "OpenWiki" value when clicked
     * richtext:AppendText("Garry's Mod Wiki")
     * richtext:InsertClickableTextEnd()	// End clickable text here
     * 
     * // Third segment
     * richtext:InsertColorChange(255, 255, 255, 255)
     * richtext:AppendText(" for information on how to use a Rich Text panel.")
     * 
     * // Background color
     * function richtext:PerformLayout() self:SetBGColor(Color(32, 32, 46)) end
     * 
     * // Handle any commands we get from the panel
     * function richtext:ActionSignal(signalName, signalValue)
     * 
     * 	// Some clickable text was clicked
     * 	if (signalName == "TextClicked") then
     * 	
     * 		// Open the wiki
     * 		if (signalValue == "OpenWiki") then
     * 		
     * 			<nowiki>gui.OpenURL("http://wiki.garrysmod.com/page/Category:RichText")</nowiki>
     * 		
     * 		end
     * 	
     * 	end
     * 
     * end
     * 
     * // Creates a panel with some information on Rich Text panels along with a click-able link to the {{Type|RichText}} page. 
     */
    public InsertClickableTextStart(signalValue: string): void;
    
    /**
     * Starts the insertion of clickable text for a {{Type|RichText}} element. Any text appended with {{ClassFunction|Panel|AppendText}} between this call and {{ClassFunction|Panel|InsertClickableTextEnd}} will become clickable text.
     * 
     * The hook {{HookFunction|PANEL|ActionSignal}} is called when the text is clicked, with "TextClicked" as the signal name and ''signalValue'' as the signal value.
     * 
     * **Note:**
     * >The clickable text is a separate Derma panel which will not inherit the current font from the ''RichText''.
     * 
     * [[Category:RichText]] 
     * @param signalValue  The text passed as the action signal's value. 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(250, 150)
     * TextFrame:Center()
     * TextFrame:SetTitle("RichText")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // First segment
     * richtext:InsertColorChange(255, 255, 255, 255)
     * richtext:AppendText("This is a Rich Text panel — a panel used in Source MP's default chat box and developer console.\n\nSee the ")
     * 
     * // Second segment
     * richtext:InsertColorChange(192, 192, 255, 255)
     * richtext:InsertClickableTextStart("OpenWiki")	// Make incoming text fire the "OpenWiki" value when clicked
     * richtext:AppendText("Garry's Mod Wiki")
     * richtext:InsertClickableTextEnd()	// End clickable text here
     * 
     * // Third segment
     * richtext:InsertColorChange(255, 255, 255, 255)
     * richtext:AppendText(" for information on how to use a Rich Text panel.")
     * 
     * // Background color
     * function richtext:PerformLayout() self:SetBGColor(Color(32, 32, 46)) end
     * 
     * // Handle any commands we get from the panel
     * function richtext:ActionSignal(signalName, signalValue)
     * 
     * 	// Some clickable text was clicked
     * 	if (signalName == "TextClicked") then
     * 	
     * 		// Open the wiki
     * 		if (signalValue == "OpenWiki") then
     * 		
     * 			<nowiki>gui.OpenURL("http://wiki.garrysmod.com/page/Category:RichText")</nowiki>
     * 		
     * 		end
     * 	
     * 	end
     * 
     * end
     * 
     * // Creates a panel with some information on Rich Text panels along with a click-able link to the {{Type|RichText}} page. 
     */
    public InsertClickableTextStart(signalValue: string): void;
    
    /**
     * Inserts a color change in a {{Type|RichText}} element, which affects the color of all text added with {{ClassFunction|Panel|AppendText}} until another color change is applied.
     * [[Category:RichText]] 
     * @param r  The red value (0 - 255). 
     * @param g  The green value (0 - 255). 
     * @param b  The blue value (0 - 255). 
     * @param a  The alpha value (0 - 255). 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(200, 200)
     * TextFrame:Center()
     * TextFrame:SetTitle("Colored text")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * richtext:SetVerticalScrollbarEnabled(false)
     * 
     * // Text blocks
     * richtext:InsertColorChange(255, 255, 192, 255)
     * richtext:AppendText("This is an example of ")
     * 
     * richtext:InsertColorChange(0, 255, 0, 255)
     * richtext:AppendText("color coding ")
     * 
     * richtext:InsertColorChange(255, 255, 192, 255)
     * richtext:AppendText("different segments of text throughout a ")
     * 
     * richtext:InsertColorChange(255, 200, 0, 255)
     * richtext:AppendText("Rich Text panel.\n\n")
     * 
     * richtext:InsertColorChange(64, 0, 255, 255)
     * richtext:AppendText("Here is another line of text shown in the color ")
     * 
     * richtext:InsertColorChange(128, 0, 255, 255)
     * richtext:AppendText("purple.")
     * 
     * // When the panel is ready for layout, apply font and background color
     * function richtext:PerformLayout()
     * 	
     * 	self:SetFontInternal("Trebuchet18")
     * 	self:SetBGColor(Color(0, 16, 32))
     * 	
     * end
     * 
     * // Creates a RichText panel with color coding on certain segments of text.@example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(300, 200)
     * TextFrame:Center()
     * TextFrame:SetTitle("Randomly Colored Words")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * richtext:SetVerticalScrollbarEnabled(false)
     * 
     * local txt = "Here's a fun example involving word by word text coloring. "..
     * "Each word is separated by a space, colored, and appended to the Rich Text panel individually. "..
     * "The colors are randomly generated shades of red, orange, yellow, and pink."
     * 
     * local txt_tbl = string.Explode(" ", txt, false)
     * 
     * for _, word in pairs(txt_tbl) do
     * 
     * 	richtext:InsertColorChange(255, math.random(0, 255), math.random(0, 255), 255)
     * 	richtext:AppendText(word.." ")
     * 
     * end
     * 
     * function richtext:PerformLayout()
     * 	
     * 	self:SetFontInternal("GModNotify")
     * 	self:SetBGColor(Color(32, 16, 0))
     * 	
     * end
     * 
     * // Word by word coloring using {{LibraryFunction|string|Explode}} and random colors. 
     */
    public InsertColorChange(r: number, g: number, b: number, a: number): void;
    
    /**
     * Inserts a color change in a {{Type|RichText}} element, which affects the color of all text added with {{ClassFunction|Panel|AppendText}} until another color change is applied.
     * [[Category:RichText]] 
     * @param r  The red value (0 - 255). 
     * @param g  The green value (0 - 255). 
     * @param b  The blue value (0 - 255). 
     * @param a  The alpha value (0 - 255). 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(200, 200)
     * TextFrame:Center()
     * TextFrame:SetTitle("Colored text")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * richtext:SetVerticalScrollbarEnabled(false)
     * 
     * // Text blocks
     * richtext:InsertColorChange(255, 255, 192, 255)
     * richtext:AppendText("This is an example of ")
     * 
     * richtext:InsertColorChange(0, 255, 0, 255)
     * richtext:AppendText("color coding ")
     * 
     * richtext:InsertColorChange(255, 255, 192, 255)
     * richtext:AppendText("different segments of text throughout a ")
     * 
     * richtext:InsertColorChange(255, 200, 0, 255)
     * richtext:AppendText("Rich Text panel.\n\n")
     * 
     * richtext:InsertColorChange(64, 0, 255, 255)
     * richtext:AppendText("Here is another line of text shown in the color ")
     * 
     * richtext:InsertColorChange(128, 0, 255, 255)
     * richtext:AppendText("purple.")
     * 
     * // When the panel is ready for layout, apply font and background color
     * function richtext:PerformLayout()
     * 	
     * 	self:SetFontInternal("Trebuchet18")
     * 	self:SetBGColor(Color(0, 16, 32))
     * 	
     * end
     * 
     * // Creates a RichText panel with color coding on certain segments of text.@example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(300, 200)
     * TextFrame:Center()
     * TextFrame:SetTitle("Randomly Colored Words")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * richtext:SetVerticalScrollbarEnabled(false)
     * 
     * local txt = "Here's a fun example involving word by word text coloring. "..
     * "Each word is separated by a space, colored, and appended to the Rich Text panel individually. "..
     * "The colors are randomly generated shades of red, orange, yellow, and pink."
     * 
     * local txt_tbl = string.Explode(" ", txt, false)
     * 
     * for _, word in pairs(txt_tbl) do
     * 
     * 	richtext:InsertColorChange(255, math.random(0, 255), math.random(0, 255), 255)
     * 	richtext:AppendText(word.." ")
     * 
     * end
     * 
     * function richtext:PerformLayout()
     * 	
     * 	self:SetFontInternal("GModNotify")
     * 	self:SetBGColor(Color(32, 16, 0))
     * 	
     * end
     * 
     * // Word by word coloring using {{LibraryFunction|string|Explode}} and random colors. 
     */
    public InsertColorChange(r: number, g: number, b: number, a: number): void;
    
    /**
     * Begins a text fade for a {{Type|RichText}} element where the last appended text segment is fully faded out after a specific amount of time, at a specific speed.
     * 
     * The alpha of the text at any given time is determined by the text's base alpha * ((''sustain'' - {{GlobalFunction|CurTime}}) / ''length'') where {{GlobalFunction|CurTime}} is added to ''sustain'' when this method is called.
     * 
     * [[Category:RichText]] 
     * @param sustain  The number of seconds the text remains visible. 
     * @param length  The number of seconds it takes the text to fade out.
     * 
     * If set '''lower''' than ''sustain'', the text will not begin fading out until (''sustain'' - ''length'') seconds have passed.
     * 
     * If set '''higher''' than ''sustain'', the text will begin fading out immediately at a fraction of the base alpha.
     * 
     * If set to '''-1''', the text doesn't fade out. 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(200, 200)
     * TextFrame:Center()
     * TextFrame:SetTitle("Fading Text")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Sample text
     * richtext:SetText("This is an example of a Rich Text panel using a fade-out with:\n\n6 seconds of sustain\n\n2 second fade-out length")
     * 	
     * // When the panel is ready for layout, begin the fade
     * function richtext:PerformLayout()
     * 	
     * 	self:SetFontInternal("Trebuchet18")
     * 	self:SetBGColor(Color(64, 64, 92))
     * 	
     * 	// Wait 6 seconds, then fade out in 2 seconds
     * 	self:InsertFade(6, 2)
     * 	
     * end
     * 
     * // Creates a Rich Text panel that sustains visibility for 6 seconds with a 2 second long fade-out.@example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(350, 100)
     * TextFrame:Center()
     * TextFrame:SetTitle("Kleiner says:")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)	
     * 
     * // Red text
     * richtext:InsertColorChange(200, 60, 32, 255)
     * richtext:SetVerticalScrollbarEnabled(false)
     * 	
     * local words = {"There's", "only", "one", "hedy..."}
     * local delay = 0
     * 
     * // Display each word in half second interval
     * for w, txt in pairs(words) do
     * 
     * 	if(w == 1) then delay = 0.2
     * 	else delay = (w-1)*0.45 end
     * 
     * 	timer.Simple(delay, function()
     * 	
     * 		richtext:AppendText(txt.." ")
     * 		richtext:InsertFade(2, 1)	// Sustain for 2 seconds while fading out after 1 second
     * 		
     * 		richtext:SetBGColor(Color(0, 0, 0))
     * 		richtext:SetFontInternal("DermaLarge")
     * 	
     * 	end)
     * 
     * end
     * 
     * // Kleiner read along
     * LocalPlayer():EmitSound("vo/k_lab2/kl_onehedy.wav")
     * 
     * // Create a Rich Text panel where Dr. Kleiner reads a fading message in sync with text. 
     */
    public InsertFade(sustain: number, length: number): void;
    
    /**
     * Begins a text fade for a {{Type|RichText}} element where the last appended text segment is fully faded out after a specific amount of time, at a specific speed.
     * 
     * The alpha of the text at any given time is determined by the text's base alpha * ((''sustain'' - {{GlobalFunction|CurTime}}) / ''length'') where {{GlobalFunction|CurTime}} is added to ''sustain'' when this method is called.
     * 
     * [[Category:RichText]] 
     * @param sustain  The number of seconds the text remains visible. 
     * @param length  The number of seconds it takes the text to fade out.
     * 
     * If set '''lower''' than ''sustain'', the text will not begin fading out until (''sustain'' - ''length'') seconds have passed.
     * 
     * If set '''higher''' than ''sustain'', the text will begin fading out immediately at a fraction of the base alpha.
     * 
     * If set to '''-1''', the text doesn't fade out. 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(200, 200)
     * TextFrame:Center()
     * TextFrame:SetTitle("Fading Text")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Sample text
     * richtext:SetText("This is an example of a Rich Text panel using a fade-out with:\n\n6 seconds of sustain\n\n2 second fade-out length")
     * 	
     * // When the panel is ready for layout, begin the fade
     * function richtext:PerformLayout()
     * 	
     * 	self:SetFontInternal("Trebuchet18")
     * 	self:SetBGColor(Color(64, 64, 92))
     * 	
     * 	// Wait 6 seconds, then fade out in 2 seconds
     * 	self:InsertFade(6, 2)
     * 	
     * end
     * 
     * // Creates a Rich Text panel that sustains visibility for 6 seconds with a 2 second long fade-out.@example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(350, 100)
     * TextFrame:Center()
     * TextFrame:SetTitle("Kleiner says:")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)	
     * 
     * // Red text
     * richtext:InsertColorChange(200, 60, 32, 255)
     * richtext:SetVerticalScrollbarEnabled(false)
     * 	
     * local words = {"There's", "only", "one", "hedy..."}
     * local delay = 0
     * 
     * // Display each word in half second interval
     * for w, txt in pairs(words) do
     * 
     * 	if(w == 1) then delay = 0.2
     * 	else delay = (w-1)*0.45 end
     * 
     * 	timer.Simple(delay, function()
     * 	
     * 		richtext:AppendText(txt.." ")
     * 		richtext:InsertFade(2, 1)	// Sustain for 2 seconds while fading out after 1 second
     * 		
     * 		richtext:SetBGColor(Color(0, 0, 0))
     * 		richtext:SetFontInternal("DermaLarge")
     * 	
     * 	end)
     * 
     * end
     * 
     * // Kleiner read along
     * LocalPlayer():EmitSound("vo/k_lab2/kl_onehedy.wav")
     * 
     * // Create a Rich Text panel where Dr. Kleiner reads a fading message in sync with text. 
     */
    public InsertFade(sustain: number, length: number): void;
    
    /**
     * Resets all text fades in a {{Type|RichText}} element made with {{ClassFunction|Panel|InsertFade}}.
     * [[Category:RichText]] 
     * @param hold  True to reset fades, false otherwise. 
     * @param expiredOnly  Any value equating to ''true'' will reset fades only on text segments that are completely faded out. 
     * @param newSustain  The new sustain value of each faded text segment. Set to -1 to keep the old sustain value. 
     * @example
     * 
     * // Window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(200, 100)
     * TextFrame:Center()
     * TextFrame:SetTitle("ResetAllFades")
     * TextFrame:MakePopup()
     * 
     * // Rich Text panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Append text and start fading a few frames after creation (won't work otherwise)
     * timer.Simple(0.05, function()
     * 
     * 	richtext:SetBGColor(Color(32, 32, 32))
     * 	richtext:SetFontInternal("GModNotify")
     * 
     * 	richtext:AppendText("This is ")
     * 	richtext:InsertFade(5, 2)
     * 	
     * 	richtext:AppendText("a test...")
     * 	richtext:InsertFade(5, 1)
     * 	
     * end)
     * 
     * // 5 seconds after creation, reset all the fades
     * timer.Simple(5, function()
     * 
     * 	richtext:ResetAllFades(true, false, -1)
     * 
     * end)
     * 
     * // Creates a RichText panel where two text segments slowly fade out and get reset to full alpha 5 seconds after being created. 
     */
    public ResetAllFades(hold: boolean, expiredOnly: boolean, newSustain: number): void;
    
    /**
     * Resets all text fades in a {{Type|RichText}} element made with {{ClassFunction|Panel|InsertFade}}.
     * [[Category:RichText]] 
     * @param hold  True to reset fades, false otherwise. 
     * @param expiredOnly  Any value equating to ''true'' will reset fades only on text segments that are completely faded out. 
     * @param newSustain  The new sustain value of each faded text segment. Set to -1 to keep the old sustain value. 
     * @example
     * 
     * // Window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(200, 100)
     * TextFrame:Center()
     * TextFrame:SetTitle("ResetAllFades")
     * TextFrame:MakePopup()
     * 
     * // Rich Text panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Append text and start fading a few frames after creation (won't work otherwise)
     * timer.Simple(0.05, function()
     * 
     * 	richtext:SetBGColor(Color(32, 32, 32))
     * 	richtext:SetFontInternal("GModNotify")
     * 
     * 	richtext:AppendText("This is ")
     * 	richtext:InsertFade(5, 2)
     * 	
     * 	richtext:AppendText("a test...")
     * 	richtext:InsertFade(5, 1)
     * 	
     * end)
     * 
     * // 5 seconds after creation, reset all the fades
     * timer.Simple(5, function()
     * 
     * 	richtext:ResetAllFades(true, false, -1)
     * 
     * end)
     * 
     * // Creates a RichText panel where two text segments slowly fade out and get reset to full alpha 5 seconds after being created. 
     */
    public ResetAllFades(hold: boolean, expiredOnly: boolean, newSustain: number): void;
    
    /**
     * Sets the font used to render this panel's text.
     * 
     * To retrieve the font used by a panel, call {{ClassFunction|Panel|GetFont}}.
     * 
     * [[Category:Label]]
     * [[Category:TextEntry]]
     * [[Category:RichText]] 
     * @param fontName  The name of the font.
     * 
     * See [[Default_Fonts|here]] for a list of existing fonts.
     * Alternatively, use {{LibraryFunction|surface|CreateFont}} to create your own custom font. 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(200, 100)
     * TextFrame:Center()
     * TextFrame:SetTitle("This is a font test")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Sample text
     * richtext:SetText("This is a sample of text using the chat box font.")
     * 
     * // Ensure font and text color changes are applied
     * function richtext:PerformLayout()
     * 
     * 	self:SetFontInternal("ChatFont")
     * 	self:SetFGColor(Color(255, 255, 255))
     * 	
     * end
     * 
     * // Sets the font of a {{Type|RichText}} element to match the chat box font. 
     */
    public SetFontInternal(fontName: string): void;
    
    /**
     * Sets the font used to render this panel's text.
     * 
     * To retrieve the font used by a panel, call {{ClassFunction|Panel|GetFont}}.
     * 
     * [[Category:Label]]
     * [[Category:TextEntry]]
     * [[Category:RichText]] 
     * @param fontName  The name of the font.
     * 
     * See [[Default_Fonts|here]] for a list of existing fonts.
     * Alternatively, use {{LibraryFunction|surface|CreateFont}} to create your own custom font. 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(200, 100)
     * TextFrame:Center()
     * TextFrame:SetTitle("This is a font test")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Sample text
     * richtext:SetText("This is a sample of text using the chat box font.")
     * 
     * // Ensure font and text color changes are applied
     * function richtext:PerformLayout()
     * 
     * 	self:SetFontInternal("ChatFont")
     * 	self:SetFGColor(Color(255, 255, 255))
     * 	
     * end
     * 
     * // Sets the font of a {{Type|RichText}} element to match the chat box font. 
     */
    public SetFontInternal(fontName: string): void;
    
    /**
     * Sets the text value of a panel object containing text, such as a {{Type|Label}}, {{Type|TextEntry}} or  {{Type|RichText}} and their derivatives, such as {{Type|DLabel}}, {{Type|DTextEntry}} or {{Type|DButton}}.
     * 
     * {{Warning|When used on a {{Type|Label}} or its derivatives ( {{Type|DLabel}} and {{Type|DButton}} ), it will automatically call {{ClassFunction|Panel|InvalidateLayout}}, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.}}
     * [[Category:Label]]
     * [[Category:DLabel]]
     * [[Category:TextEntry]]
     * [[Category:RichText]]
     * [[Category:DTree_Node]] 
     * @param text  The text value to set. 
     * @example
     * 
     * // Window frame for the RichText
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(250, 150)
     * TextFrame:Center()
     * TextFrame:SetTitle("#VAC_ConnectionRefusedTitle") // Results in "Connection Refused - VAC"
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Set the text to the message you get when VAC banned
     * richtext:SetText("#VAC_ConnectionRefusedDetail")
     * 
     * // Creates a {{Type|RichText}} element and sets the text to a localized string; the default VAC rejection message. 
     */
    public SetText(text: string): void;
    
    /**
     * Sets the text value of a panel object containing text, such as a {{Type|Label}}, {{Type|TextEntry}} or  {{Type|RichText}} and their derivatives, such as {{Type|DLabel}}, {{Type|DTextEntry}} or {{Type|DButton}}.
     * 
     * {{Warning|When used on a {{Type|Label}} or its derivatives ( {{Type|DLabel}} and {{Type|DButton}} ), it will automatically call {{ClassFunction|Panel|InvalidateLayout}}, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.}}
     * [[Category:Label]]
     * [[Category:DLabel]]
     * [[Category:TextEntry]]
     * [[Category:RichText]]
     * [[Category:DTree_Node]] 
     * @param text  The text value to set. 
     * @example
     * 
     * // Window frame for the RichText
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(250, 150)
     * TextFrame:Center()
     * TextFrame:SetTitle("#VAC_ConnectionRefusedTitle") // Results in "Connection Refused - VAC"
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Set the text to the message you get when VAC banned
     * richtext:SetText("#VAC_ConnectionRefusedDetail")
     * 
     * // Creates a {{Type|RichText}} element and sets the text to a localized string; the default VAC rejection message. 
     */
    public SetText(text: string): void;
    
    /**
     * Sets the height of a {{Type|RichText}} element to accommodate the text inside.
     * 
     * **Note:**
     * >This function internally relies on {{ClassFunction|Panel|GetNumLines}}, so it should be called at least a couple frames after modifying the text using {{ClassFunction|Panel|AppendText}}
     * 
     * [[Category:RichText]] 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(250, 210)
     * TextFrame:Center()
     * TextFrame:SetTitle("No set height")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:SetPos(10, 30)
     * richtext:SetWidth(230)
     * 
     * // Block of text
     * richtext:AppendText("#ServerBrowser_ServerWarning_MaxPlayers")
     * 
     * function richtext:PerformLayout() self:SetBGColor(Color(0, 0, 0)) end
     * 
     * // Set to full height after 2 seconds
     * timer.Simple(2, function()
     * 
     * 	richtext:SetToFullHeight()
     * 	
     * 	TextFrame:SetTitle("Full set height")
     * 	
     * end)
     * 
     * // Creates a {{Type|RichText}} panel with no set height. The proper height is applied 2 seconds after being created in order to show the difference. 
     */
    public SetToFullHeight(): void;
    
    /**
     * Sets the height of a {{Type|RichText}} element to accommodate the text inside.
     * 
     * **Note:**
     * >This function internally relies on {{ClassFunction|Panel|GetNumLines}}, so it should be called at least a couple frames after modifying the text using {{ClassFunction|Panel|AppendText}}
     * 
     * [[Category:RichText]] 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(250, 210)
     * TextFrame:Center()
     * TextFrame:SetTitle("No set height")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:SetPos(10, 30)
     * richtext:SetWidth(230)
     * 
     * // Block of text
     * richtext:AppendText("#ServerBrowser_ServerWarning_MaxPlayers")
     * 
     * function richtext:PerformLayout() self:SetBGColor(Color(0, 0, 0)) end
     * 
     * // Set to full height after 2 seconds
     * timer.Simple(2, function()
     * 
     * 	richtext:SetToFullHeight()
     * 	
     * 	TextFrame:SetTitle("Full set height")
     * 	
     * end)
     * 
     * // Creates a {{Type|RichText}} panel with no set height. The proper height is applied 2 seconds after being created in order to show the difference. 
     */
    public SetToFullHeight(): void;
    
    /**
     * Sets the visibility of the vertical scrollbar.
     * 
     * Works for {{Type|RichText}} and {{Type|TextEntry}}.
     * 
     * [[Category:RichText]]
     * [[Category:TextEntry]] 
     * @param display [=false] True to display the vertical text scroll bar, false to hide it. 
     */
    public SetVerticalScrollbarEnabled(display?: boolean): void;
    
    /**
     * Sets the visibility of the vertical scrollbar.
     * 
     * Works for {{Type|RichText}} and {{Type|TextEntry}}.
     * 
     * [[Category:RichText]]
     * [[Category:TextEntry]] 
     * @param display [=false] True to display the vertical text scroll bar, false to hide it. 
     */
    public SetVerticalScrollbarEnabled(display?: boolean): void;
}

/**
 * This is a list of hooks that are only available in Sandbox or Sandbox derived gamemodes.
 * 
 * Easiest way to tell if a gamemode is Sandbox derived is to check if this variable exists:
 * ```
 * -- Replace GAMEMODE with GM if you are in gamemode files.
 * if ( GAMEMODE.IsSandboxDerived ) then
 * 	-- Do stuff
 * end
 * ``` 
 */
declare class SANDBOX extends Gamemode {
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * This hook is used to add default categories to spawnmenu tool tabs.
     * 
     * Do not override or hook this function, use {{HookFunction|SANDBOX|AddToolMenuCategories}}! 
     */
    public AddGamemodeToolMenuCategories(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * This hook is used to add default tool tabs to spawnmenu.
     * 
     * Do not override or hook this function, use {{HookFunction|SANDBOX|AddToolMenuTabs}}! 
     */
    public AddGamemodeToolMenuTabs(): void;
    
    /**
     * This hook is used to add new categories to spawnmenu tool tabs. 
     * @example
     * 
     * local function CreateUtilitiesCategories()
     * 
     *         spawnmenu.AddToolCategory( "Utilities", "User", "#spawnmenu.utilities.user" )
     *         spawnmenu.AddToolCategory( "Utilities", "Admin", "#spawnmenu.utilities.admin" )
     * 
     * end        
     * hook.Add( "AddToolMenuCategories", "CreateUtilitiesCategories", CreateUtilitiesCategories )
     * 
     * // Adds default categories to Utilities tab in spawnmenu. 
     */
    public AddToolMenuCategories(): void;
    
    /**
     * This hook is used to add new tool tabs to spawnmenu. 
     * @example
     * 
     * hook.Add( "AddToolMenuTabs", "myHookClass", function()
     * 	spawnmenu.AddToolTab("myTab", "My Tab", "icon16/shield.png") // Add a new tab
     * 
     * 	spawnmenu.AddToolCategory("myTab", "myCategory", "My Category") // Add a category into that new tab
     * 
     * 	spawnmenu.AddToolMenuOption( "myTab", "myCategory", "myEntry", "My Entry", "", "", function( panel )
     * 		panel:AddControl( "Header", { Text = "Hello!" } )
     * 	end ) // Add an entry to our new category
     * end)
     * 
     * // Add a new tab and a few categories into it. 
     */
    public AddToolMenuTabs(): void;
    
    /**
     * Called when a player attempts to drive a prop via Prop Drive 
     * @param ply  The player who attempted to use Prop Drive. 
     * @param ent  The entity the player is attempting to drive 
     * @returns Return true to allow driving, false to disallow 
     * @example
     * 
     * function GM:CanDrive( ply, ent )
     * 	if !ply:IsAdmin() then return false end
     * end
     * 
     * // Stops nonadmins from using Prop Drive 
     */
    public CanDrive(ply: Player, ent: Entity): boolean;
    
    /**
     * Controls if a property can be used or not. 
     * @param ply  Player, that tried to use the property 
     * @param property  Class of the property that is tried to use, for example - bonemanipulate 
     * @param ent  The entity, on which property is tried to be used on 
     * @returns Return false to disallow using that property 
     * @example
     * 
     * hook.Add( "CanProperty", "block_remover_property", function( ply, property, ent )
     * 	if ( !ply:IsAdmin() && property == "remover" ) then return false end
     * end )
     * 
     * // Stops non-admins from using the remover property. 
     */
    public CanProperty(ply: Player, property: string, ent: Entity): boolean;
    
    /**
     * Called when a player attempts to fire their tool gun. Return true to specifically allow the attempt, false to block it. 
     * @param ply  The player who attempted to use their toolgun. 
     * @param tr  A trace from the players eye to where in the world their crosshair/cursor is pointing. See {{Struct|TraceResult}} 
     * @param tool  The tool mode the player currently has selected. 
     * @returns Can use toolgun or not. 
     * @example
     * 
     * function GM:CanTool( ply, tr, tool )
     *    if tool == "remover" and IsValid( tr.Entity ) and tr.Entity:GetClass() == "prop_door_rotating" then
     *       return false
     *    end
     * end
     * 
     * // Stops players from removing doors. 
     */
    public CanTool(ply: Player, tr: TraceResult, tool: string): boolean;
    
    /**
     * Called when player selects an item on the spawnmenu sidebar at the left. 
     * @param parent  The panel that holds spawnicons and the sidebar of spawnmenu 
     * @param node  The item player selected 
     */
    public ContentSidebarSelection(parent: Panel, node: Panel): void;
    
    /**
     * Called when the context menu is created. 
     * @param g_ContextMenu  The created context menu panel 
     */
    public ContextMenuCreated(g_ContextMenu: Panel): void;
    
    /**
     * Called when the context menu is trying to be opened. Return false to disallow it. 
     * @returns Allow menu to open. 
     */
    public ContextMenuOpen(): boolean;
    
    /**
     * Called from {{HookFunction|GM|HUDPaint}}; does nothing by default.
     * 
     * **Note:**
     * >This cannot be used with {{LibraryFunction|hook|Add}} 
     */
    public PaintNotes(): void;
    
    /**
     * Called from {{HookFunction|GM|HUDPaint}} to draw world tips. By default, enabling cl_drawworldtooltips will stop world tips from being drawn here.
     * 
     * See {{GlobalFunction|AddWorldTip}} for more information.
     * 
     * **Note:**
     * >This cannot be used with {{LibraryFunction|hook|Add}} 
     */
    public PaintWorldTips(): void;
    
    /**
     * Called when persistent props are loaded. 
     */
    public PersistenceLoad(): void;
    
    /**
     * Called when persistent props are saved. 
     */
    public PersistenceSave(): void;
    
    /**
     * Called when a player attempts to give themselves a weapon from the Q menu. ( Left mouse clicks on an icon ) 
     * @param ply  The player who attempted to give themselves a weapon. 
     * @param weapon  Class name of the weapon the player tried to give themselves. 
     * @param swep  The swep table of this weapon, see {{Struct|SWEP}} 
     * @returns Can the SWEP be given to the player 
     * @example
     * 
     * function GM:PlayerGiveSWEP( ply, class, swep )
     *  if (not ply:IsAdmin()) then
     *   return false
     *  end
     * end
     * 
     * // Stops non-admins from giving themselves weapons. 
     */
    public PlayerGiveSWEP(ply: Player, weapon: string, swep: SWEP[]): boolean;
    
    /**
     * Called after the player spawned an effect. 
     * @param ply  The player that spawned the effect 
     * @param model  The model of spawned effect 
     * @param ent  The spawned effect itself 
     */
    public PlayerSpawnedEffect(ply: Player, model: string, ent: Entity): void;
    
    /**
     * Called after the player spawned an NPC. 
     * @param ply  The player that spawned the NPC 
     * @param ent  The spawned NPC itself 
     */
    public PlayerSpawnedNPC(ply: Player, ent: Entity): void;
    
    /**
     * Called when a player has successfully spawned a prop from the Q menu. 
     * @param ply  The player who spawned a prop. 
     * @param model  Path to the model of the prop the player is attempting to spawn. 
     * @param entity  The entity that was spawned. 
     * @example
     * 
     * function GM:PlayerSpawnedProp(ply, model, ent)
     * 	ent:SetColor(Color(0, 255, 0))
     * end
     * 
     * // Turns the spawned prop green. 
     */
    public PlayerSpawnedProp(ply: Player, model: string, entity: Entity): void;
    
    /**
     * Called after the player spawned a ragdoll. 
     * @param ply  The player that spawned the ragdoll 
     * @param model  The ragdoll model that player wants to spawn 
     * @param ent  The spawned ragdoll itself 
     */
    public PlayerSpawnedRagdoll(ply: Player, model: string, ent: Entity): void;
    
    /**
     * Called after the player has spawned a scripted entity. 
     * @param ply  The player that spawned the SENT 
     * @param ent  The spawned SENT 
     */
    public PlayerSpawnedSENT(ply: Player, ent: Entity): void;
    
    /**
     * Called after the player has spawned a scripted weapon from the spawnmenu with a middle mouse click.
     * 
     * For left mouse click spawns, see {{HookFunction|SANDBOX|PlayerGiveSWEP}}. 
     * @param ply  The player that spawned the SWEP 
     * @param ent  The SWEP itself 
     */
    public PlayerSpawnedSWEP(ply: Player, ent: Entity): void;
    
    /**
     * Called after the player spawned a vehicle. 
     * @param ply  The player that spawned the vehicle 
     * @param ent  The vehicle itself 
     */
    public PlayerSpawnedVehicle(ply: Player, ent: Entity): void;
    
    /**
     * Called to ask if player allowed to spawn a particular effect or not. 
     * @param ply  The player that wants to spawn an effect 
     * @param model  The effect model that player wants to spawn 
     * @returns Return false to disallow spawning that effect 
     */
    public PlayerSpawnEffect(ply: Player, model: string): boolean;
    
    /**
     * Called to ask if player allowed to spawn a particular NPC or not. 
     * @param ply  The player that wants to spawn that NPC 
     * @param npc_type  The npc type that player is trying to spawn 
     * @param weapon  The weapon of that NPC 
     * @returns Return false to disallow spawning that NPC 
     */
    public PlayerSpawnNPC(ply: Player, npc_type: string, weapon: string): boolean;
    
    /**
     * Called to ask whether player is allowed to spawn any objects. 
     * @param ply  The player in question 
     * @param model  Modelname 
     * @param skin  Skin number 
     * @returns Return false to disallow him spawning anything 
     */
    public PlayerSpawnObject(ply: Player, model: string, skin: number): boolean;
    
    /**
     * Called when a player attempts to spawn a prop from the Q menu. 
     * @param ply  The player who attempted to spawn a prop. 
     * @param model  Path to the model of the prop the player is attempting to spawn. 
     * @returns Should the player be able to spawn the prop or not. 
     * @example
     * 
     * function GM:PlayerSpawnProp( ply, model )
     * 	if ( !ply:IsAdmin() ) then
     * 		return false
     * 	end
     * end
     * 
     * // Stops non-admins from spawning props. 
     */
    public PlayerSpawnProp(ply: Player, model: string): boolean;
    
    /**
     * Called when a player attempts to spawn a ragdoll from the Q menu. 
     * @param ply  The player who attempted to spawn a ragdoll. 
     * @param model  Path to the model of the ragdoll the player is attempting to spawn. 
     * @returns Should the player be able to spawn the ragdoll or not. 
     * @example
     * 
     * function GM:PlayerSpawnRagdoll( ply, model )
     * 	if ( not ply:IsAdmin() ) then
     * 		return false
     * 	end
     * end
     * 
     * // Stops non-admins from spawning ragdolls. 
     */
    public PlayerSpawnRagdoll(ply: Player, model: string): boolean;
    
    /**
     * Called when a player attempts to spawn an Entity from the Q menu. 
     * @param ply  The player who attempted to spawn the entity. 
     * @param classRef  Class name of the entity the player tried to spawn. 
     * @returns can_spawn 
     * @example
     * 
     * function GM:PlayerSpawnSENT( ply, class )
     * 	if not ply:IsAdmin() then
     * 		return false
     * 	end
     * end
     * 
     * // Stops non-admins from spawning entities. 
     */
    public PlayerSpawnSENT(ply: Player, classRef: string): boolean;
    
    /**
     * Called when a player attempts to spawn a weapon from the Q menu. ( Mouse wheel clicks on an icon ) 
     * @param ply  The player who attempted to spawn a weapon. 
     * @param weapon  Class name of the weapon the player tried to spawn. 
     * @param swep  Information about the weapon the player is trying to spawn, see {{Struct|SWEP}} 
     * @returns Can the SWEP be spawned 
     * @example
     * 
     * hook.Add( "PlayerSpawnSWEP", "SpawnBlock", function( ply, class, info )
     * 	if not ply:IsAdmin() then
     * 		return false
     * 	end
     * end )
     * 
     * // Stops non-admins from spawning weapons. 
     */
    public PlayerSpawnSWEP(ply: Player, weapon: string, swep: SWEP): boolean;
    
    /**
     * Called to ask if player allowed to spawn a particular vehicle or not. 
     * @param ply  The player that wants to spawn that vehicle 
     * @param model  The vehicle model that player wants to spawn 
     * @param name  Vehicle name 
     * @param table  Table of that vehicle, containing info about it 
     * @returns Return false to disallow spawning that vehicle 
     */
    public PlayerSpawnVehicle(ply: Player, model: string, name: string, table: table): boolean;
    
    /**
     * This hook makes the engine load the spawnlist text files.
     * It calls {{LibraryFunction|spawnmenu|PopulateFromEngineTextFiles}} by default. 
     * @example
     * 
     * function GM:PopulatePropMenu()
     * 
     * 	// This function makes the engine load the spawn menu text files.
     * 	// We call it here so that any gamemodes not using the default 
     * 	// spawn menu can totally not call it.
     * 	spawnmenu.PopulateFromEngineTextFiles()
     * 
     * end
     * 
     * // Source code for this hook. 
     */
    public PopulatePropMenu(): void;
    
    /**
     * Called to populate the Scripted Tool menu.
     * 
     * **Deprecated:**
     * >This hook is never called. Use {{HookFunction|SANDBOX|PopulateToolMenu}}, instead. 
     */
    public PopulateSTOOLMenu(): void;
    
    /**
     * Add the STOOLS to the tool menu. You want to call {{LibraryFunction|spawnmenu|AddToolMenuOption}} in this hook. 
     */
    public PopulateToolMenu(): void;
    
    /**
     * Called right after the Lua Loaded tool menus are reloaded. This is a good place to set up any ControlPanels. 
     */
    public PostReloadToolsMenu(): void;
    
    /**
     * Called right before the Lua Loaded tool menus are reloaded.
     * 
     * **Bug [#1517](https://github.com/Facepunch/garrysmod-issues/issues/1517):**
     * >This isn't actually called. 
     */
    public PreReloadToolsMenu(): void;
    
    /**
     * If false is returned then the spawn menu is never created. This saves load times if your mod doesn't actually use the spawn menu for any reason.
     * 
     * **Bug [#1517](https://github.com/Facepunch/garrysmod-issues/issues/1517):**
     * >This isn't actually called. 
     * @returns Whether to create spawnmenu or not. 
     */
    public SpawnMenuEnabled(): boolean;
    
    /**
     * Called when spawnmenu is trying to be opened.
     * 
     * **Note:**
     * >Hiding the spawnmenu will not stop people from being able to use the various console commands to spawn in items, etc. See GM:PlayerSpawn* hooks for blocking actual spawning. 
     * @returns Return false to dissallow opening the spawnmenu 
     */
    public SpawnMenuOpen(): boolean;
}

/**
 * The saverestore library contains functions relating to the singleplayer save system built into the game. 
 */
declare namespace saverestore {
    /**
     * Adds a restore/load hook for the Half-Life 2 save system. 
     * @param identifier  The unique identifier for this hook. 
     * @param callback  The function to be called when an engine save is being loaded. It has one argument:
     * 
     * {{FuncArg|IRestore|save|The restore object to be used to read data from save file that is being loaded}}
     * 
     * You can also use those functions to read data:
     * 
     * {{LibraryFunction|saverestore|ReadVar}}
     * 
     * {{LibraryFunction|saverestore|ReadTable}}
     * 
     * {{LibraryFunction|saverestore|LoadEntity}} 
     * @example
     * 
     * saverestore.AddRestoreHook( "HookNameHere", function( save )
     * 	PrintTable( saverestore.ReadTable( save ) )
     * end )
     * 
     * // Example usage. 
     */
    function AddRestoreHook(identifier: string, callback: Function): void;
    
    /**
     * Adds a save hook for the Half-Life 2 save system. You can this to carry data through level transitions in Half-Life 2. 
     * @param identifier  The unique identifier for this hook. 
     * @param callback  The function to be called when an engine save is being saved. It has one argument:
     * 
     * {{FuncArg|ISave|save|The save object to be used to write data to the save file that is being saved}}
     * 
     * You can also use those functions to save data:
     * 
     * {{LibraryFunction|saverestore|WriteVar}}
     * 
     * {{LibraryFunction|saverestore|WriteTable}}
     * 
     * {{LibraryFunction|saverestore|SaveEntity}} 
     * @example
     * 
     * saverestore.AddSaveHook( "HookNameHere", function( save )
     * 	saverestore.WriteTable( { "test" }, save )
     * end )
     * 
     * // Example usage. 
     */
    function AddSaveHook(identifier: string, callback: Function): void;
    
    /**
     * Loads {{ClassFunction|Entity|GetTable}} from the save game file that is being loaded and merges it with the given entitys {{ClassFunction|Entity|GetTable}}. 
     * @param ent  The entity which will receive the loaded values from the save. 
     * @param save  The restore object to read the {{ClassFunction|Entity|GetTable}} from. 
     */
    function LoadEntity(ent: Entity, save: IRestore): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called by engine when a save is being loaded.
     * 
     * This handles loading gamemode and calls all of the hooks added with {{LibraryFunction|saverestore|AddRestoreHook}}. 
     * @param save  The restore object to read data from the save file with. 
     */
    function LoadGlobal(save: IRestore): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called by the engine just before {{LibraryFunction|saverestore|LoadGlobal}} is. 
     */
    function PreRestore(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called by the engine just before {{LibraryFunction|saverestore|SaveGlobal}} is. 
     */
    function PreSave(): void;
    
    /**
     * Reads a table from the save game file that is being loaded. 
     * @param save  The restore object to read the table from. 
     * @returns The table that has been read, if any 
     */
    function ReadTable(save: IRestore): table;
    
    /**
     * Loads a variable from the save game file that is being loaded.
     * 
     * Variables will be read in the save order you have saved them. 
     * @param save  The restore object to read variables from. 
     * @returns The variable that was read, if any. 
     */
    function ReadVar(save: IRestore): any;
    
    /**
     * Saves entitys {{ClassFunction|Entity|GetTable}} to the save game file that is being saved. 
     * @param ent  The entity to save {{ClassFunction|Entity|GetTable}} of. 
     * @param save  The save object to save {{ClassFunction|Entity|GetTable}} to. 
     */
    function SaveEntity(ent: Entity, save: ISave): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called by engine when a save is being saved.
     * 
     * This handles saving gamemode and calls all of the hooks added with {{LibraryFunction|saverestore|AddSaveHook}}. 
     * @param save  The save object to write data into the save file. 
     */
    function SaveGlobal(save: ISave): void;
    
    /**
     * Returns how many writable keys are in the given table. 
     * @param table  The table to test. 
     * @returns The number of keys that can be written with {{LibraryFunction|saverestore|WriteTable}}. 
     */
    function WritableKeysInTable(table: table): number;
    
    /**
     * Write a table to a save game file that is being saved. 
     * @param table  The table to write 
     * @param save  The save object to write the table to. 
     */
    function WriteTable(table: table, save: ISave): void;
    
    /**
     * Writes a variable to the save game file that is being saved. 
     * @param value  The value to save.
     * It can be one of the following types: {{Type|number}}, {{Type|boolean}}, {{Type|string}}, {{Type|Entity}}, {{Type|Angle}}, {{Type|Vector}} or {{Type|table}}. 
     * @param save  The save object to write the variable to. 
     */
    function WriteVar(value: number | boolean | string | Entity | Angle | Vector | table, save: ISave): void;
}

/**
 * The object returned by {{LibraryFunction|ai_schedule|New}}. 
 */
declare class Schedule {
    /**
     * {{Stub}} Adds a task to the schedule.
     * 
     * See also {{ClassFunction|NPC|StartEngineTask}} and {{ClassFunction|NPC|RunEngineTask}}. 
     * @param taskname  Task name, see [https://github.com/ValveSoftware/source-sdk-2013/blob/55ed12f8d1eb6887d348be03aee5573d44177ffb/mp/src/game/server/ai_task.h#L89-L502 ai_task.h] 
     * @param taskdata  Task data as a float 
     */
    public AddTask(taskname: string, taskdata: number): void;
    
    /**
     * @param start 
     * @param run 
     * @param data 
     */
    public AddTaskEx(start: string, run: string, data: number): void;
    
    /**
     * Adds an engine task to the schedule. 
     * @param taskname  Task name. 
     * @param taskdata  Task data. 
     */
    public EngTask(taskname: string, taskdata: number): void;
    
    /**
     * Returns the task at the given index. 
     * @param num  Task index. 
     */
    public GetTask(num: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Initialises the Schedule. Called by {{LibraryFunction|ai_schedule|New}} when the Schedule is created. 
     * @param debugName  The name passed from {{LibraryFunction|ai_schedule|New}}. 
     */
    public Init(debugName: string): void;
    
    /**
     * Returns the number of tasks in the schedule. 
     * @returns The number of tasks in this schedule. 
     */
    public NumTasks(): number;
}

/**
 * The scripted_ents library allows you to access information about any scripted entities loaded into the game, as well as register your own entities. 
 */
declare namespace scripted_ents {
    /**
     * Defines an alias string that can be used to refer to another classname 
     * @param alias  A new string which can be used to refer to another classname 
     * @param classname  The classname the alias should refer to 
     */
    function Alias(alias: string, classname: string): void;
    
    /**
     * Returns a copy of the ENT table for a class, including functions defined by the base class 
     * @param classname  The classname of the ENT table to return, can be an alias 
     * @returns entTable 
     * @example
     * 
     * PrintTable(scripted_ents.Get("base_entity"))
     * 
     * // Use of PrintTable function to print the contents of base_entity SENT table. 
     */
    function Get(classname: string): table;
    
    /**
     * Returns a copy of the list of all ENT tables registered 
     * @returns A table of {{Struct|ENT}}s 
     */
    function GetList(): ENT[];
    
    /**
     * Retrieves a member of entity's table. 
     * @param classRef  Entity's class name 
     * @param name  Name of member to retrieve 
     * @returns The member or nil if failed 
     */
    function GetMember(classRef: string, name: string): any;
    
    /**
     * Returns a list of all ENT tables which contain either ENT.Spawnable or ENT.AdminSpawnable 
     * @returns A table of {{Struct|ENT}}s 
     */
    function GetSpawnable(): ENT[];
    
    /**
     * Returns the actual ENT table for a class. Modifying functions/variables in this table will change newly spawned entities 
     * @param classname  The classname of the ENT table to return 
     * @returns entTable 
     */
    function GetStored(classname: string): table;
    
    /**
     * Returns the 'type' of a class, this will one of the following: 'anim', 'ai', 'brush', 'point'. 
     * @param classname  The classname to check 
     * @returns type 
     */
    function GetType(classname: string): string;
    
    /**
     * Checks if name is based on base 
     * @param name  Entity's class name to be checked 
     * @param base  Base class name to be checked 
     * @returns Returns true if class name is based on base, else false. 
     * @example
     * 
     * print(scripted_ents.IsBasedOn("gmod_hands", "base_anim"))
     * 
     * // See if gmod_hands is based on base_anim. 
     */
    function IsBasedOn(name: string, base: string): boolean;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called after all ENTS have been loaded and runs {{LibraryFunction|baseclass|Set}} on each one.
     * 
     * You can retrieve all the currently registered ENTS with {{LibraryFunction|scripted_ents|GetList}}.
     * 
     * **Note:**
     * >This is not called after an ENT auto refresh, and thus the inherited baseclass functions retrieved with {{LibraryFunction|baseclass|Get}} will not be updated 
     */
    function OnLoaded(): void;
    
    /**
     * Registers an ENT table with a classname. Reregistering an existing classname will automatically update the functions of all existing entities of that class.
     * 
     * **Bug [#1300](https://github.com/Facepunch/garrysmod-issues/issues/1300):**
     * >Sub-tables provided in the first argument will not carry over their metatable, and will receive a BaseClass key if the table was merged with the base's. Userdata references, which includes Vectors, Angles, Entities, etc. will not be copied. 
     * @param ENT  The ENT table to register 
     * @param classname  The classname to register 
     * @example
     * 
     * local ENT = scripted_ents.Get("gmod_button")
     * local oldUse = ENT.Use
     * function ENT:Use( activator, caller, type, value )
     *  print( tostring( self.Entity ).." just got pressed!" )
     *  oldUse( self,activator, caller, type, value )
     * end
     * scripted_ents.Register(ENT,"gmod_button")
     * 
     * // 
     */
    function Register(ENT: table, classname: string): void;
}

/**
 * The search library. 
 */
declare namespace search {
    /**
     * Adds a search result provider. For examples, see gamemodes/sandbox/gamemode/cl_search_models.lua 
     * @param provider  Provider function. It has one argument: {{FuncArg|string|searchQuery}}
     * You must return a list of tables structured like this:
     * * {{FuncArg|string|text|Text to "Copy to clipboard"}}
     * * {{FuncArg|function|func|Function to use/spawn the item}}
     * * {{FuncArg|Panel|icon|A panel to add to spawnmenu}}
     * * {{FuncArg|table|words|A table of words?}} 
     * @param id [=nil] If provided, ensures that only one provider exists with the given ID at a time. 
     */
    function AddProvider(provider: Function, id?: string): void;
    
    /**
     * Retrieves search results. 
     * @param query  Search query 
     * @returns A table of results ( Maximum 1024 items ) 
     */
    function GetResults(query: string): table;
}

/**
 * Menu state library to query the master server list. 
 */
declare namespace serverlist {
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Adds current server the player is on to their favorites. 
     */
    function AddCurrentServerToFavorites(): void;
    
    /**
     * Queries a server for its player list. 
     * @param ip  The IP address of the server, including the port. 
     * @param callback  The function to be called if and when the request finishes. Function has one argument, a table containing tables with player info. 
     * 
     * Each table with player info has next fields:
     * 
     * {{FuncArg|number|time|The amount of time the player is playing on the server, in seconds}}
     * 
     * {{FuncArg|string|name|The player name}}
     * 
     * {{FuncArg|number|score|The players score}} 
     */
    function PlayerList(ip: string, callback: Function): void;
    
    /**
     * Queries the master server for server list. 
     * @param data  The information about what kind of servers we want. See {{Struct|ServerQueryData}}. 
     */
    function Query(data: ServerQueryData): void;
}

/**
 */
declare class SlideBar extends Panel {

}

/**
 * **Deprecated:**
 * >Only exists for backwards compatibility with {{ClassFunction|Panel|SetActionFunction}} and {{ClassFunction|Panel|PostMessage}}. Use {{Type|DNumSlider}} instead.
 * 
 * A simple slider featuring an numeric display. 
 * @example
 * 
 * local frame = vgui.Create( "DFrame" )
 * frame:SetSize( 280, 70 )
 * frame:Center()
 * frame:SetTitle( "Bilderberg Group Dollar Value Slider" )
 * frame:MakePopup()
 * 
 * local DermaSlider = vgui.Create("Slider", frame)
 * DermaSlider:SetPos( 0, 30 ) 
 * DermaSlider:SetWide( 100 )
 * DermaSlider:SetMin( 0 )
 * DermaSlider:SetMax( 1.0 )
 * DermaSlider:SetValue( 0.5 )
 * DermaSlider:SetDecimals( 2 )
 * DermaSlider.OnValueChanged = function( panel, value )
 * 	print( tostring( value ) )
 * end
 * 
 * // Creates a slider atop a DFrame which prints its value as it's being dragged. 
 */
declare class Slider extends Panel {
    /**
     * **Deprecated:**
     * >Only used in deprecated Derma controls.
     * 
     * Sends a command to the panel.
     * [[Category:Slider]] 
     * @param messageName  The name of the message. 
     * @param valueType  The type of the variable to post. 
     * @param value  The value to post. 
     */
    public PostMessage(messageName: string, valueType: string, value: string): void;
    
    /**
     * **Deprecated:**
     * >Only used in deprecated Derma controls.
     * 
     * Sends a command to the panel.
     * [[Category:Slider]] 
     * @param messageName  The name of the message. 
     * @param valueType  The type of the variable to post. 
     * @param value  The value to post. 
     */
    public PostMessage(messageName: string, valueType: string, value: string): void;
    
    /**
     * **Deprecated:**
     * >Only used in deprecated Derma controls.
     * 
     * Used in {{Type|Button}} to call a function when the button is clicked and in {{Type|Slider}} when the value changes.
     * [[Category:Button]]
     * [[Category:Slider]] 
     * @param func  Function to call when the {{Type|Button}} is clicked or the {{Type|Slider}} value is changed.
     * 
     * Arguments given are:
     * * {{FuncArg|Panel|self|The panel itself}}
     * * {{FuncArg|string|action|"Command" on button press, "SliderMoved" on slider move.}}
     * * {{FuncArg|number|val|The new value of the {{Type|Slider}}. Will always equal 0 for buttons.}}
     * * {{FuncArg|number||Always equals 0.}} 
     */
    public SetActionFunction(func: Button | Slider | Slider): void;
    
    /**
     * **Deprecated:**
     * >Only used in deprecated Derma controls.
     * 
     * Used in {{Type|Button}} to call a function when the button is clicked and in {{Type|Slider}} when the value changes.
     * [[Category:Button]]
     * [[Category:Slider]] 
     * @param func  Function to call when the {{Type|Button}} is clicked or the {{Type|Slider}} value is changed.
     * 
     * Arguments given are:
     * * {{FuncArg|Panel|self|The panel itself}}
     * * {{FuncArg|string|action|"Command" on button press, "SliderMoved" on slider move.}}
     * * {{FuncArg|number|val|The new value of the {{Type|Slider}}. Will always equal 0 for buttons.}}
     * * {{FuncArg|number||Always equals 0.}} 
     */
    public SetActionFunction(func: Button | Slider | Slider): void;
}

/**
 * Used primarily for adding new soundscript entries. 
 */
declare namespace sound {
    /**
     * Creates a sound script. It can also override sounds, which seems to only work when set on the server. 
     * @param soundData  The sounds properties. See {{Struct|SoundData}} 
     * @example
     * 
     * sound.Add( {
     * 	name = "enzo_engine_idle",
     * 	channel = CHAN_STATIC,
     * 	volume = 1.0,
     * 	level = 80,
     * 	pitch = {95, 110},
     * 	sound = "vehicles/enzo/idle.wav"
     * } )
     * 
     * // Creates a sound script. It will automatically vary in pitch and be played in a given audio channel to better control which sounds mix with which sounds and how.
     * 
     * In this example, the file location could be: ( Choose one )
     * * garrysmod/sound/vehicles/enzo/idle.wav
     * * garrysmod/gamemodes/MyCoolGameMode/content/sound/vehicles/enzo/idle.wav
     * * garrysmod/addons/myCoolAddon/sound/vehicles/enzo/idle.wav
     * * garrysmod/addons/myCoolAddon/gamemodes/MyCoolGameMode/content/sound/vehicles/enzo/idle.wav 
     */
    function Add(soundData: SoundData): void;
    
    /**
     * Overrides sounds defined inside of a txt file; typically used for adding map-specific sounds. 
     * @param filepath  Path to the script file to load. 
     * @example
     * 
     * sound.AddSoundOverrides("scripts/override_test.txt")
     * 
     * // Adds and overrides all sounds defined in scripts/override_test.txt 
     */
    function AddSoundOverrides(filepath: string): void;
    
    /**
     * Creates a sound from a function.
     * 
     * **Bug [#3360](https://github.com/Facepunch/garrysmod-issues/issues/3360):**
     * >This function cannot generate sounds that have a duration of less than 1 second. 
     * @param indentifier  An unique identified for the sound. You cannot override already existing ones. 
     * @param samplerate  The sample rate of the sound. Must be 11025, 22050 or 44100. 
     * @param length  The length in seconds of the sound to generate. 
     * @param callback  A function which will be called to generate every sample on the sound. This function gets the current sample number passed as the first argument. The return value must be between -1.0 and 1.0. Other values will wrap back to the -1 to 1 range and basically clip. There are 65535 possible quantifiable values between -1 and 1. 
     * @example
     * 
     * local frequency = 2000 // Hz
     * local samplerate = 44100
     * 
     * local function data(t)
     *     return math.sin( t * math.pi * 2 / samplerate * frequency )
     * end
     * 
     * test_sound_id = test_sound_id and test_sound_id + 1 or 10
     * 
     * sound.Generate   ("testgen" .. test_sound_id, samplerate, 2, data)
     * surface.PlaySound("testgen" .. test_sound_id)
     * 
     * // Plays a 2000 Hz sine wave at maximum volume 
     */
    function Generate(indentifier: string, samplerate: number, length: number, callback: Function): void;
    
    /**
     * Returns properties of the soundscript. 
     * @param name  The name of the sound script 
     * @returns The properties of the soundscript. See {{Struct|SoundData}} 
     */
    function GetProperties(name: string): SoundData;
    
    /**
     * Returns a list of all registered sound scripts. 
     * @returns The list/array of all registered sound scripts ( No other information is provided ) 
     * @example
     * 
     * file.Write("soundscripts.txt",table.concat(sound.GetTable(),"\n"))
     * 
     * // Writes all the sound scripts to a file in the data folder for easy searching. 
     */
    function GetTable(): table;
    
    /**
     * Plays a sound from the specified position in the world.
     * If you want to play a sound without a position, such as a UI sound, use {{LibraryFunction|surface|PlaySound}} instead. 
     * @param Name  A string path to the sound. 
     * @param Pos  A vector describing where the sound should play. 
     * @param Level  Sound level in decibels. 75 is normal. Ranges from 20 to 180, where 180 is super loud. This affects how far away the sound will be heard. 
     * @param Pitch  An integer describing the sound pitch. Range is from 0 to 255. 100 is normal pitch. 
     * @param Volume  A float ranging from 0-1 describing the output volume of the sound. 
     * @example
     * 
     * sound.Play( "ambient/explosions/exp1.wav", Vector(0, 0, 0) )
     * 
     * // Plays an explosion sound at the (0, 0, 0) map coordinates. 
     */
    function Play(Name: string, Pos: Vector, Level: number, Pitch: number, Volume: number): void;
    
    /**
     * Plays a file from GMod directory. You can find a list of all error codes [http://www.un4seen.com/doc/#bass/BASS_ErrorGetCode.html here]
     * 
     * For external file/stream playback, see {{LibraryFunction|sound|PlayURL}}.
     * 
     * **Bug [#1752](https://github.com/Facepunch/garrysmod-issues/issues/1752):**
     * >This fails for looping .wav files in 3D mode.
     * 
     * **Bug [#2304](https://github.com/Facepunch/garrysmod-issues/issues/2304):**
     * >This fails with unicode file names. 
     * @param path  The path to the file to play.
     * 
     * Unlike other sound functions and structures, the path is relative to ''garrysmod/'' instead of ''garrysmod/sound/'' 
     * @param flags  Flags for the sound. Can be one or more of following, separated by a space (" "):
     * * 3d - Makes the sound 3D, so you can set its position
     * * mono - Forces the sound to have only one channel
     * * noplay - Forces the sound not to play as soon as this function is called
     * * noblock - Disables streaming in blocks. It is more resource-intensive, but it is required for {{ClassFunction|IGModAudioChannel|SetTime}}.
     * 
     * If you don't want to use any of the above, you can just leave it as "". 
     * @param callback  Callback function that is called as soon as the the stream is loaded. It has next arguments:
     * 
     * {{FuncArg|IGModAudioChannel|soundchannel|The sound channel. Will be nil if an error occured.}}
     * 
     * {{FuncArg|number|errorID|ID of an error if an error has occured. Will be nil, otherwise.}}
     * 
     * {{FuncArg|string|errorName|Name of an error if an error has occured. Will be nil, otherwise.}} 
     * @example
     * 
     * sound.PlayFile( "sound/music/vlvx_song22.mp3", "", function( station )
     * 	if ( IsValid( station ) ) then station:Play() end
     * end )
     * 
     * // Plays the "Vortal Combat" soundtrack from Half-Life 2: Episode 2 
     */
    function PlayFile(path: string, flags: string, callback: Function): void;
    
    /**
     * Allows you to play external sound files, as well as online radio streams.
     * You can find a list of all error codes [http://www.un4seen.com/doc/#bass/BASS_ErrorGetCode.html here]
     * 
     * For offline file playback, see {{LibraryFunction|sound|PlayFile}}.
     * 
     * **Bug [#2296](https://github.com/Facepunch/garrysmod-issues/issues/2296):**
     * >Due to a bug with [http://www.un4seen.com/ BASS], AAC codec streams cannot be played in 3D mode. 
     * @param url  The URL of the sound to play 
     * @param flags  Flags for the sound. Can be one or more of following, separated by a space (" "):
     * * 3d - Makes the sound 3D, so you can set its position
     * * mono - Forces the sound to have only one channel
     * * noplay - Forces the sound not to play as soon as this function is called
     * * noblock - Disables streaming in blocks. It is more resource-intensive, but it is required for {{ClassFunction|IGModAudioChannel|SetTime}}.
     * 
     * If you don't want to use any of the above, you can just leave it as "". 
     * @param callback  Callback function that is called as soon as the the stream is loaded. It has next arguments:
     * 
     * {{FuncArg|IGModAudioChannel|soundchannel|The sound channel}}
     * 
     * {{FuncArg|number|errorID|ID of an error, if an error has occured}}
     * 
     * {{FuncArg|string|errorName|Name of an error, if an error has occured}} 
     * @example
     * 
     * sound.PlayURL ( "URL", "3d", function( station )
     * 	if ( IsValid( station ) ) then
     * 
     * 		station:SetPos( LocalPlayer():GetPos() )
     * 	
     * 		station:Play()
     * 
     * 	else
     * 
     * 		LocalPlayer():ChatPrint( "Invalid URL!" )
     * 
     * 	end
     * end )
     * 
     * // Example usage of the function. 
     */
    function PlayURL(url: string, flags: string, callback: Function): void;
}

/**
 * A SpawnIcon displays an image for the given model path. It is mostly used in the Spawn Menu (Q). 
 * @example
 * 
 * local Panel = vgui.Create( "DFrame" ) // Main Frame
 * Panel:SetPos( 200, 200 )
 * Panel:SetSize( 200, 200 )
 * Panel:SetTitle( "Spawn Icon Test" )
 * Panel:SetVisible( true )
 * Panel:SetDraggable( false )
 * Panel:ShowCloseButton( true )
 * Panel:MakePopup()
 * 
 * local SpawnI = vgui.Create( "SpawnIcon" , Panel ) // SpawnIcon
 * SpawnI:SetPos( 75, 75 )
 * SpawnI:SetModel( "models/props_borealis/bluebarrel001.mdl" ) // Model we want for this spawn icon
 * 
 * // Creates a DFrame with a SpawnIcon inside. 
 */
declare class SpawnIcon extends DButton {
    /**
     * Causes a {{Type|SpawnIcon}} to rebuild its model image.
     * [[Category:ModelImage]][[Category:SpawnIcon]] 
     */
    public RebuildSpawnIcon(): void;
    
    /**
     * Causes a {{Type|SpawnIcon}} to rebuild its model image.
     * [[Category:ModelImage]][[Category:SpawnIcon]] 
     */
    public RebuildSpawnIcon(): void;
    
    /**
     * Re-renders a spawn icon with customized cam data.
     * 
     * **Note:**
     * >This function does '''not''' accept the standard {{Struct|CamData}}.
     * 
     * [[Category:ModelImage]][[Category:SpawnIcon]] 
     * @param data  A four-membered table containing the information needed to re-render:
     * * {{FuncArg|Vector|cam_pos|The relative camera position the model is viewed from.}}
     * * {{FuncArg|Angle|cam_ang|The camera angle the model is viewed from.}}
     * * {{FuncArg|number|cam_fov|The camera's field of view (FOV).}}
     * * {{FuncArg|Entity|ent|The entity object of the model.}}
     * See the example below for how to retrieve these values. 
     * @example
     * 
     * function PANEL:RenderIcon()
     * 	
     * 	local ent = self.ModelPanel:GetEntity()
     * 	
     * 	local tab = {}
     * 	tab.ent		= ent
     * 	tab.cam_pos = self.ModelPanel:GetCamPos()
     * 	tab.cam_ang = self.ModelPanel:GetLookAng()
     * 	tab.cam_fov = self.ModelPanel:GetFOV()
     * 
     * 	self.SpawnIcon:RebuildSpawnIconEx( tab )
     * end
     * 
     * // The ''RenderIcon'' method used by {{Type|IconEditor}}. ''SpawnIcon'' is a {{Type|SpawnIcon}} and ''ModelPanel'' is a {{Type|DAdjustableModelPanel}}. 
     */
    public RebuildSpawnIconEx(data: table): void;
    
    /**
     * Re-renders a spawn icon with customized cam data.
     * 
     * **Note:**
     * >This function does '''not''' accept the standard {{Struct|CamData}}.
     * 
     * [[Category:ModelImage]][[Category:SpawnIcon]] 
     * @param data  A four-membered table containing the information needed to re-render:
     * * {{FuncArg|Vector|cam_pos|The relative camera position the model is viewed from.}}
     * * {{FuncArg|Angle|cam_ang|The camera angle the model is viewed from.}}
     * * {{FuncArg|number|cam_fov|The camera's field of view (FOV).}}
     * * {{FuncArg|Entity|ent|The entity object of the model.}}
     * See the example below for how to retrieve these values. 
     * @example
     * 
     * function PANEL:RenderIcon()
     * 	
     * 	local ent = self.ModelPanel:GetEntity()
     * 	
     * 	local tab = {}
     * 	tab.ent		= ent
     * 	tab.cam_pos = self.ModelPanel:GetCamPos()
     * 	tab.cam_ang = self.ModelPanel:GetLookAng()
     * 	tab.cam_fov = self.ModelPanel:GetFOV()
     * 
     * 	self.SpawnIcon:RebuildSpawnIconEx( tab )
     * end
     * 
     * // The ''RenderIcon'' method used by {{Type|IconEditor}}. ''SpawnIcon'' is a {{Type|SpawnIcon}} and ''ModelPanel'' is a {{Type|DAdjustableModelPanel}}. 
     */
    public RebuildSpawnIconEx(data: table): void;
    
    /**
     * [[Category:ModelImage]][[Category:SpawnIcon]]Sets the model to be displayed by {{Type|SpawnIcon}}.[[Category:SpawnIcon]] 
     * @param ModelPath  The path of the model to set 
     * @param skin [=0] The skin to set 
     * @param bodygroups [=""] The body groups to set. Each single-digit number in the string represents a separate bodygroup. '''This make it impossible to set any body group to a value higher than 9!''' 
     */
    public SetModel(ModelPath: string, skin?: number, bodygroups?: string): void;
    
    /**
     * [[Category:ModelImage]][[Category:SpawnIcon]]Sets the model to be displayed by {{Type|SpawnIcon}}.[[Category:SpawnIcon]] 
     * @param ModelPath  The path of the model to set 
     * @param skin [=0] The skin to set 
     * @param bodygroups [=""] The body groups to set. Each single-digit number in the string represents a separate bodygroup. '''This make it impossible to set any body group to a value higher than 9!''' 
     */
    public SetModel(ModelPath: string, skin?: number, bodygroups?: string): void;
    
    /**
     * [[Category:ModelImage]][[Category:SpawnIcon]]Sets the [[Silkicons|silkicon]] of a panel object such as a {{Type|SpawnIcon}} and {{Type|ModelImage}}. 
     * @param icon  The [[Silkicons|silkicon]] to use. 
     */
    public SetSpawnIcon(icon: string): void;
    
    /**
     * [[Category:ModelImage]][[Category:SpawnIcon]]Sets the [[Silkicons|silkicon]] of a panel object such as a {{Type|SpawnIcon}} and {{Type|ModelImage}}. 
     * @param icon  The [[Silkicons|silkicon]] to use. 
     */
    public SetSpawnIcon(icon: string): void;
}

/**
 * The spawnmenu library is a set of functions that allow you to control the spawn (Q) menu. 
 */
declare namespace spawnmenu {
    /**
     * Activates a tool, opens context menu and brings up the tool gun. 
     * @param tool  Tool class/file name 
     */
    function ActivateTool(tool: string): void;
    
    /**
     * Activates tools context menu in specified tool tab. 
     * @param tab  The tabID of the tab to open the context menu in 
     * @param cp  The control panel to open 
     */
    function ActivateToolPanel(tab: number, cp: Panel): void;
    
    /**
     * Returns currently opened control panel of a tool, post process effect or some other menu in spawnmenu. 
     * @returns The currently opened control panel, if any. 
     */
    function ActiveControlPanel(): Panel;
    
    /**
     * Registers a new content type that is saveable into spawnlists.
     * Created/called by {{LibraryFunction|spawnmenu|CreateContentIcon}}. 
     * @param name  An unique name of the content type. 
     * @param constructor  A function that is called whenever we need create a new panel for this content type.
     * 
     * It has two arguments:
     * 
     * {{FuncArg|Panel|container|The container/parent of the new panel}}
     * 
     * {{FuncArg|table|data|Data for the content type passed from {{LibraryFunction|spawnmenu|CreateContentIcon}}}} 
     * @example
     * 
     * spawnmenu.AddContentType( "header", function( container, obj )
     * 
     * 	if ( !obj.text or type(obj.text) != "string" ) then return end
     * 
     * 	local label = vgui.Create( "ContentHeader", container )
     * 	label:SetText( obj.text )
     * 	
     * 	container:Add( label )
     * 	
     * end )
     * 
     * // A simple header content type. 
     */
    function AddContentType(name: string, constructor: Function): void;
    
    /**
     * Inserts a new tab into the CreationMenus table, which will be used by the creation menu to generate its tabs (Spawnlists, Weapons, Entities, etc.) 
     * @param name  What text will appear on the tab (I.E Spawnlists). 
     * @param func  The function called to generate the content of the tab. 
     * @param material [="icon16/exclamation.png"] Path to the material that will be used as an icon on the tab. 
     * @param order [=1000] The order in which this tab should be shown relative to the other tabs on the creation menu. 
     * @param tooltip [=nil] The tooltip to be shown for this tab. 
     * @example
     * 
     * spawnmenu.AddCreationTab( "#spawnmenu.category.dupes", function()
     * 
     *     HTML = vgui.Create( "DHTML" );
     *         JS_Language( HTML )
     *         HTML:SetAllowLua( true );
     *         HTML:OpenURL( "asset://garrysmod/html/dupes.html" );
     *         HTML:Call( "SetDupeSaveState( " .. tostring( DupeInClipboard ).. " );" );        
     * 
     *     return HTML
     * 
     * end, "icon16/control_repeat_blue.png", 200 )
     * 
     * // An excerpt from the Dupe creation menu tab. 
     */
    function AddCreationTab(name: string, func: Function, material?: string, order?: number, tooltip?: string): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  
     * 
     * Used to populate prop categories in the spawnmenu tree. This function should generally be called within {{HookFunction|SANDBOX|PopulatePropMenu}}.
     * 
     * Looking at [https://github.com/garrynewman/garrysmod/blob/master/garrysmod/settings/spawnlist/default/003-left%204%20dead.txt this file] will help you to understand where the information passed to this function comes from. 
     * @param filename  The filename of the list. This name has to be unique, but doesn't have to actually exist. If a player saves changes made to this list, it will be saved under this name. 
     * @param name  The name of the category e.g. ''Comic Props''. 
     * @param contents  A table of entries for the spawn menu. It must be numerically indexed.
     * 
     * Each member of the table is a sub-table containing a type member, and other members depending on the type.
     * 
     * * {{FuncArg|string|type|"header" - a simple header for organization}}
     * ** {{FuncArg|string|text|The text that the header will display}}
     * 
     * * {{FuncArg|string|type|"model" - spawns a model where the player is looking}}
     * ** {{FuncArg|string|model|The path to the model file}}
     * ** {{FuncArg|number|skin|The skin for the model to use (optional)}}
     * ** {{FuncArg|string|body|The bodygroups for the model (optional)}}
     * ** {{FuncArg|number|wide|The width of the spawnicon (optional)}}
     * ** {{FuncArg|number|tall|The height of the spawnicon (optional)}}
     * 
     * * {{FuncArg|string|type|"entity" - spawns an entity where the player is looking (appears in the Entities tab by default)}}
     * ** {{FuncArg|string|spawnname|The filename of the entity, for example "sent_ball"}}
     * ** {{FuncArg|string|nicename|The name of the entity to display}}
     * ** {{FuncArg|string|material|The icon to display, this should be set to "entities/<sent_name>.png"}}
     * ** {{FuncArg|boolean|admin|Whether the entity is only spawnable by admins (optional)}}
     * 
     * * {{FuncArg|string|type|"vehicle" - spawns a vehicle where the player is looking (appears in the Vehicles tab by default)}}
     * ** {{FuncArg|string|spawnname|The filename of the vehicle}}
     * ** {{FuncArg|string|nicename|The name of the vehicle to display}}
     * ** {{FuncArg|string|material|The icon to display}}
     * ** {{FuncArg|boolean|admin|Whether the vehicle is only spawnable by admins (optional)}}
     * 
     * * {{FuncArg|string|type|"npc" - spawns an NPC where the player is looking (appears in the NPCs tab by default)}}
     * ** {{FuncArg|string|spawnname|The spawn name of the NPC}}
     * ** {{FuncArg|string|nicename|The name to display}}
     * ** {{FuncArg|string|material|The icon to display}}
     * ** {{FuncArg|table|weapon|A table of potential weapons (each a string) to give to the NPC. When spawned, one of these will be chosen randomly each time.}}
     * ** {{FuncArg|boolean|admin|Whether the NPC is only spawnable by admins (optional)}}
     * 
     * * {{FuncArg|string|type|"weapon" - When clicked, gives the player a weapon; when middle-clicked, spawns a weapon where the player is looking (appears in the Weapons tab by default)}}
     * ** {{FuncArg|string|spawnname|The spawn name of the weapon}}
     * ** {{FuncArg|string|nicename|The name to display}}
     * ** {{FuncArg|string|material|The icon to display}}
     * ** {{FuncArg|boolean|admin|Whether the weapon is only spawnable by admins (optional)}} 
     * @param icon  The icon to use in the tree. 
     * @param id [=1000] The unique ID number for the spawnlist category. Used to make sub categories. See "parentID" parameter below. If not set, it will be automatically set to ever increasing number, starting with 1000. 
     * @param parentID [=0] The unique ID of the parent category. This will make the category a subcategory of that given. ''0'' makes this a base category (such as ''Builder''). 
     * @param needsApp [=""] The needed game for this prop category, if one is needed. If the specified game is not mounted, the category isn't shown. This uses the shortcut name, e.g. ''cstrike'', and not the Steam AppID. 
     * @example
     * 
     * hook.Add("PopulatePropMenu", "Add Two Of Each", function()
     * 	
     * 	local contents = {}
     * 	
     * 	// Props
     * 	table.insert( contents, {
     * 		type = "header",
     * 		text = "Props"
     * 	} )
     * 	table.insert( contents, {
     * 		type = "model",
     * 		model = "models/props_c17/oildrum001.mdl"
     * 	} )
     * 	table.insert( contents, {
     * 		type = "model",
     * 		model = "models/props_wasteland/cargo_container01.mdl",
     * 		skin = 1,
     * 		wide = 128,
     * 		tall = 64
     * 	} )
     * 
     * 	// Entities
     * 	table.insert( contents, {
     * 		type = "header",
     * 		text = "Entities"
     * 	} )
     * 	table.insert( contents, {
     * 		type = "entity",
     * 		spawnname = "sent_ball",
     * 		nicename = "Bouncy Ball",
     * 		material = "entities/sent_ball.png"
     * 	} )
     * 	table.insert( contents, {
     * 		type = "entity",
     * 		spawnname = "combine_mine",
     * 		nicename = "Hopper Mine",
     * 		material = "entities/combine_mine.png"
     * 	} )
     * 
     * 	// Vehicles
     * 	table.insert( contents, {
     * 		type = "header",
     * 		text = "Vehicles"
     * 	} )
     * 	table.insert( contents, {
     * 		type = "vehicle",
     * 		spawnname = "Airboat",
     * 		nicename = "Half-Life 2 Airboat",
     * 		material = "entities/Airboat.png"
     * 	} )
     * 	table.insert( contents, {
     * 		type = "vehicle",
     * 		spawnname = "Chair_Office2",
     * 		nicename = "Executive's Chair",
     * 		material = "entities/Chair_Office2.png"
     * 	} )
     * 
     * 	// NPCs
     * 	table.insert( contents, {
     * 		type = "header",
     * 		text = "NPCs"
     * 	} )
     * 	table.insert( contents, {
     * 		type = "npc",
     * 		spawnname = "npc_citizen",
     * 		nicename = "A random citizen",
     * 		material = "entities/npc_citizen.png",
     * 		weapon = { "weapon_smg1", "weapon_crowbar" }
     * 	} )
     * 	table.insert( contents, {
     * 		type = "npc",
     * 		spawnname = "npc_headcrab",
     * 		nicename = "Headhumper",
     * 		material = "entities/npc_headcrab.png"
     * 	} )
     * 
     * 	// Weapons
     * 	table.insert( contents, {
     * 		type = "header",
     * 		text = "Weapons"
     * 	} )
     * 	table.insert( contents, {
     * 		type = "weapon",
     * 		spawnname = "weapon_crowbar",
     * 		nicename = "Crowbar",
     * 		material = "entities/weapon_crowbar.png",
     * 	} )
     * 	table.insert( contents, {
     * 		type = "weapon",
     * 		spawnname = "weapon_smg1",
     * 		nicename = "SMG",
     * 		material = "entities/weapon_smg1.png",
     * 	} )
     * 
     * 	spawnmenu.AddPropCategory( "TwoOfEach", "Two of each type", contents, "icon16/box.png" )
     * end )
     * 
     * // Create a spawn menu with two icons for each type 
     */
    function AddPropCategory(filename: string, name: string, contents: table, icon: string, id?: number, parentID?: number, needsApp?: string): void;
    
    /**
     * Used to create a new category in the list inside of a spawnmenu ToolTab.
     * 
     * You must call this function from {{HookFunction|SANDBOX|AddToolMenuCategories}} for it to work properly. 
     * @param tab  The ToolTab name, as created with {{LibraryFunction|spawnmenu|AddToolTab}}.
     * 
     * You can also use the default ToolTab names "Main" and "Utilities". 
     * @param RealName  The identifier name 
     * @param PrintName  The displayed name 
     * @example
     * 
     * spawnmenu.AddToolCategory( "Main", "Constraints", "#spawnmenu.tools.constraints" )
     * 
     * // Adds the Constraints category to the Main ToolTab. See ''lua\includes\modules\spawnmenu.lua''.@example
     * 
     * spawnmenu.AddToolCategory( "Utilities", "User", "#spawnmenu.utilities.user" )
     * 
     * // Adds the User category to the Utilities ToolTab. See ''lua\autorun\utilities_menu.lua''. 
     */
    function AddToolCategory(tab: string, RealName: string, PrintName: string): void;
    
    /**
     * Adds an option to the right side of the spawnmenu 
     * @param tab  The spawnmenu tab to add into (for example "Utilities") 
     * @param category  The category to add into (for example "Admin") 
     * @param classRef  Unique identifier of option to add 
     * @param name  The nice name of item 
     * @param cmd  Command to execute when the item is selected 
     * @param config  Config name, used in older versions to load tool settings UI from a file. No longer works.
     * 
     * **Deprecated:**
     * >Category=No 
     * @param cpanel  A function to build the context panel. The function has one argument:
     * * {{FuncArg|Panel|pnl|A {{Type|DForm}} that will be shown in the context menu}} 
     * @param table [={}] Allows to override the table that will be added to the tool list. Some of the fields will be overwritten by this function. 
     * @example
     * 
     * hook.Add( "PopulateToolMenu", "CustomMenuSettings", function()
     * 	spawnmenu.AddToolMenuOption( "Utilities", "Stuff", "Custom_Menu", "My Custom Menu", "", "", function( panel )
     * 		panel:ClearControls()
     * 		panel:NumSlider( "Gravity", "sv_gravity", 0, 600 )
     * 		// Add stuff here
     * 	end )
     * end )
     * 
     * // Adds a new option to the menu with a slider to change the gravity 
     */
    function AddToolMenuOption(tab: string, category: string, classRef: string, name: string, cmd: string, config: string, cpanel: DForm, table?: table): void;
    
    /**
     * Adds a new tool tab to the right side of the spawnmenu via the {{HookFunction|SANDBOX|AddToolMenuTabs}} hook.
     * 
     * This function is a inferior duplicate of {{LibraryFunction|spawnmenu|GetToolMenu}}, just without its return value. 
     * @param name  The internal name of the tab. This is used for sorting. 
     * @param label [=name] The 'nice' name of the tab (Tip: {{LibraryFunction|language|Add}}) 
     * @param icon [="icon16/wrench.png"] The filepath to the icon of the tab. Should be a .png 
     * @example
     * 
     * hook.Add( "AddToolMenuTabs", "myHookClass", function()
     * 	spawnmenu.AddToolTab( "Tab name!", "#Unique_Name", "icon16/wrench.png" )
     * end )
     * 
     * // Creates a new tab named, "Tab name!" with a unique name and a wrench icon. 
     */
    function AddToolTab(name: string, label?: string, icon?: string): void;
    
    /**
     */
    function ClearToolMenus(): void;
    
    /**
     * Creates a new content icon. 
     * @param type  The type of the content icon. 
     * @param parent  The parent to add the content icon to. 
     * @param data  The data to send to the content icon in {{LibraryFunction|spawnmenu|AddContentType}} 
     * @returns The created content icon, if it was returned by {{LibraryFunction|spawnmenu|AddContentType}} 
     */
    function CreateContentIcon(type: string, parent: Panel, data: table): Panel;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Calls {{LibraryFunction|spawnmenu|SaveToTextFiles}}. 
     * @param spawnlists  A table containing spawnlists. 
     */
    function DoSaveToTextFiles(spawnlists: table): void;
    
    /**
     * Returns the function to create an vgui element for a specified content type 
     * @param contentType 
     * @returns The panel creation function 
     */
    function GetContentType(contentType: string): Function;
    
    /**
     * Gets the CreationMenus table, which was filled with creation menu tabs from {{LibraryFunction|spawnmenu|AddCreationTab}}. 
     * @returns The CreationMenus table. See the {{Struct|CreationMenus}}. 
     */
    function GetCreationTabs(): CreationMenus;
    
    /**
     * Similar to {{LibraryFunction|spawnmenu|GetPropTable}}, but only returns spawnlists created by addons via {{LibraryFunction|spawnmenu|AddPropCategory}}.
     * 
     * These spawnlists are shown in a separate menu in-game. 
     * @returns See {{LibraryFunction|spawnmenu|GetPropTable}} for table format. 
     */
    function GetCustomPropTable(): table;
    
    /**
     * Returns a table of all prop categories and their props in the spawnmenu.
     * 
     * Note that if the spawnmenu has not been populated, this will return an empty table.
     * 
     * This will not return spawnlists created by addons, see  {{LibraryFunction|spawnmenu|GetCustomPropTable}} for that. 
     * @returns Table of all the prop categories and props in the following format:
     * ```{
     * 	["settings/spawnlist/001-construction props.txt"] = {
     * 		name = "Construction Props",
     * 		icon = "icon16/page.png",
     * 		id = 1,
     * 		parentid = 0,
     * 		needsapp = "",
     * 		contents = {
     * 			{
     * 				model = "models/Cranes/crane_frame.mdl",
     * 				type = "model"
     * 			}
     * 			-- etc.
     * 		},
     * 	}
     * 	-- etc.
     * }``` 
     */
    function GetPropTable(): table;
    
    /**
     * Adds a new tool tab (or returns an existing one by name) to the right side of the spawnmenu via the {{HookFunction|SANDBOX|AddToolMenuTabs}} hook. 
     * @param name  The internal name of the tab. This is used for sorting. 
     * @param label [=name] The 'nice' name of the tab 
     * @param icon [="icon16/wrench.png"] The filepath to the icon of the tab. Should be a .png 
     * @returns A table of tables representing categories and items in the left part of the tab. See example below to example structure. 
     * @example
     * 
     * PrintTable( spawnmenu.GetToolMenu( "Main" ) )
     * 
     * // Prints out the contents of the default Tool Tab. 
     */
    function GetToolMenu(name: string, label?: string, icon?: string): table[];
    
    /**
     * Gets a table of tools on the client. 
     * @returns A table with groups of tools, along with information on each tool. 
     * @example
     * 
     * PrintTable( spawnmenu.GetTools() )
     * 
     * // Prints the output 
     */
    function GetTools(): table;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Calls {{LibraryFunction|spawnmenu|PopulateFromTextFiles}}. 
     */
    function PopulateFromEngineTextFiles(): void;
    
    /**
     * Loads spawnlists from text files. 
     * @param callback  The function to call. Arguments are ( strFilename, strName, tabContents, icon, id, parentid, needsapp ) 
     */
    function PopulateFromTextFiles(callback: Function): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Saves a table of spawnlists to files. 
     * @param spawnlists  A table containing spawnlists. 
     */
    function SaveToTextFiles(spawnlists: table): void;
    
    /**
     * Sets currently active control panel to be returned by {{LibraryFunction|spawnmenu|ActiveControlPanel}}. 
     * @param pnl  The panel to set. 
     */
    function SetActiveControlPanel(pnl: Panel): void;
    
    /**
     * **Deprecated!**
     * 
     * Supposed to open specified tool tab in spawnmenu, in reality does nothing. 
     * @param id  The tab ID to open 
     */
    function SwitchToolTab(id: number): void;
}

/**
 * The SQL library allows you to access powerful database software included with Garry's Mod. It is the preferred and fastest method of storing large amounts of data. The database is located in sv.db serverside and cl.db clientside, both in the Garry's Mod base folder. SQL is a whole scripting language in itself although relatively simple, it's something you'll need to read up on before using this library. 
 */
declare namespace sql {
    /**
     * Tells the engine a set of queries is coming. Will wait until {{LibraryFunction|sql|Commit}} is called to run them.
     * 
     * This is most useful when you run more than 100+ queries.
     * 
     * This is equivalent to ```sql.Query("BEGIN")``` 
     */
    function Begin(): void;
    
    /**
     * Tells the engine to execute a series of queries queued for execution, must be preceded by {{LibraryFunction|sql|Begin}}
     * 
     * This is equivalent to ```sql.Query("COMMIT")``` 
     */
    function Commit(): void;
    
    /**
     * Returns the last error from a SQLite query. 
     * @returns error 
     */
    function LastError(): string;
    
    /**
     * Performs a query on the local SQLite database, returns a table as result set, nil if result is empty and false on error. 
     * @param query  The query to execute. 
     * @returns false is returned if there is an error, nil if the query returned no data. 
     * @example
     * 
     * function CreateTable()
     *      sql.Query("CREATE TABLE player_data(SteamID TEXT, Money INTEGER)")
     * end
     * 
     * function NewPlayerToDataBase(ply)
     *      sql.Query("INSERT INTO player_data(SteamID, Money) VALUES('"..ply:SteamID().."', 0)")
     * end
     * 
     * function SavePlayerToDatabase(ply, Money)
     *      sql.Query("UPDATE player_data SET Money="..Money.." WHERE SteamID='"..ply:SteamID().."'")
     * end
     * 
     * // Functions that are examples of saving and creating information into the database. 
     */
    function Query(query: string): table;
    
    /**
     * Performs the query like {{LibraryFunction|sql|Query}}, but returns the first row found.
     * 
     * Basically equivalent to```sql.Query("*query* LIMIT 1")``` 
     * @param query  The input query 
     * @param row [=1] The row number. Say we receive back 5 rows, putting 3 as this argument will give us row #3. 
     * @returns The returned row. 
     */
    function QueryRow(query: string, row?: number): table;
    
    /**
     * Performs the query like {{LibraryFunction|sql|QueryRow}}, but returns the first value found. 
     * @param query  The input query. 
     * @returns The returned value; the engine automatically converts numerical output to Lua numbers. 
     */
    function QueryValue(query: string): any;
    
    /**
     * Escapes dangerous characters and symbols from user input used in an SQLite SQL Query.
     * 
     * **Note:**
     * >this function is not meant to be used with external database engines such as ''MySQL''. Escaping strings with inadequate functions is dangerous! 
     * @param str  The string to be escaped. 
     * @param bNoQuotes [=false] Set this as true, and the function will not wrap the input string in apostrophes. 
     * @returns The escaped input. 
     */
    function SQLStr(str: string, bNoQuotes?: boolean): string;
    
    /**
     * Returns if the table with the specified name exists. 
     * @param tableName  The name of the table to check. 
     * @returns exists 
     */
    function TableExists(tableName: string): boolean;
}

/**
 * An object returned by {{LibraryFunction|util|Stack}}.
 * 
 * Like a Lua table, a Stack is a container. It follows the principle of LIFO (last in, first out).
 * 
 * The Stack works like a stack of papers: the first page you put down (push) will be the last one you remove (pop). That also means that the last page you put down, will be the first to be removed. 
 */
declare class Stack {
    /**
     * Pop an item from the stack 
     * @param amount [=1] Amount of items you want to pop. 
     */
    public Pop(amount?: number): void;
    
    /**
     * Push an item onto the stack 
     * @param object  The item you want to push 
     */
    public Push(object: any): void;
    
    /**
     * Returns the size of the stack 
     * @returns The size of the stack 
     */
    public Size(): number;
    
    /**
     * Get the item at the top of the stack 
     * @returns The item at the top of the stack 
     */
    public Top(): any;
}

/**
 * <!-- This category uses the form [[Has default form::Function]]. // How does this help? -->
 * Steamworks related functions. 
 */
declare namespace steamworks {
    /**
     * Refreshes clients addons. 
     * @example
     * 
     * steamworks.Subscribe( 21197 )
     * steamworks.ApplyAddons()
     * 
     * // Subscribes to gm_construct_beta and reloads addons. 
     */
    function ApplyAddons(): void;
    
    /**
     * Downloads a file from the supplied addon and saves it as a .cache file in garrysmod/cache folder.
     * 
     * This is mostly used to download the preview image of the addon, but the game seems to also use it to download replays and saves.
     * 
     * In case the retrieved file is an image and you need the {{Type|IMaterial}}, use {{GlobalFunction|AddonMaterial}} with the path supplied from the callback. 
     * @param workshopPreviewID  The Preview ID of workshop item. 
     * @param uncompress  Whether to uncompress the file or not, assuming it was compressed with LZMA.
     * 
     * You will usually want to set this to true. 
     * @param resultCallback  The function to process retrieved data. The first and only argument is a string, containing path to the saved file. 
     * @example
     * 
     * steamworks.FileInfo( 21197, function( result )
     * 	steamworks.Download( result.previewid, true, function( name )
     * 		print( name )
     * 	end) 
     * end)
     * 
     * // Downloads and saves icon of Gm_construct_Beta Steam Workshop addon. 
     */
    function Download(workshopPreviewID: string, uncompress: boolean, resultCallback: Function): void;
    
    /**
     * Retrieves info about supplied Steam Workshop addon. 
     * @param workshopItemID  The ID of Steam Workshop item. 
     * @param resultCallback  The function to process retrieved data. The first and only argument is a table, containing all the info. 
     * @example
     * 
     * steamworks.FileInfo( 21197, function( result ) PrintTable( result ) end)
     * 
     * // Retries all info of gm_construct_Beta Steam Workshop addon. 
     */
    function FileInfo(workshopItemID: string, resultCallback: Function): void;
    
    /**
     * Retrieves a customized list of Steam Workshop addons. 
     * @param type  The type of items to retrieve. 
     * @param tags  A table of tags to match. 
     * @param offset  How much of results to skip from first one. Mainly used for pages. 
     * @param numRetrieve  How much addons to retrieve. 
     * @param days  When getting Most Popular content from Steam, this determines a time period. ( 7 = most popular addons in last 7 days, 1 = most popular addons today, etc ) 
     * @param userID  "0" to retrieve all addons, "1" to retrieve addons only published by you. 
     * @param resultCallback  The function to process retrieved data. The first and only argument is a table, containing all the info. 
     * @example
     * 
     * steamworks.GetList( "", nil, nil, 10, nil, 0, function( data ) PrintTable(data) end )
     * 
     * // Retrieves top 10 of Steam Workshop addons. 
     */
    function GetList(type: string, tags: table, offset: number, numRetrieve: number, days: number, userID: string, resultCallback: Function): void;
    
    /**
     * **Deprecated:**
     * >You should use the callback of {{LibraryFunction|steamworks|RequestPlayerInfo}} instead.
     * 
     * Retrieves players name by his 64bit SteamID.
     * 
     * You must call {{LibraryFunction|steamworks|RequestPlayerInfo}} a decent amount of time before calling this function. 
     * @param steamID64  The 64bit Steam ID ( aka Community ID ) of the player 
     * @returns The name of that player 
     * @example
     * 
     * steamworks.RequestPlayerInfo( LocalPlayer():SteamID64() )
     * timer.Simple( 1, function() // this is not instant!
     * 	print( steamworks.GetPlayerName( LocalPlayer():SteamID64() ) )
     * end )
     * 
     * // Retrieves name of local player. 
     */
    function GetPlayerName(steamID64: string): string;
    
    /**
     * Returns whenever the client is subscribed to the specified Steam Workshop item. 
     * @param workshopItemID  The ID of the Steam Workshop item. 
     * @returns Is the client subscribed to the addon or not. 
     * @example
     * 
     * print( steamworks.IsSubscribed( 21197 ) )
     * 
     * // Checks if client is subscribed to Gm_construct_Beta Steam Workshop addon. 
     */
    function IsSubscribed(workshopItemID: string): boolean;
    
    /**
     * Opens the workshop website in the steam overlay browser. 
     * @example
     * 
     * gui.OpenURL( "http://steamcommunity.com/app/4000/workshop/" )
     * 
     * // An alternative to this function. 
     */
    function OpenWorkshop(): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Publishes dupes, saves or demos to workshop. 
     * @param tags  The workshop tags to apply 
     * @param filename  Path to the file to upload 
     * @param image  Path to the image to use as icon 
     * @param name  Name of the Workshop submission 
     * @param desc  Description of the Workshop submission 
     */
    function Publish(tags: table, filename: string, image: string, name: string, desc: string): void;
    
    /**
     * Requests information of the player with SteamID64 for later use with {{LibraryFunction|steamworks|GetPlayerName}}. 
     * @param steamID64  The 64bit Steam ID of player. 
     * @param callback  A callback function with only 1 argument - {{Type|string}} name. 
     * @example
     * 
     * steamworks.RequestPlayerInfo( LocalPlayer():SteamID64() )
     * timer.Simple( 1, function()
     * 	print( steamworks.GetPlayerName( LocalPlayer():SteamID64() ) )
     * end )
     * 
     * // Gets and prints the steam name of the local player 
     */
    function RequestPlayerInfo(steamID64: string, callback: string): void;
    
    /**
     * @param workshopid  The Steam Workshop item id 
     * @returns Whatever you have put in as first argument 
     */
    function SetFileCompleted(workshopid: string): string;
    
    /**
     * Sets whether you have played this addon or not. This will be shown to the user in the Steam Workshop itself:
     * [[File:steamworksSetFilePlayedExample.png]] 
     * @param workshopid  The Steam Workshop item ID 
     * @returns Whatever you have put in as first argument 
     */
    function SetFilePlayed(workshopid: string): string;
    
    /**
     * Sets if an addon should be enabled or disabled. Call {{LibraryFunction|steamworks|ApplyAddons}} afterwards to update. 
     * @param workshopItemID  The ID of the Steam Workshop item we should enable/disable 
     * @param shouldMount  true to enable the item, false to disable. 
     * @example
     * 
     * steamworks.SetShouldMountAddon( 21197, true )
     * steamworks.ApplyAddons()
     * 
     * // Enables the Gm_construct_Beta Steam Workshop addon and reloads addons afterwards 
     */
    function SetShouldMountAddon(workshopItemID: string, shouldMount: boolean): void;
    
    /**
     * Returns whenever the specified Steam Workshop addon will be mounted or not. 
     * @param workshopItemID  The ID of the Steam Workshop 
     * @returns Will the workshop item be mounted or not 
     * @example
     * 
     * print( steamworks.ShouldMountAddon( 21197 ) )
     * 
     * // Checks if the client has enabled Gm_construct_Beta Steam Workshop addon. 
     */
    function ShouldMountAddon(workshopItemID: string): boolean;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Subscribes to the specified workshop addon. Call {{LibraryFunction|steamworks|ApplyAddons}} afterwards to update. 
     * @param workshopItemID  The ID of the Steam Workshop item we should subscribe to 
     * @example
     * 
     * steamworks.Subscribe( "21197" )
     * steamworks.ApplyAddons()
     * 
     * // Subscribes to the Gm_construct_Beta Steam Workshop addon and reloads addons afterwards 
     */
    function Subscribe(workshopItemID: string): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Unsubscribes to the specified workshop addon. Call {{LibraryFunction|steamworks|ApplyAddons}} afterwards to update.
     * 
     * This function should ''never'' be called without a user's consent and should not be called if the addon is currently in use (aka: the user is not in the main menu) as it may result in unexpected behaviour. 
     * @param workshopItemID  The ID of the Steam Workshop item we should unsubscribe from. 
     * @example
     * 
     * steamworks.Unsubscribe( 21197 )
     * steamworks.ApplyAddons()
     * 
     * // Unsubscribes from the Gm_construct_Beta Steam Workshop addon, if subscribed, and reloads addons afterwards 
     */
    function Unsubscribe(workshopItemID: string): void;
    
    /**
     * Opens the workshop website for specified Steam Workshop item in the Steam overlay browser. 
     * @param workshopItemID  The ID of workshop item. 
     * @example
     * 
     * steamworks.ViewFile( 21197 )
     * 
     * // Opens web page of Gm_construct_Beta Steam Workshop addon in Steam overlay browser. 
     */
    function ViewFile(workshopItemID: string): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Makes the user vote for the specified addon 
     * @param workshopItemID  The ID of workshop item. 
     * @param upOrDown  Sets if the user should vote up/down. True makes them upvote, false down 
     * @example
     * 
     * = steamworks.Vote( 21197, true )
     * 
     * // = Give the Gm_construct_Beta Steam Workshop item a thumbs up. 
     */
    function Vote(workshopItemID: string, upOrDown: boolean): void;
    
    /**
     * Retrieves vote info of supplied addon. 
     * @param workshopItemID  The ID of workshop item. 
     * @param resultCallback  The function to process retrieved data. The first and only argument is a table, containing all the info. 
     */
    function VoteInfo(workshopItemID: string, resultCallback: Function): void;
}

/**
 * The string ''type'' is a sequence of characters.
 * 
 * The string ''library'' is a standard Lua library which provides functions for the manipulation of strings.[https://www.lua.org/pil/20.html]
 * 
 * In Garry's Mod there are several extra useful functions and features added to this library.
 * 
 * Most notably all strings will access this library through the string metatable index function.[https://github.com/Facepunch/garrysmod/blob/master/garrysmod/lua/includes/extensions/string.lua#L288-L299]
 * 
 * This means all strings are treated like table objects and the string library as its [http://wiki.garrysmod.com/page/Meta_Tables Meta Table]
 * ```local x = "Kittens"
 * function string.Foobar(self) return self:Right(4) end
 * 
 * string.Right(x,4) == x:Right(4) == x:Foobar() == ("Kittens"):Right(4) == x[-4]..x[-3]..x[-2]..x[-1]```
 * 
 * The string ''metatable'' however is something else, and to access that you must use getmetatable(""). 
 * 
 * The difference here is related to [[Metamethods]], such as using (+) instead of (..) to concatenate strings.
 * ```print("Kittens" + " And " + "Puppies")
 * 
 * function getmetatable("").__add(str,x) return str..x end // This will work
 * function string.__add(str,x) return str..x end // But this will not.```
 * See [[Meta Tables]] and [[Metamethods]] for more information.
 * {{Warning|Making changes to the string ''metatable'' is not a good idea unless you know what you are doing. Use the string ''library'' instead.}}
 * 
 * This category lists functions available in the string ''library''. 
 */
declare namespace string {
    /**
     * Returns the given string's characters in their numeric ASCII representation. 
     * @param str  The string to get the chars from. 
     * @param startPos [=1] The first character of the string to get the byte of. 
     * @param endPos [=startPos] The last character of the string to get the byte of. 
     * @returns Numerical bytes 
     * @example
     * 
     * print(string.byte("Hello, World!", 1, 4))
     * 
     * // Prints the first 4 numerical bytes from the string "Hello, World!" 
     */
    function byte(str: string, startPos?: number, endPos?: number): any;
    
    /**
     * Takes the given numerical bytes and converts them to a string. 
     * @param bytes  The bytes to create the string from. 
     * @returns String built from given bytes 
     * @example
     * 
     * print( string.char( 72, 101, 108, 108, 111 ) )
     * 
     * // Prints a string consisting of the bytes 72, 101, 108, 108, 111@example
     * 
     * function string.Random( length )
     * 
     * 	local length = tonumber( length )
     * 
     *     if length < 1 then return end
     * 
     *     local result = "" // The empty string we start with
     * 
     *     for i = 1, length do
     * 
     *         result = result .. string.char( math.random(32, 126) )
     * 
     *     end
     * 
     *     return result
     * 
     * end
     * 
     * print( string.Random( 10 ) )
     * 
     * // Helper function to create a random string. 
     */
    function char(...bytes: (any)[]): string;
    
    /**
     * Inserts commas for every third digit. 
     * @param InputNumber  The input number to commafy 
     * @returns Prettystring 
     */
    function Comma(InputNumber: number): string;
    
    /**
     * Returns the binary bytecode of the given function.
     * 
     * **Note:**
     * >This does not work with functions created in C/C++. An error will be thrown if it is 
     * @param func  The function to get the bytecode of 
     * @param stripDebugInfo [=false] True to strip the debug data, false to keep it 
     * @returns Bytecode 
     */
    function dump(func: Function, stripDebugInfo?: boolean): string;
    
    /**
     * Returns whether or not the second passed string matches the end of the first. 
     * @param str  The string whose end is to be checked. 
     * @param end  The string to be matched with the end of the first. 
     * @returns ''true'' if the first string ends with the second, or the second is empty, otherwise ''false''. 
     * @example
     * 
     * local endswith = string.EndsWith("Supercalifragilisticexpialidocious", "docious")
     * if endswith then
     * 	print("Marry Poppins")
     * end
     * 
     * // Looks for arguments at the end of a string. 
     */
    function EndsWith(str: string, end: string): boolean;
    
    /**
     * Splits a string up wherever it finds the given separator.
     * 
     * This is the reverse of {{LibraryFunction|string|Implode}}. 
     * @param separator  The string will be separated wherever this sequence is found. 
     * @param str  The string to split up. 
     * @param use_patterns  Set this to true if your separator is a [[Patterns|pattern]]. 
     * @returns Exploded string as a numerical sequential table. 
     * @example
     * 
     * local sentence = "hello there my name is Player1"
     * local words = string.Explode( " ", sentence )
     * PrintTable( words )
     * 
     * // Splits a sentence into a table of the words in it.@example
     * 
     * hook.Add( "PlayerSay", "GiveHealth", function( ply, text )
     * 	local playerInput = string.Explode( " ", text )
     * 
     * 	if ( playerInput[1] == "!givehealth" ) then 
     * 
     * 		if ( tonumber( playerInput[2] ) ) then
     * 
     * 			ply:SetHealth( tonumber( playerInput[2] ) )
     * 
     * 			print( ply:Nick() .. " set their health to " .. playerInput[2] )
     * 
     * 		end
     * 
     * 	end
     * 
     * end)
     * 
     * // Uses Explode to sort through words that a player says. 
     */
    function Explode(separator: string, str: string, use_patterns: boolean): table;
    
    /**
     * Attempts to find the specified substring in a string, uses [[Patterns]] by default. 
     * @param haystack  The string to search in. 
     * @param needle  The string to find, can contain patterns if enabled. 
     * @param startPos [=1] The position to start the search from, can be negative start position will be relative to the end position. 
     * @param noPatterns [=false] Disable patterns. 
     * @returns [Starting position of the found text, or nil if the text wasn't found, Ending position of found text, or nil if the text wasn't found, Matched text for each group if patterns are enabled and used, or nil if the text wasn't found] 
     * @example
     * 
     * hook.Add( "PlayerSay", "NoHeckHere", function( ply, text )
     * 	local heckStart, heckEnd = string.find( text:lower(), "heck" )
     * 	if heckStart then
     * 		local civilText = string.sub( text, 1, heckStart - 1 ) .. "****" .. string.sub( text, heckEnd + 1 )
     * 		return civilText
     * 	end
     * end )
     * 
     * // Change the word "heck" to "****" in chat messages 
     * !TupleReturn
     */
    function find(haystack: string, needle: string, startPos?: number, noPatterns?: boolean): [number, number, string];
    
    /**
     * Formats the specified values into the string given. 
     * @param format  The string to be formatted.
     * 
     * Follows this format: http://www.cplusplus.com/reference/cstdio/printf/ 
     * @param formatParameters  Values to be formatted into the string. 
     * @returns The formatted string 
     */
    function format(format: string, ...formatParameters: (any)[]): string;
    
    /**
     * Returns the time as a formatted string or as a table if no format is given. 
     * @param float  The time in seconds to format. 
     * @param format [=nil] An optional formatting to use. If no format it specified, a table will be returned instead. 
     * @returns Returns the time as a formatted string only if a format was specified.
     * 
     * Returns a table only if no format was specified. The table will contain these fields:
     * 
     * {{FuncArg|number|ms|milliseconds}}
     * 
     * {{FuncArg|number|s|seconds}}
     * 
     * {{FuncArg|number|m|minutes}}
     * 
     * {{FuncArg|number|h|hours}} 
     * @example
     * 
     * local time = string.FormattedTime( 90, "%02i:%02i:%02i" )
     * print( time )
     * 
     * // Formats the time in seconds@example
     * 
     * local time = string.FormattedTime( 90 )
     * PrintTable( time )
     * 
     * // Returns a table with the time separated by units. 
     */
    function FormattedTime(float: number, format?: string): string;
    
    /**
     * Creates a string from a Color variable. 
     * @param color  The color to put in the string. 
     * @returns Output 
     * @example
     * 
     * MsgN(string.FromColor(Color(255, 0, 255, 125)))
     * 
     * // Demonstrates the use of string.FromColor 
     */
    function FromColor(color: table): string;
    
    /**
     * **Deprecated:**
     * >Use either string.sub(str, index, index) or str[index].
     * 
     *  Returns char value from the specified index in the supplied string. 
     * @param str  The string that you will be searching with the supplied index. 
     * @param index  The index's value of the string to be returned. 
     * @returns str 
     */
    function GetChar(str: string, index: number): string;
    
    /**
     * Returns extension of the file. 
     * @param file  String eg. file-path to get the file extensions from. 
     * @returns fileExtension 
     */
    function GetExtensionFromFilename(file: string): string;
    
    /**
     * Returns file name and extension. 
     * @param pathString  The string eg. file-path to get the file-name from. 
     * @returns The file name 
     * @example
     * 
     * print( string.GetFileFromFilename( "garrysmod/lua/modules/string.lua" ) )
     * 
     * // Returns the file name. 
     */
    function GetFileFromFilename(pathString: string): string;
    
    /**
     * Returns the path only from a file's path. 
     * @param Inputstring  String to get path from. 
     * @returns Path 
     * @example
     * 
     * MsgN(string.GetPathFromFilename("garrysmod/lua/modules/string.lua"))
     * 
     * // Demonstrates the use of string.GetPathFromFilename 
     */
    function GetPathFromFilename(Inputstring: string): string;
    
    /**
     * **Deprecated:**
     * >This function is removed in Lua versions later than what GMod is currently using. Use {{LibraryFunction|string|gmatch}} instead.
     * 
     * Returns an iterator function that is called for every complete match of the pattern, all sub matches will be passed as to the loop. 
     * @param data  The string to search in 
     * @param pattern  The pattern to search for 
     * @returns The iterator function that can be used in a for-in loop 
     * @example
     * 
     * local s = "my awesome stuff 12"
     * for w in string.gfind(s, "(%a)") do
     *     Msg(w)
     * end
     * 
     * // Example usage of the function 
     */
    function gfind(data: string, pattern: string): Function;
    
    /**
     * Using [[Patterns]], returns an iterator which will return either one value if no capture groups are defined, or any capture group matches. 
     * @param data  The string to search in 
     * @param pattern  The pattern to search for 
     * @returns The iterator function that can be used in a for-in loop 
     * @example
     * 
     * str = "qwe,a cde"
     * for s in string.gmatch(str, "[^%s,]+") do
     *     print(s)
     * end
     * 
     * // Explodes the string for each space and comma in the string 
     */
    function gmatch(data: string, pattern: string): Function;
    
    /**
     * This functions main purpose is to replace certain character sequences in a string using [[Patterns]]. 
     * @param str  String which should be modified. 
     * @param pattern  The pattern that defines what should be matched and eventually be replaced. 
     * @param replacement  In case of a string the matches sequence will be replaced with it.
     * 
     * In case of a table, the matched sequence will be used as key and the table will tested for the key, if a value exists it will be used as replacement.
     * 
     * In case of a function all matches will be passed as parameters to the function, the return value(s) of the function will then be used as replacement. 
     * @param maxReplaces [=nil] Maximum number of replacements to be made. 
     * @returns [replaceResult, replaceCount] 
     * @example
     * 
     * string.gsub("hello there!", "hello", "hi")
     * 
     * // Replaces "hello" with "hi" in the string "hello there!" 
     * !TupleReturn
     */
    function gsub(str: string, pattern: string, replacement: string, maxReplaces?: number): [string, number];
    
    /**
     * **Deprecated:**
     * >You really should just use {{LibraryFunction|table|concat}}.
     * 
     * Joins the values of a table together to form a string.
     * 
     * This is the reverse of {{LibraryFunction|string|Explode}} and is functionally identical to {{LibraryFunction|table|concat}}, but with less features. 
     * @param pieces  The table of pieces to concatenate. The keys for these must be numeric and sequential. 
     * @returns Imploded pieces 
     * @example
     * 
     * local tab = { "one", "two", "three" }
     * 
     * print( string.Implode( " ", tab ) )
     * 
     * // Joins all values of a table with a space 
     */
    function Implode(pieces: table): string;
    
    /**
     * **Deprecated:**
     * >You really should just use {{LibraryFunction|table|concat}}.
     * 
     * Joins the values of a table together to form a string.
     * 
     * This is the reverse of {{LibraryFunction|string|Explode}} and is functionally identical to {{LibraryFunction|table|concat}}, but with less features. 
     * @param separator [=""] The separator to insert between each piece. 
     * @param pieces [=] The table of pieces to concatenate. The keys for these must be numeric and sequential. 
     * @returns Imploded pieces 
     * @example
     * 
     * local tab = { "one", "two", "three" }
     * 
     * print( string.Implode( " ", tab ) )
     * 
     * // Joins all values of a table with a space 
     */
    function Implode(separator?: string, pieces?: table): string;
    
    /**
     * Escapes special characters for JavaScript in a string, making the string safe for inclusion in to JavaScript strings. 
     * @param str  The string that should be escaped. 
     * @returns The escaped string. 
     * @example
     * 
     * local user_input = "The user's input lives in this variable"
     * 
     * local Panel = vgui.Create( "DHTML" )
     * Panel:SetURL( "example.com/something.html" )
     * Panel:Center()
     * Panel:SetSize( 100, 100 )
     * Panel:RunJavascript( "MyJavaScriptFunction('" .. string.JavascriptSafe( user_input ) .. "')" )
     * 
     * // Executes JavaScript on a panel using user input safely. 
     */
    function JavascriptSafe(str: string): string;
    
    /**
     * Returns everything left of supplied place of that string. 
     * @param str  The string to extract from. 
     * @param num  Amount of chars relative to the beginning (starting from 1). 
     * @returns Returns a string containing a specified number of characters from the left side of a string. 
     * @example
     * 
     * local text = "garrys mod"
     * print(string.Left(text, 5))
     * 
     * // Extracts "garry" from "garrys mod" string. 
     */
    function Left(str: string, num: number): string;
    
    /**
     * Counts the number of characters in the string (length). This is equivalent to using the length operator (#). 
     * @param str  The string to find the length of. 
     * @returns Length of the string 
     * @example
     * 
     * print( string.len( "hi" ) )
     * print( string.len( "drakehawke" ) )
     * print( string.len( "" ) )
     * print( string.len( "test" ) == #"test" )
     * 
     * // Demonstrates the use of this function. 
     */
    function len(str: string): number;
    
    /**
     * Changes any upper-case letters in a string to lower-case letters. 
     * @param str  The string to convert. 
     * @returns The original string, with all uppercase letters replaced with their lowercase variants. 
     * @example
     * 
     * print( string.lower( "ABCDEFG" ) )
     * print( string.lower( "AbCdefG" ) )
     * print( string.lower( "abcdefg" ) )
     * print( string.lower( "1234567890" ) )
     * 
     * // Demonstrates the use of this function.@example
     * 
     * // All keys in this table must be lowercase:
     * local products = {}
     * products.apple = "Buy an apple!"
     * products.banana = "Buy a bunch of bananas!"
     * products.tomato = "There's also tomatoes."
     * 
     * // This function is case-insensitive, meaning "APPLE", "apple", and "APPle" are all the same.
     * function GetProduct(userinput)
     * 	return userinput, products[string.lower(userinput)]
     * end
     * 
     * // Demonstration:
     * print(GetProduct("apple"))
     * print(GetProduct("Apple"))
     * print(GetProduct("APPLE"))
     * print()
     * print(GetProduct("banana"))
     * print(GetProduct("BaNaNa"))
     * 
     * // Demonstrates a common use for string.lower - case-insensitive user input. 
     */
    function lower(str: string): string;
    
    /**
     * Finds a [[Patterns|Pattern]] in a string. 
     * @param str  String which should be searched in for matches. 
     * @param pattern  The pattern that defines what should be matched. 
     * @param startPosition [=1] The start index to start the matching from, can be negative to start the match from a position relative to the end. 
     * @returns Matched text(s) 
     * @example
     * 
     * local toMatch = "this is a sample text"
     * print( string.match( toMatch, "sample" ) )
     * // regex works
     * print( string.match( toMatch, "^[a-z]" ) )
     * print( string.match( toMatch, "^this" ) )
     * print( string.match( toMatch, "^..is" ) )
     * print( string.match( toMatch, "text$" ) )
     * // entire string
     * print( string.match( toMatch, "^.*$" ) )
     * // nil
     * print( string.match( toMatch, "this$" ) )
     * print( string.match( toMatch, "nil" ) )
     * 
     * // 
     */
    function match(str: string, pattern: string, startPosition?: number): any;
    
    /**
     * Converts a digital filesize to human-readable text. 
     * @param bytes  The filesize in bytes. 
     * @returns The human-readable filesize, in Bytes/KB/MB/GB (whichever is appropriate). 
     * @example
     * 
     * print(string.NiceSize(64512))
     * 
     * // Example output of this function. 
     */
    function NiceSize(bytes: number): string;
    
    /**
     * Formats the supplied number (in seconds) to the highest possible time unit. 
     * @param num  The number to format, in seconds. 
     * @returns A nicely formatted time string. 
     * @example
     * 
     * print(string.NiceTime(600))
     * print(string.NiceTime(630))
     * print(string.NiceTime(660))
     * print(string.NiceTime(4356))
     * print(string.NiceTime(43545456))
     * 
     * // 
     */
    function NiceTime(num: number): string;
    
    /**
     * Escapes all special characters within a string, making the string safe for inclusion in a Lua pattern. 
     * @param str  The string to be sanitized 
     * @returns The string that has been sanitized for inclusion in Lua patterns 
     * @example
     * 
     * local result = string.gsub( "You scored 100%!", 
     * 							string.PatternSafe( "100%" ), 
     * 							string.PatternSafe( "0%" ) )
     * 
     * print( result )
     * 
     * // Replaces all occurrences of "100%" in a string with "0%" and prints it.
     * 
     * We call {{LibraryFunction|string|PatternSafe}} here as '%' is a special character when used in Lua patterns. 
     */
    function PatternSafe(str: string): string;
    
    /**
     * Repeats a string by the provided number, with an optional separator. 
     * @param str  The string to convert. 
     * @param repetitions  Timer to repeat, this values gets rounded internally. 
     * @param separator [=""] String that will separate the repeated piece. Notice that it doesn't add this string to the start or the end of the result, only between the repeated parts. 
     * @returns Repeated string. 
     * @example
     * 
     * print(string.rep("abc", 5))
     * 
     * // Repeating "abc" 5 times.@example
     * 
     * print(string.rep("hello world", 3, " "))
     * 
     * // Repeating "hello world" 3 times, with the separator " " (space). 
     */
    function rep(str: string, repetitions: number, separator?: string): string;
    
    /**
     * Replaces all occurrences of the supplied second string. 
     * @param str  The string we are seeking to replace an occurrence(s). 
     * @param find  What we are seeking to replace. 
     * @param replace  What to replace find with. 
     * @returns string 
     * @example
     * 
     * local text = "Garrys Mod"
     * print(string.Replace(text, "Garrys", "Hers"))
     * 
     * // Replaces the word "Garrys" by "Hers". 
     */
    function Replace(str: string, find: string, replace: string): string;
    
    /**
     * Reverses a string. 
     * @param str  The string to be reversed. 
     * @returns reversed string 
     * @example
     * 
     * print( string.reverse( "abcdef" ) )
     * 
     * // Reverse "abcdef". 
     */
    function reverse(str: string): string;
    
    /**
     * Returns the last n-th characters of the string. 
     * @param str  The string to extract from. 
     * @param num  Amount of chars relative to the end (starting from 1). 
     * @returns Returns a string containing a specified number of characters from the right side of a string. 
     * @example
     * 
     * local text = "garrys mod"
     * print( string.Right( text, 3 ) )
     * 
     * // Extracts "mod" from "garrys mod" string. 
     */
    function Right(str: string, num: number): string;
    
    /**
     * Sets the character at the specific index of the string. 
     * @param InputString  The input string 
     * @param Index  The character index, 1 is the first from left. 
     * @param ReplacementChar  String to replace with. 
     * @returns ModifiedString 
     * @example
     * 
     * local str = "Apples"
     * MsgN(string.SetChar(str, 3, "g"))
     * 
     * // Demonstrates the use of SetChar 
     */
    function SetChar(InputString: string, Index: number, ReplacementChar: string): string;
    
    /**
     * Splits the string into a table of strings, separated by the second argument. 
     * @param Inputstring  String to split 
     * @param Separator  Character(s) to split with. 
     * @returns Split table 
     * @example
     * 
     * local mystring = "This is some text"
     * PrintTable( string.Split( mystring, " " ) )
     * 
     * // Demonstrates the use of this function. 
     */
    function Split(Inputstring: string, Separator: string): table;
    
    /**
     * Returns whether or not the first string starts with the second. 
     * @param inputStr  String to check. 
     * @param start  String to check with. 
     * @returns Whether the first string starts with the second. 
     */
    function StartWith(inputStr: string, start: string): boolean;
    
    /**
     * Removes the extension of a path. 
     * @param Inputstring  The path to change. 
     * @returns Modifiedstring 
     * @example
     * 
     * MsgN(string.StripExtension("garrysmod/lua/modules/string.lua"))
     * 
     * // Demonstrates the use of string.StripExtension 
     */
    function StripExtension(Inputstring: string): string;
    
    /**
     * Returns a sub-string, starting from the character at position ''StartPos'' of the string (inclusive), and optionally ending at the character at position ''EndPos'' of the string (also inclusive). If EndPos is not given, the rest of the string is returned. 
     * @param str  The string you'll take a sub-string out of. 
     * @param StartPos  The position of the first character that will be included in the sub-string. 
     * @param EndPos [=nil] The position of the last character to be included in the sub-string. It can be negative to count from the end. 
     * @returns The substring. 
     * @example
     * 
     * local mystring = "Some random text"
     * print(string.sub(mystring, 1, 4))
     * 
     * // Demonstrates the use of this function. 
     */
    function sub(str: string, StartPos: number, EndPos?: number): string;
    
    /**
     * Fetches a Color type from a string. 
     * @param Inputstring  The string to convert from. 
     * @returns The output {{Struct|Color}} 
     * @example
     * 
     * PrintTable( string.ToColor( "255 0 255 125" ) )
     * 
     * // Demonstrates the use of string.ToColor 
     */
    function ToColor(Inputstring: string): Color;
    
    /**
     * Returns given time in "MM:SS" format. 
     * @param time  Time in seconds 
     * @returns Formatted time 
     * @example
     * 
     * print( string.ToMinutesSeconds( 61 ) )
     * 
     * // Example of using this function 
     */
    function ToMinutesSeconds(time: number): string;
    
    /**
     * Returns given time in "MM:SS:MS" format. 
     * @param time  Time in seconds 
     * @returns Formatted time 
     * @example
     * 
     * print( string.ToMinutesSecondsMilliseconds( 61.128 ) )
     * 
     * // Example of using this function 
     */
    function ToMinutesSecondsMilliseconds(time: number): string;
    
    /**
     * Splits the string into characters and creates a sequential table of characters.
     * 
     * {{Warning|As a result of the [[Wikipedia:UTF-8|UTF-8]] encoding, non-ASCII characters will be split into more than one character in the output table. Each character value in the output table will always be 1 byte.}} 
     * @param str  The string you'll turn into a table. 
     * @returns A sequential table where each value is a character from the given string 
     * @example
     * 
     * local mystring = "text"
     * PrintTable(string.ToTable(mystring))
     * 
     * // Demonstrates the use of this function.@example
     * 
     * for k,v in ipairs(string.ToTable("abcd αβγδ")) do
     * 	print(k, bit.tohex(string.byte(v)), v)
     * end
     * 
     * // Demonstrates how this function behaves with non-ASCII characters - in this case, Greek letters. 
     */
    function ToTable(str: string): table;
    
    /**
     * Removes leading and trailing matches of a string. 
     * @param Inputstring  The string to trim. 
     * @param Char [=" "] String to match. 
     * @returns Modified string 
     * @example
     * 
     * MsgN(string.Trim(" hi whatsup "))
     * 
     * // Demonstrates the use of string.Trim without second argument. 
     */
    function Trim(Inputstring: string, Char?: string): string;
    
    /**
     * Removes leading spaces/characters from a string. 
     * @param str  String to trim 
     * @param char [=" "] Custom character to remove 
     * @returns Trimmed string 
     */
    function TrimLeft(str: string, char?: string): string;
    
    /**
     * Removes trailing spaces/passed character from a string. 
     * @param str  String to remove from 
     * @param char [=" "] Custom character to remove, default is a space 
     * @returns Trimmed string 
     */
    function TrimRight(str: string, char?: string): string;
    
    /**
     * Changes any lower-case letters in a string to upper-case letters. 
     * @param str  The string to convert. 
     * @returns A string representing the value of a string converted to upper-case. 
     * @example
     * 
     * print( string.upper( "ABCDEFG" ) )
     * print( string.upper( "AbCdefG" ) )
     * print( string.upper( "abcdefg" ) )
     * print( string.upper( "1234567890" ) )
     * 
     * // Demonstrates the use of this function. 
     */
    function upper(str: string): string;
}

/**
 * The surface library allows you to draw text and shapes on the screen. Primarily used for making HUDs & custom GUI panels. 
 */
declare namespace surface {
    /**
     * Creates a new font.
     * 
     * To prevent the font from displaying incorrectly when using the "outline" setting, set "antialias" to false. This will ensure the text properly fills out the entire outline.
     * 
     * Be sure to check the [[Default_Fonts|List of Default Fonts]] first! Those fonts can be used without using this function.
     * 
     * {{Warning|Due to the static nature of fonts, do '''NOT''' create the font more than once. You should only be creating them once, it is recommended to create them at the top of your script. '''Do not use this function within '''{{HookFunction|GM|HUDPaint}}'''!'''}}
     * 
     * {{Validate}} 
     * @param fontName  The new font name. 
     * @param fontData  The font properties. See the {{Struct|FontData}}. 
     * @example
     * 
     * surface.CreateFont("TheDefaultSettings", {
     * 	font = "Arial", //  Use the font-name which is shown to you by your operating system Font Viewer, not the file name
     * 	extended = false,
     * 	size = 13,
     * 	weight = 500,
     * 	blursize = 0,
     * 	scanlines = 0,
     * 	antialias = true,
     * 	underline = false,
     * 	italic = false,
     * 	strikeout = false,
     * 	symbol = false,
     * 	rotary = false,
     * 	shadow = false,
     * 	additive = false,
     * 	outline = false,
     * })
     * 
     * // Creates a font with all the defaults showing (any of the fields could be left out for an equivalent font) 
     */
    function CreateFont(fontName: string, fontData: FontData): void;
    
    /**
     * Enables or disables the clipping used by the VGUI that limits the drawing operations to a panels bounds.
     * 
     * See also {{GlobalFunction|DisableClipping}} and {{ClassFunction|Panel|NoClipping}}. 
     * @param disable  True to disable, false to enable the clipping 
     */
    function DisableClipping(disable: boolean): void;
    
    /**
     * Draws a hollow circle, made of dots. For a filled circle, see examples for {{LibraryFunction|surface|DrawPoly}}.
     * 
     * {{RenderingContext|Function|2D}} 
     * @param originX  The center x integer coordinate. 
     * @param originY  The center y integer coordinate. 
     * @param radius  The radius of the circle. 
     * @param r  The red value of the color to draw the circle with, or a {{Struct|Color}}. 
     * @param g  The green value of the color to draw the circle with. Unused if a {{Struct|Color}} was given. 
     * @param b  The blue value of the color to draw the circle with. Unused if a {{Struct|Color}} was given. 
     * @param a [=255] The alpha value of the color to draw the circle with. Unused if a {{Struct|Color}} was given. 
     */
    function DrawCircle(originX: number, originY: number, radius: number, r: number, g: number, b: number, a?: number): void;
    
    /**
     * Draws a line from one point to another.
     * 
     * {{RenderingContext|Function|2D}} 
     * @param startX  The start x integer coordinate. 
     * @param startY  The start y integer coordinate. 
     * @param endX  The end x integer coordinate. 
     * @param endY  The end y integer coordinate. 
     * @example
     * 
     * hook.Add( "HUDPaint", "Circle", function()
     * 	local center = Vector( ScrW() / 2, ScrH() / 2, 0 )
     * 	local scale = Vector( 100, 100, 0 )
     * 	local segmentdist = 360 / ( 2 * math.pi * math.max( scale.x, scale.y ) / 2 )
     * 	surface.SetDrawColor( 255, 0, 0, 255 )
     *  
     * 	for a = 0, 360 - segmentdist, segmentdist do
     * 		surface.DrawLine( center.x + math.cos( math.rad( a ) ) * scale.x, center.y - math.sin( math.rad( a ) ) * scale.y, center.x + math.cos( math.rad( a + segmentdist ) ) * scale.x, center.y - math.sin( math.rad( a + segmentdist ) ) * scale.y )
     * 	end
     * end )
     * 
     * // This example will draw a pixel perfect circle in the middle of your screen. 
     */
    function DrawLine(startX: number, startY: number, endX: number, endY: number): void;
    
    /**
     * Draws a hollow box with a border width of 1 px.
     * 
     * {{RenderingContext|Function|2D}} 
     * @param x  The start x integer coordinate. 
     * @param y  The start y integer coordinate. 
     * @param w  The integer width. 
     * @param h  The integer height. 
     * @example
     * 
     * surface.SetDrawColor( Color( 255, 255, 255, 255 ) )
     * surface.DrawOutlinedRect( 0, 0, 100, 100 )
     * 
     * // Draws a 100x100 outlined rectangle in top left corner.@example
     * 
     * function draw.OutlinedBox( x, y, w, h, thickness, clr )
     * 	surface.SetDrawColor( clr )
     * 	for i=0, thickness - 1 do
     * 		surface.DrawOutlinedRect( x + i, y + i, w - i * 2, h - i * 2 )
     * 	end
     * end
     * 
     * // Usage
     * hook.Add( "HUDPaint", "", function()
     * 	draw.OutlinedBox( 0, 0, 100, 100, 2, Color( 255, 255, 255 ) )
     * end )
     * 
     * // A convenience function to draw an outlined rect with given color and thickness 
     */
    function DrawOutlinedRect(x: number, y: number, w: number, h: number): void;
    
    /**
     * Draws a textured polygon (secretly a triangle fan) with a maximum of 256 vertices.
     * Only works properly with convex polygons. You may try to render concave polygons, but there is no guarantee that things wont get messed up.
     * 
     * Unlike most surface library functions, non-integer coordinates are not rounded.
     * 
     * {{Warning|You must reset the drawing color and texture before calling the function to ensure consistent results. See examples below.}}
     * 
     * {{RenderingContext|Function|2D}} 
     * @param vertices  A table containing integer vertices. See the {{Struct|PolygonVertex}}.
     * 
     * '''The vertices must be in clockwise order.''' 
     * @example
     * 
     * local triangle = {
     * 	{ x = 100, y = 200 },
     * 	{ x = 150, y = 100 },
     * 	{ x = 200, y = 200 }
     * }
     * 
     * hook.Add("HUDPaint", "PolygonTest", function()
     * 	
     * 	surface.SetDrawColor( 255, 0, 0, 255 )
     * 	draw.NoTexture()
     * 	surface.DrawPoly( triangle )
     * 
     * end )
     * 
     * // Draws a red triangle in the top left corner of the screen.@example
     * 
     * function draw.Circle( x, y, radius, seg )
     * 	local cir = {}
     * 
     * 	table.insert( cir, { x = x, y = y, u = 0.5, v = 0.5 } )
     * 	for i = 0, seg do
     * 		local a = math.rad( ( i / seg ) * -360 )
     * 		table.insert( cir, { x = x + math.sin( a ) * radius, y = y + math.cos( a ) * radius, u = math.sin( a ) / 2 + 0.5, v = math.cos( a ) / 2 + 0.5 } )
     * 	end
     * 
     * 	local a = math.rad( 0 ) // This is needed for non absolute segment counts
     * 	table.insert( cir, { x = x + math.sin( a ) * radius, y = y + math.cos( a ) * radius, u = math.sin( a ) / 2 + 0.5, v = math.cos( a ) / 2 + 0.5 } )
     * 
     * 	surface.DrawPoly( cir )
     * end
     * 
     * hook.Add("HUDPaint", "PolygonCircleTest", function()
     * 	
     * 	surface.SetDrawColor( 0, 0, 0, 200)
     * 	draw.NoTexture()
     * 	draw.Circle( ScrW() / 2, ScrH() / 2, 200, math.sin( CurTime() ) * 20 + 25 )
     * 
     * 	//Usage:
     * 	//draw.Circle( x, y, radius, segments )
     * 
     * end )
     * 
     * // A helper function to draw a circle using surface.DrawPoly. 
     */
    function DrawPoly(vertices: PolygonVertex): void;
    
    /**
     * Draws a solid rectangle on the screen.
     * 
     * {{RenderingContext|Function|2D}} 
     * @param x  The X integer co-ordinate. 
     * @param y  The Y integer co-ordinate. 
     * @param width  The integer width of the rectangle. 
     * @param height  The integer height of the rectangle. 
     * @example
     * 
     * hook.Add("HUDPaint", "MyRect", function()
     *     surface.SetDrawColor(255,255,255,255)
     *     surface.DrawRect(25, 25, 100, 100)
     * end)
     * 
     * // Draws a white 100 by 100 rectangle, 25 pixels from the top left of the screen. 
     */
    function DrawRect(x: number, y: number, width: number, height: number): void;
    
    /**
     * Draw the specified text on the screen, using the previously set position, font and color.
     * 
     * {{RenderingContext|Function|2D}} 
     * @param text  The text to be rendered. 
     * @example
     * 
     * hook.Add( "HUDPaint", "drawsometext", function()
     * 	surface.SetFont( "MyFont" )
     * 	surface.SetTextColor( 255, 255, 255, 255 )
     * 	surface.SetTextPos(128, 128) 
     * 	surface.DrawText("Hello World")
     * end )
     * 
     * // Draws 'Hello World' on the screen. All functions in this example must be called for the draw to work flawlessly. 
     */
    function DrawText(text: string): void;
    
    /**
     * Draw a textured rectangle with the given position and dimensions on the screen, using the current active texture set with {{LibraryFunction|surface|SetMaterial}}. It is also affected by {{LibraryFunction|surface|SetDrawColor}}.
     * 
     * See also {{LibraryFunction|render|SetMaterial}} and {{LibraryFunction|render|DrawScreenQuadEx}}.
     * 
     * See also {{LibraryFunction|surface|DrawTexturedRectUV}}.
     * 
     * {{RenderingContext|Function|2D}} 
     * @param x  The X integer co-ordinate. 
     * @param y  The Y integer co-ordinate. 
     * @param width  The integer width of the rectangle. 
     * @param height  The integer height of the rectangle. 
     * @example
     * 
     * local ourMat = Material( "models/wireframe" ) // Calling Material() every frame is quite expensive
     * 
     * hook.Add( "HUDPaint", "example_hook", function()
     * 	surface.SetDrawColor( 255, 255, 255, 255 )
     * 	surface.SetMaterial( ourMat  ) // If you use Material, cache it!
     * 	surface.DrawTexturedRect( 0, 0, 512, 512 )
     * end )
     * 
     * // Draws a 512x512 textured rectangle with the wireframe texture. 
     */
    function DrawTexturedRect(x: number, y: number, width: number, height: number): void;
    
    /**
     * Draw a textured rotated rectangle with the given position and dimensions and angle on the screen, using the current active texture.
     * 
     * {{RenderingContext|Function|2D}} 
     * @param x  The X integer co-ordinate, representing the center of the rectangle. 
     * @param y  The Y integer co-ordinate, representing the center of the rectangle. 
     * @param width  The integer width of the rectangle. 
     * @param height  The integer height of the rectangle. 
     * @param rotation  The rotation of the rectangle, in degrees. 
     * @example
     * 
     * function surface.DrawTexturedRectRotatedPoint( x, y, w, h, rot, x0, y0 )
     * 	
     * 	local c = math.cos( math.rad( rot ) )
     * 	local s = math.sin( math.rad( rot ) )
     * 	
     * 	local newx = y0 * s - x0 * c
     * 	local newy = y0 * c + x0 * s
     * 	
     * 	surface.DrawTexturedRectRotated( x + newx, y + newy, w, h, rot )
     * 	
     * end
     * 
     * // A function that allows you to override the origin of rotation.
     * 
     * x0 and y0 are relative to the center of the rectangle.@example
     * 
     * function draw.RotatedBox( x, y, w, h, ang, color )
     * 	draw.NoTexture()
     * 	surface.SetDrawColor( color or color_white )
     * 	surface.DrawTexturedRectRotated( x, y, w, h, ang )
     * end
     * 
     * hook.Add( "HUDPaint", "my_rotated_box", function()
     * 	draw.RotatedBox( 100, 100, 100, 100, CurTime() % 360, Color( 255, 0, 0) )
     * end )
     * 
     * // Draws a simple red forever rotating box. 
     */
    function DrawTexturedRectRotated(x: number, y: number, width: number, height: number, rotation: number): void;
    
    /**
     * Draws a textured rectangle with a repeated or partial texture.
     * 
     * u and v refer to texture coordinates.
     * * (u, v) = (0, 0) is the top left
     * * (u, v) = (1, 0) is the top right
     * * (u, v) = (1, 1) is the bottom right
     * * (u, v) = (0, 1) is the bottom left
     * 
     * Using a start point of (1, 0) and an end point to (0, 1), you can draw an image flipped horizontally, same goes with other directions. Going above 1 will tile the texture. Negative values are allowed as well.
     * 
     * Here's a helper image: http://i.imgur.com/SIKlpp4.png
     * 
     * **Note:**
     * >If you are using a .png image, you need supply the "noclamp" flag as second parameter for {{GlobalFunction|Material}} if you intend to use tiling.
     * 
     * **Note:**
     * >If you find that surface.DrawTexturedRectUV is getting your texture coordinates (u0, v0), (u1, v1) wrong and you're rendering with a material created with {{GlobalFunction|CreateMaterial}}, try adjusting them with the following code:
     * ```
     * local du = 0.5 / 32 -- half pixel anticorrection
     * local dv = 0.5 / 32 -- half pixel anticorrection
     * local u0, v0 = (u0 - du) / (1 - 2 * du), (v0 - dv) / (1 - 2 * dv)
     * local u1, v1 = (u1 - du) / (1 - 2 * du), (v1 - dv) / (1 - 2 * dv)
     * ```
     * 
     * '''Explanation:'''
     * 
     * surface.DrawTexturedRectUV tries to correct the texture coordinates by half a pixel (something to do with sampling) and computes the correction using IMaterial::GetMappingWidth()/GetMappingHeight(). If the material was created without a $basetexture, then GetMappingWidth()/GetMappingHeight() uses the width and height of the error material (which is 32x32).
     * 
     * {{RenderingContext|Function|2D}}
     * 
     * **Bug [#3173](https://github.com/Facepunch/garrysmod-issues/issues/3173):**
     * >The UV offsets might require (sub-)pixel correction for accurate tiling results. 
     * @param x  The X integer coordinate. 
     * @param y  The Y integer coordinate. 
     * @param width  The integer width of the rectangle. 
     * @param height  The integer height of the rectangle. 
     * @param startU  The U texture mapping of the rectangle origin. 
     * @param startV  The V texture mapping of the rectangle origin. 
     * @param endU  The U texture mapping of the rectangle end. 
     * @param endV  The V texture mapping of the rectangle end. 
     * @example
     * 
     * local mat = Material( "gui/tool.png" )
     * hook.Add( "HUDPaint", "DrawTexturedRectUV_example1", function()
     * 	surface.SetDrawColor( color_white )
     * 	surface.SetMaterial( mat )
     * 
     * 	surface.DrawTexturedRect( 25, 25, 100, 100 )
     * 	surface.DrawTexturedRectUV( 25, 130, 100, 100, 0, 0, 1, 1 ) // Exactly same as above line
     * 
     * 	// Draws right half of the texture
     * 	// Note that we also change the width of the rectangle to avoid stetcing of the texture
     * 	// This is for demonstration purposes, you can do whatever it is you need
     * 	surface.DrawTexturedRectUV( 130, 130, 50, 100, 0.5, 0, 1, 1 )
     * end )
     * 
     * // Demonstrates the function usage.@example
     * 
     * function PANEL:Paint( w, h )
     * 	// Size of your texture, texW - width, texH - height
     * 	local texW = 16
     * 	local texH = 16
     * 
     * 	surface.SetMaterial( Material( "icon16/box.png", "noclamp" ) )
     * 	surface.SetDrawColor( color_white )
     * 	surface.DrawTexturedRectUV( 0, 0, w, h, 0, 0, w / texW, h / texH )
     * end
     * 
     * // Paints repeated texture over a panel 
     */
    function DrawTexturedRectUV(x: number, y: number, width: number, height: number, startU: number, startV: number, endU: number, endV: number): void;
    
    /**
     * Gets the HUD texture with the specified name. 
     * @param name  The name of the texture. 
     * @returns text 
     */
    function GetHUDTexture(name: string): ITexture;
    
    /**
     * Returns the width and height (in pixels) of the given text, but only if the font has been set with {{LibraryFunction|surface|SetFont}}. 
     * @param text  The string to check the size of. 
     * @returns [Width of the provided text, Height of the provided text] 
     * @example
     * 
     * surface.SetFont("Trebuchet24")
     * 
     * local message = "Hello World"
     * local width, height = surface.GetTextSize(message)
     * 
     * print("Text width: " .. width .. ", text height: " .. height)
     * 
     * // Prints out the size of "Hello World" in the Trebuchet24 font.@example
     * 
     * local message = "Hello World"
     * 
     * surface.SetFont("Trebuchet24")
     * local height = select(2, surface.GetTextSize(message))
     * 
     * print(height)
     * 
     * // Get text height very quickly. No tables or spare variables used. 
     * !TupleReturn
     */
    function GetTextSize(text: string): [number, number];
    
    /**
     * Returns the texture id of the material with the given name/path.
     * 
     * **Note:**
     * >This function will not work with .png or .jpg images. For that, see {{GlobalFunction|Material}} 
     * @param name_path  Name or path of the texture. 
     * @returns The texture ID 
     */
    function GetTextureID(name_path: string): number;
    
    /**
     * Returns the size of the texture with the associated texture ID. 
     * @param textureID  The texture ID, returned by {{LibraryFunction|surface|GetTextureID}}. 
     * @returns [The texture width., The texture height.] 
     * !TupleReturn
     */
    function GetTextureSize(textureID: number): [number, number];
    
    /**
     * Play a sound file directly on the client (such as UI sounds, etc). 
     * @param soundfile  The path to the sound file, which can be relative to the sound/ folder. 
     * @example
     * 
     * surface.PlaySound( "mysound.wav" )
     * 
     * // Play a sound contained in addons/myaddon/sound/mysound.wav@example
     * 
     * surface.PlaySound("items/ammo_pickup.wav")
     * 
     * // Plays the 'ammo pickup' sound. 
     */
    function PlaySound(soundfile: string): void;
    
    /**
     * **Deprecated:**
     * >You should use {{GlobalFunction|ScrH}} instead.
     * 
     * Returns the height of the current client's screen. 
     * @returns screenHeight 
     * @example
     * 
     * MsgN("Screen height: " .. surface.ScreenHeight())
     * 
     * // Prints out the current height of the screen. 
     */
    function ScreenHeight(): number;
    
    /**
     * **Deprecated:**
     * >You should use {{GlobalFunction|ScrW}} instead.
     * 
     * Returns the width of the current client's screen. 
     * @returns screenWidth 
     * @example
     * 
     * MsgN("Screen width: " .. surface.ScreenWidth())
     * 
     * // Prints out the current width of the screen. 
     */
    function ScreenWidth(): number;
    
    /**
     * Sets a multiplier that will influence all upcoming drawing operations. 
     * @param multiplier  The multiplier ranging from 0 to 1. 
     */
    function SetAlphaMultiplier(multiplier: number): void;
    
    /**
     * Set the color of any future shapes to be drawn, can be set by either using r, g, b, a as separate values or by a {{Struct|Color}}. Using a color structure is not recommended to be created procedurally. 
     * @param r  The red value of color, or a {{Struct|Color}}. 
     * @param g  The green value of color. Unused if a {{Struct|Color}} was given. 
     * @param b  The blue value of color. Unused if a {{Struct|Color}} was given. 
     * @param a [=255] The alpha value of color. Unused if a {{Struct|Color}} was given. 
     */
    function SetDrawColor(r: number, g: number, b: number, a?: number): void;
    
    /**
     * Set the current font to be used for text operations later.
     * 
     * The fonts must first be created with {{LibraryFunction|surface|CreateFont}} or be one of the [[Default Fonts]]. 
     * @param fontName  The name of the font to use. 
     * @example
     * 
     * surface.SetTextPos(128, 128) 
     * surface.SetFont("Default")
     * surface.DrawText("Hello Fonts")
     * 
     * // Draws 'Hello Fonts' on the screen, with the 'Default' font. 
     */
    function SetFont(fontName: string): void;
    
    /**
     * Sets the material to be used in all upcoming draw operations using the surface library.
     * 
     * Not to be confused with {{LibraryFunction|render|SetMaterial}}.
     * 
     * See also {{LibraryFunction|surface|SetTexture}}.
     * 
     * {{Warning|{{GlobalFunction|Material}} function calls are expensive to be done inside this function or inside rendering context, you should be caching the results of {{GlobalFunction|Material}} calls}} 
     * @param material  The material to be used. 
     */
    function SetMaterial(material: IMaterial): void;
    
    /**
     * Set the color of any future text to be drawn, can be set by either using r, g, b, a as separate values or by a {{Struct|Color}}. Using a color structure is not recommended to be created procedurally. 
     * @param r  The red value of color, or a {{Struct|Color}}. 
     * @param g  The green value of color 
     * @param b  The blue value of color 
     * @param a [=255] The alpha value of color 
     * @example
     * 
     * surface.SetTextColor(255, 0, 0)
     * surface.SetTextPos(128, 128) 
     * surface.DrawText("Hello World")
     * 
     * // Draws 'Hello World', in red, 100 pixels from the top left of the screen. 
     */
    function SetTextColor(r: number, g: number, b: number, a?: number): void;
    
    /**
     * Set the position to draw any future text. 
     * @param x  The X integer co-ordinate. 
     * @param y  The Y integer co-ordinate. 
     * @example
     * 
     * surface.SetTextPos(400, 400)
     * surface.DrawText("Hello World")
     * 
     * // Draws 'Hello World' on the screen, 400 pixels from the top-left. 
     */
    function SetTextPos(x: number, y: number): void;
    
    /**
     * Sets the texture to be used in all upcoming draw operations using the surface library.
     * 
     * See also {{LibraryFunction|surface|SetMaterial}} for an {{Type|IMaterial}} alternative. 
     * @param textureID  The ID of the texture to draw with returned by {{LibraryFunction|surface|GetTextureID}}. 
     */
    function SetTexture(textureID: number): void;
}

/**
 * The system library provides functions that allow you to gather information about the system running the game, such as operating system, uptime and battery level. 
 */
declare namespace system {
    /**
     * Returns the total uptime of the current application as reported by Steam.
     * 
     * This will return a similar value to {{GlobalFunction|SysTime}}.
     * 
     * **Note:**
     * >This function does not work on Dedicated Servers and will instead return no value. 
     * @returns Seconds of game uptime as an integer. 
     */
    function AppTime(): number;
    
    /**
     * Returns the current battery power. 
     * @returns 0-100 if on battery power.
     * 
     * If plugged in, the value will be 255 regardless of charging state. 
     */
    function BatteryPower(): number;
    
    /**
     * Flashes the window. Currently works only on Windows. 
     */
    function FlashWindow(): void;
    
    /**
     * Returns the country code of this computer, determined by the localisation settings of the OS.
     * 
     * **Note:**
     * >This function does not work on Dedicated Servers and will instead return no value. 
     * @returns Two-letter country code, using [http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1] standard. 
     */
    function GetCountry(): string;
    
    /**
     * Returns whether or not the game window has focus.
     * 
     * Returns true 100% of the time on OS X.
     * 
     * **Note:**
     * >This function does not work on dedicated servers and will instead return no value.
     * 
     * **Bug [#2424](https://github.com/Facepunch/garrysmod-issues/issues/2424):**
     * >This will return true when minimized in windowed-mode. 
     * @returns Whether or not the game window has focus. 
     */
    function HasFocus(): boolean;
    
    /**
     * Returns whether the current OS is Linux. 
     * @returns Whether or not the game is running on Linux. 
     */
    function IsLinux(): boolean;
    
    /**
     * Returns whether the current OS is OSX. 
     * @returns Whether or not the game is running on OSX. 
     */
    function IsOSX(): boolean;
    
    /**
     * Returns whether the game is being run in a window or in fullscreen (you can change this by opening the menu, clicking 'Options', then clicking the 'Video' tab, and changing the Display Mode using the dropdown menu):
     * 
     * [[Image:DisplayModeDropdown.jpeg|300px]] 
     * @returns Is the game running in a window? 
     * @example
     * 
     * if system.IsWindowed() then
     * 	system.FlashWindow()
     * end
     * 
     * // If the game is windowed, then the game window will flash 
     */
    function IsWindowed(): boolean;
    
    /**
     * Returns whether the current OS is Windows. 
     * @returns Whether the system the game runs on is Windows or not. 
     */
    function IsWindows(): boolean;
    
    /**
     * Returns the synchronized Steam time. This is the number of seconds since the [http://en.wikipedia.org/wiki/Unix_time Unix epoch].
     * 
     * **Note:**
     * >This function does not work on Dedicated Servers and will instead return no value. 
     * @returns Current Steam-synchronized Unix time. 
     */
    function SteamTime(): number;
    
    /**
     * Returns the amount of seconds since the Steam user last moved their mouse.
     * 
     * This is a direct binding to ISteamUtils->GetSecondsSinceComputerActive, and is most likely related to Steam's automatic "Away" online status.
     * 
     * **Note:**
     * >This function does not work on Dedicated Servers and will instead return no value. 
     * @returns The amount of seconds since the Steam user last moved their mouse. 
     */
    function UpTime(): number;
}

/**
 * The table ''type'' is an object that can store multiple values.
 * 
 * The table ''library'' is a standard Lua library which provides functions to manipulate tables. In Garry's Mod there are several extra useful functions added to this library.
 * 
 * This category lists the functions available in the table ''library''. 
 */
declare namespace table {
    /**
     * Adds the contents from one table into another.
     * 
     * See also {{LibraryFunction|table|Inherit}} and {{LibraryFunction|table|Merge}}. 
     * @param target  The table to insert the new values into. 
     * @param source  The table to retrieve the values from. 
     * @returns The table the values were appended to. 
     * @example
     * 
     * local Test1 = {"One","Two","Three", "Four"}
     * local Test2 = {"Four", "Five", "Six"}
     * table.Add( Test1, Test2 )
     * print( table.concat(Test1, " ") )
     * 
     * // Demonstrates the use of this function. Note that duplicate values will be added. 
     */
    function Add(target: table, source: table): table;
    
    /**
     * Changes all keys to sequential integers. This creates a new table object and does not affect the original. 
     * @param table  The original table to modify. 
     * @param saveKeys [=false] Save the keys within each member table. This will insert a new field ''__key'' into each value, and should not be used if the table contains non-table values. 
     * @returns Table with integer keys. 
     * @example
     * 
     * local Table = {One = "A", Two = "B", Three = "C"}
     * local Table2 = table.ClearKeys(Table)
     * PrintTable(Table2)
     * 
     * // Changes all the table's keys to integer values@example
     * 
     * local tbl = {
     * 	FirstMember = { Name = "John Smith", Age  = 25 },
     * 	SecondMember = { Name = "Jane Doe", Age = 42 },
     * 	ThirdMember = { Name = "Joe Bloggs", Age = 39 }
     * }
     * print( "<nowiki>===== Before =====</nowiki>" )
     * PrintTable( tbl )
     * local tbl2 = table.ClearKeys( tbl, true )
     * print( "<nowiki>===== After =====</nowiki>" )
     * PrintTable( tbl2 )
     * 
     * // Clears a table of its keys, and preserves the old key names within each member. 
     */
    function ClearKeys(table: table, saveKeys?: boolean): table;
    
    /**
     * Collapses a table with keyvalue structure 
     * @param input  Input table 
     * @returns Output table 
     * @example
     * 
     * local output = table.CollapseKeyValue( {
     * 	{ Key = "mykey1", Value = "myvalue1" },
     * 	{ Key = 123, Value = 1345 },
     * 	{ Key = 1345, Value = "myvalue1" },
     * } )
     * 
     * // Example usage 
     */
    function CollapseKeyValue(input: table): table;
    
    /**
     * Concatenates the contents of a table to a string. 
     * @param tbl  The table to concatenate. 
     * @param concatenator [=""] A seperator to insert between strings 
     * @param startPos [=1] The key to start at 
     * @param endPos [=#tbl] The key to end at 
     * @returns Concatenated values 
     * @example
     * 
     * local Table = { "A", "simple", "table.concat", "test" }
     * print( table.concat( Table ) )
     * print( table.concat( Table, " " ) )
     * print( table.concat( Table, " ", 3, 4 ) )
     * 
     * // Demonstrates the use of this function. 
     */
    function concat(tbl: table, concatenator?: string, startPos?: number, endPos?: number): string;
    
    /**
     * Creates a deep copy and returns that copy.
     * 
     * {{Warning|This function does NOT copy userdata, such as {{Type|Vector}}s and {{Type|Angle}}s!}} 
     * @param originalTable  The table to be copied. 
     * @returns A deep copy of the original table 
     * @example
     * 
     * B = table.Copy(A)
     * 
     * // Creates a deep copy of table A 
     */
    function Copy(originalTable: table): table;
    
    /**
     * Empties the target table, and merges all values from the source table into it. 
     * @param source  The table to copy from. 
     * @param target  The table to write to. 
     * @example
     * 
     * local Test1 = {A = "String keys", B = "Table 1"}
     * local Test2 = {"Numeric keys", "Table 2"}
     * table.CopyFromTo( Test2, Test1 )
     * PrintTable( Test1 )
     * 
     * // Demonstrates the use of this function. 
     */
    function CopyFromTo(source: table, target: table): void;
    
    /**
     * Counts the amount of keys in a table. This should only be used when a table is not numerically and sequentially indexed. For those tables, consider the length operator. 
     * @param tbl  The table to count the keys of. 
     * @returns The number of keyvalue pairs. This includes non-numeric and non-sequential keys, unlike the length ('''#''') operator. 
     * @example
     * 
     * Table = { A = "1", B = "2", C = "3", D = "4" }
     * 
     * print(table.Count( Table ) )
     * 
     * // There are 4 keys in this table. So it will output "4" 
     */
    function Count(tbl: table): number;
    
    /**
     * Converts a table that has been sanitised with {{LibraryFunction|table|Sanitise}} back to its original form 
     * @param tbl  Table to be de-sanitised 
     * @returns De-sanitised table 
     */
    function DeSanitise(tbl: table): table;
    
    /**
     * Removes all values from a table. 
     * @param tbl  The table to empty. 
     * @example
     * 
     * local Table = {"String Value", "Another value", Var = "Non-integer key"}
     * table.Empty(Table)
     * print( table.Count(Table) )
     * 
     * // Demonstrates the use of this function. 
     */
    function Empty(tbl: table): void;
    
    /**
     * **Deprecated:**
     * >Instead, iterate the table using ipairs or increment from the previous index using {{GlobalFunction|next}}. Non-numerically indexed tables are not ordered.
     * 
     * Returns the value positioned after the supplied value in a table. If it isn't found then the first element in the table is returned 
     * @param tbl  Table to search 
     * @param value  Value to return element after 
     * @returns Found element 
     * @example
     * 
     * local tbl = {"a", "b", "c"}
     * 
     * print(table.FindNext(tbl, "b"))
     * 
     * // Print the next element after the "b" value of the table 
     */
    function FindNext(tbl: table, value: any): any;
    
    /**
     * **Deprecated:**
     * >Instead, iterate your table with ipairs, storing the previous value and checking for the target. Non-numerically indexed tables are not ordered.
     * 
     * Returns the value positioned before the supplied value in a table. If it isn't found then the last element in the table is returned 
     * @param tbl  Table to search 
     * @param value  Value to return element before 
     * @returns Found element 
     * @example
     * 
     * local tbl = {"a", "b", "c"}
     * 
     * print(table.FindPrev(tbl, "b"))
     * 
     * // Print the previous item the value "b" of the table 
     */
    function FindPrev(tbl: table, value: any): any;
    
    /**
     * Inserts a value in to the given table even if the table is non-existent 
     * @param tab [={}] Table to insert value in to 
     * @param value [=] Value to insert 
     * @returns The supplied or created table 
     */
    function ForceInsert(tab?: table, value?: any): table;
    
    /**
     * **Deprecated:**
     * >This was deprecated in Lua 5.1 and removed in 5.2. You should use {{GlobalFunction|pairs}}() instead.
     * 
     *  Iterates for each key-value pair in the table, calling the function with the key and value of the pair. If the function returns anything, the loop is broken.
     * 
     * This is inherited from the original Lua implementation and is deprecated in Lua as of 5.1; see [http://lua-users.org/wiki/TableLibraryTutorial here]. You should use {{GlobalFunction|pairs}}() instead. The GLua interpretation of this is {{LibraryFunction|table|ForEach}}. 
     * @param tbl  The table to iterate over. 
     * @param callback  The function to run for each key and value. 
     * @example
     * 
     * local food = { "Cake", "Pies", Delicious = "Cookies", Awesome = "Pizza" }
     * table.foreach( food, function( key, value )
     *  print( tostring(key) .." ".. value)
     * end)
     * 
     * // Demonstrates the use of this function.@example
     * 
     * local tbl = { "One", "Two", "Three", "Four" }
     * table.foreach( tbl, function( key, value )
     *    print( key, value )
     *    if key == 2 then return true end
     * end)
     * 
     * // Demonstrates the breaking effect if the callback returns a value. 
     */
    function foreach(tbl: table, callback: Function): void;
    
    /**
     * **Deprecated:**
     * >You should use {{GlobalFunction|pairs}}() instead.
     * 
     *  Iterates over a table and calls the given function for each key and value found. Unlike {{LibraryFunction|table|foreach}}, this ignores the value returned by the function. 
     * @param tab  Table to iterate over. 
     * @param callback  Function to call for every key-value pair. Arguments passed are: 
     * * {{FuncArg|any|key}}
     * * {{FuncArg|any|value}} 
     */
    function ForEach(tab: table, callback: Function): void;
    
    /**
     * **Deprecated:**
     * >This was deprecated in Lua 5.1 and removed in 5.2. You should use {{GlobalFunction|ipairs}}() instead.
     * 
     *  Iterates for each numeric index in the table in order.
     * 
     * This is inherited from the original Lua implementation and is deprecated in Lua as of 5.1; see [http://lua-users.org/wiki/TableLibraryTutorial here]. You should use {{GlobalFunction|ipairs}}() instead. 
     * @param table  The table to iterate over. 
     * @param func  The function to run for each index. 
     */
    function foreachi(table: table, func: Function): void;
    
    /**
     * **Deprecated:**
     * >Instead, expect the first key to be 1.
     * 
     * Non-numerically indexed tables are not ordered and do not have a first key.
     * 
     * Returns the first key found in the given table 
     * @param tab  Table to retrieve key from 
     * @returns Key 
     */
    function GetFirstKey(tab: table): any;
    
    /**
     * **Deprecated:**
     * >Instead, index the table with a key of 1.
     * 
     * Non-numerically indexed tables are not ordered and do not have a first key.
     * 
     * Returns the first value found in the given table 
     * @param tab  Table to retrieve value from 
     * @returns Value 
     */
    function GetFirstValue(tab: table): any;
    
    /**
     * Returns all keys of a table. 
     * @param tabl  The table to get keys of 
     * @returns Table of keys 
     * @example
     * 
     * local tabl = {
     * one = "A",
     * two = "B",
     * }
     * PrintTable( table.GetKeys( tabl ) )
     * 
     * // Example usage 
     */
    function GetKeys(tabl: table): table;
    
    /**
     * **Deprecated:**
     * >Instead, use the result of the length (#) operator, ensuring it is not zero. Non-numerically indexed tables are not ordered and do not have a last key.
     * 
     * Returns the last key found in the given table 
     * @param tab  Table to retrieve key from 
     * @returns Key 
     */
    function GetLastKey(tab: table): any;
    
    /**
     * **Deprecated:**
     * >Instead, index the table with the result of the length (#) operator, ensuring it is not zero. Non-numerically indexed tables are not ordered and do not have a last key.
     * 
     * Returns the last value found in the given table 
     * @param tab  Table to retrieve value from 
     * @returns Value 
     */
    function GetLastValue(tab: table): any;
    
    /**
     * **Deprecated:**
     * >This function was deprecated in Lua 5.1 and is removed in 5.2. Use the length (#) operator instead.
     * 
     *  Returns the length of the table. 
     * @param tbl  The table to check. 
     * @returns Sequential length. 
     */
    function getn(tbl: table): number;
    
    /**
     * Returns a key of the supplied table with the highest number value. 
     * @param inputTable  The table to search in. 
     * @returns winningKey 
     * @example
     * 
     * favouriteFruit = { banana = 4, strawberry = 4, blueberry = 2, apple = 6 }
     * print(table.GetWinningKey(favouriteFruit))
     * 
     * // Code that looks up the most favourite fruit from a table where the fruit's name is the key, and it's number value determines how much favourite it is (the higher value, the better).@example
     * 
     * favouriteFruit = { apple = 1, banana = 7, strawberry = 3, blueberry = 7 }
     * print(table.GetWinningKey(favouriteFruit))
     * 
     * // A code that demonstrates a situation where there are two keys with the same value in the supplied table. String keys in the table represent the fruit name, and their number values determine how favourite it is (the higher value, the better). 
     */
    function GetWinningKey(inputTable: table): any;
    
    /**
     * Checks if a table has a value.
     * {{Warning|This function is '''very inefficient for large tables''' (O(n)) and should probably not be called in things that run each frame. Instead, consider a table structure such as example 2 below.}}
     * **Note:**
     * >For optimization, functions that look for a value by sorting the table should never be needed if you work on a table that you built yourself. 
     * @param tbl  Table to check 
     * @param value  Value to search for 
     * @returns Returns true if the table has that value, false otherwise 
     * @example
     * 
     * local mytable = {"123", "test"}
     * print(table.HasValue(mytable, "apple"), table.HasValue(mytable, "test"))
     * 
     * // Creates a table with values "123" and "test" and checks to see it the table holds value "apple"@example
     * 
     * local mytable = { ["123"] = true, test = true }
     * print(mytable["apple"], mytable["test"])
     * 
     * // Example usage of O(1) associative array structure 
     */
    function HasValue(tbl: table, value: any): boolean;
    
    /**
     * Copies any missing data from base to target, and sets the target's ''BaseClass'' member to the base table's pointer.
     * 
     * See {{LibraryFunction|table|Merge}}, which overrides existing values and doesn't add a BaseClass member.
     * 
     * See also {{LibraryFunction|table|Add}}, which simply adds values of one table to another.
     * 
     * **Bug [#1304](https://github.com/Facepunch/garrysmod-issues/issues/1304):**
     * >Sub-tables aren't inherited. The target's table value will take priority. 
     * @param target  Table to copy data to 
     * @param base  Table to copy data from 
     * @returns Target 
     * @example
     * 
     * local table1 = { "A", "Golden" }
     * local table2 = { "Two", "Orange", "Apple" }
     * table.Inherit( table1, table2 )
     * PrintTable( table1 )
     * 
     * // Example of how this function works. 
     */
    function Inherit(target: table, base: table): table;
    
    /**
     * Inserts a value into a table at the end of the table or at the given position. 
     * @param tbl  The table to insert the variable into. 
     * @param value  The variable to insert into the table. 
     * @returns The index the object was placed at. 
     * @example
     * 
     * sentence = { "hello", "there", "my", "name", "is", "drakehawke" }
     * table.insert( sentence, "lol" )
     * table.insert( sentence, 6, "not" )
     * 
     * PrintTable( sentence )
     * 
     * // Demonstrates the use of this function. 
     */
    function insert(tbl: table, value: any): number;
    
    /**
     * Inserts a value into a table at the end of the table or at the given position. 
     * @param tbl  The table to insert the variable into. 
     * @param position [=nil] The position in the table to insert the variable. 
     * @param value [=] The variable to insert into the table. 
     * @returns The index the object was placed at. 
     * @example
     * 
     * sentence = { "hello", "there", "my", "name", "is", "drakehawke" }
     * table.insert( sentence, "lol" )
     * table.insert( sentence, 6, "not" )
     * 
     * PrintTable( sentence )
     * 
     * // Demonstrates the use of this function. 
     */
    function insert(tbl: table, position?: number, value?: any): number;
    
    /**
     * Returns whether or not the table's keys are sequential 
     * @param tab  Table to check 
     * @returns Is sequential 
     */
    function IsSequential(tab: table): boolean;
    
    /**
     * Returns the first key found to be containing the supplied value 
     * @param tab  Table to search 
     * @param value  Value to search for 
     * @returns Key 
     */
    function KeyFromValue(tab: table, value: any): any;
    
    /**
     * Returns a table of keys containing the supplied value 
     * @param tab  Table to search 
     * @param value  Value to search for 
     * @returns Keys 
     */
    function KeysFromValue(tab: table, value: any): table;
    
    /**
     * Returns a copy of the input table with all string keys converted to be lowercase recursively 
     * @param tbl  Table to convert 
     * @returns New table 
     */
    function LowerKeyNames(tbl: table): table;
    
    /**
     * Returns the highest numerical key. 
     * @param tbl  The table to search. 
     * @returns The highest numerical key. 
     * @example
     * 
     * local tbl = {"One", "Two", [6] = "Six", [42] = "Answer to life, the universe, and everything"}
     * 
     * PrintTable(tbl)
     * print("\n" .. #tbl)
     * print(table.maxn(tbl))
     * 
     * // Demonstrates how this differs from the '''#''' operator. 
     */
    function maxn(tbl: table): number;
    
    /**
     * Merges the contents of the second table with the content in the first one.
     * 
     * See {{LibraryFunction|table|Inherit}}, which doesn't override existing values.
     * 
     * See also {{LibraryFunction|table|Add}}, which simply adds values of one table to another. 
     * @param destination  The table you want the source table to merge with 
     * @param source  The table you want to merge with the destination table 
     * @returns Destination table 
     * @example
     * 
     * local destination = {[1] = "A", [2] = "Golden", [3] = "Apple"}
     * local source = {[1] = "Two", [2] = "Orange"}
     * table.Merge( destination, source )
     * PrintTable( destination )
     * 
     * // "Merges" the content of the second table with the first one, overwriting any matching key/value pairs in the destination with the source's version and prints the resulting merge. 
     */
    function Merge(destination: table, source: table): table;
    
    /**
     * Returns a random value from the supplied table.
     * 
     * **Note:**
     * >This function iterates over the given table '''twice''', therefore with sequential tables you should instead use following:
     * ```mytable[ math.random( #mytable ) ]``` 
     * @param haystack  The table to choose from. 
     * @returns [A random value from the table., The key associated with the random value.] 
     * @example
     * 
     * color = { "green", "red", "blue", "yellow" }
     * object = { "car", "house", "bike" }
     * 
     * print( "I have a " .. table.Random( color ) .. " " .. table.Random( object ) .. "." )
     * 
     * // A simple example of this function using two tables.@example
     * 
     * websites = {"facepunch.com", "google.com", "steampowered.com"}
     * print("I think the best website ever is " .. websites[math.random(1, #websites)] .. ".")
     * 
     * // Example of using the alternative with sequential tables for performance reasons. 
     * !TupleReturn
     */
    function Random(haystack: table): [any, any];
    
    /**
     * Removes a value from a table and shifts any other values down to fill the gap. 
     * @param tbl  The table to remove the value from. 
     * @param index [=#tbl] The index of the value to remove. 
     * @returns The value that was removed. 
     * @example
     * 
     * sentence = { "hello", "there", "my", "name", "is", "Player1" }
     * print( table.remove( sentence ) ) // Using no second arg removes the last value
     * print( table.remove( sentence, 2 ) )
     * PrintTable( sentence )
     * 
     * // Demonstrates the use of this function. 
     */
    function remove(tbl: table, index?: number): any;
    
    /**
     * Removes the first instance of a given value from the specified table with {{LibraryFunction|table|remove}}, then returns the key that the value was found at. 
     * @param tbl  The table that will be searched. 
     * @param val  The value to find within the table. 
     * @returns The key at which the value was found, or false if the value was not found. 
     */
    function RemoveByValue(tbl: table, val: any): any;
    
    /**
     * Returns a reversed copy of a sequential table. Any non-sequential and non-numeric keyvalue pairs will not be copied. 
     * @param tbl  Table to reverse. 
     * @returns A reversed copy of the table. 
     * @example
     * 
     * local tbl = { "One", "Two", "Three", four = 4, [5] = "5" }
     * 
     * PrintTable(tbl)
     * print("")
     * PrintTable(table.Reverse(tbl))
     * 
     * // Creates a table and reverses it. 
     */
    function Reverse(tbl: table): table;
    
    /**
     * Converts {{Type|Vector}}s, {{Type|Angle}}s and {{Type|boolean}}s to be able to be converted to and from key-values. {{LibraryFunction|table|DeSanitise}} does the opposite 
     * @param tab  Table to sanitise 
     * @returns Sanitised table 
     * @example
     * 
     * local table1 = { "A", "Golden", Angle( 1, 2, 3 ), Vector( 1, 2, 3 ) }
     * 
     * PrintTable( table.Sanitise( table1 ) )
     * 
     * // Example of what this function does. 
     */
    function Sanitise(tab: table): table;
    
    /**
     * Sorts a table either ascending or by the given sort function. 
     * @param tbl  The table to sort. 
     * @param sorter  If specified, the function will be called with 2 parameters each.
     * Return true in this function if you want the first parameter to come first in the sorted array. 
     * @example
     * 
     * local TABLE = {
     * 	{"Jeff",8},
     * 	{"Peter",17},
     * 	{"Shay",11},
     * 	{"Janine",1}
     * }
     * 
     * table.sort(TABLE,function(a, b) return a[2] > b[2] end)
     * 
     * // Sorting table by an integer@example
     * 
     * local PLAYERS = player.GetAll()
     * 
     * table.sort(PLAYERS,function(a, b) return a:GetNWInt("Score") > b:GetNWInt("Score") end)
     * 
     * // Sorting a player table by a NWInt 
     */
    function sort(tbl: table, sorter: Function): void;
    
    /**
     * Returns a list of keys sorted based on values of those keys.
     * 
     * For normal sorting see {{LibraryFunction|table|sort}}. 
     * @param tab  Table to sort. All values of this table must be of same type. 
     * @param descending [=false] Should the order be descending? 
     * @returns A table of keys sorted by values from supplied table. 
     * @example
     * 
     * local t = {}
     * t['h'] = 2 // Lowest value
     * t['a'] = 150 // Highest value
     * t['x'] = 30
     * 
     * PrintTable( table.SortByKey( t ) )
     * PrintTable( table.SortByKey( t , true ) )
     * 
     * // Example usage of the function. 
     */
    function SortByKey(tab: table, descending?: boolean): table;
    
    /**
     * Sorts a table by a named member 
     * @param tab  Table to sort 
     * @param memberKey  The key used to identify the member 
     * @param ascending [=false] Whether or not the order should be ascending 
     * @example
     * 
     * local tab = {
     *     {Name = "Bill", Age = 13},
     *     {Name = "Jill", Age = 14},
     *     {Name = "Phil", Age = 8}
     * }
     * table.SortByMember(tab, "Age")
     * 
     * for k, v in ipairs(tab) do
     *     print(v.Name)
     * end
     * 
     * // Orders a table by a member and prints it 
     */
    function SortByMember(tab: table, memberKey: any, ascending?: boolean): void;
    
    /**
     * Sorts a table in reverse order from {{LibraryFunction|table|sort}} 
     * @param tbl  The table to sort in descending order. 
     * @returns sorted 
     */
    function SortDesc(tbl: table): table;
    
    /**
     * Converts a table into a string 
     * @param tbl  The table to iterate over. 
     * @param displayName  Optional. A name for the table. 
     * @param niceFormatting  Adds new lines and tabs to the string. 
     * @returns The table formatted as a string. 
     * @example
     * 
     * local Table = { Red = "Apple", Green = "Celery", Yellow = "Banana"}
     * local String = table.ToString( Table, "Fruit and Vegetable", true )
     * print( String )
     * 
     * // Demonstrates the use of this function. 
     */
    function ToString(tbl: table, displayName: string, niceFormatting: boolean): string;
}

/**
 * A single AI task. Returned by {{LibraryFunction|ai_task|New}}. 
 */
declare class Task {
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Initialises the AI task. Called by {{LibraryFunction|ai_task|New}}. 
     */
    public Init(): void;
    
    /**
     * Initialises the AI task as an engine task. 
     * @param taskname  The name of the task. 
     * @param taskdata 
     */
    public InitEngine(taskname: string, taskdata: number): void;
    
    /**
     * Initialises the AI task as NPC method-based. 
     * @param startname  The name of the NPC method to call on task start. 
     * @param runname  The name of the NPC method to call on task run. 
     * @param taskdata 
     */
    public InitFunctionName(startname: string, runname: string, taskdata: number): void;
    
    /**
     * Determines if the task is an engine task (''TYPE_ENGINE'', 1). 
     */
    public IsEngineType(): void;
    
    /**
     * Determines if the task is an NPC method-based task (''TYPE_FNAME'', 2). 
     */
    public IsFNameType(): void;
    
    /**
     * Runs the AI task. 
     * @param target  The NPC to run the task on. 
     */
    public Run(target: NPC): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Runs the AI task as an NPC method. This requires the task to be of type ''TYPE_FNAME''. 
     * @param target  The NPC to run the task on. 
     */
    public Run_FName(target: NPC): void;
    
    /**
     * Starts the AI task. 
     * @param target  The NPC to start the task on. 
     */
    public Start(target: NPC): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Starts the AI task as an NPC method. 
     * @param target  The NPC to start the task on. 
     */
    public Start_FName(target: NPC): void;
}

/**
 * The team library gives you access to the team system built into the Source engine, and allows you to create custom teams and get information about them. 
 */
declare namespace team {
    /**
     * Increases the score of the given team 
     * @param index  Index of the team 
     * @param increment  Amount to increase the team's score by 
     */
    function AddScore(index: number, increment: number): void;
    
    /**
     * Returns the team index of the team with the least players. Falls back to TEAM_UNASSIGNED 
     * @returns Team index 
     */
    function BestAutoJoinTeam(): number;
    
    /**
     * Returns a table consisting of information on every defined team 
     * @returns Team info 
     * @example
     * 
     * PrintTable( team.GetAllTeams() )
     * 
     * // Prints all Jobs/Teams on the server. The list in printed from lowest to highest. Information about join able to the player, the score of the team and the colors. 
     */
    function GetAllTeams(): table;
    
    /**
     * Returns the selectable classes for the given team. This can be added to with [[team/SetClass]] 
     * @param index  Index of the team 
     * @returns Selectable classes 
     */
    function GetClass(index: number): table;
    
    /**
     * Returns the team's color. 
     * @param teamIndex  The team index. 
     * @returns The team's color as a {{Struct|Color}}. 
     */
    function GetColor(teamIndex: number): Color;
    
    /**
     * Returns the name of the team. 
     * @param teamIndex  The team index. 
     * @returns The team name. If the team is not defined, returns an empty string. 
     * @example
     * 
     * print(team.GetName(Entity(1):Team()))
     * 
     * // Get's the teams string name. 
     */
    function GetName(teamIndex: number): string;
    
    /**
     * Returns a table with all player of the specified team. 
     * @param teamIndex  The team index. 
     * @returns A table of {{Type|Player}}s that belong to the requested team. 
     * @example
     * 
     * PrintTable(team.GetPlayers(ply:Team()))
     * 
     * // Prints all the players in a player's team. 
     */
    function GetPlayers(teamIndex: number): Player[];
    
    /**
     * Returns the score of the team. 
     * @param teamIndex  The team index. 
     * @returns score 
     */
    function GetScore(teamIndex: number): number;
    
    /**
     * Returns a table of valid spawnpoint classes the team can use. These are set with {{LibraryFunction|team|SetSpawnPoint}}. 
     * @param index  Index of the team 
     * @returns Valid spawnpoint classes 
     */
    function GetSpawnPoint(index: number): table;
    
    /**
     * Returns a table of valid spawnpoint entities the team can use. These are set with  {{LibraryFunction|team|SetSpawnPoint}}. 
     * @param index  Index of the team 
     * @returns Valid spawnpoint entities 
     * @example
     * 
     * print(table.Random(team.GetSpawnPoints(TEAM_RED)))
     * 
     * // Prints a random spawnpoint entity for TEAM_RED 
     */
    function GetSpawnPoints(index: number): table;
    
    /**
     * Returns if a team is joinable or not. This is set in {{LibraryFunction|team|SetUp}}. 
     * @param index  The index of the team. 
     * @returns True if the team is joinable. False otherwise. 
     */
    function Joinable(index: number): boolean;
    
    /**
     * Returns the amount of players in a team. 
     * @param teamIndex  The team index. 
     * @returns playerCount 
     */
    function NumPlayers(teamIndex: number): number;
    
    /**
     * Sets valid classes for use by a team. Classes can be created using {{LibraryFunction|player_manager|RegisterClass}} 
     * @param index  Index of the team 
     * @param classes  A class ID or table of class IDs 
     * @example
     * 
     * team.SetClass( TEAM_RED, {"Soldier"} )
     * 
     * // Allows TEAM_RED to access the "Soldier" class 
     */
    function SetClass(index: number, classes: any): void;
    
    /**
     * Sets the team's color. 
     * @param teamIndex  The team index. 
     * @param color  The team's new color as a {{Struct|Color}}. 
     */
    function SetColor(teamIndex: number, color: Color): void;
    
    /**
     * Sets the score of the given team 
     * @param index  Index of the team 
     * @param score  The team's new score 
     */
    function SetScore(index: number, score: number): void;
    
    /**
     * Sets valid spawnpoint classes for use by a team.
     * 
     * **Note:**
     * >GM.TeamBased must be set to true for this to work 
     * @param index  Index of the team 
     * @param classes  A spawnpoint classname or table of spawnpoint classnames 
     * @example
     * 
     * team.SetSpawnPoint( TEAM_BLUE, {"info_terror"} )
     * 
     * // Allows TEAM_BLUE to spawn at terrorist spawn points 
     */
    function SetSpawnPoint(index: number, classes: any): void;
    
    /**
     * Creates a new team. 
     * @param teamIndex  The team index. 
     * @param teamName  The team name. 
     * @param teamColor  The team color. Uses the {{Struct|Color}}. 
     * @param isJoinable [=true] Whether the team is joinable or not. 
     * @example
     * 
     * team.SetUp(2, "Mingebags", Color(255, 0, 0))
     * 
     * // Create team 2 with name "Mingebags" and color red 
     */
    function SetUp(teamIndex: number, teamName: string, teamColor: Color, isJoinable?: boolean): void;
    
    /**
     * Returns the sum of deaths of all players of the team. 
     * @param teamIndex  The team index. 
     * @returns deathCount 
     */
    function TotalDeaths(teamIndex: number): number;
    
    /**
     * Get's the total frags in a team. 
     * @param Entity_or_number  Entity or number. 
     * @returns index 
     */
    function TotalFrags(Entity_or_number: Entity): number;
    
    /**
     * Returns true if the given team index is valid 
     * @param index  Index of the team 
     * @returns Is valid 
     */
    function Valid(index: number): boolean;
}

/**
 * Basic text input field. 
 */
declare class TextEntry extends Panel {
    /**
     * Performs the "CONTROL + C" key combination effect ( Copy selection to clipboard ) on selected text.
     * 
     * [[Category:TextEntry]] 
     */
    public CopySelected(): void;
    
    /**
     * Performs the "CONTROL + C" key combination effect ( Copy selection to clipboard ) on selected text.
     * 
     * [[Category:TextEntry]] 
     */
    public CopySelected(): void;
    
    /**
     * Performs the "CONTROL + X" ( delete text and copy it to clipboard buffer ) action on selected text.
     * 
     * [[Category:TextEntry]] 
     */
    public CutSelected(): void;
    
    /**
     * Performs the "CONTROL + X" ( delete text and copy it to clipboard buffer ) action on selected text.
     * 
     * [[Category:TextEntry]] 
     */
    public CutSelected(): void;
    
    /**
     * Used to draw the text in a {{Type|DTextEntry}} within a derma skin. This should be called within the {{HookFunction|SKIN|PaintTextEntry}} skin hook.
     * 
     * [[Category:TextEntry]] 
     * @param textCol  The colour of the main text. 
     * @param highlightCol  The colour of the selection highlight (when selecting text). 
     * @param cursorCol  The colour of the text cursor (or caret). 
     * @example
     * 
     * function SKIN:PaintTextEntry( panel, w, h )
     * 
     * 	if ( panel.m_bBackground ) then
     * 	
     * 		if ( panel:GetDisabled() ) then
     * 			self.tex.TextBox_Disabled( 0, 0, w, h )
     * 		elseif ( panel:HasFocus() ) then
     * 			self.tex.TextBox_Focus( 0, 0, w, h )
     * 		else
     * 			self.tex.TextBox( 0, 0, w, h )
     * 		end
     * 	
     * 	end
     * 	
     * 	panel:DrawTextEntryText( panel.m_colText, panel.m_colHighlight, panel.m_colCursor )
     * 	
     * end
     * 
     * // The paint function used in the default derma skin. 
     */
    public DrawTextEntryText(textCol: table, highlightCol: table, cursorCol: table): void;
    
    /**
     * Used to draw the text in a {{Type|DTextEntry}} within a derma skin. This should be called within the {{HookFunction|SKIN|PaintTextEntry}} skin hook.
     * 
     * [[Category:TextEntry]] 
     * @param textCol  The colour of the main text. 
     * @param highlightCol  The colour of the selection highlight (when selecting text). 
     * @param cursorCol  The colour of the text cursor (or caret). 
     * @example
     * 
     * function SKIN:PaintTextEntry( panel, w, h )
     * 
     * 	if ( panel.m_bBackground ) then
     * 	
     * 		if ( panel:GetDisabled() ) then
     * 			self.tex.TextBox_Disabled( 0, 0, w, h )
     * 		elseif ( panel:HasFocus() ) then
     * 			self.tex.TextBox_Focus( 0, 0, w, h )
     * 		else
     * 			self.tex.TextBox( 0, 0, w, h )
     * 		end
     * 	
     * 	end
     * 	
     * 	panel:DrawTextEntryText( panel.m_colText, panel.m_colHighlight, panel.m_colCursor )
     * 	
     * end
     * 
     * // The paint function used in the default derma skin. 
     */
    public DrawTextEntryText(textCol: table, highlightCol: table, cursorCol: table): void;
    
    /**
     * Returns the position/offset of the caret (or text cursor) in a text-based panel object.
     * 
     * [[Category:TextEntry]] 
     * @returns The caret position/offset from the start of the text. A value of ''0'' means the caret sits before the first character. 
     */
    public GetCaretPos(): number;
    
    /**
     * Returns the position/offset of the caret (or text cursor) in a text-based panel object.
     * 
     * [[Category:TextEntry]] 
     * @returns The caret position/offset from the start of the text. A value of ''0'' means the caret sits before the first character. 
     */
    public GetCaretPos(): number;
    
    /**
     * Determines whether or not a text-based panel object, such as a {{Type|DTextEntry}}, is in multi-line mode. This is set with {{ClassFunction|Panel|SetMultiline}}.
     * 
     * [[Category:TextEntry]] 
     * @returns Whether the object is in multi-line mode or not. 
     */
    public IsMultiline(): boolean;
    
    /**
     * Determines whether or not a text-based panel object, such as a {{Type|DTextEntry}}, is in multi-line mode. This is set with {{ClassFunction|Panel|SetMultiline}}.
     * 
     * [[Category:TextEntry]] 
     * @returns Whether the object is in multi-line mode or not. 
     */
    public IsMultiline(): boolean;
    
    /**
     * {{Warning|Due to privacy concerns, this function has been disabled}}
     * 
     * Only works for TextEntries.
     * 
     * Pastes the contents of the clipboard into the TextEntry.
     * 
     * **Note:**
     * >Tab characters will be dropped from the pasted text
     * 
     * [[Category:TextEntry]] 
     */
    public Paste(): void;
    
    /**
     * {{Warning|Due to privacy concerns, this function has been disabled}}
     * 
     * Only works for TextEntries.
     * 
     * Pastes the contents of the clipboard into the TextEntry.
     * 
     * **Note:**
     * >Tab characters will be dropped from the pasted text
     * 
     * [[Category:TextEntry]] 
     */
    public Paste(): void;
    
    /**
     * Saves the current state (caret position and the text inside) of a {{Type|TextEntry}} as an undo state.
     * 
     * See also {{ClassFunction|Panel|Undo}}.
     * 
     * [[Category:TextEntry]] 
     */
    public SaveUndoState(): void;
    
    /**
     * Saves the current state (caret position and the text inside) of a {{Type|TextEntry}} as an undo state.
     * 
     * See also {{ClassFunction|Panel|Undo}}.
     * 
     * [[Category:TextEntry]] 
     */
    public SaveUndoState(): void;
    
    /**
     * Selects all items within a panel or object. For text-based objects, selects all text.
     * 
     * [[Category:TextEntry]] 
     */
    public SelectAll(): void;
    
    /**
     * Selects all items within a panel or object. For text-based objects, selects all text.
     * 
     * [[Category:TextEntry]] 
     */
    public SelectAll(): void;
    
    /**
     * If called on a text entry, clicking the text entry for the first time will automatically select all of the text ready to be copied by the user.
     * [[Category:TextEntry]] 
     */
    public SelectAllOnFocus(): void;
    
    /**
     * If called on a text entry, clicking the text entry for the first time will automatically select all of the text ready to be copied by the user.
     * [[Category:TextEntry]] 
     */
    public SelectAllOnFocus(): void;
    
    /**
     * Selects all the text in a panel object. Will not select non-text items; for this, use {{ClassFunction|Panel|SelectAll}}.
     * 
     * [[Category:TextEntry]] 
     */
    public SelectAllText(): void;
    
    /**
     * Selects all the text in a panel object. Will not select non-text items; for this, use {{ClassFunction|Panel|SelectAll}}.
     * 
     * [[Category:TextEntry]] 
     */
    public SelectAllText(): void;
    
    /**
     * Deselects all items in a panel object. For text-based objects, this will deselect all text.
     * 
     * [[Category:TextEntry]] 
     */
    public SelectNone(): void;
    
    /**
     * Deselects all items in a panel object. For text-based objects, this will deselect all text.
     * 
     * [[Category:TextEntry]] 
     */
    public SelectNone(): void;
    
    /**
     * Configures a text input to allow user to type characters that are not included in the US-ASCII (7-bit ASCII) character set.
     * 
     * Characters not included in US-ASCII are multi-byte characters in UTF-8. They can be accented characters, non-Latin characters and special characters.
     * 
     * [[Category:TextEntry]] 
     * @param allowed  Set to true in order not to restrict input characters. 
     * @example
     * 
     * if vgui.CreateStdRestrict == nil then
     * 	vgui.CreateStdRestrict = vgui.Create
     * end
     * function vgui.Create( classname, parent, name )
     * 	local vgui_elt = vgui.CreateStdRestrict(classname, parent, name)
     * 	if classname == "DTextEntry" or classname == "RichText" or classname == "TextEntry" then
     * 		vgui_elt:SetAllowNonAsciiCharacters(true)
     * 	end
     * 	return vgui_elt
     * end
     * 
     * // Replaces the default vgui.Create() function to always allow non US-ASCII characters for text inputs. 
     */
    public SetAllowNonAsciiCharacters(allowed: boolean): void;
    
    /**
     * Configures a text input to allow user to type characters that are not included in the US-ASCII (7-bit ASCII) character set.
     * 
     * Characters not included in US-ASCII are multi-byte characters in UTF-8. They can be accented characters, non-Latin characters and special characters.
     * 
     * [[Category:TextEntry]] 
     * @param allowed  Set to true in order not to restrict input characters. 
     * @example
     * 
     * if vgui.CreateStdRestrict == nil then
     * 	vgui.CreateStdRestrict = vgui.Create
     * end
     * function vgui.Create( classname, parent, name )
     * 	local vgui_elt = vgui.CreateStdRestrict(classname, parent, name)
     * 	if classname == "DTextEntry" or classname == "RichText" or classname == "TextEntry" then
     * 		vgui_elt:SetAllowNonAsciiCharacters(true)
     * 	end
     * 	return vgui_elt
     * end
     * 
     * // Replaces the default vgui.Create() function to always allow non US-ASCII characters for text inputs. 
     */
    public SetAllowNonAsciiCharacters(allowed: boolean): void;
    
    /**
     * Sets the position of the caret (or text cursor) in a text-based panel object.
     * 
     * [[Category:TextEntry]] 
     * @param offset  Caret position/offset from the start of text. A value of ''0'' places the caret before the first character. 
     */
    public SetCaretPos(offset: number): void;
    
    /**
     * Sets the position of the caret (or text cursor) in a text-based panel object.
     * 
     * [[Category:TextEntry]] 
     * @param offset  Caret position/offset from the start of text. A value of ''0'' places the caret before the first character. 
     */
    public SetCaretPos(offset: number): void;
    
    /**
     * Sets the visibility of the language selection box in a TextEntry when typing in non-English mode.
     * 
     * See {{ClassFunction|Panel|SetDrawLanguageIDAtLeft}} for a function that changes the position of the language selection box.
     * 
     * [[Category:TextEntry]] 
     * @param visible  true to make it visible, false to hide it. 
     */
    public SetDrawLanguageID(visible: boolean): void;
    
    /**
     * Sets the visibility of the language selection box in a TextEntry when typing in non-English mode.
     * 
     * See {{ClassFunction|Panel|SetDrawLanguageIDAtLeft}} for a function that changes the position of the language selection box.
     * 
     * [[Category:TextEntry]] 
     * @param visible  true to make it visible, false to hide it. 
     */
    public SetDrawLanguageID(visible: boolean): void;
    
    /**
     * Sets where to draw the language selection box.
     * 
     * See {{ClassFunction|Panel|SetDrawLanguageID}} for a function that hides or shows the language selection box.
     * 
     * [[Category:TextEntry]] 
     * @param left  true = left, false = right 
     */
    public SetDrawLanguageIDAtLeft(left: boolean): void;
    
    /**
     * Sets where to draw the language selection box.
     * 
     * See {{ClassFunction|Panel|SetDrawLanguageID}} for a function that hides or shows the language selection box.
     * 
     * [[Category:TextEntry]] 
     * @param left  true = left, false = right 
     */
    public SetDrawLanguageIDAtLeft(left: boolean): void;
    
    /**
     * Sets the font used to render this panel's text.
     * 
     * To retrieve the font used by a panel, call {{ClassFunction|Panel|GetFont}}.
     * 
     * [[Category:Label]]
     * [[Category:TextEntry]]
     * [[Category:RichText]] 
     * @param fontName  The name of the font.
     * 
     * See [[Default_Fonts|here]] for a list of existing fonts.
     * Alternatively, use {{LibraryFunction|surface|CreateFont}} to create your own custom font. 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(200, 100)
     * TextFrame:Center()
     * TextFrame:SetTitle("This is a font test")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Sample text
     * richtext:SetText("This is a sample of text using the chat box font.")
     * 
     * // Ensure font and text color changes are applied
     * function richtext:PerformLayout()
     * 
     * 	self:SetFontInternal("ChatFont")
     * 	self:SetFGColor(Color(255, 255, 255))
     * 	
     * end
     * 
     * // Sets the font of a {{Type|RichText}} element to match the chat box font. 
     */
    public SetFontInternal(fontName: string): void;
    
    /**
     * Sets the font used to render this panel's text.
     * 
     * To retrieve the font used by a panel, call {{ClassFunction|Panel|GetFont}}.
     * 
     * [[Category:Label]]
     * [[Category:TextEntry]]
     * [[Category:RichText]] 
     * @param fontName  The name of the font.
     * 
     * See [[Default_Fonts|here]] for a list of existing fonts.
     * Alternatively, use {{LibraryFunction|surface|CreateFont}} to create your own custom font. 
     * @example
     * 
     * // Create a window frame
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(200, 100)
     * TextFrame:Center()
     * TextFrame:SetTitle("This is a font test")
     * TextFrame:MakePopup()
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Sample text
     * richtext:SetText("This is a sample of text using the chat box font.")
     * 
     * // Ensure font and text color changes are applied
     * function richtext:PerformLayout()
     * 
     * 	self:SetFontInternal("ChatFont")
     * 	self:SetFGColor(Color(255, 255, 255))
     * 	
     * end
     * 
     * // Sets the font of a {{Type|RichText}} element to match the chat box font. 
     */
    public SetFontInternal(fontName: string): void;
    
    /**
     * Enables or disables the multi-line functionality of a text object, such as a {{Type|DTextEntry}}.
     * 
     * [[Category:TextEntry]] 
     * @param multiline  Whether to enable multiline or not. 
     */
    public SetMultiline(multiline: boolean): void;
    
    /**
     * Enables or disables the multi-line functionality of a text object, such as a {{Type|DTextEntry}}.
     * 
     * [[Category:TextEntry]] 
     * @param multiline  Whether to enable multiline or not. 
     */
    public SetMultiline(multiline: boolean): void;
    
    /**
     * Sets the text value of a panel object containing text, such as a {{Type|Label}}, {{Type|TextEntry}} or  {{Type|RichText}} and their derivatives, such as {{Type|DLabel}}, {{Type|DTextEntry}} or {{Type|DButton}}.
     * 
     * {{Warning|When used on a {{Type|Label}} or its derivatives ( {{Type|DLabel}} and {{Type|DButton}} ), it will automatically call {{ClassFunction|Panel|InvalidateLayout}}, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.}}
     * [[Category:Label]]
     * [[Category:DLabel]]
     * [[Category:TextEntry]]
     * [[Category:RichText]]
     * [[Category:DTree_Node]] 
     * @param text  The text value to set. 
     * @example
     * 
     * // Window frame for the RichText
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(250, 150)
     * TextFrame:Center()
     * TextFrame:SetTitle("#VAC_ConnectionRefusedTitle") // Results in "Connection Refused - VAC"
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Set the text to the message you get when VAC banned
     * richtext:SetText("#VAC_ConnectionRefusedDetail")
     * 
     * // Creates a {{Type|RichText}} element and sets the text to a localized string; the default VAC rejection message. 
     */
    public SetText(text: string): void;
    
    /**
     * Sets the text value of a panel object containing text, such as a {{Type|Label}}, {{Type|TextEntry}} or  {{Type|RichText}} and their derivatives, such as {{Type|DLabel}}, {{Type|DTextEntry}} or {{Type|DButton}}.
     * 
     * {{Warning|When used on a {{Type|Label}} or its derivatives ( {{Type|DLabel}} and {{Type|DButton}} ), it will automatically call {{ClassFunction|Panel|InvalidateLayout}}, meaning that you should avoid running this function every frame on these panels to avoid unnecessary performance loss.}}
     * [[Category:Label]]
     * [[Category:DLabel]]
     * [[Category:TextEntry]]
     * [[Category:RichText]]
     * [[Category:DTree_Node]] 
     * @param text  The text value to set. 
     * @example
     * 
     * // Window frame for the RichText
     * TextFrame = vgui.Create("DFrame")
     * TextFrame:SetSize(250, 150)
     * TextFrame:Center()
     * TextFrame:SetTitle("#VAC_ConnectionRefusedTitle") // Results in "Connection Refused - VAC"
     * 
     * // RichText panel
     * local richtext = vgui.Create("RichText", TextFrame)
     * richtext:Dock(FILL)
     * 
     * // Set the text to the message you get when VAC banned
     * richtext:SetText("#VAC_ConnectionRefusedDetail")
     * 
     * // Creates a {{Type|RichText}} element and sets the text to a localized string; the default VAC rejection message. 
     */
    public SetText(text: string): void;
    
    /**
     * Sets the visibility of the vertical scrollbar.
     * 
     * Works for {{Type|RichText}} and {{Type|TextEntry}}.
     * 
     * [[Category:RichText]]
     * [[Category:TextEntry]] 
     * @param display [=false] True to display the vertical text scroll bar, false to hide it. 
     */
    public SetVerticalScrollbarEnabled(display?: boolean): void;
    
    /**
     * Sets the visibility of the vertical scrollbar.
     * 
     * Works for {{Type|RichText}} and {{Type|TextEntry}}.
     * 
     * [[Category:RichText]]
     * [[Category:TextEntry]] 
     * @param display [=false] True to display the vertical text scroll bar, false to hide it. 
     */
    public SetVerticalScrollbarEnabled(display?: boolean): void;
    
    /**
     * Restores the last saved state (caret position and the text inside) of a {{Type|TextEntry}}. Should act identically to pressing CTRL+Z in a {{Type|TextEntry}}.
     * 
     * See also {{ClassFunction|Panel|SaveUndoState}}.
     * 
     * [[Category:TextEntry]] 
     */
    public Undo(): void;
    
    /**
     * Restores the last saved state (caret position and the text inside) of a {{Type|TextEntry}}. Should act identically to pressing CTRL+Z in a {{Type|TextEntry}}.
     * 
     * See also {{ClassFunction|Panel|SaveUndoState}}.
     * 
     * [[Category:TextEntry]] 
     */
    public Undo(): void;
}

/**
 * A panel capable of loading .tga images. 
 * @example
 * 
 * local panel = vgui.Create( "DFrame" )
 * panel:SetSize( 500, 500 )
 * panel:MakePopup()
 * panel:Center()
 * 
 * local image = vgui.Create( "TGAImage", panel )
 * image:SetSize( 32, 32 )
 * image:SetPos( 50, 50 )
 * image:LoadTGAImage( "materials/addon.tga", "" )
 * 
 * // Creates a TGAImage panel and loads the image defined by line 4. 
 */
declare class TGAImage extends Panel {
    /**
     * Sets a new image to be loaded by a {{Type|TGAImage}}.
     * 
     * [[Category:TGAImage]] 
     * @param imageName  The file path. 
     * @param strPath  The PATH to search in. See [[File Search Paths]].
     * 
     * This isn't used internally. 
     */
    public LoadTGAImage(imageName: string, strPath: string): void;
    
    /**
     * Sets a new image to be loaded by a {{Type|TGAImage}}.
     * 
     * [[Category:TGAImage]] 
     * @param imageName  The file path. 
     * @param strPath  The PATH to search in. See [[File Search Paths]].
     * 
     * This isn't used internally. 
     */
    public LoadTGAImage(imageName: string, strPath: string): void;
}

/**
 * The timer library is a very useful set of functions which allow you to run a function periodically or after a given delay. 
 */
declare namespace timer {
    /**
     * Adjusts the timer if the timer with the given identifier exists. 
     * @param identifier  Identifier of the timer to adjust. 
     * @param delay  The delay interval in seconds. 
     * @param repetitions  Repetitions. Use 0 for infinite. 
     * @param func  The new function. 
     * @returns true if succeeded 
     */
    function Adjust(identifier: any, delay: number, repetitions: number, func: Function): boolean;
    
    /**
     * **Deprecated!**
     *  This function does nothing. 
     */
    function Check(): void;
    
    /**
     * Creates a new timer that will repeat its function given amount of times.
     * This function also requires the timer to be named, which allows you to control it after it was created via the {{Lib|timer}}.
     * 
     * For a simple one-time timer with no identifiers, see {{LibraryFunction|timer|Simple}}.
     * 
     * **Note:**
     * >Timers use {{GlobalFunction|CurTime}} for timing.
     * 
     * {{Warning|Timers won't advance while the client is timing out from the server.}} 
     * @param identifier  Identifier of the timer to create. Must be unique. If a timer already exists with the same identifier, that timer will be updated to the new settings and reset. 
     * @param delay  The delay interval in seconds. If the delay is too small, the timer will fire on the next frame/tick. 
     * @param repetitions  The number of times to repeat the timer. Enter 0 for infinite repetitions. 
     * @param func  Function called when timer has finished the countdown. 
     * @example
     * 
     * local function PrintSomething( text )
     * 	print( text )
     * end
     * 
     * local function PrintNoArguments()
     * 	print( "fun with timers!" )
     * end
     * 
     * local function CreateSomeTimers( )
     * 	timer.Create( "UniqueName1", 1, 1, function() print("inside") end )
     * 	timer.Create( "UniqueName2", 2, 0, function() PrintSomething("outside") end )
     * 	timer.Create( "UniqueName3", 5, 1, PrintNoArguments )
     * end
     * hook.Add( "Initialize", "Timer Example", CreateSomeTimers )
     * 
     * // Creates a timer that has a 1 second delay and is only ran once ('UniqueName1'), a timer that has a 2 second delay and is ran continuously ('UniqueName2'), etc.
     * 
     * This shows the different ways you can interact with functions.@example
     * 
     * local tick = {} 
     * local tick_key = 1 
     * 
     * local function MinimumTimerDelay()	
     * 	local current_time = CurTime() 
     * 	if tick_key > 1 then 
     * 		print( "Timer Iteration #" .. tick_key - 1 .. " had a delay of " .. current_time - tick[tick_key - 1])
     * 	end
     * 	tick[tick_key] = current_time 
     * 	tick_key = tick_key + 1	
     * end
     * 
     * local function Timer()
     * 	timer.Create("Timer Delay", (1/100), 10, MinimumTimerDelay ) 
     * end
     * 
     * hook.Add("Initialize", "Commence Timers", Timer)
     * 
     * // Creates a timer that has 0.01 second delay, to demonstrate that the "minimum" delay of a timer is locked at the tickrate period (1/66 seconds).
     * 
     * (As the example below shows, by setting the delay rate to 1/100 (0.01 seconds), the difference in time between the iterations of the timer should be 0.01 seconds, but instead, it is 0.149 (1/66) seconds). 
     */
    function Create(identifier: string, delay: number, repetitions: number, func: Function): void;
    
    /**
     * **Deprecated:**
     * >You should be using {{LibraryFunction|timer|Remove}} instead.
     * 
     *  Stops and destroys the given timer. Alias of {{LibraryFunction|timer|Remove}}. 
     * @param identifier  Identifier of the timer to destroy. 
     */
    function Destroy(identifier: string): void;
    
    /**
     * Returns whenever the given timer exists or not. 
     * @param identifier  Identifier of the timer. 
     * @returns Returns true if the timer exists, false if it doesn't 
     * @example
     * 
     * if ( timer.Exists( "TimerName" ) ) then
     * 
     * 	// The timer exists
     * 	print( "The timer exists" )
     * 	
     * else
     * 	// The timer doesn't exist
     * 	print( "The timer does not exist!" )
     * 
     * 	// Create a timer
     * 	timer.Create( "TimerName", 1, 0, function() print( "I'm a Timer" ) end)
     * end
     * 
     * // Checks it the timer exists 
     */
    function Exists(identifier: string): boolean;
    
    /**
     * Pauses the given timer. 
     * @param identifier  Identifier of the timer. 
     * @returns false if the timer didn't exist or was already paused, true otherwise. 
     */
    function Pause(identifier: any): boolean;
    
    /**
     * Stops and removes a timer created by {{LibraryFunction|timer|Create}}. 
     * @param identifier  Identifier of the timer to remove. 
     */
    function Remove(identifier: string): void;
    
    /**
     * Returns amount of repetitions/executions left before the timer destroys itself. 
     * @param identifier  Identifier of the timer. 
     * @returns The amount of executions left. 
     */
    function RepsLeft(identifier: any): number;
    
    /**
     * Creates a simple timer that runs the given function after a specified delay.
     * 
     * For a more advanced version that you can control after creation, see {{LibraryFunction|timer|Create}}.
     * 
     * **Note:**
     * >Timers use {{GlobalFunction|CurTime}} for timing.
     * 
     * {{Warning|Timers won't advance while the client is timing out from the server.}} 
     * @param delay  How long until the function should be ran (in seconds). Use 0 to have the function run in the next {{HookFunction|GM|Think}}. 
     * @param func  The function to run after the specified delay. 
     * @example
     * 
     * timer.Simple( 5, function() print( "Hello World" ) end )
     * 
     * // Print "Hello World" after 5 seconds.@example
     * 
     * for i = 1, 5 do
     * 	local zombie = ents.Create("npc_zombie")
     * 	zombie:SetPos( Vector( i*40, 0 , 250 ) )
     * 	zombie:Spawn()
     * 
     * 	timer.Simple( 10 + i, function() zombie:Remove() end  )
     * end
     * 
     * // Spawns 5 zombies and creates a timer.Simple that removes them in 11, 12, 13, 14, and 15 seconds. 
     */
    function Simple(delay: number, func: Function): void;
    
    /**
     * Restarts the given timer.
     * 
     * **Note:**
     * >Timers use {{GlobalFunction|CurTime}} for timing.
     * 
     * {{Warning|Timers won't advance while the client is timing out from the server.}} 
     * @param identifier  Identifier of the timer. 
     * @returns true if the timer exists, false if it doesn't. 
     */
    function Start(identifier: any): boolean;
    
    /**
     * Stops the given timer and rewinds it. 
     * @param identifier  Identifier of the timer. 
     * @returns false if the timer didn't exist or was already stopped, true otherwise. 
     */
    function Stop(identifier: any): boolean;
    
    /**
     * Returns amount of time left (in seconds) before the timer executes its function.
     * 
     * **Note:**
     * >If the timer is paused, the amount will be negative. 
     * @param identifier  Identifier of the timer. 
     * @returns The amount of time left (in seconds). 
     */
    function TimeLeft(identifier: any): number;
    
    /**
     * Runs either {{LibraryFunction|timer|Pause}} or {{LibraryFunction|timer|UnPause}} based on the timer's current status. 
     * @param identifier  Identifier of the timer. 
     * @returns status of the timer. 
     */
    function Toggle(identifier: any): boolean;
    
    /**
     * Unpauses the timer. 
     * @param identifier  Identifier of the timer. 
     * @returns false if the timer didn't exist or was already running, true otherwise. 
     */
    function UnPause(identifier: any): boolean;
}

/**
 * A list of functions available inside a TOOL. TOOLs are the Sandbox tools and they are available only in Sandbox and Sandbox derived gamemodes.
 * 
 * You can find the hooks [[:Category:TOOL_Hooks|here]] and members [[Structures/TOOL|here]]. 
 */
declare class Tool {
    /**
     * Clears all objects previously set with {{ClassFunction|Tool|SetObject}}. 
     */
    public ClearObjects(): void;
    
    /**
     * Retrieves a physics bone number previously stored using {{ClassFunction|Tool|SetObject}}. 
     * @param id  The id of the object which was set in {{ClassFunction|Tool|SetObject}}. 
     */
    public GetBone(id: number): void;
    
    /**
     * Attempts to grab a clientside tool {{Type|ConVar}}. 
     * @param name  Name of the convar to retrieve. The function will automatically add the "mytoolfilename_" part to it. 
     * @returns The value of the requested {{Type|ConVar}}. 
     */
    public GetClientInfo(name: string): string;
    
    /**
     * Attempts to grab a clientside tool {{Type|ConVar}}. 
     * @param name  Name of the convar to retrieve. The function will automatically add the "mytoolfilename_" part to it. 
     * @param defaultVal [=0] The default value to return in case the lookup fails. 
     * @returns The value of the requested {{Type|ConVar}}. 
     */
    public GetClientNumber(name: string, defaultVal?: number): number;
    
    /**
     * Retrieves an Entity previously stored using {{ClassFunction|Tool|SetObject}}. 
     * @param id  The id of the object which was set in {{ClassFunction|Tool|SetObject}}. 
     */
    public GetEnt(id: number): void;
    
    /**
     * Returns the current operation of the tool set by {{ClassFunction|Tool|SetOperation}}. 
     * @returns The current operation the tool is at. 
     */
    public GetOperation(): number;
    
    /**
     * Returns the owner of this tool. 
     * @returns Player using the tool 
     */
    public GetOwner(): Entity;
    
    /**
     * Attempts to grab a serverside tool {{Type|ConVar}}.
     * This will not do anything on client, despite the function being defined shared. 
     * @param name  Name of the convar to retrieve. The function will automatically add the "mytoolfilename_" part to it. 
     * @returns The value of the requested {{Type|ConVar}}. 
     */
    public GetServerInfo(name: string): string;
    
    /**
     * Returns the current stage of the tool set by {{ClassFunction|Tool|SetStage}}. 
     * @returns The current stage of the current operation the tool is at. 
     */
    public GetStage(): number;
    
    /**
     * Returns the amount of stored objects ( {{Type|Entity}}s ) the tool has. 
     * @returns The amount of stored objects, or {{ClassFunction|Tool|GetStage}} clientide. 
     */
    public NumObjects(): number;
    
    /**
     * Stores an {{Type|Entity}} for later use in the tool. 
     * @param id  The id of the object to store. 
     * @param ent  The entity to store. 
     * @param pos  The position to store. 
     *  **Note:**
     * >this position is in '''global space''' and is internally converted to '''local space''' relative to the object, so when you retrieve it later it will be corrected to the object's new position 
     * @param phys  The physics object to store. 
     * @param bone  The hit bone to store. 
     * @param norm  The hit normal to store. 
     */
    public SetObject(id: number, ent: Entity, pos: Vector, phys: PhysObj, bone: number, norm: Vector): void;
    
    /**
     * Sets the current operation of the tool. Does nothing clientside. See also {{ClassFunction|Tool|SetStage}}.
     * 
     * Operations and stages work as follows:
     * * Operation 1
     * ** Stage 1
     * ** Stage 2
     * ** Stage 3
     * * Operation 2
     * ** Stage 1
     * ** Stage 2
     * ** Stage ... 
     * @param operation  The new operation ID to set. 
     */
    public SetOperation(operation: number): void;
    
    /**
     * Sets the current stage of the tool. Does nothing clientside.
     * 
     * See also {{ClassFunction|Tool|SetOperation}}. 
     * @param stage  The new stage to set. 
     */
    public SetStage(stage: number): void;
}

/**
 * A list of hooks (or callbacks) that are available for you to override in a tool. This is only applicable to sandbox and sandbox-derived gamemodes.
 * 
 * See also: {{Struct|TOOL}} and [[:Category:Tool|Tool Functions]]. 
 */
declare class TOOL {
    /**
     * Called when {{HookFunction|WEAPON|Deploy}} of the toolgun is called.
     * 
     * This is also called when switching from another tool on the server. 
     */
    public Deploy(): void;
    
    /**
     * Called when {{HookFunction|WEAPON|DrawHUD}} of the toolgun is called, only when the user has this tool selected. 
     */
    public DrawHUD(): void;
    
    /**
     * Called after the default tool screen has been drawn.
     * 
     * **Note:**
     * >If this method exists on the TOOL object table, the default scrolling text will not be drawn 
     * @param width  The width of the tool's screen in pixels. 
     * @param height  The height of the tool's screen in pixels. 
     * @example
     * 
     * function TOOL:DrawToolScreen( width, height )
     * 	// Draw black background
     * 	surface.SetDrawColor( Color( 20, 20, 20 ) )
     * 	surface.DrawRect( 0, 0, width, height )
     * 	
     * 	// Draw white text in middle
     * 	draw.SimpleText( "Hello world!", "DermaLarge", width / 2, height / 2, Color( 200, 200, 200 ), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
     * end
     * 
     * // White text that says "Hello world!" on a black background. 
     */
    public DrawToolScreen(width: number, height: number): void;
    
    /**
     * Called when {{HookFunction|WEAPON|Think}} of the toolgun is called, only when the user has this tool selected. 
     * @returns Return true to freeze the player 
     */
    public FreezeMovement(): boolean;
    
    /**
     * Called when {{HookFunction|WEAPON|Holster}} of the toolgun is called, as well as when switching between different toolguns. 
     * @example
     * 
     * function TOOL:Holster()
     * 
     * 	self:ClearObjects()
     * 
     * end
     * 
     * // Clears any objects set by {{ClassFunction|Tool|SetObject}}. 
     */
    public Holster(): void;
    
    /**
     * Called when the user left clicks with the tool 
     * @param tr  A trace from users eyes to wherever he aims at. See {{Struct|TraceResult}} 
     * @returns Return true to make the tool gun beam and play fire animations, false otherwise 
     */
    public LeftClick(tr: TraceResult): boolean;
    
    /**
     * Called when the user presses the reload key with the tool out. 
     * @param tr  A trace from users eyes to wherever he aims at. See {{Struct|TraceResult}} 
     * @returns Return true to make the tool gun beam and play fire animations, false otherwise 
     */
    public Reload(tr: TraceResult): boolean;
    
    /**
     * Called when the user right clicks with the tool. 
     * @param tr  A trace from users eyes to wherever he aims at. See {{Struct|TraceResult}} 
     * @returns Return true to make the tool gun beam and play fire animations, false otherwise 
     */
    public RightClick(tr: TraceResult): boolean;
    
    /**
     * Called when {{HookFunction|WEAPON|Think}} of the toolgun is called. This only happens when the tool gun is currently equipped/selected by the player and the selected tool is this tool. 
     */
    public Think(): void;
}

/**
 * **Deprecated:**
 * >You should be using the {{Lib|net}} instead
 * 
 * The umsg (user message) library was previously the most common way of sending information from the server to the client. 
 * 
 * {{Warning|Usermessages have a limit of only 256 bytes!}} 
 */
declare namespace umsg {
    /**
     * Writes an angle to the usermessage. 
     * @param angle  The angle to be sent. 
     */
    function Angle(angle: Angle): void;
    
    /**
     * Writes a bool to the usermessage. 
     * @param bool  The bool to be sent. 
     */
    function Bool(bool: boolean): void;
    
    /**
     * Writes a signed char to the usermessage. 
     * @param char  The char to be sent. 
     */
    function Char(char: number): void;
    
    /**
     * Dispatches the usermessage to the client(s). 
     */
    function End(): void;
    
    /**
     * Writes an entity object to the usermessage. 
     * @param entity  The entity to be sent. 
     */
    function Entity(entity: Entity): void;
    
    /**
     * Writes a float to the usermessage. 
     * @param float  The float to be sent. 
     */
    function Float(float: number): void;
    
    /**
     * Writes a signed int (32 bit) to the usermessage. 
     * @param int  The int to be sent. 
     */
    function Long(int: number): void;
    
    /**
     * **Deprecated:**
     * >Inferior version of {{LibraryFunction|util|AddNetworkString}}
     * 
     * The string specified will be networked to the client and receive a identifying number, which will be sent instead of the string to optimize networking. 
     * @param str  The string to be pooled. 
     */
    function PoolString(str: string): void;
    
    /**
     * Writes a signed short (16 bit) to the usermessage. 
     * @param short  The short to be sent. 
     */
    function Short(short: number): void;
    
    /**
     * **Deprecated:**
     * >You should be using {{Lib|net}} instead
     * 
     * Starts a new usermessage.
     * 
     * {{Warning|Usermessages have a limit of only 256 bytes!}} 
     * @param name  The name of the message to be sent. 
     * @param filter  If passed a player object, it will only be sent to the player, if passed a {{Type|CRecipientFilter}} of players, it will be sent to all specified players, if passed nil (or another invalid value), the message will be sent to all players. 
     */
    function Start(name: string, filter: CRecipientFilter): void;
    
    /**
     * Writes a null terminated string to the usermessage. 
     * @param str  The string to be sent. 
     * @example
     * 
     * umsg.Start("Example_SendString") // With umsg.Start("Example_SendString",pl) Must get pl value the player entity.
     * 	umsg.String("Custom Text")
     * umsg.End()
     * 
     * // An easy way to send any string to the client or clients 
     */
    function String(str: string): void;
    
    /**
     * Writes a Vector to the usermessage. 
     * @param vector  The vector to be sent. 
     */
    function Vector(vector: Vector): void;
    
    /**
     * Writes a vector normal to the usermessage. 
     * @param normal  The vector normal to be sent. 
     */
    function VectorNormal(normal: Vector): void;
}

/**
 * The undo library allows you to add custom entities to the undo list, allowing users to "undo" their creation with their undo (default: Z) key. 
 */
declare namespace undo {
    /**
     * Adds an entity to the current undo block 
     * @param ent  The entity to add 
     * @example
     * 
     * prop = ents.Create("prop_physics")
     * prop:SetModel("models/props_junk/wood_crate001a.mdl")
     * prop:Spawn()
     * 
     * undo.Create("prop")
     * 	undo.AddEntity(prop)
     * 	undo.SetPlayer(Player)
     * undo.Finish()
     * 
     * // This example creates a prop_physics, and adds it to the players undo list. 
     */
    function AddEntity(ent: Entity): void;
    
    /**
     * Adds a function to call when the current undo block is undone 
     * @param func  The function to call 
     * @param arguments  Arguments to pass to the function (after the undo info table) 
     * @example
     * 
     * prop = ents.Create("prop_physics")
     * prop:SetModel("models/props_junk/wood_crate001a.mdl")
     * prop:Spawn()
     * undo.Create("prop")
     *  undo.AddEntity(prop)
     *  undo.AddFunction(function(tab, arg2)
     *  print(tab.Owner:GetName().." removed prop "..tab.Entities[1]:GetModel()..", code: "..arg2)
     *  end, 556)
     *  undo.SetPlayer(ply)
     * undo.Finish()
     * 
     * // This example creates a prop_physics, and adds it to the players undo list. A message will be printed to console about it. 
     */
    function AddFunction(func: Function, ...arguments: (any)[]): void;
    
    /**
     * Begins a new undo entry 
     * @param name  Name of the undo message to show to players 
     */
    function Create(name: string): void;
    
    /**
     * Processes an undo block (in table form). This is used internally by the undo manager when a player presses Z. 
     * @param tab  The undo block to process as an {{Struct|Undo}} 
     * @returns Number of removed entities 
     * @example
     * 
     * local tab = {}
     * tab.Owner = Entity(1)
     * tab.Name = "prop"
     * tab.Entities = {Entity(56),Entity(57)}
     * undo.Do_Undo(tab)
     * 
     * // This example removes two entities, and informs player 1 that they just "Undone Prop!" 
     */
    function Do_Undo(tab: Undo): number;
    
    /**
     * Completes an undo entry, and registers it with the player's client 
     */
    function Finish(): void;
    
    /**
     * Serverside, returns a table containing all undo blocks of all players. Clientside, returns a table of the local player's undo blocks. 
     * @returns The undo table. 
     */
    function GetTable(): table;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Makes the UI dirty - it will re-create the controls the next time it is viewed. We also take this opportun 
     */
    function MakeUIDirty(): void;
    
    /**
     * Replaces any instance of the "from" reference with the "to" reference, in any existing undo block. Returns true if something was replaced 
     * @param from  The old entity 
     * @param to  The new entity to replace the old one 
     * @returns somethingReplaced 
     */
    function ReplaceEntity(from: Entity, to: Entity): boolean;
    
    /**
     * Sets a custom undo text for the current undo block 
     * @param customText  The text to display when the undo block is undone 
     * @example
     * 
     * local prop = ents.Create( "prop_physics" )
     * prop:SetModel( "models/props_junk/wood_crate001a.mdl" )
     * prop:Spawn()
     * undo.Create( "prop" )
     *  undo.AddEntity( prop )
     *  undo.SetPlayer( Player )
     *  undo.SetCustomUndoText("Undone a crate prop")
     * undo.Finish()
     * 
     * // This example creates a prop_physics, adds it to the players undo list, and sets a custom undo text 
     */
    function SetCustomUndoText(customText: string): void;
    
    /**
     * Sets the player which the current undo block belongs to 
     * @param ply  The player responsible for undoing the block 
     */
    function SetPlayer(ply: Player): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Adds a hook (CPanelPaint) to the control panel paint function so we can determine when it is being drawn. 
     */
    function SetupUI(): void;
}

/**
 * A panel similar to {{Type|Label}} used by {{Type|DLabelURL}}. 
 */
declare class URLLabel {
    /**
     * [[Category:DLabelURL]][[Category:URLLabel]]Sets the URL of a link-based panel such as {{Type|DLabelURL}}. 
     * @param url  The URL to set. This '''must''' begin with ''<nowiki>http://</nowiki>''. 
     */
    public SetURL(url: string): void;
}

/**
 * **Deprecated:**
 * >You should be using the {{Lib|net}} instead
 * 
 * The usermessage library is used to receive user messages from the server on the client.
 * 
 * {{Warning|Usermessages have a limit of only 256 bytes!}} 
 */
declare namespace usermessage {
    /**
     * Returns a table of every usermessage hook 
     * @returns hooks 
     */
    function GetTable(): table;
    
    /**
     * **Deprecated:**
     * >You should be using {{Lib|net}} instead
     * 
     * Sets a hook for the specified to be called when a usermessage with the specified name arrives.
     * 
     * {{Warning|Usermessages have a limit of only 256 bytes!}} 
     * @param name  The message name to hook to. 
     * @param callback  The function to be called if the specified message was received.
     * Parameters (Optional):
     * * {{FuncArg|bf_read|msg}}
     * * {{FuncArg|vararg|preArgs}} 
     * @param preArgs  Arguments that are passed to the callback function when the hook is called. *ring ring* 
     */
    function Hook(name: string, callback: Function, ...preArgs: (any)[]): void;
    
    /**
     * Called by the engine when a usermessage arrives, this method calls the hook function specified by {{LibraryFunction|usermessage|Hook}} if any. 
     * @param name  The message name. 
     * @param msg  The message. 
     */
    function IncomingMessage(name: string, msg: bf_read): void;
}

/**
 * The utf8 library provides basic support for UTF-8 encoding. This library does not provide any support for Unicode other than the handling of the encoding. Any operation that needs the meaning of a character, such as character classification, is outside its scope.
 * 
 * Unless stated otherwise, all functions that expect a byte position as a parameter assume that the given position is either the start of a byte sequence or one plus the length of the subject string. As in the string library, negative indices count from the end of the string. 
 */
declare namespace utf8 {
    /**
     * Receives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences. 
     * @param codepoints  Unicode code points to be converted in to a UTF-8 string. 
     * @returns UTF-8 string generated from given arguments. 
     */
    function char(...codepoints: (any)[]): string;
    
    /**
     * =Not a function=
     * 
     * This is NOT a function, it's the [[Patterns|pattern]] (a string, not a function) ```"[%z\x01-\x7F\xC2-\xF4][\x80-\xBF]*"```which matches exactly one UTF-8 byte sequence, assuming that the subject is a valid UTF-8 string.
     * 
     * [[Category:Functions]]
     * [[Category:utf8]]
     * [[Category:Shared]]
     * [[Category:Documented_Functions]]
     * [[Category:Library Functions]] 
     */
    function charpattern(): void;
    
    /**
     * Returns the codepoints (as numbers) from all characters in the given string that start between byte position startPos and endPos. It raises an error if it meets any invalid byte sequence. This functions similarly to {{LibraryFunction|string|byte}}. 
     * @param str  The string that you will get the code(s) from. 
     * @param startPos [=1] The starting byte of the string to get the codepoint of. 
     * @param endPos [=1] The ending byte of the string to get the codepoint of. 
     * @returns The codepoint number(s). 
     * @example
     * 
     * print( utf8.codepoint( "Мёнём", 1, -1 ) )
     * 
     * // Demonstrates usage of the function. 
     */
    function codepoint(str: string, startPos?: number, endPos?: number): any;
    
    /**
     * Returns an iterator (like {{LibraryFunction|string|gmatch}}) which returns both the position and codepoint of each utf8 character in the string. It raises an error if it meets any invalid byte sequence. 
     * @param str  The string that you will get the codes from. 
     * @returns The iterator (to be used in a for loop). 
     * @example
     * 
     * for p, c in utf8.codes("( ͡° ͜ʖ ͡°)") do
     *     print(p,c)
     * end
     * 
     * // Demonstrates usage of the function. 
     */
    function codes(str: string): Function;
    
    /**
     * Forces a string to contain only valid UTF-8 data. Invalid sequences are replaced with U+FFFD (the Unicode replacement character).
     * 
     * This is a lazy way for users to ensure a string contains only valid UTF-8 data. 
     * @param str  The string that will become a valid UTF-8 string. 
     * @returns The UTF-8 string. 
     */
    function force(str: string): string;
    
    /**
     * Returns the number of UTF-8 sequences in the given string between positions startPos and endPos (both inclusive). If it finds any invalid UTF-8 byte sequence, returns false as well as the position of the first invalid byte. 
     * @param str  The string to calculate the length of. 
     * @param startPos [=1] The starting position to get the length from. 
     * @param endPos [=-1] The ending position to get the length from. 
     * @returns [The number of UTF-8 characters in the string. If there are invalid bytes, this will be false., The position of the first invalid byte. If there were no invalid bytes, this will be nil.] 
     * @example
     * 
     * print( string.len( "Мёнём" ) )
     * print( utf8.len( "Мёнём" ) )
     * 
     * // Demonstrates output of this function compared to {{LibraryFunction|string|len}} when given a string that contains Russian text. 
     * !TupleReturn
     */
    function len(str: string, startPos?: number, endPos?: number): [number, number];
    
    /**
     * Returns the byte-index of the n'th UTF-8-character after the given startPos (nil if none). startPos defaults to 1 when n is positive and -1 when n is negative. If n is zero, this function instead returns the byte-index of the UTF-8-character startPos lies within. 
     * @param str  The string that you will get the byte position from. 
     * @param n  The position to get the beginning byte position from. 
     * @param startPos [=1 when n>=0, -1 otherwise] The offset for n. 
     * @returns Starting byte-index of the given position. 
     * @example
     * 
     * print(utf8.offset("( ͡° ͜ʖ ͡°)", 5))
     * 
     * // Returns the byte-index where the character at the 5th byte begins. 
     */
    function offset(str: string, n: number, startPos?: number): number;
}

/**
 * This is the list of utility functions. 
 */
declare namespace util {
    /**
     * Adds the specified string to a string table, which will cache it and network it to all clients automatically.
     * 
     * Whenever you want to create a net message with {{LibraryFunction|net|Start}}, you must add the name of that message as a networked string via this function.
     * 
     * If the passed string already exists, nothing will happen and the ID of the existing item will be returned.
     * 
     * **Note:**
     * >Due to the way string tables work, it's preferable to call this function as soon as the server starts up, such as in {{HookFunction|GM|Initialize}} or even bare in a lua file outside of a function.
     * 
     * **Note:**
     * >The string table used for this function does not interfere with the engine string tables and has 2048 slots. 
     * @param str  Adds the specified string to the string table. 
     * @returns The id of the string that was added to the string table.
     * 
     * Same as calling {{LibraryFunction|util|NetworkStringToID}}. 
     */
    function AddNetworkString(str: string): number;
    
    /**
     * Function used to calculate aim vector from 2D screen position. It is used in SuperDOF calculate Distance.
     * 
     * Essentially a generic version of {{LibraryFunction|gui|ScreenToVector}}. 
     * @param ViewAngles  View angles 
     * @param ViewFOV  View Field of View 
     * @param x  Mouse X position 
     * @param y  Mouse Y position 
     * @param scrWidth  Screen width 
     * @param scrHeight  Screen height 
     * @returns Calculated aim vector 
     */
    function AimVector(ViewAngles: Angle, ViewFOV: number, x: number, y: number, scrWidth: number, scrHeight: number): Vector;
    
    /**
     * Encodes the specified string to base64. 
     * @param str  String to encode. 
     * @returns Base 64 encoded string. 
     */
    function Base64Encode(str: string): string;
    
    /**
     * Applies explosion damage to all entities in the specified radius. 
     * @param inflictor  The entity that caused the damage. 
     * @param attacker  The entity that attacked. 
     * @param damageOrigin  The center of the explosion 
     * @param damageRadius  The radius in which entities will be damaged. 
     * @param damage  The amount of damage to be applied. 
     */
    function BlastDamage(inflictor: Entity, attacker: Entity, damageOrigin: Vector, damageRadius: number, damage: number): void;
    
    /**
     * Applies spherical damage based on damage info to all entities in the specified radius. 
     * @param dmg  The information about the damage 
     * @param damageOrigin  Center of the spherical damage 
     * @param damageRadius  The radius in which entities will be damaged. 
     */
    function BlastDamageInfo(dmg: CTakeDamageInfo, damageOrigin: Vector, damageRadius: number): void;
    
    /**
     * Compresses the given string using the [[wikipedia:LZMA|LZMA]] algorithm.
     * 
     * Use with {{LibraryFunction|net|WriteData}} and {{LibraryFunction|net|ReadData}} for networking and  {{LibraryFunction|util|Decompress}} to decompress the data. 
     * @param str  String to compress. 
     * @returns The compressed string, or nil if the input string was zero length (""). 
     */
    function Compress(str: string): string;
    
    /**
     * Generates the [[wikipedia:Cyclic redundancy check|CRC checksum]] of the specified string. 
     * @param stringToHash  The string to calculate the checksum of. 
     * @returns The unsigned 32 bit checksum. 
     * @example
     * 
     * print( util.CRC( "a" ))
     * 
     * // Prints out the CRC-32 checksum of "a". 
     */
    function CRC(stringToHash: string): string;
    
    /**
     * Returns the current date formatted like '2012-10-31 18-00-00' 
     * @returns date 
     */
    function DateStamp(): string;
    
    /**
     * Performs a trace and paints a decal to the surface hit. 
     * @param name  The name of the decal to paint. 
     * @param start  The start of the trace. 
     * @param end  The end of the trace. 
     * @param filter [=NULL] If set, the decal will not be able to be placed on given entity. Can also be a table of entities. 
     */
    function Decal(name: string, start: Vector, end: Vector, filter?: Entity): void;
    
    /**
     * Performs a trace and paints a decal to the surface hit.
     * 
     * **Note:**
     * >This function has trouble spanning across multiple brushes on the map. 
     * @param material  The name of the decal to paint. Can be retrieved with {{LibraryFunction|util|DecalMaterial}}. 
     * @param ent  The entity to apply the decal to 
     * @param position  The position of the decal. 
     * @param normal  The direction of the decal. 
     * @param color  The color of the decal. Uses the {{Struct|Color}}.
     * 
     * This only works when used on a brush model and only if the decal material has set '''$vertexcolor''' to 1. 
     * @param w  The width scale of the decal. 
     * @param h  The height scale of the decal. 
     */
    function DecalEx(material: IMaterial, ent: Entity, position: Vector, normal: Vector, color: Color, w: number, h: number): void;
    
    /**
     * Gets the full material path by the decal name. Used with {{LibraryFunction|util|DecalEx}}. 
     * @param decalName  Name of the decal. 
     * @returns Material path of the decal. 
     */
    function DecalMaterial(decalName: string): string;
    
    /**
     * Decompresses the given string using [[wikipedia:LZMA|LZMA]] algorithm. Used to decompress strings previously compressed with {{LibraryFunction|util|Compress}}. 
     * @param compressedString  The compressed string to decompress. 
     * @param maxSize [=nil] The maximal size in bytes it will decompress. 
     * @returns The original, decompressed string.
     * 
     * {{NextUpdate|This now returns an empty string ("") when sent an empty string as the argument instead of no value.}} 
     */
    function Decompress(compressedString: string, maxSize?: number): string;
    
    /**
     * Gets the distance between a line and a point in 3d space. 
     * @param lineStart  Start of the line. 
     * @param lineEnd  End of the line. 
     * @param pointPos  The position of the point. 
     * @returns [Distance from line., Nearest point on line., Distance along line from start.] 
     * !TupleReturn
     */
    function DistanceToLine(lineStart: Vector, lineEnd: Vector, pointPos: Vector): [number, Vector, number];
    
    /**
     * Creates an effect with the specified data.
     * 
     * You can find a list of built-in engine effects [[Effects|here]]. You can create your own. Example effects can be found [https://github.com/garrynewman/garrysmod/tree/master/garrysmod/gamemodes/sandbox/entities/effects here] and [https://github.com/garrynewman/garrysmod/tree/master/garrysmod/gamemodes/base/entities/effects here].
     * 
     * **Note:**
     * >When dispatching an effect from the server, some values may be clamped for networking optimizations. Visit the Set accessors on {{Type|CEffectData}} to see which ones are affected.
     * 
     * **Note:**
     * >You will need to couple this function with {{GlobalFunction|IsFirstTimePredicted}} should you use this in a [[:Category:Predicted_Hooks|predicted hook]]. 
     * @param effectName  The name of the effect to create. 
     * @param effectData  The effect data describing the effect. 
     * @param allowOverride [=true] Whether Lua-defined effects should override engine-defined effects with the same name for this/single function call. 
     * @param ignorePredictionOrRecipientFilter [=nil] Can either be a boolean to ignore the prediction filter or a {{Type|CRecipientFilter}}.
     * 
     * Set this to true if you wish to call this function in multiplayer from server. 
     * @example
     * 
     * local vPoint = Vector( 0, 0, 0 )
     * local effectdata = EffectData()
     * effectdata:SetOrigin( vPoint )
     * util.Effect( "HelicopterMegaBomb", effectdata )
     * 
     * // Creates a HelicopterMegaBomb effect at the origin of the map. ( 0, 0, 0 ) 
     */
    function Effect(effectName: string, effectData: CEffectData, allowOverride?: boolean, ignorePredictionOrRecipientFilter?: CRecipientFilter): void;
    
    /**
     * Returns a table containing the info about the model. It seems to be not working serverside, but still exists serverside.
     * 
     * **Note:**
     * >This function will silently fail if used on models with following strings in them:
     * * _shared
     * * _anims
     * * _gestures
     * * _anim
     * * _postures
     * * _gst
     * * _pst
     * * _shd
     * * _ss
     * * _anm
     * * _include 
     * @param mdl  Model path 
     * @returns The model info
     * 
     * number SkinCount
     * string KeyValues ( Constraint Info, valve KeyValues format ) 
     */
    function GetModelInfo(mdl: string): table;
    
    /**
     * Gets PData of an offline player using their SteamID {{Warning|This function internally uses {{ClassFunction|Player|UniqueID}}, which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information.}} 
     * @param steamID  SteamID of the player 
     * @param name  Variable name to get the value of 
     * @param defaultVal  The default value, in case there's nothing stored 
     * @returns The stored value 
     */
    function GetPData(steamID: string, name: string, defaultVal: string): string;
    
    /**
     * Creates a new PixVis handle. See {{LibraryFunction|util|PixelVisible}}. 
     * @returns PixVis 
     */
    function GetPixelVisibleHandle(): pixelvis_handle_t;
    
    /**
     * Utility function to quickly generate a trace table that starts at the players view position, and ends 16384 units along a specified direction. 
     * @param ply  The player the trace should be based on 
     * @param dir [=ply:GetAimVector()] The direction of the trace 
     * @returns The trace data. See {{Struct|Trace}} 
     * @example
     * 
     * local tr = util.TraceLine( util.GetPlayerTrace( LocalPlayer() ) )
     * if IsValid(tr.Entity) then print("I saw a "..tr.Entity:GetModel()) end
     * 
     * local trground = util.TraceLine( util.GetPlayerTrace( LocalPlayer(), Vector(0,0,-1) ) )
     * if IsValid(trground.Entity) then print("I'm standing on a "..trground.Entity:GetModel()) end
     * 
     * // Prints the entity's model the local player is looking at to console 
     */
    function GetPlayerTrace(ply: Player, dir?: Vector): Trace;
    
    /**
     * Gets information about the sun position and obstruction or nil if there is no sun. 
     * @returns The sun info. See {{Struct|SunInfo}} 
     */
    function GetSunInfo(): SunInfo;
    
    /**
     * {{NextUpdate}}
     * 
     * Returns data of a surface property at given ID. 
     * @param id  Surface property ID. You can get it from {{Struct|TraceResult}}. 
     * @returns The data or no value if there is no valid surface property at given index.
     * 
     * See {{Struct|SurfacePropertyData}} 
     */
    function GetSurfaceData(id: number): SurfacePropertyData;
    
    /**
     * Returns the matching surface property index for the given surface property name.
     * 
     * See also {{LibraryFunction|util|GetSurfaceData}} and {{LibraryFunction|util|GetSurfacePropName}} for opposite function. 
     * @param surfaceName  The name of the surface. 
     * @returns The surface property index, or -1 if name doesn't correspond to a valid surface property. 
     */
    function GetSurfaceIndex(surfaceName: string): number;
    
    /**
     * Returns the name of a surface property at given ID.
     * 
     * See also {{LibraryFunction|util|GetSurfaceData}} and {{LibraryFunction|util|GetSurfaceIndex}} for opposite function. 
     * @param id  Surface property ID. You can get it from {{Struct|TraceResult}}. 
     * @returns The name or an empty string if there is no valid surface property at given index. 
     */
    function GetSurfacePropName(id: number): string;
    
    /**
     * Returns a table of all SteamIDs that have a usergroup.
     * 
     * **Note:**
     * >This returns the original usergroups table, changes done to this table are not retroactive and will only affect newly connected users 
     * @returns The table of users. The table consists of SteamID-Table pairs, where the table has 2 fields:
     * {{FuncArg|string|name|Players name}}
     * {{FuncArg|string|group|The players user group}} 
     */
    function GetUserGroups(): table;
    
    /**
     * Performs a "ray" box intersection and returns position, normal and the fraction. 
     * @param rayStart  Origin/start position of the ray. 
     * @param rayDelta  The ray vector itself. This can be thought of as: the ray end point relative to the start point.
     * 
     * Note that in this implementation, the ray is not infinite - it's only a segment. 
     * @param boxOrigin  The center of the box. 
     * @param boxAngles  The angles of the box. 
     * @param boxMins  The min position of the box. 
     * @param boxMaxs  The max position of the box. 
     * @returns [Hit position, nil if not hit., Normal/direction vector, nil if not hit., Fraction of trace used, nil if not hit.] 
     * !TupleReturn
     */
    function IntersectRayWithOBB(rayStart: Vector, rayDelta: Vector, boxOrigin: Vector, boxAngles: Angle, boxMins: Vector, boxMaxs: Vector): [Vector, Vector, number];
    
    /**
     * Performs a [https://en.wikipedia.org/wiki/Line%E2%80%93plane_intersection ray-plane intersection] and returns the hit position or nil. 
     * @param rayOrigin  Origin/start position of the ray. 
     * @param rayDirection  The direction of the ray. 
     * @param planePosition  Any position of the plane. 
     * @param planeNormal  The normal vector of the plane. 
     * @returns The position of intersection, nil if not hit. 
     */
    function IntersectRayWithPlane(rayOrigin: Vector, rayDirection: Vector, planePosition: Vector, planeNormal: Vector): Vector;
    
    /**
     * Checks if a certain position in within the world bounds. 
     * @param position  Position to check. 
     * @returns Whether the vector is in world. 
     */
    function IsInWorld(position: Vector): boolean;
    
    /**
     * Checks if the model is loaded in the game. 
     * @param modelName  Name/Path of the model to check. 
     * @returns Returns true if the model is loaded in the game; otherwise false. 
     */
    function IsModelLoaded(modelName: string): boolean;
    
    /**
     * Check whether the skybox is visibile from the point specified.
     * 
     * **Note:**
     * >This will always return true in fullbright maps 
     * @param position  The position to check the skybox visibility from. 
     * @returns Whether the skybox is visible from the position. 
     */
    function IsSkyboxVisibleFromPoint(position: Vector): boolean;
    
    /**
     * Checks if the specified model is valid. 
     * @param modelName  Name/Path of the model to check. 
     * @returns Whether the model is valid or not. Returns false clientside if the model is not precached by the server. 
     */
    function IsValidModel(modelName: string): boolean;
    
    /**
     * Checks if given numbered physics object of given entity is valid or not. Most useful for ragdolls. 
     * @param ent  The entity 
     * @param physobj  Number of the physics object to test 
     * @returns true is valid, false otherwise 
     */
    function IsValidPhysicsObject(ent: Entity, physobj: number): boolean;
    
    /**
     * Checks if the specified prop is valid. 
     * @param modelName  Name/Path of the model to check. 
     * @returns Returns true if the specified prop is valid; otherwise false. 
     */
    function IsValidProp(modelName: string): boolean;
    
    /**
     * Checks if the specified model name points to a valid ragdoll. 
     * @param ragdollName  Name/Path of the ragdoll model to check. 
     * @returns Returns true if the specified model name points to a valid ragdoll; otherwise false. 
     */
    function IsValidRagdoll(ragdollName: string): boolean;
    
    /**
     * Converts a JSON string to a Lua table.
     * 
     * {{Warning|This function converts keys to numbers whenever possible}} 
     * @param json  The JSON string to convert. 
     * @returns The table containing converted information. Returns nothing on failure. 
     */
    function JSONToTable(json: string): table;
    
    /**
     * Converts a KeyValue string to a Lua table. 
     * @param keyValues  The KeyValue string to convert. 
     * @param usesEscapeSequences [=false] 
     * @param preserveKeyCase [=false] Whether we should preserve key case or not. 
     * @returns The converted table 
     */
    function KeyValuesToTable(keyValues: string, usesEscapeSequences?: boolean, preserveKeyCase?: boolean): table;
    
    /**
     * Similar to {{LibraryFunction|util|KeyValuesToTable}} but it also preserves order of keys.
     * 
     * **Note:**
     * >This creates a table of the same structure, but replaces keys with a table containing their value and their order 
     * @param keyvals  The key value string 
     * @param usesEscapeSequences [=false] 
     * @param preserveKeyCase [=false] Whether we should preserve key case or not. 
     * @returns The output table 
     */
    function KeyValuesToTablePreserveOrder(keyvals: string, usesEscapeSequences?: boolean, preserveKeyCase?: boolean): table;
    
    /**
     * Returns a vector in world coordinates based on an entity and local coordinates 
     * @param ent  The entity lpos is local to 
     * @param lpos  Coordinates local to the ent 
     * @param bonenum  The bonenumber of the ent lpos is local to 
     * @returns wpos 
     */
    function LocalToWorld(ent: Entity, lpos: Vector, bonenum: number): Vector;
    
    /**
     * Returns the networked string associated with the given ID from the string table. 
     * @param stringTableID  ID to get the associated string from. 
     * @returns The networked string, or nil if it wasn't found. 
     */
    function NetworkIDToString(stringTableID: number): string;
    
    /**
     * Returns the networked ID associated with the given string from the string table. 
     * @param networkString  String to get the associated networked ID from. 
     * @returns The networked ID of the string, or 0 if it hasn't been networked with {{LibraryFunction|util|AddNetworkString}}. 
     */
    function NetworkStringToID(networkString: string): number;
    
    /**
     * Formats a float by stripping off extra 0's and .'s 
     * @param float  The float to format 
     * @returns Formatted float 
     */
    function NiceFloat(float: number): string;
    
    /**
     * Creates a tracer effect with the given parameters. 
     * @param name  The name of the tracer effect. 
     * @param startPos  The start position of the tracer. 
     * @param endPos  The end position of the tracer. 
     * @param doWhiz  Play the hit miss(whiz) sound. 
     */
    function ParticleTracer(name: string, startPos: Vector, endPos: Vector, doWhiz: boolean): void;
    
    /**
     * Creates a tracer effect with the given parameters. 
     * @param name  The name of the tracer effect. 
     * @param startPos  The start position of the tracer. 
     * @param endPos  The end position of the tracer. 
     * @param doWhiz  Play the hit miss(whiz) sound. 
     * @param entityIndex  Entity index of the emitting entity. 
     * @param attachmentIndex  Attachment index to be used as origin. 
     */
    function ParticleTracerEx(name: string, startPos: Vector, endPos: Vector, doWhiz: boolean, entityIndex: number, attachmentIndex: number): void;
    
    /**
     * Returns the visibility of a sphere in the world. 
     * @param position  The center of the visibility test. 
     * @param radius  The radius of the sphere to check for visibility. 
     * @param PixVis  The PixVis handle created with {{LibraryFunction|util|GetPixelVisibleHandle}}.
     * 
     * {{Warning|Don't use the same handle twice per tick or it will give unpredictable results.}} 
     * @returns Visibility, ranges from 0-1. 0 when none of the area is visible, 1 when all of it is visible. 
     * @example
     * 
     * local PixVis
     * function SetupPixVis()
     * 	PixVis = util.GetPixelVisibleHandle()
     * end
     * hook.Add("Initialize", "SetupPixVis", SetupPixVis)
     *  
     * function TestPixelVisibility()
     * 	local visible = util.PixelVisible(Vector(0, 0, 0), 16, PixVis)
     *  
     * 	if visible && visible != 0 then
     * 		draw.RoundedBox( 10, 0, 0, 100, 100, Color(0, 0, 0, 200 * visible) )
     * 	end
     * end
     * hook.Add("HUDPaint", "TestPixelVisibility", TestPixelVisibility)
     * 
     * // Draws a box when the center of the map is visible on your screen. 
     */
    function PixelVisible(position: Vector, radius: number, PixVis: pixelvis_handle_t): number;
    
    /**
     * Returns the contents of the position specified. 
     * @param position  Position to get the contents sample from. 
     * @returns Contents bitflag, see {{Enum|CONTENTS}} 
     * @example
     * 
     * local tr = Entity( 1 ):GetEyeTrace()
     * print( bit.band( util.PointContents( tr.HitPos ), CONTENTS_WATER ) == CONTENTS_WATER )
     * 
     * // Check if the trace position is underwater. 
     */
    function PointContents(position: Vector): CONTENTS;
    
    /**
     * Precaches a model for later use. Model is cached after being loaded once. 
     * @param modelName  The model to precache. 
     */
    function PrecacheModel(modelName: string): void;
    
    /**
     * Precaches a sound for later use. Sound is cached after being loaded once. 
     * @param soundName  The sound to precache. 
     */
    function PrecacheSound(soundName: string): void;
    
    /**
     * Performs a trace with the given origin, direction and filter. 
     * @param origin  The origin of the trace. 
     * @param endpos  The end point of the trace, relative to the start.
     * This is the direction of the trace times the distance of the trace. 
     * @param filter [=nil] Entity which should be ignored by the trace. Can also be a table of entities or a function - see {{Struct|Trace}}. 
     * @returns Trace result. See {{Struct|TraceResult}}. 
     */
    function QuickTrace(origin: Vector, endpos: Vector, filter?: Entity): TraceResult;
    
    /**
     * Returns the absolute system path the file relative to /garrysmod/. 
     * @param file  The file to get the absolute path of. 
     * @returns absolutePath 
     */
    function RelativePathToFull(file: string): string;
    
    /**
     * Removes PData of offline player using his SteamID {{Warning|This function internally uses {{ClassFunction|Player|UniqueID}}, which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information.}} 
     * @param steamID  SteamID of the player 
     * @param name  Variable name to remove 
     */
    function RemovePData(steamID: string, name: string): void;
    
    /**
     * Makes the screen shake 
     * @param pos  The origin of the effect 
     * @param amplitude  The strength of the effect 
     * @param frequency  The frequency of the effect in hz 
     * @param duration  The duration of the effect in seconds 
     * @param radius  The range from the origin within which views will be affected, in Hammer Units 
     * @example
     * 
     * util.ScreenShake( Vector(0,0,0), 5, 5, 10, 5000 )
     * 
     * // This will shake the screen, from the position 0 0 0 and 5000 units away, with 5 amp, frequency 5, for 10 seconds. 
     */
    function ScreenShake(pos: Vector, amplitude: number, frequency: number, duration: number, radius: number): void;
    
    /**
     * Sets PData for offline player using his SteamID {{Warning|This function internally uses {{ClassFunction|Player|UniqueID}}, which can cause collisions (two or more players sharing the same PData entry). It's recommended that you don't use it. See the related wiki page for more information.}} 
     * @param steamID  SteamID of the player 
     * @param name  Variable name to store the value in 
     * @param value  The value to store 
     */
    function SetPData(steamID: string, name: string, value: any): void;
    
    /**
     * Generates a random float value that should be the same on client and server.
     * 
     * **Note:**
     * >This function is best used in a [[:Category:Predicted_Hooks|Predicted Hook]] 
     * @param uniqueName  The seed for the random value 
     * @param min  The minimum value of the random range 
     * @param max  The maximum value of the random range 
     * @param additionalSeed [=0] The additional seed 
     * @returns The random float value 
     * @example
     * 
     * print( util.SharedRandom( "23", 0, 100 ) )
     * print( util.SharedRandom( "23", 0, 100 ) )
     * print( util.SharedRandom( "23", 0, 100, 0 ) )
     * print( util.SharedRandom( "23", 0, 100, 1337 ) )
     * print( util.SharedRandom( "lol", 0, 100, 1337 ) )
     * 
     * // Example usage of the function. Generates some random values. 
     */
    function SharedRandom(uniqueName: string, min: number, max: number, additionalSeed?: number): number;
    
    /**
     * Adds a trail to the specified entity. 
     * @param ent  Entity to attach trail to 
     * @param attachmentID  Attachment ID of the entitiys model to attach trail to. If you are not sure, set this to 0 
     * @param color  Color of the trail, use {{GlobalFunction|Color}} 
     * @param additive  Should the trail be additive or not 
     * @param startWidth  Start width of the trail 
     * @param endWidth  End width of the trail 
     * @param lifetime  How long it takes to transition from startWidth to endWidth 
     * @param textureRes  The resolution of trails texture. A good value can be calculated using this formula: 1 / ( startWidth + endWidth ) * 0.5 
     * @param texture  Path to the texture to use as a trail. Note that you should also include the ".vmt" or the game WILL crash! 
     * @returns Entity of created trail (env_spritetrail) 
     */
    function SpriteTrail(ent: Entity, attachmentID: number, color: table, additive: boolean, startWidth: number, endWidth: number, lifetime: number, textureRes: number, texture: string): Entity;
    
    /**
     * Returns a new {{Type|Stack}} object 
     * @returns A brand new stack object 
     */
    function Stack(): Stack;
    
    /**
     * Given a 64bit SteamID will return a STEAM_0: style Steam ID 
     * @param id  The 64 bit Steam ID 
     * @returns STEAM_0 style Steam ID 
     */
    function SteamIDFrom64(id: string): string;
    
    /**
     * Given a STEAM_0 style Steam ID will return a 64bit Steam ID 
     * @param id  The STEAM_0 style id 
     * @returns 64bit Steam ID 
     */
    function SteamIDTo64(id: string): string;
    
    /**
     * Converts a string to the specified type.
     * 
     * This can be useful when dealing with ConVars. 
     * @param str  The string to convert 
     * @param typename  The type to attempt to convert the string to. This can be vector, angle, float, int, bool, or string (case insensitive). 
     * @returns The result of the conversion, or nil if a bad type is specified. 
     * @example
     * 
     * local vec = util.StringToType("5 6 75", "Vector")
     * 
     * // Creates a vector from a string representation. 
     */
    function StringToType(str: string, typename: string): any;
    
    /**
     * Converts a table to a JSON string.
     * {{Warning|All keys are strings in the JSON format, so all keys will be converted to strings!}}
     * {{Warning|All integers will be converted to decimals (5 -> 5.0).}} 
     * @param table  Table to convert. 
     * @param prettyPrint [=false] Format and indent the JSON. 
     * @returns JSON 
     * @example
     * 
     * local Players = {}
     * for k, v in pairs(ents.GetAll()) do
     * 	if v:IsPlayer() then // Is a player
     * 		Players[k] = { pos = v:GetPos(), ang = v:GetAngles() }
     * 	end
     * end
     * 	
     * local tab = util.TableToJSON( Players ) // Convert the player table to JSON
     * file.CreateDir( "jsontest" ) // Create the directory
     * file.Write( "jsontest/playerstuff.txt", tab) // Write to .txt
     * 
     * // Writes the positions and angles of every player to a txt document called playerstuff.txt 
     */
    function TableToJSON(table: table, prettyPrint?: boolean): string;
    
    /**
     * Converts the given table into a key value string. 
     * @param table  The table to convert. 
     * @returns KeyValueString 
     */
    function TableToKeyValues(table: table): string;
    
    /**
     * Creates a timer object. 
     * @param startdelay [=0] How long you want the timer to be. 
     * @returns A timer object. It has next methods:
     * ;Reset() - Resets the timer to nothing
     * ;Start( time ) - Starts the timer, call with end time
     * ;Started() - Returns true if the timer has been started
     * ;Elapsed() - Returns true if the time has elapsed 
     */
    function Timer(startdelay?: number): table;
    
    /**
     * Returns the time since this function has been last called 
     * @returns Time since this function has been last called in ms 
     */
    function TimerCycle(): number;
    
    /**
     * **Deprecated:**
     * >You should use {{GlobalFunction|tobool}} instead.
     * 
     * Converts string or a number to a bool, if possible. Alias of {{GlobalFunction|tobool}}. 
     * @param input  A string or a number to convert. 
     * @returns False if the input is equal to the string or boolean "false", if the input is equal to the string or number "0", or if the input is nil. Returns true otherwise. 
     */
    function tobool(input: any): boolean;
    
    /**
     * Runs a trace using the entity's collisionmodel between two points. This does not take the entity's angles into account and will trace its unrotated collisionmodel.
     * 
     * **Note:**
     * >Clientside entities will not be hit by traces. 
     * @param tracedata  Trace data. See {{Struct|Trace}} 
     * @param ent  The entity to use 
     * @returns Trace result. See {{Struct|TraceResult}} 
     * @example
     * 
     * local trace = { start = ent:GetPos(), endpos = ent:GetPos(), filter = ent }
     * local tr = util.TraceEntity( trace, ent ) 
     * if ( tr.Hit ) then
     *  // Do stuff
     * end
     * 
     * // From sandbox/gamemode/prop_tools.lua, this checks if there are any entities inside our entity 
     */
    function TraceEntity(tracedata: Trace, ent: Entity): TraceResult;
    
    /**
     * **Deprecated:**
     * >This function is broken and returns the same values all the time
     * 
     * Traces from one entity to another. 
     * @param ent1  The first entity to trace from 
     * @param ent2  The second entity to trace to 
     * @returns Trace result. See {{Struct|TraceResult}} 
     */
    function TraceEntityHull(ent1: Entity, ent2: Entity): TraceResult;
    
    /**
     * Performs an AABB hull (axis-aligned bounding box, aka not rotated) trace with the given trace data.
     * 
     * **Note:**
     * >Clientside entities will not be hit by traces.
     * 
     * **Note:**
     * >This function may not always give desired results clientside due to certain physics mechanisms not existing on the client. Use it serverside for accurate results. 
     * @param TraceData  The trace data to use. See {{Struct|HullTrace}} 
     * @returns Trace result. See {{Struct|TraceResult}} 
     * @example
     * 
     * local tr = util.TraceHull( {
     * 	start = self.Owner:GetShootPos(),
     * 	endpos = self.Owner:GetShootPos() + ( self.Owner:GetAimVector() * 100 ),
     * 	filter = self.Owner,
     * 	mins = Vector( -10, -10, -10 ),
     * 	maxs = Vector( 10, 10, 10 ),
     * 	mask = MASK_SHOT_HULL
     * } )
     * 
     * // From a SWEP:PrimaryAttack()@example
     * 
     * function ENT:Draw()
     * 
     * 	self:DrawModel()
     * 	
     * 	local ent = self
     * 	
     * 	local mins = ent:OBBMins()
     * 	local maxs = ent:OBBMaxs()
     * 	local startpos = ent:GetPos()
     * 	local dir = ent:GetUp()
     * 	local len = 128
     * 
     * 	local tr = util.TraceHull( {
     * 		start = startpos,
     * 		endpos = startpos + dir * len,
     * 		maxs = maxs,
     * 		mins = mins,
     * 		filter = ent
     * 	} )
     * 	
     * 	render.DrawLine( tr.HitPos, startpos + dir * len, color_white, true )
     * 	render.DrawLine( startpos, tr.HitPos, Color( 0, 0, 255 ), true )
     * 	
     * 	local clr = color_white
     * 	if ( tr.Hit ) then
     * 		clr = Color( 255, 0, 0 )
     * 	end
     * 
     * 	render.DrawWireframeBox( startpos, Angle( 0, 0, 0 ), mins, maxs, Color( 255, 255, 255 ), true )
     * 	render.DrawWireframeBox( tr.HitPos, Angle( 0, 0, 0 ), mins, maxs, clr, true )
     * 
     * end
     * 
     * // Visual representation of a Hull Trace.@example
     * 
     * local pos = Entity(1):GetPos() // Choose your position.
     * 
     * local tr = {
     * 	start = pos,
     * 	endpos = pos,
     * 	mins = Vector( -16, -16, 0 ),
     * 	maxs = Vector( 16, 16, 71 )
     * }
     * 
     * local hullTrace = util.TraceHull( tr )
     * if ( hullTrace.Hit ) then
     *     // Find a new spawnpoint
     * end
     * 
     * // Trace a player sized hull to detect if a player can spawn here without getting stuck inside anything. 
     */
    function TraceHull(TraceData: HullTrace): TraceResult;
    
    /**
     * Performs a trace with the given trace data.
     * 
     * **Note:**
     * >Clientside entities will not be hit by traces. 
     * @param TraceData  The trace data to use. See {{Struct|Trace}} 
     * @returns Trace result. See {{Struct|TraceResult}}.
     * 
     * Can return nil if {{LibraryFunction|game|GetWorld}} or its [[Entity/GetPhysicsObject|physics object]] is invalid. This will be the case for any traces done before {{HookFunction|GM|InitPostEntity}} is called. 
     * @example
     * 
     * local tr = util.TraceLine( {
     * 	start = LocalPlayer():EyePos(),
     * 	endpos = LocalPlayer():EyePos() + EyeAngles():Forward() * 10000,
     * 	filter = function( ent ) if ( ent:GetClass() == "prop_physics" ) then return true end end
     * } )
     * 
     * print( tr.HitPos, tr.Entity )
     * 
     * // Using a function callback as filter. 
     */
    function TraceLine(TraceData: Trace): TraceResult;
    
    /**
     * Converts a type to a (nice, but still parsable) string 
     * @param input  What to convert 
     * @returns Converted string 
     */
    function TypeToString(input: any): string;
}

/**
 * List of all possible functions to manipulate vectors.
 * 
 * Created by {{GlobalFunction|Vector}} & many more functions.
 * {{ClassFields
 * |Fields=
 * {{ClassField|number|x|The X component of the vector}}
 * {{ClassField|number|y|The Y component of the vector}}
 * {{ClassField|number|z|The Z component of the vector}}
 * }} 
 * !CustomConstructor Vector */
declare class Vector {
    /**
     * The X component of the vector 
     */
    x: number;
    
    /**
     * The Y component of the vector 
     */
    y: number;
    
    /**
     * The Z component of the vector 
     */
    z: number;
    
    /**
     * Creates a {{Type|Vector}} object. 
     * @param x [=0] The x component of the vector.
     * 
     * If this is a {{Type|Vector}}, this function will return a copy of the given vector.
     * 
     * If this is a {{Type|string}}, this function will try to parse the string as a vector. If it fails, it returns a 0 vector.
     * (See examples) 
     * @param y [=0] The y component of the vector. 
     * @param z [=0] The z component of the vector. 
     * @example
     * 
     * print( Vector( 1, 2, 3 ) )
     * print( Vector( "4 5 6" ) )
     * local test = Vector( 7, 8, 9 )
     * print( Vector( test ) )
     * 
     * print( Vector( "4 5 test" ) )
     * print( Vector() )
     * 
     * // Creates a vector and prints the value to the console. 
     */
    public constructor(x?: number, y?: number, z?: number);
    
    /**
     * Adds the values of the argument vector to the orignal vector. This functions the same as vector1 + vector2 without creating a new vector object, skipping object construction and garbage collection. 
     * @param vector  The vector to add. 
     * @example
     * 
     * a = Vector(1, 1, 1)
     * a:Add(Vector(1, 2, 3))
     * print(a)
     * 
     * // Adds the components of the vectors together.@example
     * 
     * a = Vector(1, 1, 1)
     * print(a + Vector(1, 2, 3))
     * 
     * // If you don't want to set your vector to the result, and just return a new vector as the result. You can use a '+' operator to add two vectors together. The original vector will remain unchanged. 
     */
    public Add(vector: Vector): void;
    
    /**
     * Returns an angle representing the normal of the vector. 
     * @returns The angle/direction of the vector. 
     */
    public Angle(): Angle;
    
    /**
     * Returns the angle of the vector, but instead of assuming that up is {{GlobalFunction|Vector}}( 0, 0, 1 ) (Like {{ClassFunction|Vector|Angle}} does) you can specify which direction is 'up' for the angle. 
     * @param up  The up direction vector 
     * @returns The angle 
     * @example
     * 
     * print( Vector( 0, 0, 100 ):AngleEx( Vector( 0, 0, 0 ) ) )
     * 
     * // Shows usage of the function 
     */
    public AngleEx(up: Vector): Angle;
    
    /**
     * Calculates the cross product of this vector and the passed one.
     * 
     * The cross product of two vectors is a 3-dimensional vector with a direction perpendicular (at right angles) to both of them (according to the right-hand rule), and magnitude equal to the area of parallelogram they span. This is defined as the product of the magnitudes, the sine of the angle between them, and unit (normal) vector ''n'' defined by the right-hand rule:
     * :'''a''' &times; '''b''' = &#124;'''a'''&#124; &#124;'''b'''&#124; sin(&theta;) '''n&#770;'''
     * where '''a''' and '''b''' are vectors, and '''n&#770;''' is a unit vector (magnitude of 1) perpendicular to both. 
     * @param otherVector  Vector to calculate the cross product with. 
     * @returns The cross product of the two vectors. 
     */
    public Cross(otherVector: Vector): Vector;
    
    /**
     * Returns the pythagorean distance between the vector and the other vector.
     * 
     * This is a relatively expensive process since it uses the square root. It is recommended that you use {{ClassFunction|Vector|DistToSqr}} whenever possible. 
     * @param otherVector  The vector to get the distance to. 
     * @returns Distance between the vectors. 
     * @example
     * 
     * print(Vector(0, 0, 0):Distance(Vector(2, 3, 4)))
     * 
     * // Gets the distance from A to B. 
     */
    public Distance(otherVector: Vector): number;
    
    /**
     * Returns the squared distance of 2 vectors, this is faster than {{ClassFunction|Vector|Distance}} as calculating the square root is an expensive process. 
     * @param otherVec  The vector to calculate the distance to. 
     * @returns Squared distance to the vector 
     * @example
     * 
     * function PlayerWithinBounds(ply,otherPly, dist)
     * 	return ply:GetPos():DistToSqr(otherPly:GetPos()) < (dist*dist)
     * 	// This is computationally faster than:
     * 	// ply:GetPos():Distance(otherPly:GetPos()) < dist
     * end
     * print(PlayerWithinBounds(Entity(1),Entity(2),500))
     * 
     * // Checks if a player is within `dist` units of another player in the most efficient way possible. 
     */
    public DistToSqr(otherVec: Vector): number;
    
    /**
     * Divide the vector by the given number, that means x, y and z are divided by that value. This will change the value of the original vector, see example 2 for division without changing the value. 
     * @param divisor  The value to divide the vector with. 
     * @example
     * 
     * a = Vector(255, 130, 0)
     * a:Div(255)
     * print(a)
     * 
     * // Divides a vector by 255.@example
     * 
     * a = Vector(255, 255, 255)
     * print(a/255)
     * 
     * // If you don't want to set your vector to the result, and just return a new vector as the result. You can use a ' / ' operator to divide a vector with a divisor. 
     */
    public Div(divisor: number): void;
    
    /**
     * Returns the [[wikipedia:Dot product#Geometric definition|dot product]] of this vector and the passed one.
     * 
     * The dot product of two vectors is the product of their magnitudes (lengths), and the cosine of the angle between them:
     * :'''a &middot; b''' = &#124;'''a'''&#124; &#124;'''b'''&#124; cos(&theta;)
     * where '''a''' and '''b''' are vectors. See {{ClassFunction|Vector|Length}} for obtaining magnitudes.
     * 
     * A dot product returns just the cosine of the angle if both vectors are normalized, and zero if the vectors are at right angles to each other. 
     * @param otherVector  The vector to calculate the dot product with 
     * @returns The dot product between the two vectors 
     * @example
     * 
     * local a = Vector(0, 1, 0)
     * local b = Vector(0, -1, 0)
     * 
     * local dot = a:Dot(b) // returns the cos(ang) of the two vectors because they're both of length 1
     * print("Radians", math.acos(dot)) // the inverse of the cosine to get the angle
     * print("Degrees", math.deg(math.acos(dot))) // Convert radians to degrees
     * 
     * // Get the angle of two opposite normalized vectors.@example
     * 
     * local directionAng = math.pi / 8 
     * local aimvector = ply:GetAimVector()
     * // The vector that goes from the player's shoot pos to the entity's position
     * local entVector = ent:GetPos() - ply:GetShootPos() 
     * local dot = aimvector:Dot(entVector) / entVector:Length()
     * print(dot < directionAng)
     * 
     * // Calculates whether the player is looking in the direction of an entity. This is often faster than traces, but it produces a slightly different result.
     * 
     * The player is looking in the direction of the entity if the angle between the aimvector and the vector from the player to the entity is less than 45 degrees (or pi / 8 radians).@example
     * 
     * function IsLookingAt( ply, targetVec )
     *  return ply:GetAimVector():Dot( ( targetVec - ply:GetPos() + Vector(70) ):GetNormalized() ) < 0.95 
     * end
     * 
     * // A function to make sure the player is looking somewhere. 
     */
    public Dot(otherVector: Vector): number;
    
    /**
     * **Deprecated:**
     * >This is an alias of {{ClassFunction|Vector|Dot}}. Use that instead.
     * 
     * Returns the dot product of the two vectors. 
     * @param Vector  The other vector. 
     * @returns Dot Product 
     * @example
     * 
     * function IsLookingAt( ply, targetVec )
     *  return ply:GetAimVector():DotProduct( ( targetVec - ply:GetPos() + Vector(70) ):GetNormalized() ) < 0.95 
     * end
     * 
     * // A function to make sure the player is looking somewhere. 
     */
    public DotProduct(Vector: Vector): number;
    
    /**
     * **Deprecated:**
     * >Use {{ClassFunction|Vector|GetNormalized}} instead.
     * 
     * Returns a normalized version of the vector. This is a alias of {{ClassFunction|Vector|GetNormalized}}. 
     * @returns Normalized version of the vector. 
     */
    public GetNormal(): Vector;
    
    /**
     * Returns a normalized version of the vector. Normalized means vector with same direction but with length of 1.
     * 
     * This does not affect the vector you call it on; to do this, use {{ClassFunction|Vector|Normalize}}. 
     * @returns Normalized version of the vector. 
     */
    public GetNormalized(): Vector;
    
    /**
     * Returns if the vector is equal to another vector with the given tolerance. 
     * @param compare  The vector to compare to. 
     * @param tolerance  The tolerance range. 
     * @returns Are the vectors equal or not. 
     */
    public IsEqualTol(compare: Vector, tolerance: number): boolean;
    
    /**
     * Checks whenever all fields of the vector are 0. 
     * @returns Do all fields of the vector equal 0 or not 
     * @example
     * 
     * a = Vector(0, 0, 0)
     * print(a:IsZero())
     * 
     * // Confirm that the Vector is indeed 0. 
     */
    public IsZero(): boolean;
    
    /**
     * Returns the Euclidean length of the vector: &radic;<span style="text-decoration:overline;">&nbsp;x&sup2; + y&sup2; + z&sup2;&nbsp;</span> 
     * @returns Length of the vector. 
     * @example
     * 
     * print(Vector(15, 16, 17):Length())
     * 
     * // Gets the length of the vector. 
     */
    public Length(): number;
    
    /**
     * Returns the length of the vector in two dimensions, without the Z axis. 
     * @returns Length of the vector in two dimensions, &radic;<span style="text-decoration:overline;">&nbsp;x&sup2; + y&sup2;&nbsp;</span> 
     */
    public Length2D(): number;
    
    /**
     * Returns the squared length of the vectors x and y value, x&sup2; + y&sup2;.
     * 
     * This is faster than {{ClassFunction|Vector|Length2D}} as calculating the square root is an expensive process. 
     * @returns Squared length of the vector in two dimensions 
     */
    public Length2DSqr(): number;
    
    /**
     * Returns the squared length of the vector, x&sup2; + y&sup2; + z&sup2;.
     * 
     * This is faster than {{ClassFunction|Vector|Length}} as calculating the square root is an expensive process. 
     * @returns Squared length of the vector 
     */
    public LengthSqr(): number;
    
    /**
     * Scales the vector by the given number, that means x, y and z are multiplied by that value. 
     * @param multiplier  The value to scale the vector with. 
     * @example
     * 
     * a = Vector(1, 1, 1)
     * a:Mul(250)
     * print(a)
     * 
     * // Scales a vector by 250.@example
     * 
     * a = Vector(1, 1, 1)
     * print(a*250)
     * 
     * // If you don't want to set your vector to the result, and just return a new vector as the result. You can use a ' * ' operator to multiply a vector with a scalar. 
     */
    public Mul(multiplier: number): void;
    
    /**
     * Normalizes the given vector. This changes the vector you call it on, if you want to return a normalized copy without affecting the original, use {{ClassFunction|Vector|GetNormalized}}. 
     * @example
     * 
     * local test = Vector(4, 3, 2)
     * test:Normalize()
     * MsgN( test )
     * 
     * // Normalizes Vector(4, 3, 2). 
     */
    public Normalize(): void;
    
    /**
     * Rotates a vector by the given angle.
     * Doesn't return anything, but rather changes the original vector. 
     * @param rotation  The angle to rotate the vector by. 
     */
    public Rotate(rotation: Angle): void;
    
    /**
     * Copies the values from the second vector to the first vector. 
     * @param vector  The vector to copy from. 
     */
    public Set(vector: Vector): void;
    
    /**
     * Substracts the values of the second vector from the orignal vector, this function can be used to avoid garbage collection. 
     * @param vector  The other vector. 
     * @example
     * 
     * a = Vector(5, 6, 7)
     * a:Sub(Vector(1, 2, 3))
     * print(a)
     * 
     * // Subtracts vector A's components with the other vector.@example
     * 
     * a = Vector(5, 6, 7)
     * print(a-Vector(1, 2, 3))
     * 
     * // If you don't want to set your vector to the result, and just return a new vector as the result. You can use a ' - ' operator to subtract two vectors from each other. 
     */
    public Sub(vector: Vector): void;
    
    /**
     * Translates the vector normalized vector ( length is 1 ) into a {{Struct|Color}}.
     * 
     * x * 255 -> r
     * 
     * y * 255 -> g
     * 
     * z * 255 -> b 
     * @returns The created {{Struct|Color}}. 
     */
    public ToColor(): Color;
    
    /**
     * Returns where on the screen the specified position vector would appear. A related function is {{LibraryFunction|gui|ScreenToVector}}, which converts a 2D coordinate to a 3D direction.
     * 
     * **Note:**
     * >Should be called from a 3D rendering environment or after {{LibraryFunction|cam|Start3D}} or it may not work correctly.
     * 
     * **Bug [#462](https://github.com/Facepunch/garrysmod-issues/issues/462):**
     * >Errors in a render hook can make this value incorrect until the player restarts their game.
     * 
     * **Bug [#1404](https://github.com/Facepunch/garrysmod-issues/issues/1404):**
     * >{{LibraryFunction|cam|Start3D}} or 3D context {{LibraryFunction|cam|Start}} with non-default parameters incorrectly sets the reference FOV for this function, causing incorrect return values. This can be fixed by creating and ending a default 3D context ({{LibraryFunction|cam|Start3D}} with no arguments). 
     * @returns The created {{Struct|ToScreenData}}. 
     */
    public ToScreen(): ToScreenData;
    
    /**
     * Returns whenever the given vector is in a box created by the 2 other vectors.
     * 
     * **Bug [#1146](https://github.com/Facepunch/garrysmod-issues/issues/1146):**
     * >Fixed= 
     * @param boxStart  The first vector. 
     * @param boxEnd  The second vector. 
     * @returns Is the vector in the box or not 
     * @example
     * 
     * print( Vector(3, 3, 3):WithinAABox( Vector( 0, 0, 0 ), Vector( 5, 5, 5 ) ) )
     * 
     * // Checks if Vector(3, 3, 3) is in a box.@example
     * 
     * // Position to test, we get the position of first player on the server
     * local testPos = Entity( 1 ):GetPos()
     * 
     * // Positions to test, in this case we test if the player is in spawn area of gm_construct
     * local pos1 = Vector( 1119, 895, 63 )
     * local pos2 = Vector( 656, -896, -144 )
     * 
     * // This will return false even if the player is within the tested area because the vectors pos1 and pos2 violate the mins/max rule
     * print( testPos:WithinAABox( pos1, pos2 ) )
     * 
     * // Fix the vectors pos1 and pos2, so that pos1 contains all the smallest values and pos2 all the largest values on all axies
     * // NOTE that this will modify the actual vectors
     * OrderVectors( pos1, pos2 )
     * 
     * // Now this will return true if the player is within the tested area
     * print( testPos:WithinAABox( pos1, pos2 ) )
     * 
     * // Checks if player is within a certain area on the map. 
     */
    public WithinAABox(boxStart: Vector, boxEnd: Vector): boolean;
    
    /**
     * Sets x, y and z to 0. 
     */
    public Zero(): void;
}

/**
 * This is a list of all methods only available for vehicles. It is also possible to call [http://wiki.garrysmod.com/index.php?title=Category:Entity Entity] functions on vehicles. 
 */
declare class Vehicle extends Entity {
    /**
     * Returns the remaining boosting time left. 
     * @returns The remaining boosting time left 
     */
    public BoostTimeLeft(): number;
    
    /**
     * @param yaw 
     * @param distance 
     * @param endPoint 
     * @returns 
     */
    public CheckExitPoint(yaw: number, distance: number, endPoint: Vector): boolean;
    
    /**
     * Sets whether the engine is enabled or disabled, i.e. can be started or not. 
     * @param enable  Enable or disable the engine 
     */
    public EnableEngine(enable: boolean): void;
    
    /**
     * Returns information about the ammo of the vehicle 
     * @returns [Ammo type of the vehicle ammo, Clip size, Count] 
     * !TupleReturn
     */
    public GetAmmo(): [number, number, number];
    
    /**
     * Returns third person camera distance. 
     * @returns Camera distance 
     */
    public GetCameraDistance(): number;
    
    /**
     * Gets the driver of the vehicle, returns NULL if no driver is present. 
     * @returns The driver of the vehicle 
     */
    public GetDriver(): Entity;
    
    /**
     * Returns the current speed of the vehicle in Half-Life Hammer Units (in/s). Same as {{ClassFunction|Entity|GetVelocity}} + {{ClassFunction|Vector|Length}}. 
     * @returns The speed of the vehicle 
     */
    public GetHLSpeed(): number;
    
    /**
     * Returns the max speed of the vehicle in MPH. 
     * @returns The max speed of the vehicle in MPH 
     */
    public GetMaxSpeed(): number;
    
    /**
     * Returns some info about the vehicle. 
     * @returns The operating params. See {{Struct|OperatingParams}}. 
     * @example
     * 
     * PrintTable( Entity(1):GetVehicle():GetOperatingParams() )
     * 
     * // Example output on a default Half-Life 2 Jeep. 
     */
    public GetOperatingParams(): OperatingParams;
    
    /**
     * Gets the passenger of the vehicle, returns NULL if no drivers is present. 
     * @param passenger  The index of the passenger 
     * @returns The passenger 
     */
    public GetPassenger(passenger: number): Entity;
    
    /**
     * Returns the seat position and angle of a given passenger seat. 
     * @param role  The passenger role. ( 1 is the driver ) 
     * @returns [The seat position, The seat angle] 
     * !TupleReturn
     */
    public GetPassengerSeatPoint(role: number): [Vector, Angle];
    
    /**
     * Returns the current RPM of the vehicle. This value is fake and doesn't actually affect the vehicle movement. 
     * @returns The RPM. 
     */
    public GetRPM(): number;
    
    /**
     * Returns the current speed of the vehicle in MPH. 
     * @returns The speed of the vehicle in MPH 
     */
    public GetSpeed(): number;
    
    /**
     * Returns the current steering of the vehicle. 
     * @returns The current steering of the vehicle. 
     */
    public GetSteering(): number;
    
    /**
     * Returns the maximum steering degree of the vehicle 
     * @returns The maximum steering degree of the vehicle 
     */
    public GetSteeringDegrees(): number;
    
    /**
     * Returns if vehicle has thirdperson mode enabled or not. 
     * @returns Returns true if third person mode enabled, false otherwise 
     */
    public GetThirdPersonMode(): boolean;
    
    /**
     * Returns the current throttle of the vehicle. 
     * @returns The current throttle of the vehicle 
     */
    public GetThrottle(): number;
    
    /**
     * Returns the vehicle class name. This is only useful for Sandbox spawned vehicles or any vehicle that properly sets the vehicle class with {{ClassFunction|Vehicle|SetVehicleClass}}. 
     * @returns The class name of the vehicle. 
     * @example
     * 
     * local c = Entity(1):GetVehicle():GetVehicleClass()
     * if ( !list.Get( "Vehicles" )[ c ] ) then return end
     * local t = list.Get( "Vehicles" )[ c ]
     * print( t.Name )
     * 
     * // Prints the spawn menu name of the vehicle the player is currently in. 
     */
    public GetVehicleClass(): string;
    
    /**
     * Returns the vehicle parameters of given vehicle. 
     * @returns The vehicle parameters. See {{Struct|VehicleParams}} 
     */
    public GetVehicleParams(): VehicleParams;
    
    /**
     * Returns the view position and forward angle of a given passenger seat. 
     * @param role  The passenger role. ( 1 is the driver ) 
     * @returns [The view position, The view angles, The field of view] 
     * !TupleReturn
     */
    public GetVehicleViewPosition(role: number): [Vector, Angle, number];
    
    /**
     * Returns the {{Type|PhysObj}} of given wheel. 
     * @param wheel  The wheel to retrieve 
     * @returns The wheel 
     */
    public GetWheel(wheel: number): PhysObj;
    
    /**
     * Returns the base wheel height. 
     * @param wheel  The wheel to get the base wheel height of. 
     * @returns The base wheel height. 
     */
    public GetWheelBaseHeight(wheel: number): number;
    
    /**
     * Returns the wheel contact point. 
     * @param wheel  The wheel to check 
     * @returns [The contact position, The Surface Properties ID of hit surface., Whether the wheel is on ground or not] 
     * !TupleReturn
     */
    public GetWheelContactPoint(wheel: number): [Vector, number, boolean];
    
    /**
     * Returns the wheel count of the vehicle 
     * @returns The amount of wheels 
     */
    public GetWheelCount(): number;
    
    /**
     * Returns the total wheel height. 
     * @param wheel  The wheel to get the base wheel height of. 
     * @returns The total wheel height. 
     */
    public GetWheelTotalHeight(wheel: number): number;
    
    /**
     * Returns whether this vehicle has boost at all. 
     * @returns Whether this vehicle has boost at all. 
     */
    public HasBoost(): boolean;
    
    /**
     * Returns whether this vehicle has a brake pedal. See {{ClassFunction|Vehicle|SetHasBrakePedal}}. 
     * @returns Whether this vehicle has a brake pedal or not. 
     */
    public HasBrakePedal(): boolean;
    
    /**
     * Returns whether this vehicle is currently boosting or not. 
     * @returns Whether this vehicle is currently boosting or not. 
     */
    public IsBoosting(): boolean;
    
    /**
     * Returns whether the engine is enabled or not, i.e. whether it can be started. 
     * @returns Whether the engine is enabled 
     */
    public IsEngineEnabled(): boolean;
    
    /**
     * Returns whether the engine is started or not. 
     * @returns Whether the engine is started or not. 
     */
    public IsEngineStarted(): boolean;
    
    /**
     * Returns true if the vehicle object is a valid or not. This will return false when {{Type|Vehicle}} functions are not usable on the vehicle. 
     * @returns Is the vehicle a valid vehicle or not 
     */
    public IsValidVehicle(): boolean;
    
    /**
     * Returns whether this vehicle's engine is underwater or not. ( Internally the attachment point "engine" or "vehicle_engine" is checked ) 
     * @returns Whether this vehicle's engine is underwater or not. 
     */
    public IsVehicleBodyInWater(): boolean;
    
    /**
     */
    public ReleaseHandbrake(): void;
    
    /**
     * Sets the boost. It is possible that this function does not work while the vehicle has a valid driver in it. 
     * @param boost  The new boost value 
     */
    public SetBoost(boost: number): void;
    
    /**
     * Sets the third person camera distance of the vehicle. 
     * @param distance  Camera distance to set to 
     */
    public SetCameraDistance(distance: number): void;
    
    /**
     * @param handbrake 
     */
    public SetHandbrake(handbrake: boolean): void;
    
    /**
     * Sets whether this vehicle has a brake pedal. 
     * @param brakePedal  Whether this vehicle has a brake pedal 
     */
    public SetHasBrakePedal(brakePedal: boolean): void;
    
    /**
     * Sets maximum reverse throttle 
     * @param maxRevThrottle  The new maximum throttle. This number must be negative. 
     */
    public SetMaxReverseThrottle(maxRevThrottle: number): void;
    
    /**
     * Sets maximum forward throttle 
     * @param maxThrottle  The new maximum throttle. 
     */
    public SetMaxThrottle(maxThrottle: number): void;
    
    /**
     * Sets spring length of given wheel 
     * @param wheel  The wheel to change spring length of 
     * @param length  The new spring length 
     */
    public SetSpringLength(wheel: number, length: number): void;
    
    /**
     * Sets the steering of the vehicle.
     * {{Validate|The correct range, 0 to 1 or -1 to 1}} 
     * @param steering  The new steering value. 
     */
    public SetSteering(steering: number): void;
    
    /**
     * Sets the maximum steering degrees of the vehicle 
     * @param steeringDegrees  The new maximum steering degree 
     */
    public SetSteeringDegrees(steeringDegrees: number): void;
    
    /**
     * Sets the third person mode state. 
     * @param enable  Enable or disable the third person mode for this vehicle 
     */
    public SetThirdPersonMode(enable: boolean): void;
    
    /**
     * Sets the throttle of the vehicle. It is possible that this function does not work with a valid driver in it. 
     * @param throttle  The new throttle. 
     */
    public SetThrottle(throttle: number): void;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Sets the vehicle class name. 
     * @param classRef  The vehicle class name to set 
     */
    public SetVehicleClass(classRef: string): void;
    
    /**
     * Sets whether the entry or exit camera animation should be played or not. 
     * @param bOn  Whether the entry or exit camera animation should be played or not. 
     */
    public SetVehicleEntryAnim(bOn: boolean): void;
    
    /**
     * Sets the vehicle parameters for given vehicle.
     * 
     * **Note:**
     * >Not all variables from the {{Struct|VehicleParams}} can be set.
     * 
     * **Bug [#3625](https://github.com/Facepunch/garrysmod-issues/issues/3625):**
     * >This modifies the vehicle engine's "maxSpeed" to an incorrect value even when not being set by this function. 
     * @param params  The new new vehicle parameters. See {{Struct|VehicleParams}} 
     */
    public SetVehicleParams(params: VehicleParams): void;
    
    /**
     * Sets friction of given wheel. {{Validate}} This function may be broken. 
     * @param wheel  The wheel to change the friction of 
     * @param friction  The new friction to set 
     */
    public SetWheelFriction(wheel: number, friction: number): void;
    
    /**
     * Starts or stops the engine. 
     * @param start  True to start, false to stop 
     */
    public StartEngine(start: boolean): void;
}

/**
 * The vgui library allows you to script and create your own panels using Valve's GUI system.
 * For an alphabetically ordered list of VGUI panels, see [[VGUI Element List]]. 
 */
declare namespace vgui {
    /**
     * Creates a panel by the specified classname. 
     * @param classname  Classname of the panel to create. Valid classnames are listed at: [[VGUI Element List]]. 
     * @param parent [=nil] Parent of the created panel. 
     * @param name [=nil] Name of the created panel. 
     * @returns panel 
     */
    function Create(classname: string, parent?: Panel, name?: string): Panel;
    
    /**
     * Creates a panel from table. 
     * @param metatable  Your PANEL table 
     * @param parent [=nil] Which panel to parent the newly created panel to 
     * @param name [=nil] Name of your panel 
     * @returns Created panel 
     */
    function CreateFromTable(metatable: table, parent?: Panel, name?: string): Panel;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Creates a engine panel. 
     * @param classRef  Class of the panel to create 
     * @param parent [=nil] If specified, parents created panel to given one 
     * @param name [=nil] Name of the created panel 
     * @returns Created panel 
     */
    function CreateX(classRef: string, parent?: Panel, name?: string): Panel;
    
    /**
     * Returns whenever the cursor is currently active and visible. 
     * @returns isCursorVisible 
     */
    function CursorVisible(): boolean;
    
    /**
     * Returns whether the currently focused panel is a child of the given one. 
     * @param parent  The parent panel to check the currently focused one against. This doesn't need to be a direct parent (focused panel can be a child of a child and so on). 
     * @returns Whether or not the focused panel is a child of the passed one. 
     */
    function FocusedHasParent(parent: Panel): boolean;
    
    /**
     * Gets the method table of this panel. Does not return parent methods! 
     * @param Panelname  The name of the panel 
     * @returns methods 
     */
    function GetControlTable(Panelname: string): table;
    
    /**
     * Returns the panel the cursor is hovering above.
     * 
     * {{Warning|This returns a cached value that is only updated after rendering and ''before'' the next VGUI Think/Layout pass.
     * 
     * ie. it lags one frame behind panel layout and is completely unhelpful for {{HookFunction|PANEL|Paint}} if your panels are moving around under the mouse a lot every frame.}} 
     * @returns The panel that the user is currently hovering over with their cursor. 
     */
    function GetHoveredPanel(): Panel;
    
    /**
     * Returns the panel which is currently receiving keyboard input. 
     * @returns The panel with keyboard focus 
     */
    function GetKeyboardFocus(): Panel;
    
    /**
     * Returns the global world panel which is the parent to all others.
     * 
     * See also {{GlobalFunction|GetHUDPanel}}. 
     * @returns The world panel 
     */
    function GetWorldPanel(): Panel;
    
    /**
     * Returns whenever the cursor is hovering the world panel. 
     * @returns isHoveringWorld 
     */
    function IsHoveringWorld(): boolean;
    
    /**
     * Registers a panel for later creation. 
     * @param classname  Classname of the panel to create. 
     * @param panelTable  The table containg the panel information. 
     * @param baseName  Name of the base of the panel. 
     * @returns panel 
     */
    function Register(classname: string, panelTable: table, baseName: string): Panel;
    
    /**
     * Registers a new VGUI panel from a file. 
     * @param file  The file to register 
     * @returns A table containing info about the panel. Can be supplied to {{LibraryFunction|vgui|CreateFromTable}} 
     */
    function RegisterFile(file: string): table;
    
    /**
     * Registers a table to use as a panel. All this function does is assigns Base key to your table and returns the table. 
     * @param panel  The PANEL table 
     * @param base [=Panel] A base for the panel 
     * @returns The PANEL table 
     */
    function RegisterTable(panel: table, base?: string): table;
}

/**
 * The video library. 
 */
declare namespace video {
    /**
     * Attempts to create an {{Type|IVideoWriter}}. 
     * @param config  The video config. See {{Struct|VideoData}}. 
     * @returns [The video object (returns '''false''' if there is an error), The error string, if there is an error] 
     * @example
     * 
     * local config = {
     * 	container = "webm",
     * 	video = "vp8",
     * 	audio = "vorbis",
     * 	quality = 50,
     * 	bitrate = 200,
     * 	fps = 30,
     * 	lockfps = 30,
     * 	name = "Test",
     * 	width = 1280,
     * 	height = 720
     * }
     * local iVideoWriter = video.Record( config )
     * iVideoWriter:SetRecordSound( true )
     * 
     * local function Record()
     * 	iVideoWriter:AddFrame( FrameTime(), true )
     * end
     * 
     * function StartRecording()
     * 	hook.Add( "DrawOverlay", "Record", Record )
     * end
     * 
     * function StopRecording()
     * 	hook.Remove( "DrawOverlay", "Record" )
     * 	iVideoWriter:Finish()
     * end
     * 
     * // How to create a basic IVideoWriter, and how to use it 
     * !TupleReturn
     */
    function Record(config: VideoData): [IVideoWriter, string];
}

/**
 * List of all possible functions to manipulate matrices.
 * This object can be created by {{GlobalFunction|Matrix}} 
 * !CustomConstructor Matrix */
declare class VMatrix {
    /**
     * Returns a {{Type|VMatrix}} object. 
     * @param data [={{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}}] Initial data to initialize the matrix with. Leave empty to initialize an identity matrix. See examples for usage. 
     * @example
     * 
     * local M = Matrix()
     * M:Translate( Vector( 4, 5, 6 ) )
     * M:Scale( Vector( 1, 2, 3 ) )
     * 
     * // This matrix is equivalent:
     * local M2 = Matrix( {
     * 	{ 1, 0, 0, 4 },
     * 	{ 0, 2, 0, 5 },
     * 	{ 0, 0, 3, 6 },
     * 	{ 0, 0, 0, 1 }
     * } )
     * 
     * // Initializes a matrix, translates it by Vector( 4, 5, 6 ) and then scales it by Vector( 1, 2, 3 ). 
     */
    public constructor(data?: table);
    
    /**
     * Returns the absolute rotation of the matrix. 
     * @returns Absolute rotation of the matrix 
     */
    public GetAngles(): Angle;
    
    /**
     * Returns a specific field in the matrix. 
     * @param row  Row of the field whose value is to be retrieved, from 1 to 4 
     * @param column  Column of the field whose value is to be retrieved, from 1 to 4 
     * @returns The value of the specified field 
     */
    public GetField(row: number, column: number): number;
    
    /**
     * Gets the forward direction of the matrix.
     * 
     * ie. The first column of the matrix, excluding the w coordinate. 
     * @returns The forward direction of the matrix. 
     */
    public GetForward(): Vector;
    
    /**
     * Returns an inverted matrix without modifying the original matrix.
     * 
     * Inverting the matrix will fail if its [https://en.wikipedia.org/wiki/Determinant determinant] is 0 or close to 0. (ie. its "scale" in any direction is 0.)
     * 
     * See also {{ClassFunction|VMatrix|GetInverseTR}}. 
     * @returns The inverted matrix if possible, nil otherwise 
     */
    public GetInverse(): VMatrix;
    
    /**
     * Returns an inverted matrix without modifying the original matrix. This function will not fail, but only works correctly on matrices that contain only translation and/or rotation.
     * 
     * Using this function on a matrix with modified scale may return an incorrect inverted matrix.
     * 
     * To get the inverse of a matrix that contains other modifications, see {{ClassFunction|VMatrix|GetInverse}}. 
     * @returns The inverted matrix. 
     */
    public GetInverseTR(): VMatrix;
    
    /**
     * Gets the right direction of the matrix.
     * 
     * ie. The second column of the matrix, negated, excluding the w coordinate. 
     * @returns The right direction of the matrix. 
     */
    public GetRight(): Vector;
    
    /**
     * Returns the absolute scale of the matrix. 
     * @returns Absolute scale of the matrix 
     */
    public GetScale(): Vector;
    
    /**
     * Returns the absolute translation of the matrix. 
     * @returns Absolute translation of the matrix 
     */
    public GetTranslation(): Vector;
    
    /**
     * Gets the up direction of the matrix.
     * 
     * ie. The third column of the matrix, excluding the w coordinate. 
     * @returns The up direction of the matrix. 
     */
    public GetUp(): Vector;
    
    /**
     * Initializes the matrix as Identity matrix. 
     */
    public Identity(): void;
    
    /**
     * Inverts the matrix.
     * 
     * Inverting the matrix will fail if its [https://en.wikipedia.org/wiki/Determinant determinant] is 0 or close to 0. (ie. its "scale" in any direction is 0.)
     * 
     * If the matrix cannot be inverted, it does not get modified.
     * 
     * See also {{ClassFunction|VMatrix|InvertTR}}. 
     * @returns Whether the matrix was inverted or not 
     */
    public Invert(): boolean;
    
    /**
     * Inverts the matrix. This function will not fail, but only works correctly on matrices that contain only translation and/or rotation.
     * 
     * Using this function on a matrix with modified scale may return an incorrect inverted matrix.
     * 
     * To invert a matrix that contains other modifications, see {{ClassFunction|VMatrix|Invert}}. 
     */
    public InvertTR(): void;
    
    /**
     * Returns whether the matrix is equal to Identity matrix or not. 
     * @returns Is the matrix an Identity matrix or not 
     */
    public IsIdentity(): boolean;
    
    /**
     * Returns whether the matrix is a rotation matrix or not.
     * 
     * Technically it checks if the forward, right and up vectors are orthogonal and normalized. 
     * @returns Is the matrix a rotation matrix or not 
     */
    public IsRotationMatrix(): boolean;
    
    /**
     * Rotates the matrix by the given angle.
     * 
     * Postmultiplies the matrix by a rotation matrix (A = AR). 
     * @param rotation  Rotation. 
     */
    public Rotate(rotation: Angle): void;
    
    /**
     * Scales the matrix by the given vector.
     * 
     * Postmultiplies the matrix by a scaling matrix (A = AS). 
     * @param scale  Vector to scale with matrix with. 
     */
    public Scale(scale: Vector): void;
    
    /**
     * Scales the absolute translation with the given value. 
     * @param scale  Value to scale the translation with. 
     */
    public ScaleTranslation(scale: number): void;
    
    /**
     * Copies values from the given matrix object. 
     * @param src  The matrix to copy values from. 
     */
    public Set(src: VMatrix): void;
    
    /**
     * Sets the absolute rotation of the matrix. 
     * @param angle  New angles. 
     */
    public SetAngles(angle: Angle): void;
    
    /**
     * Sets a specific field in the matrix. 
     * @param row  Row of the field to be set, from 1 to 4 
     * @param column  Column of the field to be set, from 1 to 4 
     * @param value  The value to set in that field 
     */
    public SetField(row: number, column: number, value: number): void;
    
    /**
     * Sets the forward direction of the matrix.
     * 
     * ie. The first column of the matrix, excluding the w coordinate. 
     * @param forward  The forward direction of the matrix. 
     */
    public SetForward(forward: Vector): void;
    
    /**
     * Sets the right direction of the matrix.
     * 
     * ie. The second column of the matrix, negated, excluding the w coordinate. 
     * @param forward  The right direction of the matrix. 
     */
    public SetRight(forward: Vector): void;
    
    /**
     * Modifies the scale of the matrix while preserving the rotation and translation. 
     * @param scale  The scale to set. 
     */
    public SetScale(scale: Vector): void;
    
    /**
     * Sets the absolute translation of the matrix. 
     * @param translation  New translation. 
     */
    public SetTranslation(translation: Vector): void;
    
    /**
     * Sets the up direction of the matrix.
     * 
     * ie. The third column of the matrix, excluding the w coordinate. 
     * @param forward  The up direction of the matrix. 
     */
    public SetUp(forward: Vector): void;
    
    /**
     * Converts the matrix to a 4x4 table. See {{GlobalFunction|Matrix}} function. 
     * @returns The 4x4 table. 
     */
    public ToTable(): table;
    
    /**
     * Translates the matrix by the given vector aka. adds the vector to the translation.
     * 
     * Postmultiplies the matrix by a translation matrix (A = AT). 
     * @param translation  Vector to translate the matrix by. 
     */
    public Translate(translation: Vector): void;
}

/**
 * This is a list of all methods only available for weapons. It is also possible to call [http://wiki.garrysmod.com/index.php?title=Category:Entity Entity] functions on weapons. 
 */
declare class Weapon extends Entity {
    /**
     * Called when another entity fires an event to this entity. 
     * @param inputName  The name of the input that was triggered. 
     * @param activator  The initial cause for the input getting triggered. 
     * @param called  The entity that directly trigger the input. 
     * @param data  The data passed. 
     * @returns Should we suppress the default action for this input? 
     * @example
     * 
     * function SWEP:AcceptInput( name, activator, caller, data )
     * 
     * 	// Check for input and spawnflag
     * 	if ( name == "ConstraintBroken" && self:HasSpawnFlags( 1 ) ) then
     * 
     * 		// Freeze the weapon
     * 		local phys = self:GetPhysicsObject()
     * 		if ( IsValid( phys ) ) then phys:EnableMotion( false ) end
     * 	
     * 		// Remove the spawnflag so it doesn't freeze the weapon when it is dropped
     * 		local newflags = bit.band( self:GetSpawnFlags(), bit.bnot( 1 ) )
     * 		self:SetKeyValue( "spawnflags", newflags )
     * 	end
     * end
     * 
     * // A workaround for weapons created by maps not taking into account spawnflags. 
     */
    protected AcceptInput(inputName: string, activator: Entity, called: Entity, data: string): boolean;
    
    /**
     * Allows you to adjust the mouse sensitivity. This hook only works if you haven't overridden {{HookFunction|GM|AdjustMouseSensitivity}}. 
     * @returns Sensitivity scale 
     * @example
     * 
     * function SWEP:AdjustMouseSensitivity()
     * 	return 0.5
     * end
     * 
     * // Makes your sensitivity twice slower 
     */
    protected AdjustMouseSensitivity(): number;
    
    /**
     * Returns whether the weapon allows to being switched from when a better ( {{ClassFunction|Weapon|GetWeight}} ) weapon is being picked up. 
     * @returns Whether the weapon allows to being switched from. 
     */
    public AllowsAutoSwitchFrom(): boolean;
    
    /**
     * Returns whether the weapon allows to being switched to when a better ( {{ClassFunction|Weapon|GetWeight}} ) weapon is being picked up. 
     * @returns Whether the weapon allows to being switched to. 
     */
    public AllowsAutoSwitchTo(): boolean;
    
    /**
     * Returns how much of primary ammo the player has. 
     * @returns The amount of primary ammo player has 
     * @example
     * 
     * function SWEP:Ammo1()
     * 	return self.Owner:GetAmmoCount( self.Weapon:GetPrimaryAmmoType() )
     * end
     * 
     * // As defined in weapon_base 
     */
    protected Ammo1(): number;
    
    /**
     * Returns how much of secondary ammo the player has. 
     * @returns The amount of secondary ammo player has 
     * @example
     * 
     * function SWEP:Ammo2()
     * 	return self.Owner:GetAmmoCount( self.Weapon:GetSecondaryAmmoType() )
     * end
     * 
     * // As defined in weapon_base 
     */
    protected Ammo2(): number;
    
    /**
     * Allows you to adjust player view while this weapon in use.
     * 
     * This hook is called from the default implementation of {{HookFunction|GM|CalcView}} ([https://github.com/garrynewman/garrysmod/blob/master/garrysmod/gamemodes/base/gamemode/cl_init.lua#L376-L383]). Therefore, it will not be called if any other hook added to CalcView returns any value, or if the current gamemode overrides the default hook and does not call the SWEP function.
     * 
     * **Bug [#1348](https://github.com/Facepunch/garrysmod-issues/issues/1348):**
     * >SWEPs that define this function will not work with the [[Global/TauntCamera|taunt camera.]] 
     * @param ply  The owner of weapon 
     * @param pos  Current position of players view 
     * @param ang  Current angles of players view 
     * @param fov  Current FOV of players view 
     * @returns [New position of players view, New angle of players view, New FOV of players view] 
     * !TupleReturn
     */
    protected CalcView(ply: Player, pos: Vector, ang: Angle, fov: number): [Vector, Angle, number];
    
    /**
     * Allows overriding the position and angle of the viewmodel. This hook only works if you haven't overridden {{HookFunction|GM|CalcViewModelView}}. 
     * @param vm  The viewmodel entity 
     * @param oldPos  Original position (before viewmodel bobbing and swaying) 
     * @param oldAng  Original angle (before viewmodel bobbing and swaying) 
     * @param pos  Current position 
     * @param ang  Current angle 
     * @returns [New position, New angle] 
     * !TupleReturn
     */
    protected CalcViewModelView(vm: Entity, oldPos: Vector, oldAng: Angle, pos: Vector, ang: Angle): [Vector, Angle];
    
    /**
     * Calls a SWEP function on client.
     * 
     * {{Warning|This uses the {{Lib|usermessage}} internally, because of that, the combined length of the arguments of this function may not exceed 254 bytes/characters or the function will cease to function!}} 
     * @param functionName  Name of function to call. If you want to call SWEP:MyFunc() on client, you type in "MyFunc" 
     * @param arguments [=""] Arguments for the function, separated by spaces.
     * **Note:**
     * >Only the second argument is passed as argument and must be a string 
     */
    public CallOnClient(functionName: string, arguments?: string): void;
    
    /**
     * Helper function for checking for no ammo. 
     * @returns Can use primary attack 
     * @example
     * 
     * function SWEP:CanPrimaryAttack()
     * 
     * 	if ( self.Weapon:Clip1() <= 0 ) then
     * 	
     * 		self:EmitSound( "Weapon_Pistol.Empty" )
     * 		self:SetNextPrimaryFire( CurTime() + 0.2 )
     * 		self:Reload()
     * 		return false
     * 		
     * 	end
     * 
     * 	return true
     * 
     * end
     * 
     * // As defined in weapon_base 
     */
    protected CanPrimaryAttack(): boolean;
    
    /**
     * Helper function for checking for no ammo. 
     * @returns Can use secondary attack 
     * @example
     * 
     * function SWEP:CanSecondaryAttack()
     * 
     * 	if ( self.Weapon:Clip2() <= 0 ) then
     * 	
     * 		self.Weapon:EmitSound( "Weapon_Pistol.Empty" )
     * 		self.Weapon:SetNextSecondaryFire( CurTime() + 0.2 )
     * 		return false
     * 		
     * 	end
     * 
     * 	return true
     * 
     * end
     * 
     * // As defined in weapon_base 
     */
    protected CanSecondaryAttack(): boolean;
    
    /**
     * Returns how much primary ammo is in the magazine. 
     * @returns The amount of primary ammo in the magazine. 
     * @example
     * 
     * print( player.GetByID( 1 ):GetActiveWeapon():Clip1() )
     * 
     * // Prints the amount of primary ammo in the magazine of the weapon the 1st player has equipped. 
     */
    public Clip1(): number;
    
    /**
     * Returns how much secondary ammo is in magazine. 
     * @returns The amount of secondary ammo in the magazine. 
     * @example
     * 
     * print( player.GetByID( 1 ):GetActiveWeapon():Clip2() )
     * 
     * // Prints the amount of seconday ammo in the magazine of the weapon the 1st player has equipped. 
     */
    public Clip2(): number;
    
    /**
     * Allows you to use any numbers you want for the ammo display on the HUD.
     * 
     * Can be useful for weapons that don't use standard ammo. 
     * @returns The new ammo display settings. 
     * @example
     * 
     * function SWEP:CustomAmmoDisplay()
     * 	self.AmmoDisplay = self.AmmoDisplay or {} 
     *  
     * 	self.AmmoDisplay.Draw = true //draw the display?
     *  
     * 	if self.Primary.ClipSize > 0 then
     * 		self.AmmoDisplay.PrimaryClip = self:Clip1() //amount in clip
     * 		self.AmmoDisplay.PrimaryAmmo = self:Ammo1() //amount in reserve
     * 	end
     * 	if self.Secondary.ClipSize > 0 then
     * 		self.AmmoDisplay.SecondaryClip = self:Clip2()
     * 		self.AmmoDisplay.SecondaryAmmo = self:Ammo2()
     * 	end
     *  
     * 	return self.AmmoDisplay //return the table
     * end
     * 
     * // How it would look with standard information 
     */
    protected CustomAmmoDisplay(): table;
    
    /**
     * Forces the weapon to reload while playing given animation. 
     * @param act  Sequence to use as reload animation. Uses the {{Enum|ACT}}. 
     * @returns Did reloading actually take place 
     */
    public DefaultReload(act: ACT): boolean;
    
    /**
     * Called when player has just switched to this weapon.
     * 
     * **Note:**
     * >Due to this hook being predicted, it is not called clientside in singleplayer at all, and in multiplayer it will not be called clientside if the weapon is switched with {{ClassFunction|Player|SelectWeapon}} or the "use" console command, however it will be called clientside with the default weapon selection menu and when using {{ClassFunction|CUserCmd|SelectWeapon}} 
     * @returns Return true to allow switching away from this weapon using lastinv command 
     */
    protected Deploy(): boolean;
    
    /**
     * Called when the crosshair is about to get drawn, and allows you to override it.
     * 
     * **Note:**
     * >This function will not be called if '''SWEP.DrawCrosshair''' set to false.
     * 
     * **Bug [#2117](https://github.com/Facepunch/garrysmod-issues/issues/2117):**
     * >The arguments passed to this function are not affected by '''SWEP.AccurateCrosshair'''. 
     * @param x  X coordinate of the crosshair. 
     * @param y  Y coordinate of the crosshair. 
     * @returns Return true to override the default crosshair. 
     * @example
     * 
     * function SWEP:DoDrawCrosshair( x, y )
     * 	surface.SetDrawColor( 0, 250, 255, 255 )
     * 	surface.DrawOutlinedRect( x - 32, y - 32, 64, 64 )
     * 	return true
     * end
     * 
     * // Draws an outlined rectangle in place of the crosshair. 
     */
    protected DoDrawCrosshair(x: number, y: number): boolean;
    
    /**
     * Called so the weapon can override the impact effects it makes. 
     * @param tr  A {{Struct|TraceResult}} from player's eyes to the impact point 
     * @param damageType  The damage type of bullet 
     * @returns Return true to not do the default thing - which is to call UTIL_ImpactTrace in C++ 
     * @example
     * 
     * function SWEP:DoImpactEffect( tr, nDamageType )
     * 
     * 	if ( tr.HitSky ) then return end
     * 	
     * 	local effectdata = EffectData()
     * 	effectdata:SetOrigin( tr.HitPos + tr.HitNormal )
     * 	effectdata:SetNormal( tr.HitNormal )
     * 	util.Effect( "AR2Impact", effectdata )
     * 
     * end
     * 
     * // Makes the SWEP have the AR2 bullet impact effect. 
     */
    protected DoImpactEffect(tr: TraceResult, damageType: number): boolean;
    
    /**
     * This hook allows you to draw on screen while this weapon is in use.
     * 
     * If you want to draw a custom crosshair, consider using {{HookFunction|WEAPON|DoDrawCrosshair}} instead. 
     * @example
     * 
     * function SWEP:DrawHUD()
     * 
     * 	// No crosshair when ironsights is on
     * 	if ( self.Weapon:GetNetworkedBool( "Ironsights" ) ) then return end
     * 
     * 	local x, y // local, always
     * 
     * 	// If we're drawing the local player, draw the crosshair where they're aiming
     * 	// instead of in the center of the screen.
     * 	if ( self.Owner == LocalPlayer() && self.Owner:ShouldDrawLocalPlayer() ) then
     * 		local tr = util.GetPlayerTrace( self.Owner )
     * 		tr.mask = ( CONTENTS_SOLID+CONTENTS_MOVEABLE+CONTENTS_MONSTER+CONTENTS_WINDOW+CONTENTS_DEBRIS+CONTENTS_GRATE+CONTENTS_AUX ) // List the enums that should mask the crosshair on camrea/thridperson
     * 		local trace = util.TraceLine( tr )
     * 		
     * 		local coords = trace.HitPos:ToScreen()
     * 		x, y = coords.x, coords.y
     * 
     * 	else
     * 		x, y = ScrW() / 2.0, ScrH() / 2.0 // Center of screen
     * 	end
     * 	
     * 	local scale = 10 * self.Primary.Cone
     * 	local LastShootTime = self.Weapon:GetNetworkedFloat( "LastShootTime", 0 )
     *         // Scale the size of the crosshair according to how long ago we fired our weapon
     * 	scale = scale * (2 - math.Clamp( (CurTime() - LastShootTime) * 5, 0.0, 1.0 ))
     * 	//                    R   G    B  Alpha
     * 	surface.SetDrawColor( 0, 255, 0, 255 ) // Sets the color of the lines we're drawing
     * 	
     * // Draw a crosshair
     * 	local gap = 40 * scale
     * 	local length = gap + 20 * scale
     *         //                 x1,        y1, x2,     y2
     * 	surface.DrawLine( x - length, y, x - gap, y )	// Left
     * 	surface.DrawLine( x + length, y, x + gap, y )	// Right
     * 	surface.DrawLine( x, y - length, x, y - gap )	// Top
     * 	surface.DrawLine( x, y + length, x, y + gap )	// Bottom
     * 
     * end
     * 
     * // Weapon:DrawHud() as defined in weapon_cs_base, with more notes 
     */
    protected DrawHUD(): void;
    
    /**
     * This hook allows you to draw on screen while this weapon is in use. This hook is called '''before''' {{HookFunction|WEAPON|DrawHUD}} and is equivalent of {{HookFunction|GM|HUDPaintBackground}}. 
     */
    protected DrawHUDBackground(): void;
    
    /**
     * This hook draws the selection icon in the weapon selection menu. 
     * @param x  X coordinate of the selection panel 
     * @param y  Y coordinate of the selection panel 
     * @param width  Width of the selection panel 
     * @param height  Height of the selection panel 
     * @param alpha  Alpha value of the selection panel 
     * @example
     * 
     * function SWEP:DrawWeaponSelection( x, y, wide, tall, alpha )
     * 	
     * 	// Set us up the texture
     * 	surface.SetDrawColor( 255, 255, 255, alpha )
     * 	surface.SetTexture( self.WepSelectIcon )
     * 	
     * 	// Lets get a sin wave to make it bounce
     * 	local fsin = 0
     * 	
     * 	if ( self.BounceWeaponIcon == true ) then
     * 		fsin = math.sin( CurTime() * 10 ) * 5
     * 	end
     * 	
     * 	// Borders
     * 	y = y + 10
     * 	x = x + 10
     * 	wide = wide - 20
     * 	
     * 	// Draw that mother
     * 	surface.DrawTexturedRect( x + (fsin), y - (fsin),  wide-fsin*2 , ( wide / 2 ) + (fsin) )
     * 	
     * 	// Draw weapon info box
     * 	self:PrintWeaponInfo( x + wide + 20, y + tall * 0.95, alpha )
     * 	
     * end
     * 
     * // As defined in weapon_base 
     */
    protected DrawWeaponSelection(x: number, y: number, width: number, height: number, alpha: number): void;
    
    /**
     * Called when we are about to draw the world model. 
     * @example
     * 
     * function SWEP:DrawWorldModel()
     * 	self:DrawModel()
     * end
     * 
     * // The default action - render the world model. 
     */
    protected DrawWorldModel(): void;
    
    /**
     * Called when we are about to draw the translucent world model. 
     * @example
     * 
     * function SWEP:DrawWorldModelTranslucent()
     * 	self:DrawModel()
     * end
     * 
     * // Do the default action - render it without any changes. 
     */
    protected DrawWorldModelTranslucent(): void;
    
    /**
     * Called when a player or NPC has picked the weapon up. 
     * @param NewOwner  The one who picked the weapon up. Can be {{Type|Player}} or {{Type|NPC}}. 
     */
    protected Equip(NewOwner: Player | NPC): void;
    
    /**
     * The player has picked up the weapon and has taken the ammo from it.
     * The weapon will be removed immidiately after this call. 
     * @param ply  The player who picked up the weapon 
     */
    protected EquipAmmo(ply: Player): void;
    
    /**
     * Called before firing animation events, such as muzzle flashes or shell ejections.
     * 
     * This will only be called serverside for 3000-range events, and clientside for 5000-range  and other events. 
     * @param pos  Position of the effect. 
     * @param ang  Angle of the effect. 
     * @param event  The event ID of happened even. See [http://developer.valvesoftware.com/wiki/Animation_Events this page]. 
     * @param options  Name or options of the event. 
     * @returns Return true to disable the effect. 
     * @example
     * 
     * function SWEP:FireAnimationEvent( pos, ang, event, options )
     * 	
     * 	// Disables animation based muzzle event
     * 	if ( event == 21 ) then return true end	
     * 
     * 	// Disable thirdperson muzzle flash
     * 	if ( event == 5003 ) then return true end
     * 
     * end
     * 
     * // Disables muzzle flashes. Taken from tool gun source code.@example
     * 
     * function SWEP:FireAnimationEvent( pos, ang, event, options )
     * 
     * 	if ( !self.CSMuzzleFlashes ) then return end
     * 
     * 	// CS Muzzle flashes
     * 	if ( event == 5001 or event == 5011 or event == 5021 or event == 5031 ) then
     * 	
     * 		local data = EffectData()
     * 		data:SetFlags( 0 )
     * 		data:SetEntity( self.Owner:GetViewModel() )
     * 		data:SetAttachment( math.floor( ( event - 4991 ) / 10 ) )
     * 		data:SetScale( 1 ) // Change me
     * 
     * 		if ( self.CSMuzzleX ) then
     * 			util.Effect( "CS_MuzzleFlash_X", data )
     * 		else
     * 			util.Effect( "CS_MuzzleFlash", data )
     * 		end
     * 	
     * 		return true
     * 	end
     * 
     * end
     * 
     * // Counter-Strike: Source like muzzle flashes. 
     */
    protected FireAnimationEvent(pos: Vector, ang: Angle, event: number, options: string): boolean;
    
    /**
     * This hook allows you to freeze players screen.
     * 
     * **Note:**
     * >Player will still be able to move or shoot 
     * @returns Return true to freeze moving the view 
     */
    protected FreezeMovement(): boolean;
    
    /**
     * Returns the sequence enumeration number that the weapon is playing.
     * 
     * **Bug [#2543](https://github.com/Facepunch/garrysmod-issues/issues/2543):**
     * >This can return inconsistent results between the server and client. 
     * @returns Current activity, see {{Enum|ACT}}. Returns 0 if the weapon doesn't have active sequence. 
     * @example
     * 
     * local wep = Entity(1):GetActiveWeapon()
     *  
     * if ( IsValid( wep ) ) then // Makes sure that wep exists
     *  
     *     print( wep:GetActivity() ) // Prints the sequence number
     *  
     * end
     * 
     * // This will return the ACT_ENUM that is currently active for the weapon. 
     */
    public GetActivity(): ACT;
    
    /**
     * This hook is for NPCs, you return what they should try to do with it. 
     * @returns A number defining what NPC should do with the weapon. Use the {{Enum|CAP}}. 
     * @example
     * 
     * function SWEP:GetCapabilities()
     * 
     * 	return bit.bor( CAP_WEAPON_RANGE_ATTACK1, CAP_INNATE_RANGE_ATTACK1 )
     * 
     * end
     * 
     * // As defined in weapon_base 
     */
    protected GetCapabilities(): CAP;
    
    /**
     * Returns the hold type of the weapon. 
     * @returns The hold type of the weapon. You can find a list of default hold types [[Hold_Types|here]]. 
     */
    public GetHoldType(): string;
    
    /**
     * Returns maximum primary clip size 
     * @returns Maximum primary clip size 
     */
    public GetMaxClip1(): number;
    
    /**
     * Returns maximum secondary clip size 
     * @returns Maximum secondary clip size 
     */
    public GetMaxClip2(): number;
    
    /**
     * Gets the next time the weapon can primary fire. ( Can call {{HookFunction|WEAPON|PrimaryAttack}} ) 
     * @returns The time, relative to {{GlobalFunction|CurTime}} 
     */
    public GetNextPrimaryFire(): number;
    
    /**
     * Gets the next time the weapon can secondary fire. ( Can call {{HookFunction|WEAPON|SecondaryAttack}} ) 
     * @returns The time, relative to {{GlobalFunction|CurTime}} 
     */
    public GetNextSecondaryFire(): number;
    
    /**
     * Gets the primary ammo type of the given weapon. 
     * @returns The ammo type ID. 
     */
    public GetPrimaryAmmoType(): number;
    
    /**
     * Returns the non-internal name of the weapon, that should be for displaying.
     * 
     * **Note:**
     * >If that returns an untranslated message (#HL2_XX), use {{LibraryFunction|language|GetPhrase}} to see the "nice" name.
     * 
     * **Note:**
     * >If SWEP.PrintName is not set in the Weapon or the Weapon Base then "<MISSING SWEP PRINT NAME>" will be returned. 
     * @returns The "nice" name of the weapon. 
     */
    public GetPrintName(): string;
    
    /**
     * Gets the ammo type of the given weapons secondary fire. 
     * @returns The secondary ammo type ID. 
     */
    public GetSecondaryAmmoType(): number;
    
    /**
     * Returns the slot of the weapon (slot numbers start from 0) 
     * @returns The slot of the weapon 
     * @example
     * 
     * local function IsSlotEmpty( ply, slot )
     * 
     * 	slot = slot - 1 // take away 1 from the slot number you want since it starts from 0
     * 
     * 	local weptbl = ply:GetWeapons() // get all the weapons the player has
     * 
     * 	for k,v in pairs( weptbl ) do // loop through them
     * 		if v:GetSlot() == slot then return false end // check if the slot is the slot you wanted to check, if it is, return false
     * 	end
     * 
     * 	return true // otherwise return true
     * 
     * end
     * 
     * // How you could use this function to check if a weapon slot was empty or not 
     */
    public GetSlot(): number;
    
    /**
     * Returns slot position of the weapon 
     * @returns The slot position of the weapon 
     */
    public GetSlotPos(): number;
    
    /**
     * Allows you to override where the tracer effect comes from. ( Visual bullets ) 
     * @returns The new position to start tracer effect from 
     */
    protected GetTracerOrigin(): Vector;
    
    /**
     * This hook allows you to adjust view model position and angles. 
     * @param pos  Current position 
     * @param ang  Current angle 
     * @returns [New position, New angle] 
     * !TupleReturn
     */
    protected GetViewModelPosition(pos: Vector, ang: Angle): [Vector, Angle];
    
    /**
     * Returns the view model of the weapon. 
     * @returns The view model of the weapon. 
     */
    public GetWeaponViewModel(): string;
    
    /**
     * Returns the world model of the weapon. 
     * @returns The world model of the weapon. 
     */
    public GetWeaponWorldModel(): string;
    
    /**
     * Returns the "weight" of the weapon, which is used when deciding which {{Type|Weapon}} is better by the engine. 
     * @returns The weapon "weight". 
     */
    public GetWeight(): number;
    
    /**
     * Returns whether the weapon has ammo left or not. It will return false when there's no ammo left in the magazine '''and''' when there's no reserve ammo left.
     * 
     * **Note:**
     * >This will return true for weapons like crowbar, gravity gun, etc. 
     * @returns Whether the weapon has ammo or not. 
     */
    public HasAmmo(): boolean;
    
    /**
     * Called when weapon tries to holster.
     * 
     * **Bug [#2854](https://github.com/Facepunch/garrysmod-issues/issues/2854):**
     * >This is called twice for every holster clientside, one in [[Prediction|prediction]] and one not.
     * 
     * **Bug [#3133](https://github.com/Facepunch/garrysmod-issues/issues/3133):**
     * >This function is called serverside only before {{HookFunction|WEAPON|OnRemove}} is called. 
     * @param weapon  The weapon we are trying switch to. 
     * @returns Return true to allow weapon to holster 
     * @example
     * 
     * function SWEP:Holster( wep )
     * 	if not IsFirstTimePredicted() then return end
     * 	LocalPlayer():ChatPrint("Switched to: "..(wep.PrintName or wep:GetClass()))
     * end
     * 
     * // Returns the weapon switched to when when the weapon is being holstered. 
     */
    protected Holster(weapon: Entity): boolean;
    
    /**
     * This hook determines which parts of the HUD to draw. 
     * @param element  The HUD element in question 
     * @returns Return false to hide this HUD element 
     */
    protected HUDShouldDraw(element: string): boolean;
    
    /**
     * Called when the weapon entity is created.
     * 
     * **Bug [#2732](https://github.com/Facepunch/garrysmod-issues/issues/2732):**
     * >This is sometimes not called clientside. You can work around this by setting a variable in Initialize and check if it exists in {{HookFunction|WEAPON|Think}}. See the example below.
     * 
     * **Bug [#3015](https://github.com/Facepunch/garrysmod-issues/issues/3015):**
     * >This is not called serverside after a quicksave. 
     * @example
     * 
     * function SWEP:Initialize()
     * 
     * 	self:SetHoldType( self.HoldType )
     * 
     * end
     * 
     * // Sets the weapon hold type to SWEP.HoldType.@example
     * 
     * function SWEP:Initialize()
     * 	self.m_bInitialized = true
     * 
     * 	// Other code
     * end
     * 
     * function SWEP:Think()
     * 	if (not self.m_bInitialized) then
     * 		self:Initialize()
     * 	end
     * 
     * 	// Other code
     * end
     * 
     * // Fixes the function not being called clientside. 
     */
    protected Initialize(): void;
    
    /**
     * Returns whenever the weapon is carried by the local player. 
     * @returns Is the weapon is carried by the local player or not 
     */
    public IsCarriedByLocalPlayer(): boolean;
    
    /**
     * Checks if the weapon is a SWEP or a built-in weapon. 
     * @returns Returns true if weapon is scripted ( SWEP ), false if not ( A built-in HL2 weapon ) 
     */
    public IsScripted(): boolean;
    
    /**
     * Returns whether the weapon is visible. The term visibility is not exactly what gets checked here, first it checks if the owner is a player, then checks if the active view model has EF_NODRAW flag NOT set. 
     * @returns Is visible or not 
     */
    public IsWeaponVisible(): boolean;
    
    /**
     * Called when the engine sets a value for this scripted weapon.
     * 
     * See {{HookFunction|GM|EntityKeyValue}} for a hook that works for all entities.
     * 
     * See {{HookFunction|ENTITY|KeyValue}} for an [[:Category:WEAPON Hooks|SENT]] hook that works for scripted entities. 
     * @param key  The key that was affected. 
     * @param value  The new value. 
     * @returns Return true to suppress this KeyValue or return false or nothing to apply this key value. 
     */
    protected KeyValue(key: string, value: string): boolean;
    
    /**
     * Returns the time since this weapon last fired a bullet with {{ClassFunction|Entity|FireBullets}} in seconds. It is not networked. 
     * @returns The time in seconds when the last bullet was fired. 
     */
    public LastShootTime(): number;
    
    /**
     * Called when weapon is dropped by {{ClassFunction|Player|DropWeapon}}.
     * 
     * See also {{HookFunction|WEAPON|OwnerChanged}}. 
     */
    protected OnDrop(): void;
    
    /**
     * Called whenever the weapons Lua script is reloaded. 
     */
    protected OnReloaded(): void;
    
    /**
     * Called when the swep is about to be removed. 
     */
    protected OnRemove(): void;
    
    /**
     * Called when the weapon entity is reloaded from a Source Engine save (not the Sandbox saves or dupes) or on a changelevel (for example Half-Life 2 campaign level transitions).
     * 
     * For the {{Lib|duplicator}} callbacks, see {{HookFunction|ENTITY|OnDuplicated}}.
     * 
     * See also {{Lib|saverestore}} for relevant functions. 
     */
    protected OnRestore(): void;
    
    /**
     * Called when weapon is dropped or picked up by a new player.
     * 
     * See also {{HookFunction|WEAPON|OnDrop}}. 
     */
    protected OwnerChanged(): void;
    
    /**
     * Called after the view model has been drawn while the weapon in use. This hook is called from the default implementation of {{HookFunction|GM|PostDrawViewModel}}, and as such, will not occur if it has been overridden.
     * 
     * {{HookFunction|WEAPON|ViewModelDrawn}} is an alternative hook which is always called before {{HookFunction|GM|PostDrawViewModel}}. 
     * @param vm  This is the view model entity after it is drawn 
     * @param weapon  This is the weapon that is from the view model (same as self) 
     * @param ply  The owner of the view model 
     */
    protected PostDrawViewModel(vm: Entity, weapon: Weapon, ply: Player): void;
    
    /**
     * Allows you to modify viewmodel while the weapon in use before it is drawn. This hook only works if you haven't overridden {{HookFunction|GM|PreDrawViewModel}}. 
     * @param vm  This is the view model entity before it is drawn. 
     * @param weapon  This is the weapon that is from the view model. 
     * @param ply  The the owner of the view model. 
     */
    protected PreDrawViewModel(vm: Entity, weapon: Weapon, ply: Player): void;
    
    /**
     * Called when primary attack button ( +attack ) is pressed.
     * 
     * Since this is a [[Prediction|predicted]] hook, as mentioned on the bottom of the page, it has some additional behaviour to it. This is the same with all [[:Category:Predicted_Hooks|predicted SWEP hooks]].
     * 
     * When in singleplayer, this function is only called in the server realm. When in multiplayer, the hook will be called on both the server and the client in order to allow for [[Prediction|prediction]].
     * 
     * You can force the hook to always be called on client like this:
     * ```
     * if ( game.SinglePlayer() ) then self:CallOnClient( "PrimaryAttack" ) end
     * ```
     * 
     * Note that due to prediction, in multiplayer SWEP:PrimaryAttack is called multiple times per one "shot" with the gun. To work around that, use {{GlobalFunction|IsFirstTimePredicted}}. 
     * @example
     * 
     * function SWEP:PrimaryAttack()
     * 
     * 	// Make sure we can shoot first
     * 	if ( !self:CanPrimaryAttack() ) then return end
     * 
     * 	// Play shoot sound
     * 	self.Weapon:EmitSound("Weapon_AR2.Single")
     * 	
     * 	// Shoot 1 bullet, 150 damage, 0.01 aimcone
     * 	self:ShootBullet( 150, 1, 0.01 )
     * 	
     * 	// Remove 1 bullet from our clip
     * 	self:TakePrimaryAmmo( 1 )
     * 	
     * 	// Punch the player's view
     * 	self.Owner:ViewPunch( Angle( -1, 0, 0 ) )
     * 
     * end
     * 
     * // This is how it is defined in weapon_base 
     */
    protected PrimaryAttack(): void;
    
    /**
     * A convenience function that draws the weapon info box, used in {{HookFunction|WEAPON|DrawWeaponSelection}}. 
     * @param x  The x co-ordinate of box position 
     * @param y  The y co-ordinate of box position 
     * @param alpha  Alpha value for the box 
     * @example
     * 
     * function SWEP:PrintWeaponInfo( x, y, alpha )
     * 
     * 	if ( self.DrawWeaponInfoBox == false ) then return end
     * 
     * 	if (self.InfoMarkup == nil ) then
     * 		local str
     * 		local title_color = "<color=230,230,230,255>"
     * 		local text_color = "<color=150,150,150,255>"
     * 		
     * 		str = "<font=HudSelectionText>"
     * 		if ( self.Author != "" ) then str = str .. title_color .. "Author:</color>\t"..text_color..self.Author.."</color>\n" end
     * 		if ( self.Contact != "" ) then str = str .. title_color .. "Contact:</color>\t"..text_color..self.Contact.."</color>\n\n" end
     * 		if ( self.Purpose != "" ) then str = str .. title_color .. "Purpose:</color>\n"..text_color..self.Purpose.."</color>\n\n" end
     * 		if ( self.Instructions != "" ) then str = str .. title_color .. "Instructions:</color>\n"..text_color..self.Instructions.."</color>\n" end
     * 		str = str .. "</font>"
     * 		
     * 		self.InfoMarkup = markup.Parse( str, 250 )
     * 	end
     * 	
     * 	surface.SetDrawColor( 60, 60, 60, alpha )
     * 	surface.SetTexture( self.SpeechBubbleLid )
     * 	
     * 	surface.DrawTexturedRect( x, y - 64 - 5, 128, 64 ) 
     * 	draw.RoundedBox( 8, x - 5, y - 6, 260, self.InfoMarkup:GetHeight() + 18, Color( 60, 60, 60, alpha ) )
     * 	
     * 	self.InfoMarkup:Draw( x+5, y+5, nil, nil, alpha )
     * 	
     * end
     * 
     * // As defined in weapon_base 
     */
    protected PrintWeaponInfo(x: number, y: number, alpha: number): void;
    
    /**
     * Called when the reload key ( +reload ) is pressed. 
     */
    protected Reload(): void;
    
    /**
     * **Deprecated:**
     * >This appears to be a left over from early GMod 12? days
     * 
     * . Called every frame just before {{HookFunction|GM|RenderScene}}. Used by tool gun to render screens. 
     */
    protected RenderScreen(): void;
    
    /**
     * Called when secondary attack button ( +attack2 ) is pressed.
     * 
     * For issues with this hook being called rapidly on the client side, see the global function {{GlobalFunction|IsFirstTimePredicted}}. 
     * @example
     * 
     * function SWEP:SecondaryAttack()
     * 
     * 	// Make sure we can shoot first
     * 	if ( !self:CanSecondaryAttack() ) then return end
     * 
     * 	// Play shoot sound
     * 	self.Weapon:EmitSound("Weapon_Shotgun.Single")
     * 	
     * 	// Shoot 9 bullets, 150 damage, 0.75 aimcone
     * 	self:ShootBullet( 150, 9, 0.2 )
     * 	
     * 	// Remove 1 bullet from our clip
     * 	self:TakeSecondaryAmmo( 1 )
     * 	
     * 	// Punch the player's view
     * 	self.Owner:ViewPunch( Angle( -10, 0, 0 ) )
     * 
     * end
     * 
     * // This is how it is defined in weapon_base 
     */
    protected SecondaryAttack(): void;
    
    /**
     * Forces weapon to play activity/animation. 
     * @param act  Activity to play. See the {{Enum|ACT}} (specifically ACT_VM_). 
     */
    public SendWeaponAnim(act: ACT): void;
    
    /**
     * Lets you change the number of bullets in the given weapons primary clip. 
     * @param ammo  The amount of bullets the clip should contain 
     */
    public SetClip1(ammo: number): void;
    
    /**
     * Lets you change the number of bullets in the given weapons secondary clip. 
     * @param ammo  The amount of bullets the clip should contain 
     */
    public SetClip2(ammo: number): void;
    
    /**
     * Sets the weapon deploy speed. This value needs to match on client and server. 
     * @param speed  The value to set deploy speed to. Negative will slow down playback. 
     * @example
     * 
     * function SWEP:SetDeploySpeed( speed )
     * 	self.m_WeaponDeploySpeed = tonumber( speed )
     * end
     * 
     * // As defined in weapon_base 
     */
    protected SetDeploySpeed(speed: number): void;
    
    /**
     * Sets the hold type of the weapon. This function also calls {{HookFunction|WEAPON|SetWeaponHoldType}} and properly networks it to all clients.
     * 
     * **Note:**
     * >This only works on scripted weapons.
     * 
     * **Bug:**
     * >Using this function on weapons held by bots will not network holdtype changes to clients if the world model is set to an empty string (SWEP.WorldModel {{eq}} ""). 
     * @param name  Name of the hold type. You can find all default hold types [[Hold_Types|here]] 
     * @example
     * 
     * function SWEP:Reload()
     * 	self:SetHoldType( "normal" )
     * end
     * 
     * // Puts a players hands down by its sides on [[WEAPON/Reload|reload]]. 
     */
    public SetHoldType(name: string): void;
    
    /**
     * Sets the time since this weapon last fired in seconds. Used in conjunction with {{ClassFunction|Weapon|LastShootTime}} 
     * @param time [=CurTime()] The time in seconds when the last time the weapon was fired. 
     */
    public SetLastShootTime(time?: number): void;
    
    /**
     * Sets when the weapon can fire again. Time should be based on {{GlobalFunction|CurTime}}. 
     * @param time  Time when player should be able to use primary fire again 
     */
    public SetNextPrimaryFire(time: number): void;
    
    /**
     * Sets when the weapon can alt-fire again. Time should be based on {{GlobalFunction|CurTime}}. 
     * @param time  Time when player should be able to use secondary fire again 
     */
    public SetNextSecondaryFire(time: number): void;
    
    /**
     * Called when the SWEP should set up its [[Networking Entities| Data Tables]]. 
     * @example
     * 
     * function SWEP:SetupDataTables()
     * 	self:NetworkVar( "Float", 0, "Damage" )
     * 	self:NetworkVar( "Vector", 0, "MuzzlePos" )
     * end
     * 
     * // Sets up networked variables, adds functions SetDamage, GetDamage, SetMuzzlePos and GetMuzzlePos. 
     */
    protected SetupDataTables(): void;
    
    /**
     * Sets the hold type of the weapon. This must be called on '''both''' the server and the client to work properly.
     * 
     * '''NOTE:''' You should avoid calling this function and call {{ClassFunction|Weapon|SetHoldType}} now. 
     * @param name  Name of the hold type. You can find all default hold types [[Hold_Types|here]] 
     */
    protected SetWeaponHoldType(name: string): void;
    
    /**
     * A convenience function to shoot bullets.
     * 
     * **Bug [#1502](https://github.com/Facepunch/garrysmod-issues/issues/1502):**
     * >This does not take SWEP.Primary/Secondary.Ammo into account. 
     * @param damage  The damage of the bullet 
     * @param num_bullets  Amount of bullets to shoot 
     * @param aimcone  Spread of bullets 
     * @example
     * 
     * function SWEP:ShootBullet( damage, num_bullets, aimcone )
     * 	
     * 	local bullet = {}
     * 	bullet.Num 	= num_bullets
     * 	bullet.Src 	= self.Owner:GetShootPos() // Source
     * 	bullet.Dir 	= self.Owner:GetAimVector() // Dir of bullet
     * 	bullet.Spread 	= Vector( aimcone, aimcone, 0 )	 // Aim Cone
     * 	bullet.Tracer	= 5 // Show a tracer on every x bullets 
     * 	bullet.Force	= 1 // Amount of force to give to phys objects
     * 	bullet.Damage	= damage
     * 	bullet.AmmoType = "Pistol"
     * 	
     * 	self.Owner:FireBullets( bullet )
     * 	
     * 	self:ShootEffects()
     * 	
     * end
     * 
     * // As defined in weapon_base 
     */
    protected ShootBullet(damage: number, num_bullets: number, aimcone: number): void;
    
    /**
     * A convenience function to create shoot effects. 
     * @example
     * 
     * function SWEP:ShootEffects()
     * 
     * 	self.Weapon:SendWeaponAnim( ACT_VM_PRIMARYATTACK )  // View model animation
     * 	self.Owner:MuzzleFlash() // Crappy muzzle light
     * 	self.Owner:SetAnimation( PLAYER_ATTACK1 ) // 3rd Person Animation
     * 
     * end
     * 
     * // As defined in weapon_base 
     */
    protected ShootEffects(): void;
    
    /**
     * Should this weapon be dropped when its owner dies?
     * 
     * This only works if the player has {{ClassFunction|Player|ShouldDropWeapon}} set to true. 
     * @returns Return true to drop the weapon, false otherwise. Default ( if you don't return anything ) is false. 
     */
    protected ShouldDropOnDie(): boolean;
    
    /**
     * A convenience function to remove primary ammo from clip. 
     * @param amount  Amount of primary ammo to remove 
     * @example
     * 
     * function SWEP:TakePrimaryAmmo( num )
     * 	
     * 	// Doesn't use clips
     * 	if ( self.Weapon:Clip1() <= 0 ) then 
     * 	
     * 		if ( self:Ammo1() <= 0 ) then return end
     * 		
     * 		self.Owner:RemoveAmmo( num, self.Weapon:GetPrimaryAmmoType() )
     * 	
     * 	return end
     * 	
     * 	self.Weapon:SetClip1( self.Weapon:Clip1() - num )	
     * 	
     * end
     * 
     * // As defined in weapon_base 
     */
    protected TakePrimaryAmmo(amount: number): void;
    
    /**
     * A convenience function to remove secondary ammo from clip. 
     * @param amount  How much of secondary ammo to remove 
     * @example
     * 
     * function SWEP:TakeSecondaryAmmo( num )
     * 	
     * 	// Doesn't use clips
     * 	if ( self.Weapon:Clip2() <= 0 ) then 
     * 	
     * 		if ( self:Ammo2() <= 0 ) then return end
     * 		
     * 		self.Owner:RemoveAmmo( num, self.Weapon:GetSecondaryAmmoType() )
     * 	
     * 	return end
     * 	
     * 	self.Weapon:SetClip2( self.Weapon:Clip2() - num )	
     * 	
     * end
     * 
     * // As defined in weapon_base 
     */
    protected TakeSecondaryAmmo(amount: number): void;
    
    /**
     * Called when the swep thinks.
     * 
     * This hook won't be called during the deploy animation and when using {{ClassFunction|Weapon|DefaultReload}}.
     * 
     * **Note:**
     * >Despite being a predicted hook, this hook is called clientside in single player, however it will not be recognized as a predicted hook to {{ClassFunction|Player|GetCurrentCommand}}.
     * 
     * **Note:**
     * >This hook will be called before Player movement is processed on the client, and after on the server.
     * 
     * **Bug [#2855](https://github.com/Facepunch/garrysmod-issues/issues/2855):**
     * >This will not be run during deploy animations after a serverside-only deploy. This usually happens after picking up and dropping an object with +use. 
     */
    protected Think(): boolean;
    
    /**
     * Translate a player's Activity into a weapon's activity, depending on how you want the player to be holding the weapon.
     * 
     * For example, ACT_MP_RUN becomes ACT_HL2MP_RUN_PISTOL. 
     * @param act  The activity to translate 
     * @returns The translated activity 
     * @example
     * 
     * function SWEP:TranslateActivity( act )
     * 
     * 	if ( self.Owner:IsNPC() ) then
     * 		if ( self.ActivityTranslateAI[ act ] ) then
     * 			return self.ActivityTranslateAI[ act ]
     * 		end
     * 		return -1
     * 	end
     * 
     * 	if ( self.ActivityTranslate[ act ] != nil ) then
     * 		return self.ActivityTranslate[ act ]
     * 	end
     * 
     * 	return -1
     * 
     * end
     * 
     * // Default action 
     */
    protected TranslateActivity(act: number): number;
    
    /**
     * Allows to change players field of view while player holds the weapon.
     * 
     * **Bug [#3564](https://github.com/Facepunch/garrysmod-issues/issues/3564):**
     * >This doesn't affect the opening of func_areaportals - {{ClassFunction|Player|GetFOV}} takes priority. 
     * @param fov  The current/default FOV. 
     * @returns The target FOV. 
     * @example
     * 
     * function SWEP:TranslateFOV( fov )
     * 	return fov - 30
     * end
     * 
     * // Reduces players FOV by 30. 
     */
    protected TranslateFOV(fov: number): number;
    
    /**
     * Called straight after the view model has been drawn. This is called before {{HookFunction|GM|PostDrawViewModel}} and {{HookFunction|WEAPON|PostDrawViewModel}}. 
     * @param ViewModel  Players view model 
     */
    protected ViewModelDrawn(ViewModel: Entity): void;
}

/**
 * The weapons library allows you to access information about any scripted weapons loaded into the game, as well as register your own weapons. 
 */
declare namespace weapons {
    /**
     * Get copy of weapon table by name. If all you need to do is access a variable from the weapon table, use {{LibraryFunction|weapons|GetStored}} instead. 
     * @param classname  Class name of weapon to retrieve 
     * @returns The retrieved table or nil 
     */
    function Get(classname: string): table;
    
    /**
     * Get a list of all the registered SWEPs. This does not include weapons added to spawnmenu manually. 
     * @returns List of all the registered SWEPs 
     * @example
     * 
     * PrintTable( weapons.GetList() )
     * 
     * // Example structure. 
     */
    function GetList(): table;
    
    /**
     * Gets the REAL weapon table, not a copy. 
     * @param weapon_class  Weapon class to retrieve weapon table of 
     * @returns The weapon table 
     */
    function GetStored(weapon_class: string): table;
    
    /**
     * Checks if name is based on base 
     * @param name  Entity's class name to be checked 
     * @param base  Base class name to be checked 
     * @returns Returns true if class name is based on base, else false. 
     * @example
     * 
     * print(weapons.IsBasedOn("gmod_tool", "weapon_base"), weapons.IsBasedOn("weapon_base", "weapon_base"))
     * 
     * // See if gmod_tool is based on weapon_base, and whether weapon_base is based on itself. 
     */
    function IsBasedOn(name: string, base: string): boolean;
    
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     * Called after all SWEPS have been loaded and runs {{LibraryFunction|baseclass|Set}} on each one.
     * 
     * You can retrieve all the currently registered SWEPS with {{LibraryFunction|weapons|GetList}}.
     * 
     * **Note:**
     * >This is not called after a SWEP auto refresh, and thus the inherited baseclass functions retrieved with {{LibraryFunction|baseclass|Get}} will not be updated 
     */
    function OnLoaded(): void;
    
    /**
     * Used to register your SWEP with the engine.
     * 
     * **Bug [#1300](https://github.com/Facepunch/garrysmod-issues/issues/1300):**
     * >Sub-tables provided in the first argument will not carry over their metatable, and will receive a BaseClass key if the table was merged with the base's. Userdata references, which includes Vectors, Angles, Entities, etc. will not be copied. 
     * @param swep_table  The SWEP table 
     * @param classname  Classname to assign to that swep 
     */
    function Register(swep_table: table, classname: string): void;
}

/**
 * The widgets library.
 * 
 * Widgets allow the player to have mouse interaction with entities, such as being able to manipulate the [https://www.youtube.com/watch?v=O3gG0t39-pQ bones of an NPC]. 
 */
declare namespace widgets {
    /**
     * **This is an internal function or feature.**
     * >This means you will be able to use it, but you really shouldn't.
     * 
     *  Automatically called to update all widgets. 
     * @param ply  The player 
     * @param mv  Player move data 
     * @example
     * 
     * hook.Add( "PlayerTick", "TickWidgets", function( pl, mv ) widgets.PlayerTick( pl, mv ) end )
     * 
     * // That's how it is used in '''lua/includes/modules/widget.lua''' 
     */
    function PlayerTick(ply: Player, mv: CMoveData): void;
    
    /**
     * Renders a widget. Normally you won't need to call this. 
     * @param ent  Widget entity to render 
     * @example
     * 
     * function ENT:Draw()
     * 
     * 	widgets.RenderMe( self )
     * 	
     * end
     * 
     * // Example usage in '''lua/entities/widget_base.lua''' 
     */
    function RenderMe(ent: Entity): void;
}
